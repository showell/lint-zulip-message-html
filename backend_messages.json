[
  "<p>By the way, it seems to have become impossible to search for quoted strings here (not that it was totally reliable before).</p>",
  "<p>This is great; made a few documentation themed changes and will merge this. Thanks <span class=\"user-mention\" data-user-id=\"23484\">@Christopher Chong</span>!</p>",
  "<p>Sorry for disappearing. Believe or not, I had shingles for second time in my life, and then caught cold. I am recovering very slowly.</p>\n<p>Before I caught the cold, I set up a development environment for Zulip. So once I am fully recovered, I will start to create test cases (in Python code or something) to compare results with/without English stemming/stop word, etc.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"8081\">@tatsuya6502</span> feel better! And setting up a set of test suites of that form sounds very helpful.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/make.20pgroonga.20default.20.3F/near/1430945\">said</a>:</p>\n<blockquote>\n<p>By the way, it seems to have become impossible to search for quoted strings here (not that it was totally reliable before).</p>\n</blockquote>\n<p>Opened <a href=\"https://github.com/zulip/zulip/pull/22935\">#22935</a> for this.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> Suggested opening a discussion about renaming <code>Recipient.PERSONAL</code> - the relevant comment thread is <a href=\"https://github.com/zulip/zulip/pull/22919#discussion_r968287102\">https://github.com/zulip/zulip/pull/22919#discussion_r968287102</a></p>\n<p>The idea being that \"personal message\" is different terminology than we use in API and user-facing contexts where all non-stream messages are just <code>private</code> messages (so a personal message is a 1:1 private message). So we should consider renaming to something else. On the other hand, there's also <code>Recipient.HUDDLE</code> which doesn't reference the <code>private</code> term either. Do we want to rename both?</p>\n<p>Beyond that, as pointed out in that comment thread, we use <code>personal message</code> throughout the codebase, which we could try to eliminate too, though that's a larger effort.</p>",
  "<p>To set context, I believe <code>personal</code> doesn't appear on the API at all; it's just the term we are currently using for a \"1:1 private message\". It is kinda nice to have a name for that context that one can put in variable names that isn't a mouthful like <code>single_recipient_private_message</code>.</p>",
  "<p>One idea is that if we think we're going to rebrand towards \"Direct messages\" over \"Private messages\", we could replace the recipient type variable names <code>PERSONAL</code> / <code>HUDDLE</code> with recipient type labels like <code>DIRECT_MESSAGE_USER</code> / <code>DIRECT_MESSAGE_GROUP</code>. (Or the equivalent <code>PRIVATE_MESSAGE_USER</code>, <code>PRIVATE_MESSAGE_GROUP</code> if we're not imagining a change in branding for the feature).</p>\n<p><span class=\"user-mention\" data-user-id=\"2187\">@Greg Price</span> <span class=\"user-mention\" data-user-id=\"2406\">@Neil Pilgrim (neiljp)</span> you may have some thoughts on this, since I imagine the mobile/terminal clients also have to name variables after this concept.</p>",
  "<p>Context: <a href=\"https://github.com/zulip/zulip/pull/22955#discussion_r974702380\">https://github.com/zulip/zulip/pull/22955#discussion_r974702380</a><br>\nStarting a new topic as per <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> request.<br>\nAs anticipated <a href=\"#narrow/stream/127-integrations/topic/MeetEcho\">here</a>, we're adding a new feature to Zulip that fetches users api key through Json Web Token (JWT). While designing the feature we decided to use a new dictionary for its specific settings. This dictionary keys are \"subdomain hosts\", for reasons described in the linked GitHub conversation. This topic is intended to discuss if the proposed dictionary key format is acceptable and its format should be extended to other auth backends.</p>",
  "<p>Our \"oh, just use empty quotes\" for the &gt;99% case is a bit disarming at first, so I see the appeal of requiring the domain name. That said, it would be incongruent with the rest of the related configurations which would be hard to articulate with a straight face. </p>\n<p>As Tim alluded to, perhaps for this PR conforming to the \"norm\" while opening an issue for the flexibility to use either FQDNs or subdomains <em>systemically</em>. That doesn't seem like a far reach.</p>",
  "<p>Yeah, I think it'd be very reasonable to support both formats (the <code>\"\"</code> for the majority of use-cases is pretty bad as Matt points out) - but we should be consistent. If we support <code>subdomain.example.com</code> format in the config dict this PR is adding, we should be supporting it in all analogical places</p>",
  "<p>So the one downside I can see for supporting both syntaxes is if it's possible for a string to be ambiguous as to whether it's a domain or a subdomain. For example, if you write <code>foo.example.com</code>, could that be interpreted as meaning the hostname <code>foo.example.com.example.com</code>?</p>",
  "<p>I think we can manage that by having the specification be that if your string contains a <code>.</code>, then it's expected to be the full hostname.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Replace.20subdomain.20ids.20with.20hosts.20in.20auth.20backend.20confs/near/1438136\">said</a>:</p>\n<blockquote>\n<p>I think we can manage that by having the specification be that if your string contains a <code>.</code>, then it's expected to be the full hostname.</p>\n</blockquote>\n<p>Sounds like a good solution, since I don't think <code>.</code> in <code>realm.string_id</code> is something we support? We may want to also add some validation against it in <code>do_create_realm</code> since currently you can hypothetically use it to create a realm like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>In [2]: from zerver.actions.create_realm import do_create_realm\n\nIn [3]: do_create_realm(&quot;test.dots.in.string_id&quot;, &quot;test&quot;)\nOut[3]: &lt;Realm: &lt;Realm: test.dots.in.string_id 4&gt;&gt;\n</code></pre></div>",
  "<p>Yeah, I think that's correct; if one wants a more complex subdomain you're supposed to use <code>REALM_HOSTS</code>. </p>\n<p>I'm not sure <code>do_create_realm</code> is the place to do that validation; generally <code>do_</code> functions expect their callers to do that sort of string validation detail for them.</p>",
  "<p>It looks like <a href=\"https://github.com/zulip/zulip/pull/22284\">#22284</a>, aka adding upgrade documentation from 20.04 to 22.04, is still open; anyone have time to test that process and document it? We're going to want to advertise that documentation in the Zulip 6.0 release notes.</p>",
  "<p>Is it possible to change the AD domain name, but preserve each users history?<br>\nLogin used was <a href=\"mailto:username@example.com\">username@example.com</a>, and we would like to switch to <a href=\"mailto:username@example.local\">username@example.local</a>. E-mail addresses will remain the same.</p>",
  "<p>On the frontend we check the email validation of the bot email, but at the backend the email validation is not that complete i.e bot email address can have multiple <code>@</code> in it; <br>\nSo how should we handle this?</p>\n<p>For now, I am trying to use regex from this below function for <code>shortname</code> we pass in requests for new bots email.</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">is_local_part</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">element</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Adapted from Django's EmailValidator</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">optional</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"sr\">/^[\\w!#$%&amp;'*+/=?^`{|}~-]+(\\.[\\w!#$%&amp;'*+/=?^`{|}~-]+)*$/i</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Backend code which I have changed in PR <a href=\"https://github.com/zulip/zulip/pull/22629\">#22629</a></p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">check_short_name</span><span class=\"p\">(</span><span class=\"n\">short_name_raw</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">short_name</span> <span class=\"o\">=</span> <span class=\"n\">short_name_raw</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n    <span class=\"n\">short_name_pattern_match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s2\">\"^[\\w!#$%&amp;'*+/=?^`{|}~-]+(\\.[\\w!#$%&amp;'*+/=?^`{|}~-]+)*$\"</span><span class=\"p\">,</span> <span class=\"n\">short_name</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">I</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">short_name</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">short_name_pattern_match</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">JsonableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Invalid short name\"</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">short_name</span>\n</code></pre></div>",
  "<p>For context, the backend currently just runs an email address validator on the input, which is useful. But given that in this context we're issuing fake email addresses for bot users, we very possibly want to use a more limited character set. Based on some stale frontend help text, I think at some point we only allowed alphanumeric characters, digits, and dash/underscore.</p>",
  "<p>One could argue that maybe the previously documented set of characters should be basically fine. These \"bot email addresses\" are primarily used for <code>{bot_email_address}:{api_key}</code> authentication, so all that really matters is that hint which bot it is.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12174\">@Tomislav Ple\u010dko</span> see <a href=\"https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory\">https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory</a>. I'm not sure exactly how you have things setup, but user accounts are keyed by their email address. </p>\n<p>So you can either switch to new AD configuration that still maps to the same email addresses (using <code>LDAP_EMAIL_ATTR</code>)  or map users to new email addresses and at the same time use <code>manage.py change_user_email</code> to change the email addresses for existing users.</p>",
  "<p>BTW where did you look for documentation of this question? I wonder if there's a good place to add the answer to our documentation.</p>",
  "<p>I found the documentation on how to set it up, and have used id when first configuring the deployment. However, the IT guy before me has misnamed the AD domain, and time has come to correct this.<br>\nIf Zulip doesn't care about GUIDs, then that's excellent.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/23070\">#23070</a></p>",
  "<p>Yeah it doesn't store anything but the email address that it was provided by LDAP.</p>",
  "<p>how is with django 4.1 now , since it is async ready on ORM and Handlers , Would it possible to replace tornado in this place?</p>",
  "<p>That\u2019s an exaggerated reading of the release notes\u2014the word \u201cready\u201d doesn\u2019t appear anywhere in them. In truth, there are still huge holes in the async APIs. Just in the ORM, there\u2019s still no async support for accessing related fields, saving/refreshing objects, or transactions. What async support it has is still just an async wrapper around synchronous code, which will be slow. Async handlers aren\u2019t new; what\u2019s new is async handlers for class-based views, which we don\u2019t currently use much. There\u2019s been no progress on my <a href=\"https://code.djangoproject.com/ticket/33625\">cache pooling issue</a>. Meanwhile, there\u2019s a more pressing <a href=\"https://code.djangoproject.com/ticket/34058\"><code>AutoField</code> regression</a> that blocks us from updating to Django 4.1 at all for the moment.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/Usage.20of.20asyncio.20in.20django/near/1442539\">said</a>:</p>\n<blockquote>\n<p>That\u2019s an exaggerated reading of the release notes\u2014the word \u201cready\u201d doesn\u2019t appear anywhere in them. In truth, there are still huge holes in the async APIs. Just in the ORM, there\u2019s still no async support for accessing related fields, saving/refreshing objects, or transactions. What async support it has is still just an async wrapper around synchronous code, which will be slow. Async handlers aren\u2019t new; what\u2019s new is async handlers for class-based views, which we don\u2019t currently use much. There\u2019s been no progress on my <a href=\"https://code.djangoproject.com/ticket/33625\">cache pooling issue</a>. Meanwhile, there\u2019s a more pressing <a href=\"https://code.djangoproject.com/ticket/34058\"><code>AutoField</code> regression</a> that blocks us from updating to Django 4.1 at all for the moment.</p>\n</blockquote>\n<p>Thanks  alot for detail explanation. <br>\nThats what i am thinking too , </p>\n<blockquote>\n<p>What async support it has is still just an async wrapper around synchronous code, which will be slow</p>\n</blockquote>\n<p>I haven't actually used django since after 2.x .  But i was tracking roadmap , i thought 4.1 is quite ready for async.<br>\nMy background on async started back in 2015 , many projects we did need Realtime ( Location Tracking for Delivery , Online Health Consultation platform[Docotr-Patient chat] , Social Media streaming) <br>\nso we dropped Django in favor of Tornado + RethinkDB (It was really good realtime database) + Eventsource , and then later we moved to FastAPI . <br>\nNow We are using Starlite framework , and also looking to get back into Django .</p>\n<blockquote>\n<p>cache pooling</p>\n</blockquote>\n<p>I had seen that issue , it had been inactive for long</p>\n<blockquote>\n<p>autofield</p>\n</blockquote>\n<p>thats bad</p>",
  "<p>Looks like the AutoField regression may be fixed already, at least.</p>",
  "<p>So, as part of <a href=\"https://github.com/zulip/zulip/pull/20162\">#20162</a> (see <a class=\"stream-topic\" data-stream-id=\"2\" href=\"/#narrow/stream/2-general/topic/showing.20org.20storage.20use\">#general &gt; showing org storage use</a>), it seems like we would need two new <code>CountStat</code>s:</p>\n<ul>\n<li>uploaded attachment size/space per day</li>\n<li>guest user count per day</li>\n</ul>\n<p>I feel like starting with the uploaded attachment space data first because it's what initiated the issue / idea, and because it seems a bit more straightforward than getting the guest user count.</p>",
  "<p>Starting out, I want to confirm that we want to make a <code>CountStat</code> for this data. For the summary statistic, I'll only need the last value in the time series. If we have the <code>CountStat</code>, we could make/add a graph to the analytics page at some point. But that's not what I would be doing now.</p>",
  "<p>If we don't want to do that or need to do that, then I could also look at just getting the data for the user like we do in <code>zerver.views.attachments.py</code>. That would definitely make this task less complicated in some ways.</p>",
  "<p>If we do want the <code>CountStat</code>, then I'm pretty sure the database table I want to look at for the SQL query would be the <code>zerver_attachment</code> table. And the key fields will be the <code>create_time</code>, <code>realm_id</code> and <code>size</code>.</p>",
  "<p>For the total uploaded file space, do we need a CountStat to just show the current total? I would think it 'd only be required if we want a graph over time.</p>",
  "<p>I think this function, which has a cache to only do the computation roughly once a week, would answer that question in non-graph form.</p>\n<div class=\"codehilite\"><pre><span></span><code>    # `realm` instead of `self` here to make sure the parameters of the cache key\n    # function matches the original method.\n    @cache_with_key(get_realm_used_upload_space_cache_key, timeout=3600 * 24 * 7)\n    def currently_used_upload_space_bytes(realm) -&gt; int:\n        used_space = Attachment.objects.filter(realm=realm).aggregate(Sum(&quot;size&quot;))[&quot;size__sum&quot;]\n        if used_space is None:\n            return 0\n        return used_space\n</code></pre></div>",
  "<p>A CountStat would probably be a nicer mechanism for optimizing that calculation, of course; it can take ~200ms for larger realms.</p>",
  "<p>Perhaps doing the aforementioned function with a daily cache instead would suffice? Since \"space\" is going to get more visibility, keeping it quick but also timely seems a win-win.</p>",
  "<p>I think having the /stats page call that function skipping the cache would probably be fine as an initial plan here.</p>",
  "<p>Thanks for the feedback! Not doing the <code>CountStat</code> makes sense to me, especially since we're not currently planning on adding new graphs/charts.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/used.20upload.20space.20.20CountStat/near/1443043\">said</a>:</p>\n<blockquote>\n<p>I think having the /stats page call that function skipping the cache would probably be fine as an initial plan here.</p>\n</blockquote>\n<p>I'm not sure how to call the function skipping the cache ... but I have a draft up for this as <a href=\"https://github.com/zulip/zulip/pull/23109\">#23109</a> to see if I'm moving in the right direction.</p>",
  "<p>Thanks for your work on this, <span class=\"user-mention\" data-user-id=\"23484\">@Christopher Chong</span> -- I'm only just getting back from paternity leave, so I only just saw this, but I'm real excited to see it fixed!  This has stopped a whole bunch of different deadlocks that we were getting in production.</p>\n<p><a href=\"/user_uploads/2/5/BYwXLw6uTPkxIlvNKZU7weNf/Screen-Shot-2022-10-03-at-5.59.32-PM.png\">Screen-Shot-2022-10-03-at-5.59.32-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/5/BYwXLw6uTPkxIlvNKZU7weNf/Screen-Shot-2022-10-03-at-5.59.32-PM.png\" title=\"Screen-Shot-2022-10-03-at-5.59.32-PM.png\"><img src=\"/user_uploads/2/5/BYwXLw6uTPkxIlvNKZU7weNf/Screen-Shot-2022-10-03-at-5.59.32-PM.png\"></a></div>",
  "<p>It'd be nice to have something that does the URL escaping right.  We'll need a migration to update the existing syntax, but that seems doable.</p>\n<p>Is there a reason to not file this as an issue so someone can hopefully pick it up?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span> filed it as <a href=\"https://github.com/zulip/zulip/pull/23124\">#23124</a> and started working on it.</p>",
  "<p>Oh, awesome!</p>",
  "<p>A search for [google blob] here is still very slow.</p>",
  "<p>With thousands of typing errors fixed, <a href=\"https://github.com/typeddjango/django-stubs\">django-stubs</a> has now been integrated (<a href=\"https://github.com/zulip/zulip/pull/18777\">#18777</a>) into the codebase.</p>\n<p>This change allows us to type-check important features of Django such as <code>QuerySet</code>s and frequently used classes like <code>HttpRequest</code>, <code>HttpResponse</code>, <code>django.conf.settings</code>, etc., along with a pretty comprehensive set of stubs. Without us having to provide type annotations on our own.</p>\n<hr>\n<p>For people who aren't familiar with it, django-stubs is superpowered by a mypy plugin that comes with it, which helps type-checking some really dynamic features that can't really be described with static type annotations.</p>\n<p>For example, some methods available on a <code>Manager</code> such as <code>all</code>, return a <code>QuerySet</code> of the managed instance of a model. The mypy plugin is able to narrow down its type to be <code>QuerySet[UserProfile]</code>, and further knows the attributes (as well as their types) on the <code>QuerySet</code> object when type checking.</p>\n<p>It is also capable of checking the types of arguments passed to the <code>create</code> method.</p>\n<div class=\"codehilite\"><pre><span></span><code>Book.objects.create(publisher_id=None)\n</code></pre></div>\n<p>or the arguments for <code>.filter</code> calls.</p>\n<p>In the future, we no longer need to provide type annotations for the model fields.</p>\n<p>For example, a <code>TextField()</code> no longer needs to be defined with a type annotation of <code>str</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\">class Realm:</span>\n<span class=\"w\"> </span>  ...<span class=\"w\"></span>\n<span class=\"gd\">-   default_code_block_language: Optional[str] = models.TextField(null=True, default=None)</span><span class=\"w\"></span>\n<span class=\"gi\">+   default_code_block_language = models.TextField(null=True, default=None)</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p>Integrating django-stubs also brings a lot of positive side effects. We have reworked the helper methods like <code>client_get</code> to be type safe in terms of <code>kwargs</code>, stopped monkey-patching <code>HttpRequest</code> and instead introduced <code>RequestNotes</code> as a type-safe workaround, tightened type annotations, none-checks,  and <code>TypedDict</code>s throughout the codebase. </p>\n<p>Huge thanks to <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span>, <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>, as well as many others for reviewing and helping with all of the django-stubs-related work.</p>",
  "<p>We will probably work on some follow-ups like providing better type annotations for the events.</p>",
  "<p>This is huge -- in multiple meanings of the word.  Thank you for your perseverance getting all of the issues fixed!</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/make.20pgroonga.20default.20.3F/near/1444577\">said</a>:</p>\n<blockquote>\n<p>A search for [google blob] here is still very slow.</p>\n</blockquote>\n<p>Concretely, I just <a href=\"#narrow/search/google.20blob\">tried it</a> and it took about 60 seconds before it returned any results. (Then it did.)</p>",
  "<p>Would it be useful to get the query plan from that? I know we have some other knows issues with PGroonga (we haven't figured out how to turn on English stemming, for example) that are blockers for making it the default as well.</p>",
  "<p>We've now dropped support for Postgres 10 in <code>main</code> via <a href=\"https://github.com/zulip/zulip/commit/11a86ec32832a7426821236c0db36b1ebb6f281e\">11a86ec32832a7426821236c0db36b1ebb6f281e</a>; I opened <a href=\"https://github.com/zulip/zulip/pull/23161\">#23161</a> as a release goal to track that we need to do some documentation work; the main thing <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> noted is that the existing Docker upgrade instructions for doing postgres upgrades just reference the <code>galaxert</code> version.</p>",
  "<p>I tried to upgrade from Postgres 10 to newer (in test environment) and the upgrade script didn't work at least in the Docker version. It said that postgres section is missing in zulip.conf.</p>",
  "<p>The <code>upgrade-postgresql</code> script is not designed for Docker. The relevant instructions are <a href=\"https://github.com/zulip/docker-zulip#upgrading-from-the-old-galexrtdocker-zulip\">these ones</a>. (As noted, they need some adjustments.)</p>",
  "<p>I was filing an issue to update the text on the error pages in /templates/confirmation/, when I realized that I'm not entirely sure when these are shown. Just from playing around with links I have access to, it seems like you can get these pages from:</p>\n<ul>\n<li>A bad invite link</li>\n<li>\n<p>Something going wrong from an email invitation<br>\n<a href=\"/user_uploads/2/3b/wga8fsxh3RrBn-QVs6x59Cn-/Screen-Shot-2022-10-11-at-4.50.16-PM.png\">Screen-Shot-2022-10-11-at-4.50.16-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/3b/wga8fsxh3RrBn-QVs6x59Cn-/Screen-Shot-2022-10-11-at-4.50.16-PM.png\" title=\"Screen-Shot-2022-10-11-at-4.50.16-PM.png\"><img src=\"/user_uploads/2/3b/wga8fsxh3RrBn-QVs6x59Cn-/Screen-Shot-2022-10-11-at-4.50.16-PM.png\"></a></div></li>\n<li>\n<p>Something going wrong from an email <em>confirmation</em><br>\n<a href=\"/user_uploads/2/e2/-0y0huhOE_UG4bD11Qp2HF1l/Screen-Shot-2022-10-11-at-4.49.49-PM.png\">Screen-Shot-2022-10-11-at-4.49.49-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/e2/-0y0huhOE_UG4bD11Qp2HF1l/Screen-Shot-2022-10-11-at-4.49.49-PM.png\" title=\"Screen-Shot-2022-10-11-at-4.49.49-PM.png\"><img src=\"/user_uploads/2/e2/-0y0huhOE_UG4bD11Qp2HF1l/Screen-Shot-2022-10-11-at-4.49.49-PM.png\"></a></div></li>\n</ul>\n<p>A couple of questions:</p>\n<ol>\n<li>Is that a complete set of circumstances in which these pages are shown?</li>\n<li>Would it be easy to show different pages in cases 1+2 vs. 3?</li>\n</ol>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"6\" href=\"/#narrow/stream/6-frontend/topic/.2Ftemplates.2Fconfirmation.20error.20pages\">#frontend &gt; /templates/confirmation error pages</a> by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> can probably answer those questions.</p>",
  "<p>Our confirmation link errors are fairly general, so theoretically we could show them in any situation where a link is wrong, in the context of any action that involves confirmation links (and there's more of those - e.g. realm creation, email change, realm reactivation etc. (see the <code>Confirmation</code> model for the list of possible types). However in some cases, we use different error pages than the generic ones.</p>\n<p>But specifically, the use of these generic <code>confirmation/*html</code> pages comes from where we use the <code>render_confirmation_key_error</code> function to generate a response. So those, <strong>currently</strong>, seem to be the ones you listed plus:</p>\n<ul>\n<li>Email change confirmation <code>confirm_email_change</code></li>\n<li>Organization creation</li>\n</ul>\n<p>To show different pages in different cases (e.g. error from invite vs signup confirmation link) right now is hard because these confirmation links have the shape <code>example.com/accounts/do_confirm/&lt;confirmation key&gt;</code> - so if given just an incorrect key, there's no way of knowing if that was supposed to be an invitation link or signup confirmation etc.  In the special case  if the key was valid (a <code>Confirmation</code> was found), but is expired, type-dependent pages could indeed be shown.</p>",
  "<p>The invitation/confirmation system is kind of a mess I think, as evidenced by e.g. the amount of <code>Confirmation</code> and <code>PreregistrationUser</code> bugs we've been hunting down for years <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span></p>",
  "<p>Who is available to do the testing to write documentation for doing the upgrade from Postgres 10 to 14 for <code>docker-zulip</code>?</p>",
  "<p>Hmm, thanks for that background!</p>\n<p>An expired invitation link or email confirmation link (do those expire?) would probably be some of the more common ways to get to those pages. So if we can just distinguish those, that would be a good first step.</p>",
  "<p>Shall I open an issue for making different endpoints for coming from an invite link vs email confirmation link, if that solution to this sounds reasonable?</p>\n<blockquote>\n<p>email confirmation link (do those expire?) </p>\n</blockquote>\n<p>They all expire  (except <code>Confirmation.UNSUBSCRIBE</code> because it gets <code>validity_in_days=1000000</code>). Email change confirmation gets the default expiration period of <code>settings.CONFIRMATION_LINK_DEFAULT_VALIDITY_DAYS</code> (equal to <code>1</code>)</p>",
  "<p>We'll need to be careful about backwards-compatibility to avoid breaking existing invitation links if we change the URLs. Which is a solvable problem, but wanted to flag it.</p>",
  "<p>I think we should probably choose a design for what we want the URLs to be for confirmation vs. invitation links, if we're going to change this; those are a user-facing design detail (since the URL appears in the address bar and at least plain-text versions of emails).</p>",
  "<p>I've been working on it.  It hasn't been going well. Zulip 4 docker is... Brittle.</p>",
  "<p>Can you talk a bit about how you've been doing the testing?</p>",
  "<p>I have Docker-Zulip 4.0 (which came with PG10), <a href=\"https://github.com/zulip/docker-zulip#upgrading-from-the-old-galexrtdocker-zulip\">upgrading that</a> to 5.6 and then <a href=\"https://github.com/zulip/docker-zulip#upgrading-from-the-old-galexrtdocker-zulip\">upgrading PG</a> to 14. There are a handful of gotchas on both sides, and I'm working through them, but going back to stock docker-zulip-4 between them. PR will be in for it soon.</p>",
  "<p>Opened: <a href=\"https://github.com/zulip/docker-zulip/pull/367\">https://github.com/zulip/docker-zulip/pull/367</a></p>",
  "<p>Actually this doesn't work, as the <code>latest</code> tag on <a href=\"https://hub.docker.com/r/zulip/zulip-postgresql/tags\">https://hub.docker.com/r/zulip/zulip-postgresql/tags</a> is pointing to <code>10</code>. I just caught that during a wipe-and-retry manually pointing at <code>14</code>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> can you repoint it?</p>",
  "<p>... although I suppose anyone relying on that may not have a great experience. <span aria-label=\"balance\" class=\"emoji emoji-2696\" role=\"img\" title=\"balance\">:balance:</span></p>",
  "<p>Opened: <a href=\"https://github.com/zulip/docker-zulip/pull/368\">https://github.com/zulip/docker-zulip/pull/368</a> as GH wouldn't let me reopen due to my squashed force push :sigh: <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
  "<p>This version explicitly sets the version to 14, and explicitly sets the password auth to md5. As noted in the PR, TIMTOWTDI.</p>",
  "<p>I guess currently the URL is <code>/accounts/do_confirm/[code]</code>.</p>\n<p>I don't think it's super important, but something like <code>/accounts/join/[code]</code> for invitations and <code>/accounts/confirm_email/[code]</code> for email confirmations, perhaps?</p>",
  "<p>With the idea being that \"join\" and \"confirm email\" are probably how the user is thinking of the action they are taking.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"24078\">Matt Keller</span> <a href=\"#narrow/stream/3-backend/topic/postgres.2010.20EOL/near/1449214\">said</a>:</p>\n<blockquote>\n<p>Actually this doesn't work, as the <code>latest</code> tag on <a href=\"https://hub.docker.com/r/zulip/zulip-postgresql/tags\">https://hub.docker.com/r/zulip/zulip-postgresql/tags</a> is pointing to <code>10</code>. I just caught that during a wipe-and-retry manually pointing at <code>14</code>.</p>\n</blockquote>\n<p>Now that you mention it, I have a feeling that we didn't update this at the time because we needed to add instructions of this form before doing so would be a good idea.</p>",
  "<p>We can potentially send a dedicated zulip-announce@ email about upgrading Postgres with <code>docker-zulip</code> if that's appropriate.</p>",
  "<p>We are discussing about how to correctly implement time restrictions on topic editing in <a href=\"#narrow/stream/101-design/topic/time.20restrictions.20on.20topic.20editing/near/1448541\">https://chat.zulip.org/#narrow/stream/101-design/topic/time.20restrictions.20on.20topic.20editing/near/1448541</a>.</p>\n<p>As discussed in the above thread, as we do not want to allow the user to move messages that are too old and since we cannot always check such condition at the client itself (because we may not have all messages of the topic), we would show the modal and then when user tries to move the messages we show a confirmation prompt. To check whether user is allowed to move all messages, we would thus need to make a request to a server and then show the confirmation prompt with something like \"only X out of Y messages can be moved. Do you want to proceed?\", I am not sure how we want to implement such a thing.</p>\n<p>First what should be the response of the server in such case? Do we return \"400\" response or something else and how to tell the client how many messages can be moved?</p>\n<p>And if we do something about the first part, then we would need to update the <code>update-message</code> API endpoint to differentiate between both the cases - first when client is trying to update the messages that are too old and second when client has agreed to move only some messages.</p>",
  "<p>I think there's two options. One is for the server to add a new endpoint, that the client would query first). The second would be to, say, add a parameter to the main message endpoint to request that if the move would be limited by time limit permissions, return a special response with details needed for such a confirmation dialog. This second option would save a round trip in the case that there is no such limit, so might be preferable as an API design.</p>",
  "<p>If we make the \"Return an error if the request would be limited\" behavior controlled by an option, then if you hit confirm it can just not pass that optional parameter as the thing the \"Confirm moving 5/10 messages\" button does.</p>",
  "<p>We should add support for PostgreSQL 15, released Thursday.</p>",
  "<p>Yeah; probably that includes at least testing it on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>; though I think we probably don't want to move the default to Postgres 15 for 6.0 given that there's a good chance significant bugs show up in its first couple months after release.</p>",
  "<p>(Though we might do that in like 6.2)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/major.20transitions/near/1404306\">said</a>:</p>\n<blockquote>\n<p>Once we get django-stubs merged, I think the next major mypy project will be to start replacing <code>Dict[str, Any]</code> and <code>check_dict</code> with a type-safe library such as dataclasses-json, marshmallow-dataclass, or pydantic. But I don\u2019t want to commit to a timeline for that yet.</p>\n</blockquote>\n<p>Forwarding this here for more potential options.</p>",
  "<p><code>cattrs</code> is also in this space.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"24078\">@Matt Keller</span> any updates on this effort?</p>",
  "<p>Oh, <a href=\"https://github.com/zulip/docker-zulip/pull/368\">https://github.com/zulip/docker-zulip/pull/368</a> needs a review.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> do you have time to be the reviewer for this one.</p>",
  "<p>OK, posted an initial review; generally the process seems pretty reasonable.</p>",
  "<p>One thing I'm not sure about is whether Postgres 10 will happen to work with a 6.0 image despite Django dropping support for it.</p>",
  "<p>(The reason this may matter is what will happen if someone just upgrades the container without reading anything)</p>",
  "<p>I think in any case we'll want to link to this new documentation in the \"Upgrade notes\" guide for the 6.0 release, but that may impact how aggressively we market that this change is happening.</p>",
  "<p>The other question I have is whether there's something more clever we could be doing with the tags on Dockerhub; do we want a <code>zulip-postgres-14:latest</code> project so that folks can configure a \"latest\" tag that won't randomly change to postgres 15 later?</p>",
  "<p>May not be super important; it'll be like 3 years before Postgres 14 EOL becomes a thing we need to think about.</p>",
  "<p>I responded.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/postgres.2010.20EOL/near/1453748\">said</a>:</p>\n<blockquote>\n<p>One thing I'm not sure about is whether Postgres 10 will happen to work with a 6.0 image despite Django dropping support for it.</p>\n</blockquote>\n<p>I upgraded to main with PG10 a couple weeks ago. I assume that had the new Django in it?</p>",
  "<p>Only as of <time datetime=\"2022-10-06T22:59:02Z\">2022-10-06T15:59:02-07:00</time>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/postgres.2010.20EOL/near/1453751\">said</a>:</p>\n<blockquote>\n<p>The other question I have is whether there's something more clever we could be doing with the tags on Dockerhub; do we want a <code>zulip-postgres-14:latest</code> project so that folks can configure a \"latest\" tag that won't randomly change to postgres 15 later?</p>\n</blockquote>\n<p>I think we should abandon the \"latest\" tag altogether for a database image. There are generally things that must be done to upgrade from arbitrary database versions, and it's just asking for trouble.</p>",
  "<p>I believe Django <a href=\"https://github.com/django/django/blob/4.1.2/django/db/backends/base/base.py#L232\">does actually check</a>.</p>",
  "<p>There is no need for separate projects. Tags are mutable.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/postgres.2010.20EOL/near/1453767\">said</a>:</p>\n<blockquote>\n<p>Only as of <time datetime=\"2022-10-06T22:59:02Z\">2022-10-06T15:59:02-07:00</time>.</p>\n</blockquote>\n<p>Hmmm it was probably that day, hilariously, but earlier. I will hit another one and confirm the behavior. Thanks for digging that</p>",
  "<p>Well my idea was to abandon the <code>latest</code> tag on a <code>zulip-postgres</code> image, but instead just publish different projects for different postgres major versions, that can each individually have <code>latest</code> tags, so that it's still possible to do security releases via a latest tag.</p>",
  "<p>And I\u2019m saying there\u2019s no need for separate projects. We can just update the <code>14</code> tag.</p>",
  "<p>That\u2019s what every big Docker project does. Look at <a href=\"https://hub.docker.com/_/python\">python</a> and <a href=\"https://hub.docker.com/_/node\">node</a>, for example.</p>",
  "<p>The current version of Python is tagged with all of <code>3.10.8</code>, <code>3.10</code>, <code>3</code>, and <code>latest</code> (and <code>3.10.8-bullseye</code>, etc.). All the non-fully-qualified tags will be updated when <code>3.10.9</code> comes out.</p>",
  "<p>OK, sounds good.</p>",
  "<p>I'm investigating which library will be the best option for us. At this moment, it seems to me that in many situations, typing <code>Dict[str, Any]</code> is just a <code>TypedDict</code> or <code>dataclass</code> away.</p>",
  "<p>Sometimes we construct something with <code>{\"key\":\"val\"}</code> or something, and pass it to another function that expects <code>Dict[str, Any]</code>. This particular use case does not require the functionality provided by these libraries.</p>",
  "<p>I think we are more interested in validating external data structure that fits a certain pattern, as in the view functions, for which we have REQ.</p>",
  "<p>And potentially, the library could help us with parsing and validating events into a typed structure, or maybe validating the event dict passed to <code>queue_json_publish</code> for testing purposes.</p>",
  "<p>Yes, internal data structures should just be <code>dataclass</code>es.</p>\n<p>I think there is no good use for <code>TypedDict</code> except when needed for django-stubs. The extra functionality of <code>TypedDict</code> is implicit interoperability with normal <code>dict</code>, but we want to validate all such conversions so we don\u2019t want them to be implicit.</p>",
  "<p>It should be able to supersede <code>zerver.lib.data_types</code>.</p>",
  "<p>I see. I think the library will be particularly useful to bring static type annotation to the event types along with convenient validation.</p>",
  "<p><code>REQ</code> does not have the ability to pass along typing information for typed dictionaries of any kind. We need something with a philosophy of <a href=\"https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\">parse, don\u2019t validate</a>.</p>",
  "<p>I also don\u2019t like that I needed to open up this hole to make the existing validator system work, and I would like to be able to close it eventually:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">check_list</span><span class=\"p\">(</span><span class=\"n\">check_int</span><span class=\"p\">)(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"string\"</span><span class=\"p\">)</span>\n<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>  <span class=\"c1\"># \"string\"</span>\n</code></pre></div>",
  "<p>If we are not to make it work with the rest of the system, how do we fix <code>check_list</code>? Should it instead be <code>parse_list_as</code> and return an immutable sequence?</p>",
  "<p>Right. Parse, don\u2019t validate.</p>",
  "<p>Ideally we\u2019d go directly from the JSON string to the strictly-typed value with dataclasses where they\u2019re expected, skipping the intermediate untyped value with dictionaries.</p>",
  "<p>I don't think <code>marshmallow-dataclass</code> will be a fit for this at this point, since marshmallow schemas come with their own complexity. It helps with validation, but not really static type checking.</p>",
  "<p><code>dataclasses-json</code> is the probably lightest library that supports <code>dataclass</code> conversion from and to json/<code>dict</code>. The API is pretty straightforward.</p>",
  "<p><code>(c)attrs</code> and <code>pydantic</code> are the more powerful ones among the candidates.</p>",
  "<p>I\u2019ve become a little concerned with <code>dataclasses-json</code>\u2019s maintainer attentiveness: no response to the <a href=\"https://github.com/lidatong/dataclasses-json/issues?q=is%3Aopen+author%3Aandersk\">issues and PRs</a> I opened in July.</p>",
  "<p>If we are choosing to use <code>(c)attrs</code>, we probably are also switching from <code>dataclasses.dataclass</code> to <code>attrs</code> data structures. We can take advantage of slotted classes and the validators. Mypy also has a built-in plugin for <code>attrs</code>.</p>",
  "<p>Hmm, <code>dataclasses-json</code> seems to have only one maintainer. That can be an issue.</p>",
  "<p><code>cattrs</code> advertises support for dataclasses, though I\u2019m not too worried about switching to <code>attrs</code> if it gives us things we need. I have no experience with <code>cattrs</code>, <code>attrs</code>, or <code>pydantic</code>.</p>",
  "<p><code>(c)attrs</code> and <code>pydantic</code> have larger communities so activeness is less of a concern for us. The author of <code>cattr</code> wrote a <a href=\"https://threeofwands.com/why-i-use-attrs-instead-of-pydantic/\">blog post</a> comparing <code>cattrs</code> and <code>pydantic</code>. It might be biased but does sound convincing.</p>",
  "<p>Since <code>dataclasses</code> stemmed from <code>attrs</code>, probably transiting to <code>cattrs</code> will be easier than to <code>pydantic</code>.</p>",
  "<blockquote>\n<p>I don't think <code>marshmallow-dataclass</code> will be a fit for this at this point, since marshmallow schemas come with their own complexity. It helps with validation, but not really static type checking.</p>\n</blockquote>\n<p>That\u2019s all we\u2019d need (i.e. parsing and serialization), since dataclasses already provide static type checking.</p>",
  "<p><code>marshmallow-dataclass</code> depends on <code>marshmallow</code>. But by itself, it is indeed the minimal library other than <code>dataclasses-json</code> that supports these needs. We can probably proceed with it if introducing <code>marshmallow</code> is desirable. I would like to get more feedback on this.</p>",
  "<p>Thanks for sharing that blog post; I agree it's fairly convincing.</p>",
  "<p>Hi folks! Is it still useful to keep using pgroonga as the search backend on CZO, or should we revert it for now? There are very clear usability issues (performance and quotation marks not working to specify an exact search are the ones that come up the most for me).</p>",
  "<p>I think it's reasonable to switch back to the default engine until we can fix the various bugs with the pgroonga engine. </p>\n<p>We don't currently have a way to do that in our settings system without also stopping maintaining the PGroonga indexes, which might add more activation energy to doing future of Pgroonga on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>. So I wonder whether the right plan would be to split out a separate server-level setting for whether to maintain Pgroonga indexes that defaults to the <code>USING_PGROONGA</code> setting for whether to maintain the index?</p>",
  "<p>That sounds like a good plan.</p>",
  "<p>I came here to this thread just now to report another usability issue -- I think we've been aware of it in principle, but I'm not finding it discussed above as a usability issue.</p>\n<p>That's that some words effectively get ignored in a query, because they appear in the invisible HTML markup of our rendered messages and so every message matches them (or lots of messages do), even when the word didn't at all appear in the text the user sees.</p>\n<p>Words that this affects include \"data\" and \"user\". So for example I just tried search for [missing data on user] (from an error message I wanted to see if there'd been discussion of):<br>\n<a href=\"#narrow/search/missing.20data.20on.20user\">https://chat.zulip.org/#narrow/search/missing.20data.20on.20user</a><br>\nMost of the results I get don't actually have the word \"data\" nor the word \"user\". That makes it require a lot of manual scanning by eye in order to find what messages might actually be a match.</p>",
  "<p>In this particular use case, my ideal search would use quotes to find the exact phrase. That'd work around this issue as a bonus, but as <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span> mentioned, that feature isn't available.</p>",
  "<p>Yeah, those are both in the category of item that our default search backend handles reasonably, and PGroonga as we have it currently configured does not.</p>",
  "<p>Implementation-wise, we just need to make these two lines depend on different settings:</p>\n<div class=\"codehilite\"><pre><span></span><code>puppet/zulip/files/postgresql/process_fts_updates:        if USING_PGROONGA:\nzerver/lib/narrow.py:        if settings.USING_PGROONGA:\n</code></pre></div>\n<p>The first is for maintaining the index, the second for which index to use. Ideas for what to call a new setting to add here?</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/23367\">#23367</a> for experimenting with <code>cattrs</code>/<code>attrs</code>.</p>",
  "<p>Some observations posted on the PR:</p>\n<ul>\n<li><code>cattrs</code> provides quite detailed error messages when parsing fails. But they are not really concise especially when we have deeply nested structures with multiple errors:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>  + Exception Group Traceback (most recent call last):\n  |   File &quot;/home/pig208/zulip/zerver/tests/test_events.py&quot;, line 2339, in test_add_attachment\n  |     add_event = cattrs.structure(events[0], AttachmentAddEvent)\n  |   File &quot;/srv/zulip-py3-venv/lib/python3.8/site-packages/cattrs/converters.py&quot;, line 309, in structure\n  |     return self._structure_func.dispatch(cl)(obj, cl)\n  |   File &quot;&lt;cattrs generated structure zerver.lib.event_schema.AttachmentAddEvent&gt;&quot;, line 24, in structure_AttachmentAddEvent\n  |     if errors: raise __c_cve(&#39;While structuring &#39; + &#39;AttachmentAddEvent&#39;, errors, __cl)\n  | cattrs.errors.ClassValidationError: While structuring AttachmentAddEvent (1 sub-exception)\n  +-+---------------- 1 ----------------\n    | Exception Group Traceback (most recent call last):\n    |   File &quot;&lt;cattrs generated structure zerver.lib.event_schema.AttachmentAddEvent&gt;&quot;, line 15, in structure_AttachmentAddEvent\n    |     res[&#39;attachment&#39;] = __c_structure_attachment(o[&#39;attachment&#39;], __c_type_attachment)\n    |   File &quot;&lt;cattrs generated structure zerver.lib.event_schema.AttachmentType&gt;&quot;, line 34, in structure_AttachmentType\n    |     if errors: raise __c_cve(&#39;While structuring &#39; + &#39;AttachmentType&#39;, errors, __cl)\n    | cattrs.errors.ClassValidationError: While structuring AttachmentType (1 sub-exception)\n    | Structuring class AttachmentAddEvent @ attribute attachment\n    +-+---------------- 1 ----------------\n      | Traceback (most recent call last):\n      |   File &quot;&lt;cattrs generated structure zerver.lib.event_schema.AttachmentType&gt;&quot;, line 20, in structure_AttachmentType\n      |     res[&#39;path_id&#39;] = __c_structure_path_id(o[&#39;path_id&#39;])\n      | ValueError: invalid literal for int() with base 10: &#39;2/87/WoqhJzoaO8LUV7doiIn7s92e/zulip.txt&#39;\n      | Structuring class AttachmentType @ attribute path_id\n      +------------------------------------\n</code></pre></div>\n<ul>\n<li>It coerces data into the destined primitive type when possible. For example, if a data structure has a field <code>count: int</code>, then structuring the dict <code>{\"count\": \"12\"}</code> works fine, while <code>{\"count\": \"abc\"}</code> fails as expected. This is different from what <code>check_data</code>. We can probably fix this with a hook similar the one here <a href=\"https://github.com/python-attrs/cattrs/issues/44\">https://github.com/python-attrs/cattrs/issues/44</a>.</li>\n<li>It allows extra keys by default. This behavior is also different from <code>check_data</code>, which rejects unknown keys. This can be fixed by using a custom converter <code>c = cattrs.Converter(forbid_extra_keys=True)</code>.</li>\n</ul>\n<p>To replicate other behaviors of our current event schema construct (checking the presence of <code>type</code> field, auto-adding <code>id</code>), we can probably make use of the extensibility of the <code>cattrs</code>/<code>attrs</code> APIs. An advantage of this might be that we can reuse the schema data structures in other places like <code>queue_json_publish</code> without the cost of validating them. This is valuable because we gain the advantage of static type checking.</p>",
  "<p>I'm trying similar things with <code>marshmallow-dataclass</code>.</p>",
  "<p><code>marshmallow-dataclass</code> does not provide <a href=\"https://github.com/lovasoa/marshmallow_dataclass/blob/master/marshmallow_dataclass/__init__.py#L224-L228\">static type checking</a> for the parsed data structure with the desired type.</p>\n<p>The usage of <code>marshmallow-dataclass</code> in our test case might look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">add_schema</span> <span class=\"o\">=</span> <span class=\"n\">marshmallow_dataclass</span><span class=\"o\">.</span><span class=\"n\">class_schema</span><span class=\"p\">(</span><span class=\"n\">AttachmentAddEvent</span><span class=\"p\">)()</span>\n        <span class=\"n\">add_event</span> <span class=\"o\">=</span> <span class=\"n\">add_schema</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">reveal_type</span><span class=\"p\">(</span><span class=\"n\">add_schema</span><span class=\"p\">)</span>  <span class=\"c1\"># zerver/tests/test_events.py:2341: note: Revealed type is \"marshmallow.schema.Schema\"</span>\n        <span class=\"n\">reveal_type</span><span class=\"p\">(</span><span class=\"n\">add_event</span><span class=\"p\">)</span>   <span class=\"c1\"># zerver/tests/test_events.py:2342: note: Revealed type is \"Any\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">add_event</span><span class=\"o\">.</span><span class=\"n\">upload_space_used</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>We will have to use <code>marshmallow_dataclass.class_schema</code> to generate a <code>marshmallow.schema.Schema</code> first, then use the <code>.load</code> method defined on the generated schema.<br>\nAFAIK, <code>Schema</code> does not preserve the typing information of the generated schema, which probably requires a complicated mypy plugin as type annotations are insufficient.<br>\nSince this does not guarantee type safety at the library level, <code>marshmallow_dataclass</code> does not meet the requirements.</p>",
  "<p>Our core function for creating the Message object when a message is being sent (through a variety of codepaths), is <code>check_message</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>def check_message(\n    sender: UserProfile,\n    client: Client,\n    addressee: Addressee,\n    message_content_raw: str,\n    realm: Optional[Realm] = None,\n    ....\n) -&gt; SendMessageRequest:\n</code></pre></div>\n<p>The <code>realm</code> argument was <code>Optional</code> so far, which wasn't a big deal until the recently merged <code>Message.realm</code> denormalization. Now the function needs to know the <code>realm</code> value to set it correctly on the Message.  Which poses the question of whether we should make it a required argument? </p>\n<p>In the commit adding <code>Message.realm</code> column I made this function simply infer the right value based on the sender:</p>\n<div class=\"codehilite\"><pre><span></span><code>    if realm is None:\n        realm = sender.realm\n</code></pre></div>\n<p>but this just creates a perpetual question of <code>are we sure every cross-realm bot message-sending codepath delivers a realm value in the argument so that the sender.realm inference doesn't get used</code>? (because that'd be a bug, creating a Message in the system bot realm instead of recipient realm).  I didn't find any bugs in my investigation right now, but there isn't much preventing a regression being introduced in a refactoring etc.</p>\n<p>Making this a required argument will be a bit messy though, forcing a whole bunch of functions to plumb the value through, when it's mostly unnecessary, because <code>sender.realm</code> is almost-always right. An alternative answer could be that we should just finally push on  getting rid of cross-realm bots which would make this whole problem non-existant. Any thoughts on this?</p>",
  "<p>I think it is quite valuable to continue the work in <a href=\"https://github.com/zulip/zulip/pull/17520\">#17520</a>, so that we are guarded by the invariant that <code>message.realm</code> is always <code>sender.realm</code>. It would than be easy for us to remove the <code>realm</code> parameter.</p>",
  "<p>I think removing cross-realm bots is a useful step to take in general, to reduce unused complexity.</p>",
  "<p>I think <a href=\"https://github.com/zulip/zulip/pull/17520\">#17520</a> is something we definitely want to do.</p>",
  "<p>The long term design of this detail probably depends a little bit on how we want to design any future native \"Cross-realm stream\" feature, which I kinda don't want to think through designing right now. </p>\n<p>I <strong>think</strong> probably any reasonable version of that design, which includes variants where we have cross-realm streams that live in a special \"Cross-realm messages\" realm or all sort of other weird designs, would have the <code>Realm</code> be a function of the <code>(sender, addressee)</code> pair; and any additional complexity would go into how <code>addressee</code> objects are put together? I'm not sure.</p>",
  "<p>Yeah, status type checking is pretty clearly one of our goals for doing something other than basic dataclasses.</p>",
  "<p>Just an extra thought here. It seems that <code>attrs</code> might be unnecessary since <code>cattrs</code> also supports <code>dataclass</code> alone for type-checking purposes.</p>",
  "<p>Actually, we might be bumping into <a href=\"https://github.com/python-attrs/cattrs/pull/215\">some limitations of <code>dataclasses</code></a>, so <code>attrs</code> is not off the table.</p>",
  "<p>So do we have a fix to that query to integrate here? </p>\n<p>Since <a href=\"https://github.com/zulip/zulip/commit/f37ac8038475a8d30f28e59e5f5210ff15033c3e\">f37ac8038475a8d30f28e59e5f5210ff15033c3e</a> is new in this release, and this is probably a regression (though perhaps only affecting Zulip Cloud, since I think the problem is the lack of a <code>realm</code> limit on the query, so we're incorrectly doing this for ALL streams on the server, not just the streams in the realm we just imported).</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> <span class=\"user-mention\" data-user-id=\"24078\">@Matt Keller</span> what's the status of <a href=\"https://github.com/zulip/docker-zulip/pull/368\">https://github.com/zulip/docker-zulip/pull/368</a>?</p>",
  "<p>I'm thinking I'll post our next 6.0 beta today, and it'd be nice to have a section in the announcement asking folks to test the Docker upgrade flow.</p>",
  "<p>I think <span class=\"user-mention silent\" data-user-id=\"24078\">Matt Keller</span> probably has an unpushed updated version?  There were a couple small changes which look to be now in resolved comments.  The third comment, on theSCRAM-SHA-256 password update, probably requires a script, which is going to be less flexible, but for when it works, will be significantly easier for folks.</p>",
  "<p>Correct. The non-SCRAM stuff has been updated and resolved as requested. The SCRAM update works fine from a database standpoint, but \"Zulip\" can't connect after that. I've spent more time than I care to admit going through the pythonweeds on that. I've hoped to have it wrapped \"any minute now\" for a long time.</p>",
  "<p>ok. I suppose as long as the changes are localized to that repository, we can publish a beta and say that an updated Docker image with upgrade instructions will be available later this week.</p>",
  "<p>Which part of the pythonweeds?  LMK if there's anything I can help pair on for that.</p>",
  "<p>I haven't circled back around to this. Hopefully in the morning.</p>",
  "<p>Capturing a chat I had with <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> here so it's not lost (and in case someone has some helpful context!):</p>\n<p>In my recent PR 23366, I had originally implemented a test against resolving topics using <code>ZulipTestCase#api_patch</code> against <code>/json/messages/{msg_id}</code>, by way of copying the existing <code>EditMessageTest#test_mark_topic_as_resolved</code> <code>client_patch</code> call and adapting to use <code>api_patch</code> instead (per Tim's advice <a href=\"#narrow/stream/49-development-help/topic/resolving.20topics.20in.20unit.20tests.20and.20generally/near/1455845\">here</a>).</p>\n<p>That this test passed (prior to being refactored to use an <code>/api/v1/messages/{msg_id}</code> path as it does now) appears to be surprising and potentially an indicator of a quirk/bug in the test suite according to Tim, however I found a few other occurrences of such calls in the existing test suite, and so decided to punt this to its own triage and (if necessary) fix process (especially now that the PR-relevant tests use appropriate URLs). But first - thoughts/tips, anyone?</p>\n<p>(original PR context: <a href=\"https://github.com/zulip/zulip/pull/23366#discussion_r1007468869\">https://github.com/zulip/zulip/pull/23366?#discussion_r1007468869</a>)</p>",
  "<p>Also seeking feedback on _another_ idea that came from that PR, this time hopefully a much simpler one (indeed, the blast radius should be 9 Python files[^1]).  I'd like to pitch moving <code>propagate_mode</code> on message updates to being a full-on proper Enum (either in the vanilla Python stdlib sense, or in the sense of any Parse Don't Validate schema-ing libraries that may come to be - I know there's currently chatter about this already in this stream).</p>\n<p>The legal values currently live in a plain old list in <code>zerver/views/message_edit.py</code> and are passed through to <code>REQ</code> which I'm just now learning about. This probably implies to me a dependency on resolving <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/REQ.20vs.20Pydantic\">#backend &gt; REQ vs Pydantic</a> first, but maybe not: refactoring to a plain old <a href=\"https://docs.python.org/3/library/enum.html\">Enum</a> allows the name-based access, possibly better in-editor hints for those of us with LSP and so forth, and the existing list can be generated <a href=\"https://docs.python.org/3/library/enum.html#enum.EnumType.__iter__\">from <code>__iter__</code> on the Enum class</a>. Any gotchas I should know about this idea? I see <code>Enum</code> is not especially commonly used in the codebase, which is not necessarily bad, just makes me less inclined to YOLO a PR up.</p>\n<p>[^1]: <code>rg --files-with-matches propagate_mode $(fd . -e py) | wc -l</code></p>",
  "<p>Er, _right_, here I go again crossing brain wires when moving between languages: Python Enums don't (yet - coming in 3.11) by default support string members, I was thinking of the TypeScript thing that allows for that (and transpiles to an Object). <a href=\"https://stackoverflow.com/a/58608362\">A workaround exists in &lt;=3.10</a> if we think it's a reasonable idea, and <a href=\"https://docs.python.org/3/library/enum.html#enum.StrEnum\"><code>StrEnum</code> proper is coming in 3.11</a>. So I guess I'm glad I didn't just drive-by PR this one after all.</p>",
  "<p>(<code>*italic*</code> is the italics' syntax <a href=\"https://chat.zulip.org/help/format-your-message-using-markdown#emphasis\">here</a>.)</p>",
  "<p>The idea of having Enums in our codebase sounds great. I'm not sure if the candidates from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/REQ.20vs.20Pydantic\">#backend &gt; REQ vs Pydantic</a>  handle that properly, but it's probably not a big deal. For type hints, I think a defining <a href=\"https://peps.python.org/pep-0586/#shortening-unions-of-literals\">union of string literals</a> should be sufficient? So it can be something like <code>PropagateMode = Literal[\"change_all\", \"change_later\", \"something_else\"]</code>.</p>",
  "<p>Oh, wow, yeah that's a way simpler way to get to a better state for in-editor feedback, I like that</p>",
  "<p>Finally got a new import to test this on... Of course the one time I'm <img alt=\":patientlywaiting:\" class=\"emoji\" src=\"/user_avatars/2/emoji/images/179.gif\" title=\"patientlywaiting\"> for a Slack export, it's <span aria-label=\"cricket\" class=\"emoji emoji-1f997\" role=\"img\" title=\"cricket\">:cricket:</span> ... <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
  "<p>adding the filter to the outer WHERE makes a small difference, but most of the time is spent on the subquery. Bounding that speeds it up substantially.</p>",
  "<p>Original: <code>Time: 126680.959 ms (02:06.681)</code><br>\nOuter WHERE: <code>Time: 38408.769 ms (00:38.409)</code><br>\nSubquery WHERE: <code>Time: 42.654 ms</code></p>",
  "<p>Much of the difference between the Original and Outer are due to caching. They are almost the same when run hot.</p>",
  "<p>Created <a href=\"https://github.com/zulip/zulip/pull/23432\">#23432</a></p>",
  "<p>We already have <code>EditPropagateMode = Literal...</code> of that form in the Python API.</p>",
  "<p>While it's good to maintain isolation, I would welcome combination of those kinds of type definitions between the backend and Python API.</p>",
  "<p>Finished the SCRAM parts of <a href=\"https://github.com/zulip/docker-zulip/pull/368\">#DZ368</a> It was actually not Python's fault, it was PEBKAC. <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
  "<p>(<a href=\"https://github.com/zulip/docker-zulip/pull/368\">#DZ368</a>.)</p>",
  "<p>fixed, thanks <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span></p>",
  "<p>Yay, thanks for fixing this!</p>",
  "<p>OK, this looks great; went ahead and merged it.</p>",
  "<p>I just did an import and forgot to swap my mangled file in <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> 6 minute spin ...</p>",
  "<p>Hey, it has the upside of freshening up every <code>first_message_id</code> on the server.  Just in case. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>What do we think our plan should be from here? Here's a proposal:</p>\n<ul>\n<li>Try to get some Docker users to follow these instructions just to QA it, perhaps via posting to <a class=\"stream\" data-stream-id=\"1\" href=\"/#narrow/stream/1-announce\">#announce</a>. Draft here: <a href=\"#narrow/stream/3-backend/topic/postgres.2010.20EOL/near/1459508\">https://chat.zulip.org/#narrow/stream/3-backend/topic/postgres.2010.20EOL/near/1459508</a></li>\n<li>Add a note to the zulip/zulip \"Upgrade notes\" section in the changelog referencing this. <a href=\"https://github.com/zulip/zulip/pull/23442\">#23442</a>.</li>\n<li>Send an email to <code>zulip-announce@</code> advertising that folks will need to do this upgrade before upgrading to Zulip 6.0.</li>\n<li>Merge a change to <code>docker-zulip</code> before Zulip 6.0 that changes the default image to use to the Postgres 14 image. This is <a href=\"https://github.com/zulip/docker-zulip/pull/369\">#DZ369</a>.</li>\n<li>Maybe advertise this in the top-level section of upgrading docker-zulip on its docs.</li>\n</ul>\n<p>Thoughts?</p>",
  "<p>The last point is <a href=\"https://github.com/zulip/docker-zulip/pull/369\">#DZ369</a></p>",
  "<p>Which, actually, isn't a no-op in some cases.  It looks like we don't re-calculate the value if the first message in the stream is deleted.</p>",
  "<p>is it ever actually used after the second message gets added, though?</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/23442\">#23442</a> is a proposed changelog \"Upgrade notes\" update.</p>",
  "<p>one typo, but LGTM other than that</p>",
  "<p>/me hums Wild Horses</p>",
  "<p>\"in<span aria-label=\"horse racing\" class=\"emoji emoji-1f3c7\" role=\"img\" title=\"horse racing\">:horse_racing:</span>\"</p>",
  "<p>Draft <a class=\"stream\" data-stream-id=\"1\" href=\"/#narrow/stream/1-announce\">#announce</a> post:</p>\n<blockquote>\n<p>Hey folks! We've completed the promised instructions for upgrading Postgres in <code>docker-zulip</code>:</p>\n<p><a href=\"https://github.com/zulip/docker-zulip/#upgrading-zulipzulip-postgresql-to-14\">https://github.com/zulip/docker-zulip/#upgrading-zulipzulip-postgresql-to-14</a></p>\n<p>Most Docker users will need to complete this upgrade before upgrading to Zulip 6.0, since we're dropping support for the previous default of Postgres 10 due to its approaching end-of-life upstream. </p>\n<p>If you are using docker-zulip, we recommend doing this database upgrade now.</p>\n<p>We'd love to hear any and all feedback on these instructions in <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/postgres.2010.20EOL\">#backend &gt; postgres 10 EOL</a>.</p>\n</blockquote>",
  "<p>Did we want to test support for Postgres 15 and integrate that as a beta thing in Zulip 6.0? I think I'm also fine with just backporting that sort of thing if folks would rather spend their attention elsewhere next week, but usually new Postgres versions are easy to add support for.</p>",
  "<p>I generally wait for at least one dot release before a major PG upgrade <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  That said, the chatter on 15 is not as disastrous as many previous major revs.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/191-kandra-support/topic/Slack.20Import/near/1459494\">said</a>:</p>\n<blockquote>\n<p>Which, actually, isn't a no-op in some cases.  It looks like we don't re-calculate the value if the first message in the stream is deleted.</p>\n</blockquote>\n<p>Looking at how we use this, I think it probably would have some value to recalculate this in that case; basically we have an optimization that's primarily relevant for newly created streams that uses it.</p>",
  "<p>Specifically, this is used to avoid showing \"more topics\" in streams where we might know we have all the messages in that stream in our local cache, without having to first ask the server about topics in the stream.</p>",
  "<div class=\"codehilite\"><pre><span></span><code>    // Now, we can just compare the first cached message to the first\n    // message ID in the stream; if it&#39;s older, we&#39;re good, otherwise,\n    // we might be missing the oldest topics in this stream in our\n    // cache.\n    const first_cached_message = all_messages_data.first();\n    return first_cached_message.id &lt;= sub.first_message_id;\n</code></pre></div>",
  "<p>Since it's used as a bound (the <code>first_cached_message</code> field is a global minimum for your \"all recent messages\" cache), it mostly doesn't matter if the message doesn't exist.</p>",
  "<p>Interesting! Still, importing a new Slack org isn't the right time to rerun that. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Maybe a nightly job? <img alt=\":shrug:\" class=\"emoji\" src=\"/user_avatars/2/emoji/images/31.png\" title=\"shrug\"></p>",
  "<p>Yeah, I think we might just test that Zulip's test suite passes against it, and fix anything that fails.</p>",
  "<p>Hmmmm.  On a brand new server:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">first_message_id</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_stream</span><span class=\"w\"> </span><span class=\"k\">order</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"go\"> id |   name    | first_message_id</span>\n<span class=\"go\">----+-----------+------------------</span>\n<span class=\"go\">  1 | general   |                5</span>\n<span class=\"go\">  2 | core team |                2</span>\n<span class=\"go\">(2 rows)</span>\n\n<span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"n\">zerver_stream</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"n\">first_message_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subquery</span><span class=\"mf\">.</span><span class=\"n\">first_message_id</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"mf\">.</span><span class=\"n\">type_id</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"mf\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">first_message_id</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"n\">zerver_recipient</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"mf\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"mf\">.</span><span class=\"n\">recipient_id</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"mf\">.</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"mf\">.</span><span class=\"n\">type_id</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">subquery</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">zerver_stream</span><span class=\"mf\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subquery</span><span class=\"mf\">.</span><span class=\"n\">id</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"go\">UPDATE 2</span>\n<span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">first_message_id</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_stream</span><span class=\"w\"> </span><span class=\"k\">order</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"go\"> id |   name    | first_message_id</span>\n<span class=\"go\">----+-----------+------------------</span>\n<span class=\"go\">  1 | general   |                3</span>\n<span class=\"go\">  2 | core team |                2</span>\n<span class=\"go\">(2 rows)</span>\n<span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">recipient_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">date_sent</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"mf\">4</span><span class=\"p\">,</span><span class=\"mf\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"go\"> id | recipient_id |           date_sent</span>\n<span class=\"go\">----+--------------+-------------------------------</span>\n<span class=\"go\">  3 |            8 | 2022-11-04 18:40:49.433168+00</span>\n<span class=\"go\">  4 |            8 | 2022-11-04 18:40:49.457284+00</span>\n<span class=\"go\">  5 |            8 | 2022-11-04 18:40:49.47955+00</span>\n<span class=\"go\">(3 rows)</span>\n</code></pre></div>",
  "<p>So it looks like we're not even setting it right during some initial creation steps</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"24078\">Matt Keller</span> <a href=\"#narrow/stream/191-kandra-support/topic/Slack.20Import/near/1459524\">said</a>:</p>\n<blockquote>\n<p>Interesting! Still, importing a new Slack org isn't the right time to rerun that. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Maybe a nightly job? <img alt=\":shrug:\" class=\"emoji\" src=\"/user_avatars/2/emoji/images/31.png\" title=\"shrug\"></p>\n</blockquote>\n<p>I think probably adding a special case to message deletion is what we want.  Hm, and I guess message moves could also adjust which is the first message.</p>",
  "<p>Yeah, I think that sort of <code>Literal</code> type is probably a fairly reasonable approach for this sort of thing.</p>",
  "<p>.. but would we want message deletion to be delayed with a racey update? It just seems a lot to ask from a user-initiated operation. 45ms isn't eternity, but...</p>",
  "<p>So here's some of the examples that <span class=\"user-mention\" data-user-id=\"25085\">@Josh Klar</span> tracked down using grep:</p>\n<div class=\"codehilite\"><pre><span></span><code>zerver/tests/test_realm_playgrounds.py:        resp = self.api_post(iago, &quot;/json/realm/playgrounds&quot;, payload)\nzerver/tests/test_realm_playgrounds.py:            resp = self.api_post(iago, &quot;/json/realm/playgrounds&quot;, payload)\nzerver/tests/test_realm_playgrounds.py:        resp = self.api_post(iago, &quot;/json/realm/playgrounds&quot;, payload)\nzerver/tests/test_realm_playgrounds.py:        resp = self.api_post(iago, &quot;/json/realm/playgrounds&quot;, payload)\nzerver/tests/test_realm_playgrounds.py:        resp = self.api_post(iago, &quot;/json/realm/playgrounds&quot;, payload)\nzerver/tests/test_realm_playgrounds.py:        resp = self.api_post(iago, &quot;/json/realm/playgrounds&quot;, payload)\nzerver/tests/test_realm_playgrounds.py:        resp = self.api_post(hamlet, &quot;/json/realm/playgrounds&quot;)\n</code></pre></div>",
  "<p>The bit that is surprising is that I had thought that URLs starting with <code>/json/</code> only checked session authentication, ignoring API key authentication. And these tests don't seem to do a \"login\" and thus have a valid session cookie.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> do you want to take up this investigation? I feel like your recent experience refactoring the <code>rest_path</code> code path will be helpful for debugging this.</p>",
  "<p>Sure, looking at it now.</p>",
  "<p>I would expect those <code>api_post</code> calls to fail with the <code>/json/</code> style URLs; so ideally we'd figure out if that is indeed a bug, and if so, fix it as well as sweep the tests that might be relying on it.</p>",
  "<p>I think the problem lies in <code>zerver.lib.rest</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"/api\"</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Authenticated via sessions framework, only CSRF check needed</span>\n        <span class=\"n\">auth_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\"override_api_url_scheme\"</span> <span class=\"ow\">in</span> <span class=\"n\">view_flags</span><span class=\"p\">:</span>\n            <span class=\"n\">auth_kwargs</span><span class=\"p\">[</span><span class=\"s2\">\"skip_rate_limiting\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">target_function</span> <span class=\"o\">=</span> <span class=\"n\">csrf_protect</span><span class=\"p\">(</span><span class=\"n\">authenticated_json_view</span><span class=\"p\">(</span><span class=\"n\">target_function</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">auth_kwargs</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># most clients (mobile, bots, etc) use HTTP basic auth and REST calls, where instead of</span>\n    <span class=\"c1\"># username:password, we use email:apiKey</span>\n    <span class=\"k\">elif</span> <span class=\"s2\">\"Authorization\"</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Wrap function with decorator to authenticate the user before</span>\n        <span class=\"c1\"># proceeding</span>\n        <span class=\"n\">target_function</span> <span class=\"o\">=</span> <span class=\"n\">authenticated_rest_api_view</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_webhook_access</span><span class=\"o\">=</span><span class=\"s2\">\"allow_incoming_webhooks\"</span> <span class=\"ow\">in</span> <span class=\"n\">view_flags</span><span class=\"p\">,</span>\n        <span class=\"p\">)(</span><span class=\"n\">target_function</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Usually prior to accessing a <code>/json/</code> endpoint in the test suite, we use <code>self.login_user</code> to get an authenticated session.<br>\nThis is not the case in <code>test_realm_playgrounds</code>. So <code>not request.path.startswith(\"/api\") and request.user.is_authenticated</code> evaluates to <code>False</code>,<br>\nand since <code>api_post</code> sets the <code>Authorization</code> header, we proceed to</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">target_function</span> <span class=\"o\">=</span> <span class=\"n\">authenticated_rest_api_view</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_webhook_access</span><span class=\"o\">=</span><span class=\"s2\">\"allow_incoming_webhooks\"</span> <span class=\"ow\">in</span> <span class=\"n\">view_flags</span><span class=\"p\">,</span>\n        <span class=\"p\">)(</span><span class=\"n\">target_function</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>without verifying if the endpoint actually is for api.</p>",
  "<p>Logically, it is a bug <em>because</em> it allows the user to access views where HTTP basic auth is not allowed.</p>",
  "<p>I'm not sure if there is anything out there that relies on the behavior (i.e. a bot that uses its <code>email:api_key</code> to access json endpoints), but if there is any they should have just switched to the correct <code>/api/</code> URL instead.</p>",
  "<p>This bug also allows the client to access views that are <code>/json/</code>-only, namely <code>json/fetch_api_key</code> and <code>json/subscriptions/exists</code>, with an API key.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/23444\">#23444</a></p>",
  "<p>I moved these messages here from an internal Kandra stream.</p>",
  "<p>We could take a lock on the stream row as part of updating it, which I think would eliminate the race.  Though there's a chance of deadlocks if there's anything else which takes locks on both messages and streams in the opposite order -- but I can't think of any offhand.</p>",
  "<p>I guess I'm not sure what the user-visible harm is if we have a value here which is (a) too low because we moved some messages to a different stream, or (b) too high because we moved some messages <em>from</em> a different stream.</p>",
  "<p>I think deleting messages is fairly rare, but moving them is more common. Locking the stream row would be fine, I suppose, although I think you'd have to lock both the source and destination (in the case of a move) which could then <em>really</em> be a candidate for deadlocks... And also of dubious value since unless the delete-or-move contains the first-message, or becomes a new first-message, it's moot. I would guess, that move-destinations are more common to be new first-message, then a move-source containing the first message as that case would typically just be a stream rename, I'd think.</p>",
  "<p>It would not be hard to make the message moving code update this field for the destination stream: Just check if the lowest moved message ID is lower than <code>first_message_id</code>, and if so, update it. </p>\n<p>That said, we have an index on <code>message.recipient</code>, so just doing a targeted to involved streams UPDATE operation as part of the message move/deletion code paths would be pretty easy; I'd expect it to take just a couple milliseconds to run.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span> <a href=\"#narrow/stream/3-backend/topic/api_*.20methods.20in.20tests.20still.20pass.20against.20.2Fjson.20URLs/near/1459557\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if there is anything out there that relies on the behavior (i.e. a bot that uses its <code>email:api_key</code> to access json endpoints), but if there is any they should have just switched to the correct <code>/api/</code> URL instead.</p>\n</blockquote>\n<p>Yeah, I feel confident enough that such clients should be rare to just change it; the fix for users is trivial and we've never at any point documented/suggested using the /json/ endpoints with API key authentication.</p>",
  "<p>However, one thing that we need to be careful about is that there's a handful of views, like to access uploaded files, that start with neither <code>/api</code> nor <code>/json</code>, and those need to allow both forms of authentication.</p>",
  "<p>(But maybe those are handled earlier in the function?)</p>",
  "<p>Yeah, that's the <code>override_api_url_scheme</code> cases above. So this should be OK.</p>",
  "<p>Wouldn't there need to be two checks? One of the source, if the lowest moved message ID <em>is</em> the <code>first_message_id</code> then troll the entire stream to find the new one.... <strong><em>and</em></strong> check if the lowest moved message ID is lower than <code>first_message_id</code>, and if so, update it.</p>",
  "<p>Well I think we effectively want to do this:</p>\n<p><code>stream.first_message_id = Message.objects.filter(recipient=stream.recipient).first().id</code> </p>\n<p>for both source and destination streams.</p>",
  "<p>That query is a simple index scan, so should be more or less immediate; and doesn't rely on assumptions about how much the moved messages may have included that message ID or not.</p>",
  "<p>Hmm, it might be an issue if there are paths that rely on the catch-all clause which is now updated. <code>override_api_url_scheme</code> should always be enforced for non-json/api paths that require authentication.</p>",
  "<p>We could certainly optimize further by looking at whether the message IDs moved are all larger than the existing <code>first_message_id</code> values, which they almost always will be, just because streams tend to have tons of topics, and so most moves are unlikely to touch the one containing the very oldest message. But it'd probably be fine even if we didn't; moving messages between streams is infrequent and expensive enough that a couple cheap queries won't make much difference.</p>",
  "<p>Moving the outstanding question from <a href=\"https://github.com/zulip/zulip/pull/22949\">#22949</a> here:</p>\n<blockquote>\n<p>There are two risks in adding the <code>*.*</code> class of thing in the common supervisord configuration:</p>\n<ul>\n<li>It may trigger a <code>supervisor</code> restart on upgrade, which can be more disruptive than other upgrades.</li>\n<li>I don't know if there might be some silly interactions with auto-generated editor backup files that aren't already present with the existing wildcard.</li>\n</ul>\n<p>We have the option of making the <code>supervisord.conf</code> configuration changes conditional in some way, if we feel that's useful. Thoughts?</p>\n</blockquote>",
  "<p>Hi All, Currently run a Openfire server with about 3500 users combined.  We have a requirement from clients we work for as well as our own internal HR and InfoSec teams to be able to pull both public and private chat logs when requests.  We also have some labour board stuff as well.  Has any improvements been made to this part of Zulip?   last time I checked it was when Covid first started and it seemed to be a lot of manual scripts and stuff you had to do to get logs,   I have people who are used to one click Openfire log access when needed.  I don't want to be the one person who can only pull logs when needed. I've been avoiding deploying Zulip for this reason.</p>",
  "<p>We don't have any UI for providing those sorts of logs, no.</p>\n<p>Can you talk a little bit about how you'd ideally like such functionality to work?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Compliance.20Logging/near/1460393\">said</a>:</p>\n<blockquote>\n<p>We don't have any UI for providing those sorts of logs, no.</p>\n<p>Can you talk a little bit about how you'd ideally like such functionality to work?</p>\n</blockquote>\n<p><a href=\"/user_uploads/2/df/GD1q4k4kYjhuASq5AtA11-Tt/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/df/GD1q4k4kYjhuASq5AtA11-Tt/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/df/GD1q4k4kYjhuASq5AtA11-Tt/image.png\"></a></div><p>This is all we get for Openfire,  put in the two users AD accounts, put in a date and we get a list of all the chats and then can export to PDF. Even something this basic would be nice.  But it would need both public and private chats.</p>",
  "<p>Is PDF your preferred export format -- and why, if so?</p>",
  "<p>And who has access to pull these logs through the UI, and is there an audit trail on people who do that?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Compliance.20Logging/near/1460403\">said</a>:</p>\n<blockquote>\n<p>Is PDF your preferred export format -- and why, if so?</p>\n</blockquote>\n<p>No, just all Openfire offers.  I'll take a .csv file, to be honest.  Hell, even basic HTML I can just copy and paste off a webpage.  Sometimes the requests are for a few lines, sometimes someone from HR has to go over days because one employee said something to another one.  The same issues any business faces.<br>\nOnly the two sysadmins right now can pull logs, we do not allow anyone else.  But for your next question. An audit trail would be nice but not a requirement.</p>",
  "<p>This (audit trails) reminds me of the \"Immutable Stream\" feature I was half-heartedly looking into implementing to assuage compliance at PrevCo.</p>",
  "<p>We have a Gov requirement and our clients like it as well of 365 days of chat and email logs.</p>",
  "<p>Perhaps <code>MAINTAIN_PGROONGA_INDEX</code>?</p>",
  "<p>The safest bet is certainly to hide it behind a conditional, just for zmirror, and to only include that directory.</p>",
  "<p>I don't know that we have anything else that has required a supervisor restart in a while, and those are certainly disruptive.</p>",
  "<p>I think there might theoretically be a clean way to express this that uses <code>concat</code>, or <a href=\"https://puppet.com/docs/puppet/6/lang_collectors.html\">collectors</a> to make zmirror able to add a directory and have supervisor's config file pick that up.</p>",
  "<p>So in <a href=\"https://github.com/zulip/zulip/pull/22956\">#22956</a>, we started documenting using <code>scripts/get-django-setting</code> on a dictionary object; the result looks kinda bad due to no line-wrapping:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./scripts/get-django-setting RATE_LIMITING_RULES\n{&#39;api_by_user&#39;: [(60, 200)], &#39;api_by_ip&#39;: [(60, 100)], &#39;api_by_remote_server&#39;: [(60, 1000)], &#39;authenticate_by_username&#39;: [(1800, 5)], &#39;email_change_by_user&#39;: [(3600, 2), (86400, 5)], &#39;password_reset_form_by_email&#39;: [(3600, 2), (86400, 5)], &#39;sends_email_by_ip&#39;: [(86400, 5)], &#39;spectator_attachment_access_by_file&#39;: [(86400, 1000)]}\n</code></pre></div>",
  "<p>I'm not sure what the best way to get a pretty-printer is; one option is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/scripts/get-django-setting b/scripts/get-django-setting\nindex 9557b3abad..057ec0fcd2 100755\n--- a/scripts/get-django-setting\n+++ b/scripts/get-django-setting\n@@ -1,5 +1,6 @@\n #!/usr/bin/env python3\n import os\n+import pprint\n import sys\n\n BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n@@ -11,4 +12,4 @@ setup_path()\n os.environ[&quot;DJANGO_SETTINGS_MODULE&quot;] = &quot;zproject.settings&quot;\n from django.conf import settings\n\n-print(getattr(settings, sys.argv[1]))\n+pprint.pp(getattr(settings, sys.argv[1]))\n</code></pre></div>",
  "<p>Here's a few more samples of current output:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./scripts/get-django-setting ADMINS\n((&#39;Zulip Administrator&#39;, &#39;desdemona+admin@zulip.com&#39;),)\n$ ./scripts/get-django-setting ZULIP_ADMINISTRATOR\ndesdemona+admin@zulip.com\n$ ./scripts/get-django-setting AUTHENTICATION_BACKENDS\n(&#39;zproject.backends.DevAuthBackend&#39;, &#39;zproject.backends.EmailAuthBackend&#39;, &#39;zproject.backends.GitHubAuthBackend&#39;, &#39;zproject.backends.GoogleAuthBackend&#39;, &#39;zproject.backends.SAMLAuthBackend&#39;, &#39;zproject.backends.GitLabAuthBackend&#39;, &#39;zproject.backends.AppleAuthBackend&#39;, &#39;zproject.backends.GenericOpenIdConnectBackend&#39;, &#39;zproject.backends.ZulipDummyBackend&#39;)\n</code></pre></div>",
  "<p>Here's output using this <code>pprint</code> tool:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./scripts/get-django-setting RATE_LIMITING_RULES\n{&#39;api_by_user&#39;: [(60, 200)],\n &#39;api_by_ip&#39;: [(60, 100)],\n &#39;api_by_remote_server&#39;: [(60, 1000)],\n &#39;authenticate_by_username&#39;: [(1800, 5)],\n &#39;email_change_by_user&#39;: [(3600, 2), (86400, 5)],\n &#39;password_reset_form_by_email&#39;: [(3600, 2), (86400, 5)],\n &#39;sends_email_by_ip&#39;: [(86400, 5)],\n &#39;spectator_attachment_access_by_file&#39;: [(86400, 1000)]}\n$ ./scripts/get-django-setting ZULIP_ADMINISTRATOR\n&#39;desdemona+admin@zulip.com&#39;\n$ ./scripts/get-django-setting ADMINS\n((&#39;Zulip Administrator&#39;, &#39;desdemona+admin@zulip.com&#39;),)\n$ ./scripts/get-django-setting AUTHENTICATION_BACKENDS\n(&#39;zproject.backends.DevAuthBackend&#39;,\n &#39;zproject.backends.EmailAuthBackend&#39;,\n &#39;zproject.backends.GitHubAuthBackend&#39;,\n &#39;zproject.backends.GoogleAuthBackend&#39;,\n &#39;zproject.backends.SAMLAuthBackend&#39;,\n &#39;zproject.backends.GitLabAuthBackend&#39;,\n &#39;zproject.backends.AppleAuthBackend&#39;,\n &#39;zproject.backends.GenericOpenIdConnectBackend&#39;,\n &#39;zproject.backends.ZulipDummyBackend&#39;)\n</code></pre></div>",
  "<p>The main thing I notice other than formatting more complex objects with more newlines is that strings appear quoted in its output now.</p>",
  "<p>I think that's probably net helpful -- I imagine in many cases, it's probably clearer if you get back exactly what you had in <code>settings.py</code>, not that with the quotes stripped; though it looks like there's a <code>\"</code> =&gt; <code>'</code> transition happening here, so that's not perfect.</p>",
  "<p>Thoughts on what we should do here? I don't have the time to push further on this, but it seems like switching to <code>pprint</code> with perhaps some configuration (it'd be great if we can set it to quote strings using <code>\"</code> style) would be a clear improvement?</p>",
  "<p>pprint doesn't look to have a quoting configuration parameter:<br>\n<a href=\"https://docs.python.org/3/library/pprint.html\">https://docs.python.org/3/library/pprint.html</a></p>",
  "<p>We could <code>import black</code> and use that to format, but <code>black</code> is dev-only at the moment</p>",
  "<p>for tools, and not ever-running \"server\" code, I would think that would be ok.</p>",
  "<p>FWIW, Black formats that AUTH_BACKENDS as:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"p\">(</span>\n    <span class=\"s2\">\"zproject.backends.DevAuthBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.EmailAuthBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.GitHubAuthBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.GoogleAuthBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.SAMLAuthBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.GitLabAuthBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.AppleAuthBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.GenericOpenIdConnectBackend\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"zproject.backends.ZulipDummyBackend\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>RATE_LIMITS..</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"p\">{</span>\n    <span class=\"s2\">\"api_by_user\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"api_by_ip\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"api_by_remote_server\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"authenticate_by_username\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">1800</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"email_change_by_user\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">86400</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"password_reset_form_by_email\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">86400</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"sends_email_by_ip\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">86400</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"spectator_attachment_access_by_file\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">86400</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)],</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
  "<p>Which would be:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/scripts/get-django-setting b/scripts/get-django-setting</span><span class=\"w\"></span>\n<span class=\"gh\">index 9557b3abad..c5339f94f5 100755</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/scripts/get-django-setting</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/scripts/get-django-setting</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -1,6 +1,7 @@</span><span class=\"w\"></span>\n<span class=\"w\"> </span>#!/usr/bin/env python3<span class=\"w\"></span>\n<span class=\"w\"> </span>import os<span class=\"w\"></span>\n<span class=\"w\"> </span>import sys<span class=\"w\"></span>\n<span class=\"gi\">+import black</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<span class=\"w\"></span>\n<span class=\"w\"> </span>sys.path.append(BASE_DIR)<span class=\"w\"></span>\n<span class=\"gu\">@@ -11,4 +12,4 @@ setup_path()</span><span class=\"w\"></span>\n<span class=\"w\"> </span>os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"zproject.settings\"<span class=\"w\"></span>\n<span class=\"w\"> </span>from django.conf import settings<span class=\"w\"></span>\n\n<span class=\"gd\">-print(getattr(settings, sys.argv[1]))</span><span class=\"w\"></span>\n<span class=\"gi\">+print(black.format_str(str(getattr(settings, sys.argv[1])), mode=black.Mode()))</span><span class=\"w\"></span>\n</code></pre></div>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/23469\">#23469</a>, we have a report of Slack data import not working with Zulip 6.0-rc1, because it can't find an emoji data file. Based on the traceback, I'm pretty sure the issue is that the file we're accessing is not available in release tarballs; you only have it if you did <code>upgrade-zulip-from-git</code>.</p>",
  "<p>We'd have to move <code>black</code> to a production dependency, but maybe that's OK. </p>\n<p>I imagine the colorization is probably helpful? I'm trying to think about whether there's a situation where it'd be a downside to have it.</p>",
  "<p>OK. I guess let's leave this unmerged for 6.0; it seems not worth the disruption at this phase of the release cycle, at least.</p>",
  "<p>Yeah, that seems like a satisfying name.</p>",
  "<p><code>black</code> doesn't do any colorization?</p>",
  "<p>Oh, right, that's just the code blocks doing the colors. I'm a bit tired <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>I think probably it's worth doing <code>black</code> here for the more consistent quoting.</p>",
  "<p>This would be quite broken for string settings\u2014for example, in <code>postgresql-init-dev-db</code> we run <code>scripts/get-django-setting LOCAL_DATABASE_PASSWORD</code>, which needs to output (say) <code>my=password</code> and would be incorrectly rewritten to <code>'my=password'</code> by <code>pprint</code> or <code>my = password</code> by <code>black</code>.</p>",
  "<p>Also, this script is performance-sensitive and should not waste time importing giant formatting modules.</p>",
  "<p>In my ideal world, we would completely divorce Zulip\u2019s settings from the Django settings system, and merge it with <code>zulip.conf</code>. The INI format of <code>zulip.conf</code> is too limited, but a single TOML file would work well.</p>",
  "<p>Of all the commented and uncommented Zulip settings in <code>prod_settings_template.py</code>, only 7 of them are actually Django settings: <code>ALLOWED_HOSTS</code>, <code>EMAIL_HOST</code>, <code>EMAIL_HOST_USER</code>, <code>EMAIL_USE_TLS</code>, <code>EMAIL_PORT</code>, <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code>, and <code>SESSION_COOKIE_AGE</code>.</p>",
  "<p>And I guess many of the <code>SOCIAL_AUTH_*</code> settings are passed directly to social-auth-app-django.</p>",
  "<p>I think that's true for the LDAP settings as well.</p>",
  "<p>It sounds like a good plan to me to switch back to the default engine until we can fix the various bugs with the PGroonga engine.</p>",
  "<blockquote>\n<p>Believe or not, I had shingles for second time in my life, and then caught cold. I am recovering very slowly.</p>\n</blockquote>\n<p>FYI. It took very long to recover but I might be able to resume working on this in late December.</p>",
  "<p>Because of my health condition, I had to stop all OSS activities between August and mid October and just focused on my full time job. After mid October, I gradually increased my OSS activities. Here is the commit numbers of my own library:</p>\n<p><a href=\"https://github.com/moka-rs/moka/graphs/contributors?from=2022-06-22&amp;to=2022-11-17&amp;type=c\">https://github.com/moka-rs/moka/graphs/contributors?from=2022-06-22&amp;to=2022-11-17&amp;type=c</a><br>\n<a href=\"/user_uploads/2/dd/-57AakDPO3koIQiZUOnxst4P/rust-moka-cache.png\">rust-moka-cache.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/dd/-57AakDPO3koIQiZUOnxst4P/rust-moka-cache.png\" title=\"rust-moka-cache.png\"><img src=\"/user_uploads/2/dd/-57AakDPO3koIQiZUOnxst4P/rust-moka-cache.png\"></a></div>",
  "<p>For next 30 or 40 days, I will be busy working with my own library, and also busy for writing some articles asked by a Japanese publisher. So I am hoping that I will be able to resume working on this in late December.</p>",
  "<p>Meanwhile, my Zulip community has grown to 550 users (who speak Japanese). And I am also participating another Zulip community with 130 Japanese speakers. So I still really want to make this happen <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
  "<p>I opened <a href=\"https://github.com/zulip/zulip/pull/23601\">#23601</a> to rename our exception classes with an <code>Error</code> suffix in accordance with <a href=\"https://peps.python.org/pep-0008/#exception-names\">PEP 8</a>. Tim suggested posting here to get more eyes on it.</p>",
  "<p>I'd appreciate casual feedback here; I think the change is an improvement, but big renames are always worth some discussion in advance, since it churns the codebase less if we want to change any conventions before merging.</p>",
  "<p>I agree with the extra linting in general (go ruff!).</p>\n<p>Structurally it seems that some are easy direct naming changes (+<code>Error</code>, or <code>Exception</code>-&gt;<code>Error</code>), while some are either renames (eg. remove Zulip prefix) or add a suffix but leave the exception names... not so descriptive. On that basis I'd split the commit into the former and latter, to separate the simple add/switch situation from where thought goes into specific renaming. I don't know the code well enough to suggest if some of the short exception names could be more descriptive, but <code>Invalid</code>, <code>Custom</code> and <code>Diff</code> seem rather terse just reading the summary :)</p>\n<p>That said, I understand the push to get consistent names ASAP before the release, so maybe just skip active renaming and stick with adding a suffix or switching to the preferred suffix, and handle any smaller name improvements later?</p>",
  "<p>Well the release is out, but this is the kind of refactor that's easy to backport.</p>",
  "<p>I did all the naming manually, just mostly following that pattern. Individual changes are easy enough to make.</p>",
  "<p>A slim majority of our errors are already named <code>\u2026Error</code> (59 vs. 47), so this increases internal consistency too.</p>",
  "<p>We seem to have broken certbot integration with docker-zulip. It creates a broken symlink where the certificate should be.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">root@70b1222620d1:/# </span>namei /etc/ssl/certs/zulip.combined-chain.crt\n<span class=\"go\">f: /etc/ssl/certs/zulip.combined-chain.crt</span>\n<span class=\"go\"> d /</span>\n<span class=\"go\"> d etc</span>\n<span class=\"go\"> d ssl</span>\n<span class=\"go\"> d certs</span>\n<span class=\"go\"> l zulip.combined-chain.crt -&gt; /data/certs/zulip.combined-chain.crt</span>\n<span class=\"go\">   d /</span>\n<span class=\"go\">   d data</span>\n<span class=\"go\">   d certs</span>\n<span class=\"go\">     zulip.combined-chain.crt - No such file or directory</span>\n</code></pre></div>",
  "<p>Sigh.</p>",
  "<p>Between 4.8-1 and 4.9-0, we backported <a href=\"https://github.com/zulip/zulip/pull/20512\">#20512</a> and started unconditionally installing <code>certbot</code>, resulting in <code>/etc/letsencrypt</code> existing in the base image, so <a href=\"https://github.com/zulip/docker-zulip/blob/5.7-0/entrypoint.sh#L54\">this symlink</a> never happens. But there\u2019s Definitely No Way\u2122 it\u2019s been broken for that long, right?</p>",
  "<p>I feel like someone would have reported it, but who knows?</p>",
  "<p>Interesting. It\u2019s indeed been broken for that long.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/docker-zulip.20certbot/near/1466988\">said</a>:</p>\n<blockquote>\n<p>I feel like someone would have reported it, but who knows?</p>\n</blockquote>\n<p>I could imagine a world where folks mostly run the containerized build behind some TLS-terminating LB and never run into this problem perhaps, but yeah, zero reports still would seem odd.</p>",
  "<p>We do push people away from Docker, so volume may be low and there is likely some correlation between Docker and having corporate networks where you do your own certs, but still a little surprising.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span>: Are you working on the fix, or should I poke?</p>",
  "<p>I have not yet poked further. Feel free to poke if you are looking for something to poke, or I can poke later.</p>",
  "<p>Hello Everyone , when i install zulip , it's create database called \"zulip_base\" , <br>\nwhat this database for ?<br>\nOtherwise i didn't find  new users in zulip databae !!<br>\nany clearifications plz ?</p>",
  "<p>Hello Everyone , when i install zulip , it's create database called \"zulip_base\" ,<br>\nwhat this database for ?<br>\nOtherwise i didn't find new users in zulip databae !!<br>\nany clearifications plz ?</p>",
  "<p>Now that <a href=\"https://github.com/nix-community/poetry2nix/issues/627\">https://github.com/nix-community/poetry2nix/issues/627</a> has been fixed, I will try to make some progress here.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25265\">@Mohannad Irshedat</span>: The <code>zulip_base</code> database is used in the development environment -- we use it to have a correctly-configured empty database to (re)build the <code>zulip</code> development database from.  The data is stored in the <code>zulip</code> database.</p>",
  "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"95\" href=\"/#narrow/stream/95-new-members/topic/Deekshith.20Shetty\">#new members &gt; Deekshith Shetty</a> by <span class=\"user-mention silent\" data-user-id=\"21836\">Lauryn Menard</span>.</p>",
  "<p>I think we\u2019re still missing <code>subdirectory</code> support.</p>",
  "<p>Do we need to set up events to live update scheduled messages for all clients that display it locally? Right now, I only have introduced this <a href=\"https://github.com/zulip/zulip/pull/23670/commits/f4efa0404630e7126aa30f408c54ff5e6b817449\">function</a>, which helps the client get the current data of all scheduled messages.</p>",
  "<p>I think it's fine to fetch them when loading the panel for a first version.</p>",
  "<p>Okay!</p>",
  "<p>Based on discussion <a href=\"https://github.com/zulip/zulip/pull/23670#discussion_r1033014365\">here</a>,  are there any benefits to storing an already sent scheduled message in the database with <code>delivered=True</code> tag or should we just delete them?</p>",
  "<p>Keeping more data around seems useful, and I don't foresee any issues with the indexes or size of the scheduled message table -- so I'd interlink them and keep the rows, I think?</p>",
  "<p>I think that sounds right to me.</p>",
  "<p>Hello, I'm currently taking a crack at <a href=\"https://github.com/zulip/python-zulip-api/issues/761\">https://github.com/zulip/python-zulip-api/issues/761</a> and wanted to check my understanding of the issue. The proposed solution I'm looking into would set a connection keep-alive at the module level. This means that when we call <code>zulip_client = zulip.Client()</code> the first time, the initial request would set a keep-alive so that the client would not expire and is reusable after the 270s. This would take the place of the current fix, which initializes the client to verify auth information and then reinitializes it again when a message needs to be sent. Am I understanding this correctly?</p>",
  "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/scheduled.20messages.20post.20delivered.20action\">#backend &gt; scheduled messages post delivered action</a> by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25206\">@Ryan Song</span> hmm, I think there's no reason to believe that a new request would happen at any specific time.</p>",
  "<p>The API client should be able to set up a client object and then site there for 320 days and then send a request.</p>",
  "<p>So I had been thinking of something more in the direction of \"If our TCP connection has been closed when we want to send a request, reopen it transparently\"</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> got it, thank you. Does this mean that the fixed code flow should look something like this?: </p>\n<ol>\n<li>The Zulip client gets initialized</li>\n<li>The Zulip client times out/the TCP connection closes</li>\n<li>When we attempt to send a request, an error gets thrown because the TCP connection is closed</li>\n<li>Because this error is thrown, we reopen the TCP connection and retry sending the request</li>\n</ol>",
  "<p><span class=\"user-mention\" data-user-id=\"25206\">@Ryan Song</span> yes, that's correct!</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> thanks a bunch--I'm conceptually understanding this much better.  I also wanted to ask about where this change would fit into the codebase--I'm a first time contributor, so apologies for the newbie question. I've taken a look at the documentation as well as the zulip/zulip and zulip-python-api repos, however I'm still a little unsure of where to start with the implementation of this change. When we refer to a Zulip client, are we referring to any instantiation of the Zulip app, be it web app, iOS app, etc.?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25206\">@Ryan Song</span> the code involved here is entirely in python-zulip-api; I'd encourage you to just read the main <code>do_api_query</code> code path (or whatever it's called) in that library; it's quite short.</p>",
  "<p>Certainly the bug here is localized to that project, and what I meant by \"Zulip client\" in the above message is literally the <code>zulip.Client</code> Python object defined by that library.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> thanks for helping me out here--I think I understand the code path a lot better. To verify my understanding of this, it seems to me that the first part of the do_api_query function seems to make the API request itself, while the second portion takes care of the error handling. </p>\n<p>It seems like the fix to issue <a href=\"https://github.com/zulip/zulip/pull/761\">#761</a> would take place in the second portion regarding the error handling, and that I would perhaps have to make a new except case for the persistent connection error class (what the specific class name is, I'm not quite sure), and then have this case retry the connection.</p>",
  "<p>Something like that, yeah.</p>",
  "<p>Expanding the discussion from <a href=\"https://github.com/zulip/zulip/pull/23645\">#23645</a>. <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>, <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> could you also give your opinions on this?</p>",
  "<p>Hm.  I don't feel like I go looking through the audit logs frequently enough to have a strong opinion here.  In the abstract, the \"JSON dict with keys named <code>1</code> and <code>2</code> to store old/new values\" pattern is ... very odd, and not really one I would have naturally chosen.  It looks like this came about from <a href=\"https://github.com/zulip/zulip/commit/01bf99ec65af650f019a7997e7dd7ddaf1ca4797\">01bf99ec65af650f019a7997e7dd7ddaf1ca4797</a>, when we started tracking user counts.  Which I <em>guess</em> is useful, in that we can do <a href=\"https://github.com/zulip/zulip/blob/c3475e83ecb0632a28af570a3c96cb2650c5f164/zerver/actions/users.py#L201-L214\">this</a> during role change:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">RealmAuditLog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n        <span class=\"n\">realm</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"o\">.</span><span class=\"n\">realm</span><span class=\"p\">,</span>\n        <span class=\"n\">modified_user</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"p\">,</span>\n        <span class=\"n\">acting_user</span><span class=\"o\">=</span><span class=\"n\">acting_user</span><span class=\"p\">,</span>\n        <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"n\">RealmAuditLog</span><span class=\"o\">.</span><span class=\"n\">USER_ROLE_CHANGED</span><span class=\"p\">,</span>\n        <span class=\"n\">event_time</span><span class=\"o\">=</span><span class=\"n\">timezone_now</span><span class=\"p\">(),</span>\n        <span class=\"n\">extra_data</span><span class=\"o\">=</span><span class=\"n\">orjson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">RealmAuditLog</span><span class=\"o\">.</span><span class=\"n\">OLD_VALUE</span><span class=\"p\">:</span> <span class=\"n\">old_value</span><span class=\"p\">,</span>\n                <span class=\"n\">RealmAuditLog</span><span class=\"o\">.</span><span class=\"n\">NEW_VALUE</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">,</span>\n                <span class=\"n\">RealmAuditLog</span><span class=\"o\">.</span><span class=\"n\">ROLE_COUNT</span><span class=\"p\">:</span> <span class=\"n\">realm_user_count_by_role</span><span class=\"p\">(</span><span class=\"n\">user_profile</span><span class=\"o\">.</span><span class=\"n\">realm</span><span class=\"p\">),</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>...but nothing says that we can't pull the \"common\" keys of old/new values out into their own columns, and leave <code>extra_data</code> for things like that.  I am partial to the argument that putting them into real columns, and not a JSON blob, means that you're less likely to mess up the key names -- for example, ref <a href=\"https://github.com/zulip/zulip/pull/23116#discussion_r1038578336\">this comment</a>.</p>",
  "<p>I guess one thing that's tricky is that we don't know the type of <code>old_value</code> / <code>new_value</code>. One could imagine a world where we have <code>old_value_int</code> / <code>old_value_string</code> / etc., with which ones are not NULL depending on the <code>event_type</code>, so that they can have types and database indexes. Or one could imagine just having them by JSON blobs as proposed in this PR.</p>",
  "<p>I think it's pretty rare that indexes on the values here will actually be useful.</p>",
  "<p>So it's very possible that just pulling old_value/new_value out to independent JSONField columns will be nicer as a programming interface.</p>",
  "<p>Might be worth writing an example bit of Python/Django code for \"Scan for audit log entries where setting X changed from foo to bar\" code for doing some sort of processing with the old API and proposed new API? I think that'd make clear to what extent it'll be nicer.</p>\n<p><span class=\"user-mention\" data-user-id=\"24745\">@Daniel Menezes</span> would you be up for trying that?</p>",
  "<p>Once we make a decision on what exact data model we want to move to, we can push on verifying the migrations so we can integrate them.</p>",
  "<p>The creator of CommonMark just introduced <a href=\"https://github.com/jgm/djot\">djot</a>, a lightweight successor to Markdown with sane parsing rules and extensibility.</p>",
  "<p>Cool! Reading their list of variations from CommonMark on the Rationale page, most of them seem great. The one that I think would be problematic for our context is this:</p>\n<blockquote>\n<p>Block-level elements can't interrupt paragraphs (or headings), because of goal 7. So in djot the following is a single paragraph, not (as commonmark sees it) a paragraph followed by an ordered list followed by a block quote followed by a section heading:</p>\n<div class=\"codehilite\"><pre><span></span><code>My favorite number is probably the number\n1. It&#39;s the smallest natural number that is\n&gt; 0. With pencils, though, I prefer a\n# 2.\n</code></pre></div>\n<p>Commonmark does make some concessions to goal 7, by forbidding lists beginning with markers other than 1. to interrupt paragraphs. But this is a compromise and a sacrifice of regularity and predictability in the syntax. Better just to have a general rule.</p>\n</blockquote>\n<p>Requiring people to put a blank line between text and a list works out very poorly -- Zulip's markup originally worked that way, because Markdown did, and it was a source of constant complaints.</p>",
  "<p>I guess some existing Zulip Markdown extensions we'd need to think about were we building on top of this include:</p>\n<ul>\n<li>Spoiler blocks and math blocks; seems like we could use the same extension strategy on top of code blocks we use today. (Perhaps we could suggest them to <code>djot</code> as options to include in their official syntax, since they're of general interest)</li>\n<li>Linkifiers -- that's something that would need to integrate into the parser somehow, but perhaps could be a postprocessor just fine.</li>\n<li>Implementation considerations like security/runnability in a browser frontend.</li>\n</ul>",
  "<p>I suppose we could consider opening issues in <code>djot</code> for some of those items we'd want with a view towards being able to switch to it without ending up with our own nonstandard model, without first deciding we definitely will be able to.</p>",
  "<p>Math is <a href=\"https://htmlpreview.github.io/?https://github.com/jgm/djot/blob/master/doc/syntax.html#math\">already included</a>.</p>",
  "<p>Only inline math.</p>",
  "<p><code> $`\u2026` </code> is inline, <code> $$`\u2026` </code> is display.</p>",
  "<p>The blank line thing seems to have been <a href=\"https://github.com/jgm/djot/issues/137\">discussed to death</a>. I\u2019m sympathetic to djot\u2019s position: it is unfortunate that re-wrapping a paragraph that happens to contain a number could move the number into a position where it will be reinterpreted as an ordered list marker.</p>\n<p>We could maybe imagine adding a frontend hint like \u201cIt looks like you\u2019re trying to write a list, but you need to insert a blank line. [Fix] [Ignore]\u201d.</p>",
  "<p>I am not optimistic about such a frontend hint being sufficient to have users not be annoyed at us.</p>\n<p>I am sympathetic to his desires from a parser design perspective -- but I also just think many humans find it annoying to have to add a blank line (or will sometimes forget and then be annoyed that their thing is misrendered and feel like it's our fault).</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/djot.2C.20a.20Markdown.20alternative/near/1474457\">said</a>:</p>\n<blockquote>\n<p><code> $`\u2026` </code> is inline, <code> $$`\u2026` </code> is display.</p>\n</blockquote>\n<p>I think that's just what gets passed to LaTeX (math vs. displaymath); unless I'm mistaken, it is an inline thing from the <code>djot</code> processor's perspective, not a block syntax.</p>",
  "<p>I feel like there could be another way to support editors re-wrapping a paragraph -- for example, requiring your re-wrapping software to put a single space at the start of a line if it starts with a number or <code>*</code>.</p>\n<p>So you'd need your line-wrapping software to output this sort of thing instead if it wants it to be a single paragraph:</p>\n<div class=\"codehilite\"><pre><span></span><code>My favorite number is probably the number\n 1. It&#39;s the smallest natural number that is\n &gt; 0. With pencils, though, I prefer a\n # 2. But for now, I&#39;m happy to continue\nthis paragraph without it being treated as a weird block.\n</code></pre></div>",
  "<p>That kind of proposal makes up a good chunk of the existing discussion; I don\u2019t expect further proposals to change how editors work to be received well. Note that CommonMark still interprets that as five blocks.</p>",
  "<p>Well I don't disagree but I do note that proposal may satisfy many of his requirements, which \"just do the commonmark thing\" here does not.</p>",
  "<p>It is sad though. I think it's very possible this space before a list issue will doom adoption for the project, both for us and others.</p>",
  "<p>Okay what about this frontend proposal: if you\u2019re in a paragraph and you press <code>Enter</code>, you get two newlines automatically. (Then you can press <code>Backspace</code> to delete one of them if you really want, or if you immediately press <code>Enter</code> again it\u2019s ignored so you still get the two you were expecting.)</p>",
  "<p>In CommonMark, a numbered list starting from 1 interrupts a paragraph, but not starting from <a href=\"https://spec.commonmark.org/0.30/#example-304\">any other number</a>. This also <a href=\"https://github.com/commonmark/commonmark-spec/issues/599\">confuses</a> <a href=\"https://talk.commonmark.org/t/ordered-sublists-must-start-with-1-or-they-dont-embed/2704\">people</a>.</p>",
  "<p><a href=\"https://talk.commonmark.org/t/blank-lines-before-lists-revisited/1990\">Another long discussion</a>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>  do you know how I might go about testing the dropped TCP connection? I attempted purposely breaking things within the error handling section of <code>do_api_query</code> and running <code>pytest zulip</code>, however it didn't seem to me that this part of the code was covered by these tests.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25206\">@Ryan Song</span> one option you can try is, while using the API against a remote Zulip server, disconnecting your network in between API requests? Not sure if that'll trigger the right error, but it's a thing to try.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/djot.2C.20a.20Markdown.20alternative/near/1474629\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://talk.commonmark.org/t/blank-lines-before-lists-revisited/1990\">Another long discussion</a>.</p>\n</blockquote>\n<p>Thanks for tracking this down! I think <a href=\"https://talk.commonmark.org/t/blank-lines-before-lists-revisited/1990/14\">this comment from codinghorror</a> is probably the crux of the issue:</p>\n<blockquote>\n<p>I feel like this matters because it is arguably one of the things normal people mess up constantly in Markdown, and I mean literally daily:</p>\n</blockquote>\n<p>Normal humans generate bulleted lists without a blank line often, even after knowing this rule in Markdown; and it's just really frustrating.</p>\n<p>Your frontend idea could work, though I'd worry that in the case of bulleted lists, users might go and delete the extra newlines (to make their message more compact in the compose box) and then be annoyed when it doesn't work.</p>",
  "<p>Structurally I think the issue is basically a problem of priorities: needing to automatically hard wrap text where you have a <code>1.</code> in the middle of the paragraph are rare. Wanting to write a bulleted or numbered list and not have it render wrong if you don't follow particular whitespace rules is a common need. (Hard wrapping of paragraphs isn't even a thing one usually does in the Zulip compose box at all).</p>\n<p>A good solution here should make the common need Just Work, at the cost of making hard wrapping a bit messier to implement correctly, and this decision in <code>djot</code> feels like a misprioritization.</p>",
  "<p>I dunno, I don\u2019t think the priorities are <em>wrong</em>.</p>\n<p>Maybe the least-bad solution would be for djot to standardize two modes:</p>\n<ul>\n<li>a default mode where paragraphs can be wrapped without changing the output, and the extra blank lines before lists are required, intended for longer documents to be maintained over time where source readability is more important,</li>\n<li>a significant-newlines mode where newlines indicate a line break, and the extra blank lines before lists are optional, intended for short comments and chat messages that are probably going to be written once and rendered.</li>\n</ul>",
  "<p>This split already exists to some degree in the Markdown world, with e.g. GitHub rendering <code>*.md</code> files more like the former and comments more like the latter.</p>",
  "<p>Opened <a href=\"https://github.com/jgm/djot/issues/161\">https://github.com/jgm/djot/issues/161</a> with that proposal.</p>",
  "<p>It seems to have been <a href=\"https://github.com/python-poetry/poetry/pull/5172\">fixed</a>. Any bottleneck now is in the poetry2nix's end instead of Poetry itself.</p>",
  "<p>That\u2019s what I\u2019m saying.</p>",
  "<p>Cool, thanks for doing that! I think that's a pretty compelling option from my perspective.</p>",
  "<p>One of the quirks of Zulip's <a href=\"https://zulip.readthedocs.io/en/latest/subsystems/settings.html\">server-level settings</a> is that they split between two places: <code>/etc/zulip/settings.py</code> and <code>/etc/zulip/zulip.conf</code>. </p>\n<p>(We also have <code>/etc/zulip/zulip-secrets.conf</code> for secrets, but I think we're happy with that aspect of the design). </p>\n<p>While both files can be accessed by Python code, only the <code>zulip.conf</code> settings are available to puppet within using the (very slow) <code>scripts/get-django-setting</code> helper; this can result in some duplication and unnecessary complexity. Additionally, while we can edit <code>zulip.conf</code> programmatically via <code>crudini</code>, that isn't easy to do safely with <code>settings.py</code>, which makes life harder if we want to do things like rename settings or set an explicit default value for something without requiring the system administrator to manually handle that during an upgrade.</p>",
  "<p>(Tangential to this discussion, but it seems like a notable omission that <a href=\"https://zulip.readthedocs.io/en/latest/subsystems/settings.html\">https://zulip.readthedocs.io/en/latest/subsystems/settings.html</a> doesn't even mention <code>/etc/zulip/zulip.conf</code>)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> proposed that we consider merging these into a single TOML file, say <code>/etc/zulip/zulip.toml</code>. This would solve basically all of the problems noted above:</p>\n<ul>\n<li>Unlike <code>settings.py</code>, TOML files are machine-editable.</li>\n<li>Unlike the <code>zulip.conf</code> format,  TOML files support lists/dictionaries, so it can express more complex things like the SAML configuration that currently live in <code>settings.py</code>.</li>\n</ul>",
  "<p>The messiest issue we'd need to deal with is this:</p>\n<ul>\n<li>Zulip's LDAP configuration configuration currently involves importing some things; we'd need to tweak the configuration language for those nontrivially, or have an escape hatch of a <code>/etc/zulip/extra_settings.py</code> where you could put extra Python code to do things like set additional Django settings that might involve importing modules or whatnot.</li>\n</ul>",
  "<p>Does it provide enough rope to have settings preference previously-set values, \u00e0 la:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">SOCIAL_AUTH_SAML_SP_ENTITY_ID</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://\"</span> <span class=\"o\">+</span> <span class=\"n\">EXTERNAL_HOST</span>\n</code></pre></div>",
  "<p>But aside from that, I think it would be doable to write a tool that generates a <code>zulip.toml</code> from your existing configuration (and maybe even automates the \"upgrade documentation comments\" step of our upgrade process) that would work smoothly for most installations.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/.2Fetc.2Fzulip.2Fzulip.2Etoml.3F/near/1475065\">said</a>:</p>\n<blockquote>\n<p>Does it provide enough rope to have settings preference previously-set values, \u00e0 la:</p>\n<p><div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">SOCIAL_AUTH_SAML_SP_ENTITY_ID</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://\"</span> <span class=\"o\">+</span> <span class=\"n\">EXTERNAL_HOST</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think we'd need to just move that code to Python, as the default, and you'd only set that property if you actually need to override the default value.</p>",
  "<p>I don't see any way around repetition for things like:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">SOCIAL_AUTH_SAML_ORG_INFO</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"en-US\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"displayname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Example, Inc. Zulip\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"zulip\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{}{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"https://\"</span><span class=\"p\">,</span> <span class=\"n\">EXTERNAL_HOST</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But I think that's a small price to pay.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> no, but you can have something like <a href=\"https://dhall-lang.org/\">Dhall</a> (or do as Pulumi and Terraform CDK did and have TypeScript output config files) generate your configs to get to that world. I've done this for \"type safe YAML\", eg CI configs</p>",
  "<p>One question I have is whether TOML is the right language; in particular, would this workflow provide us a path to reworking the insanity of how <code>docker-zulip</code> manages its settings to no longer involve a YAML file containing values that get passed via the environment as individual strings and then parsed and dumped into a Python file.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/.2Fetc.2Fzulip.2Fzulip.2Etoml.3F/near/1475074\">said</a>:</p>\n<blockquote>\n<p>I don't see any way around repetition for things like:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">SOCIAL_AUTH_SAML_ORG_INFO</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"en-US\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"displayname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Example, Inc. Zulip\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"zulip\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{}{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"https://\"</span><span class=\"p\">,</span> <span class=\"n\">EXTERNAL_HOST</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But I think that's a small price to pay.</p>\n</blockquote>\n<p>I think that would be fine -- we'd just make the Python code that computes the Django setting for <code>SOCIAL_AUTH_SAML_ORG_INFO</code> loop through each entry in the TOML representation, and if there is no <code>url</code> field specified, insert the default before exposing it to Django.</p>",
  "<p>One benefit we're getting here is because we more explicitly have our own code sitting between reading the configuration file and Django, doing mutations on a value written by the end user to fill in defaults now is a natural thing to do rather than changing what was supposed to be an immutable value.</p>",
  "<p>I wouldn't want to do it a ton, since each instance would want to be documented, but I think there's &lt;5 places where we do that sort of thing in the existing configuration file anyway.</p>",
  "<p>(We obviously would need to talk about this transition in the upgrade notes, since in theory an end user could be doing something fancy in <code>settings.py</code>, which is a possibility we probably would prefer to not exist).</p>",
  "<p>But it'd be a one-time transition at least.</p>",
  "<p>(I'd also pitch <a href=\"https://cuelang.org/\">https://cuelang.org/</a> for config files that straddle the \"type safe, strong schema, some repetition, maybe should look vaguely YAML familiar\" lines)</p>",
  "<p>How would you think about it in comparison to TOML? </p>\n<p>Part of the motivation for this would be to eliminate the \"editing a Python file\" part of setting up a Zulip server; it can be a barrier for system administrators who are not programmers that they don't understand significant whitespace and other Python quirks.</p>",
  "<p>I haven't worked with TOML a huge amount, but my sense is that it's likely to be more intuitive for someone who's not a programmer than the Python files, and probably comparable to the INI format used by <code>zulip.conf</code> (which unfortunately doesn't support lists and things).</p>",
  "<p>Ah, yeah, if I'm taking the Programmer hat off and putting the Ops/SysAdmin hat on, Dhall directly would be a horrible move (though I've always found it excels most to me personally as a YAML generator, not a standalone config format).</p>\n<p>CUE I find more interesting with this hat on: its syntax is rather familiar to those coming from YAML (with some niceties added around folding structs into a single line), and most of its functionality is opt-in: take <a href=\"https://cuelang.org/docs/tutorials/tour/intro/fold/\">https://cuelang.org/docs/tutorials/tour/intro/fold/</a> and the other <code>intro</code> examples as an example, it caters well to the \"just be like YAML\" usecase until you choose to, say, make use of its merge behaviors or extra type narrowing or etc.</p>\n<p>TOML I have rather tenured experience with on both the user and developer ends. tl;dr of my thoughts: it's great until you get into nested structures, and then quickly starts frankly being less readable than even the worst <a href=\"https://twitter.com/abock/status/1117056887072145409\">\"get your carpentry squares out to horizontally align your screen\"</a> YAML files I've seen. If what we're after is \"INI, but supports lists and structs\", however, it's great for that, and it's easily writeable by higher-level tools for users who want to get fancy with repetition or code-sharing (see endorsement of Dhall for this, above).</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/abock/status/1117056887072145409\"><img class=\"twitter-avatar\" src=\"/external_content/97b7b51a0efa1add2c3e0f655075fd7e0f4fba17/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3733323738363339383430373835363132392f5653645f71622d315f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/timeyoutakeit\">@timeyoutakeit</a> You need a YAML ruler. <a href=\"https://t.co/Kl1OIOvsfa\">https://twitter.com/abock/status/1117056887072145409/photo/1</a></p><span>- Aaron Bockover (@abock)</span><div class=\"twitter-image\"><a href=\"https://t.co/Kl1OIOvsfa\"><img src=\"/external_content/d9db22f9a76beb7ac3714a4a1c449213afef62fd/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4434435655546257774145795553362e6a70673a7468756d62\"></a></div></div></div>",
  "<p>I think the most complicated structure we're likely to have is the SAML configuration blocks:</p>\n<div class=\"codehilite\"><pre><span></span><code>SOCIAL_AUTH_SAML_ENABLED_IDPS: Dict[str, Any] = {\n    ## The fields are explained in detail here:\n    ##     https://python-social-auth.readthedocs.io/en/latest/backends/saml.html\n    &quot;idp_name&quot;: {\n        ## Configure entity_id and url according to information provided to you by your IdP:\n        &quot;entity_id&quot;: &quot;https://idp.testshib.org/idp/shibboleth&quot;,\n        &quot;url&quot;: &quot;https://idp.testshib.org/idp/profile/SAML2/Redirect/SSO&quot;,\n</code></pre></div>\n<p>So we can probably experiment with what those will look like in a TOML format as a way to validate that concern.</p>",
  "<p>INI-files can be extended to support hierarchies... kinda. We have done this by defining multipart section names like [section:subsection:subsubsection]. I'm not saying it is the optimal way but works in some situations.</p>",
  "<p>Yeah; I think ideally we want something a standard parser will like and that can happily support both lists and dictionaries, and given those needs, TOML/YAML/etc. are a better fit. And TOML feels more ergonomic and friendly to folks who are not programmers; a lot less quotation mark fiddling is involved.</p>",
  "<p>Issues that came up in an office discussion today:</p>\n<ul>\n<li><a href=\"https://github.com/jgm/djot/issues/101\">Intraword emphasis</a></li>\n<li><a href=\"https://github.com/jgm/djot/issues/160\">Math using $ $ delimiter</a></li>\n</ul>",
  "<p>A reply on <a href=\"https://github.com/jgm/djot/issues/161\">https://github.com/jgm/djot/issues/161</a> that seems like he's at least thinking about it!</p>",
  "<p>Is the current status still that we have PGroonga as the search engine on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>?</p>\n<p>I'm seeing extremely slow performance on some queries \u2014 like nearly a minute. For example this one:<br>\n<a href=\"#narrow/search/node.20options\">https://chat.zulip.org/#narrow/search/node.20options</a></p>\n<p>When the search is that slow, it puts in doubt Zulip's ability to serve as a knowledge repository \u2014 it makes me wish I'd written down the information somewhere else. (Especially when it takes several searches to find the right query, which naturally it often does.) It'd be good to carry out our plan from above to switch the search engine on this server back for now.</p>",
  "<p>So, if Zulip moves to djot, the implementation would require shelling out to a custom extended Lua parser, which would need to get access to the database or need a lot of context data to be passed, right?</p>\n<p>Or are you treating djot as a language definition and want to roll a python implementation?</p>",
  "<p>There is <a href=\"https://github.com/matklad/djot-rs\">a WIP Rust implementation</a> and also a very, <em>very</em> early <a href=\"https://github.com/leroycep/djot.zig\">WIP Zig implementation</a>, either of which could be decent fits to contribute to or fork for a non-Lua-based setup.</p>\n<p>Or, Lua's C FFI story (accessible over Python's C FFI) is quite good. I've dealt with embedding Lua in Rust in the past, it's rather sane (IMO) and has generally great sandboxing abilities (in the \"what libraries can you access?\" sense, not in the cgroups/jails sense).</p>",
  "<p>I suppose the FFI idea sounds like the cleanest approach, and if there has to be a new language in the codebase, it might as well be the official implementation's language.</p>",
  "<p>I'm not sure I fully agree - doing two steps to get from one dynamic language to another seems like a rather expensive trade-off if native implementations exist (or could be helped to more fully exist), other than as a stopgap solution. Theoretically with a sufficiently thorough spec and a comprehensive test suite, there should be relatively few reasons to care if an implementation is first or third party.</p>",
  "<p>We\u2019ll need a Rust implementation that can be compiled to WASM. (Lua is slow and would require wrapping a large interpreter for the browser. Zig is not a memory-safe language, so I don\u2019t think we\u2019re going to be pulling experimental Zig code into Zulip.)</p>",
  "<p>I made up this testcase which shows contradictory behavior:</p>\n<div class=\"codehilite\"><pre><span></span><code># Heading\nMultiline\n- Text\n1. And\n&gt; Something\n\nParagraph\nMultiline\n- Text\n1. And\n&gt; Something\n\n# Heading\nMultiline\nand then some more lines.\n</code></pre></div>\n<p>which generated <a href=\"/user_uploads/2/50/1Sac4z6atRIJWZJyWpDhDr0W/image.png\">this</a>:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/50/1Sac4z6atRIJWZJyWpDhDr0W/image.png\" title=\"this\"><img src=\"/user_uploads/2/50/1Sac4z6atRIJWZJyWpDhDr0W/image.png\"></a></div>",
  "<p>Essentially, those new line provisions to prevent paragraphs like \"New Topic - Subheading\" from being parsed as a list don't apply to headings.</p>",
  "<p>That difference for paragraphs is <a href=\"https://htmlpreview.github.io/?https://github.com/jgm/djot/blob/master/doc/syntax.html#block-syntax\">intentional</a>, but see my <a href=\"https://github.com/jgm/djot/issues/161\">issue</a> proposing a mode where paragraphs can be interrupted.</p>",
  "<p>I tried this after reading that issue FWIW and I'd classify this as a bug, at least with the current philosophy (rule 7) of the project.</p>",
  "<p>Well, rule 7 does specifically say \u201chard-wrapping a paragraph\u201d. Although other blocks can be hard-wrapped, paragraphs are the most important case. Applying this rule to every block would force every block to be separated with a blank line, including adjacent list items\u2014which would almost certainly be too unfriendly, and also make it impossible to have the distinction between tight and loose lists.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/djot.2C.20a.20Markdown.20alternative/near/1479073\">said</a>:</p>\n<blockquote>\n<p>We\u2019ll need a Rust implementation that can be compiled to WASM. (Lua is slow and would require wrapping a large interpreter for the browser. Zig is not a memory-safe language, so I don\u2019t think we\u2019re going to be pulling experimental Zig code into Zulip.)</p>\n</blockquote>\n<p>Are there extra-special things to keep in mind about WASM compatibility in Rust-land? That's a space I haven't played in: is it<code>no_std</code>? Is it that plus <a href=\"https://docs.rs/no_alloc/0.1.0/no_alloc/\"><code>no_alloc</code></a>? Should one expect <code>serde</code> (since it's used in the example I linked above, not because I think it's the end-all-be-all serializer or anything) to work?</p>",
  "<p><code>std</code> works fine in WASM. There are some restrictions like no threads (or maybe there\u2019s even some thread support these days?), but I think generally everything you\u2019d expect to work should work.</p>",
  "<p>Do you personally have any opinion in whether, assuming this road were eventually traveled, we try to adopt the above-linked impl (or the \"pulldown-based\" parser they link as an alternative, which is a term I'm unfamiliar with entirely), both very early WIPs, or make our own?</p>",
  "<p>(I guess more distantly this is also me somewhat asking \"how much should I care to start poking at the edges of WASM-Rust in case I end up involved in helping this become a thing\" and adding additional context about what prior art to study)</p>",
  "<p>I hadn\u2019t actually seen those implementations and haven\u2019t tried to evaluate them, but if indeed we can share the work with others, that seems great.</p>",
  "<p>It is. I decided to just disable <code>USING_PGROONGA</code>, since I'm not sure when folks will have time to work on this more, and I think we'll probably need to rebuild the PGroonga index from scratch when we next work on it, since I'm sure enabling stemming will require a rebuild anyway.</p>",
  "<p>So, one of the next areas I want to focus on for the demo organizations work is the demo organization owner setting their email and, by extension, password.</p>",
  "<p>Currently, the plan and work in progress (<a href=\"https://github.com/zulip/zulip/pull/22666\">#22666</a>) is that the demo organization will be created without setting an email or password. But, if the demo organization owner / creator wants to make the organization permanent or invite other users to the demo organization, then they will need to register / set an email and password as well.</p>",
  "<p><strong>Clarification note</strong>: I'm assuming we'll want to restrict them from unchecking <code>Email</code>in the demo organization settings as an authentication method until they register with an email? I'm thinking of this from the point of view that this person is creating a new organization and we use the email/password authentication for that process.</p>",
  "<p>The most recent conversation about this was in <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/demo.20organizations\">#backend &gt; demo organizations</a> about a year ago. The biggest change from that discussion is that the process for making a demo organization permanent will require that an email already be set for the demo organization owner.</p>",
  "<p>I'm wondering if the email that's sent for the demo organization owner to confirm their email address could link to the page (or version of it -with terms of service and newsletter sign-up?) for setting a new password? And we could make clear in the email text / modal for setting the email address that they will also be asked to set a password?</p>",
  "<p>In addition to the password, we'll want to make sure that the demo organization owner agrees to the terms of service. I'm thinking we could do that as part of the demo organization creation? If not, then we would want to include that when they go through setting up their email and password log-in.</p>",
  "<p>Some screenshots from dev environment:<br>\n<a href=\"/user_uploads/2/55/JkiPJ5jzn-RTRO60ydrakWA4/Screenshot-from-2022-12-14-19-30-34.png\">Email for changing email address</a>, <a href=\"/user_uploads/2/e9/6c3LH8jGIDzeW18z7TNyraF8/Screenshot-from-2022-12-14-19-35-10.png\">Email for setting a new password</a>, <a href=\"/user_uploads/2/b0/rWy4bvMtu4Y6445ax8M6Y5iU/Screenshot-from-2022-12-14-19-35-37.png\">Setting new password form</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/55/JkiPJ5jzn-RTRO60ydrakWA4/Screenshot-from-2022-12-14-19-30-34.png\" title=\"Email for changing email address\"><img src=\"/user_uploads/2/55/JkiPJ5jzn-RTRO60ydrakWA4/Screenshot-from-2022-12-14-19-30-34.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/e9/6c3LH8jGIDzeW18z7TNyraF8/Screenshot-from-2022-12-14-19-35-10.png\" title=\"Email for setting a new password\"><img src=\"/user_uploads/2/e9/6c3LH8jGIDzeW18z7TNyraF8/Screenshot-from-2022-12-14-19-35-10.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/b0/rWy4bvMtu4Y6445ax8M6Y5iU/Screenshot-from-2022-12-14-19-35-37.png\" title=\"Setting new password form\"><img src=\"/user_uploads/2/b0/rWy4bvMtu4Y6445ax8M6Y5iU/Screenshot-from-2022-12-14-19-35-37.png\"></a></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"21836\">Lauryn Menard</span> <a href=\"#narrow/stream/3-backend/topic/demo.20organizations.3A.20setting.20org.20owner.20email/near/1479922\">said</a>:</p>\n<blockquote>\n<p><strong>Clarification note</strong>: I'm assuming we'll want to restrict them from unchecking <code>Email</code>in the demo organization settings as an authentication method until they register with an email? I'm thinking of this from the point of view that this person is creating a new organization and we use the email/password authentication for that process.</p>\n</blockquote>\n<p>Yeah, that's probably reasonable. Realistically, we should probably just not allow changing that settings panel at all until they've created the account more fully.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"21836\">Lauryn Menard</span> <a href=\"#narrow/stream/3-backend/topic/demo.20organizations.3A.20setting.20org.20owner.20email/near/1479925\">said</a>:</p>\n<blockquote>\n<p>In addition to the password, we'll want to make sure that the demo organization owner agrees to the terms of service. I'm thinking we could do that as part of the demo organization creation? If not, then we would want to include that when they go through setting up their email and password log-in.</p>\n</blockquote>\n<p>We need to ask that they agree to ToS when creating the demo organization; so I'm not sure there's a reason we'd need to do that again when setting the email/password for the account. But if it simplifies anything, it's probably not a significant problem to ask a second time during the conversion process.</p>",
  "<p>On one browser tab, I have a realm with 360k+ unread messages. On another tab that I just loaded, I asked it to mask all as read. Now, one of the tabs is increasing unread counts by 1000 each second, and the other is decreasing them by 1000. Fun! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
  "<p>Huh, so apparently the backend process gave up after 194k and then 104k. I had to reload and run it again with ~15k odd messages still left.</p>",
  "<p>Were there any relevant errors in the console?</p>",
  "<p>Ah, so this part was strange. I was unable to open the console and got a message from Firefox telling me to stop this tab to stop firefox from slowing down. Reloading the page fixed it. Similarly, I had to hard reload the desktop app too.</p>\n<p>Maybe some kind of memory leak happened on the frontend? But why would that stop the backend process?</p>",
  "<p>The frontend is actually sending requests to the backend in a loop. See <code>mark_all_as_read</code> in <code>unread_ops.js</code>.</p>",
  "<p>We could have reached the API limit.</p>",
  "<p>Ah, yeah. This whole behavior makes a lot of sense then.</p>",
  "<p>I'd always assumed the backend just batched the database writes in bataches of 1k, didn't know it was actually the frontend controlling it all.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"1406\">Rohitt Vashishtha</span> <a href=\"#narrow/stream/97-off-topic/topic/fun.20with.20multiple.20instances/near/1481131\">said</a>:</p>\n<blockquote>\n<p>I'd always assumed the backend just batched the database writes in bataches of 1k, didn't know it was actually the frontend controlling it all.</p>\n</blockquote>\n<p>We recently changed this behaviour. Also, we handle the API limit exceeded case:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"w\">        </span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// If we hit the rate limit, just continue without showing any error.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseJSON</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"s2\">\"RATE_LIMIT_HIT\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">milliseconds_to_wait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1000</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseJSON</span><span class=\"p\">[</span><span class=\"s2\">\"retry-after\"</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nx\">setTimeout</span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">mark_all_as_read</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nx\">milliseconds_to_wait</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// TODO: Ideally this would be a ui_report.error();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// the user needs to know that our operation failed.</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nx\">blueslip</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Failed to mark messages as read: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseText</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but looks like it not useful if the whole app is affected by it.</p>",
  "<p>I wish I'd opened the console before running this, but maybe this can be replicated on a devserver?</p>",
  "<p>Surely there must be a better way to handle bankruptcy, especially in extreme cases like this, than to wait for minutes and minutes?</p>",
  "<p>So, maybe we should increase the batch size to the maximum (which is 5000) once we hit the API limit?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"1406\">Rohitt Vashishtha</span> <a href=\"#narrow/stream/97-off-topic/topic/fun.20with.20multiple.20instances/near/1481133\">said</a>:</p>\n<blockquote>\n<p>I wish I'd opened the console before running this, but maybe this can be replicated on a devserver?</p>\n</blockquote>\n<p>Yes.</p>",
  "<p>Off the top of my head, while the webapp knows that its running such a long operation, we could have the webapp pretend that everything has been marked as read and let the user continue with their workflow? Then, once the <code>mark_all_as_read</code> operation is complete, we go back to our regular mode.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"1406\">Rohitt Vashishtha</span> <a href=\"#narrow/stream/97-off-topic/topic/fun.20with.20multiple.20instances/near/1481134\">said</a>:</p>\n<blockquote>\n<p>Surely there must be a better way to handle bankruptcy, especially in extreme cases like this, than to wait for minutes and minutes?</p>\n</blockquote>\n<p>We switched to this mechanism instead of just marking everything in the database as read and reloading to avoid the reload as I recall.</p>",
  "<p>Although that leaves a problem: what if the user closes the tab while the messages are being marked as unread?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> <a href=\"#narrow/stream/97-off-topic/topic/fun.20with.20multiple.20instances/near/1481139\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"1406\">Rohitt Vashishtha</span> <a href=\"#narrow/stream/97-off-topic/topic/fun.20with.20multiple.20instances/near/1481134\">said</a>:</p>\n<blockquote>\n<p>Surely there must be a better way to handle bankruptcy, especially in extreme cases like this, than to wait for minutes and minutes?</p>\n</blockquote>\n<p>We switched to this mechanism instead of just marking everything in the database as read and reloading to avoid the reload as I recall.</p>\n</blockquote>\n<p>If the webapp purely pretends that everything is read, basically, here:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">message_unread</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">currently_marking_as_unread</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">latest_message_id_at_time_of_op_start</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">unread</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And later, a server event sets <code>currently_marking_as_unread</code> to false, that should work.</p>",
  "<p>(assuming nothing accesses unread status directly)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> can you move this to a more applicable stream, maybe <a class=\"stream\" data-stream-id=\"6\" href=\"/#narrow/stream/6-frontend\">#frontend</a> or <a class=\"stream\" data-stream-id=\"9\" href=\"/#narrow/stream/9-issues\">#issues</a>?</p>",
  "<p>linking <a href=\"#narrow/stream/378-api-design/topic/mark-as-unread.20request/near/1431139\">https://chat.zulip.org/#narrow/stream/378-api-design/topic/mark-as-unread.20request/near/1431139</a></p>",
  "<p>I'm wondering which of three paths makes most sense for fixing this:</p>\n<ul>\n<li>Try to layer whatever comes in from /data over top of the system /etc/certbot directory</li>\n<li>Unconditionally <code>ln -sf</code> the /data directory over top of /etc/certbot (effectively bypassing the container-level system-wide install)</li>\n<li>Get <code>docker-zulip</code> out of the cert management game entirely and replumb the entrypoint to stop doing certbot-related things (there's several places this will touch)</li>\n</ul>\n<p>I think I need to do some refresher reading on docs I'm fairly sure I've seen about where TLS termination has to happen in the Zulip stack, and try to work backwards from what is typical in containerized deployment environments to see what the path from A to B is.</p>\n<p>I noticed someone in the docker-zulip repo PRs/issues had called out that we have a bit of a \"supercontainer\" doing many things in one image; after a quick read I think they're not wrong, and that this complicates matters a bit: if I'm imagining a typical containerized deploy of something like Zulip, it'd have a separate ingress container entirely when running locally/homelab/etc. (and when deployed to some hosting provider, that ingress \"container\" is unlikely to even be a container I control, but is instead a load balancer provided by the platform), a container dedicated to the database, a container running just the bare Python app as exposed by Django, etc. This makes our use of certbot within the container probably surprising behavior.</p>",
  "<p>Though, it does seem like there's a bit of existing art from respectable sources on this: <code>docker-swag</code> for nginx+certbot+php deployments also manages certbot within the container, on a cron job: <a href=\"https://github.com/linuxserver/docker-swag\">https://github.com/linuxserver/docker-swag</a>. That said, that image seems to be a \"for local use\" image, judging by the existence of the smaller <a href=\"https://github.com/linuxserver/docker-nginx\">https://github.com/linuxserver/docker-nginx</a> which still does nginx+php, but skips the TLS bits.</p>",
  "<p>Looking to see what dragons I might unearth if I go down a road of attempting to split <code>provision.py</code> into chunks, with a rationale of improving Docker image layering. I'm currently working on a local-only-for-now solution to <a href=\"https://github.com/zulip/docker-zulip/issues/357\">https://github.com/zulip/docker-zulip/issues/357</a> but, typical for cross-compilation, running into quirks along the way (yarn especially seems unhappy with networking in this QEMU world right now). When, say, <code>yarn</code> fails, the <em>entire</em> provisioning layer is invalidated, meaning all the native and python dep steps must be re-run, wasting bandwidth, CPU time, wall clock time, etc.</p>\n<p>Typically in a Docker world I'd split these provision steps out into multiple <code>RUN</code> lines, perhaps <code>RUN provision --only=dpkg</code>, <code>RUN provision --only=pip</code>, etc. I'm inclined to hack on <code>lib/provision.py</code> to get towards that world, but want to make sure I'm not heading down a path someone has already tried and tripped over. FWIW cache <em>invalidation</em>, at least, shouldn't be a major issue here: since the image itself clones the Zulip repo rather than, say, mounting a host volume in (or copying files in), the provisioning scripts shouldn't change between layers (in other words, Docker's built-in layer cache invalidation should suffice).</p>",
  "<p>Prior art for full applications like Discourse, Gitea, Mastodon, and Nextcloud might be more relevant than for individual application components like nginx.</p>",
  "<p>Good thought:</p>\n<ul>\n<li>Gitea is a complicated example to a degree: the application itself supports plaintext HTTP end-to-end (no HTTPS redirects in the app), implements self-signed certificate creation and ACME themselves, <em>or</em> is happy to be spoken plaintext HTTP behind a TLS-terminating load balancer. This seems different enough from our case to be difficult to use as an example (I personally used to run Gitea behind nginx+letsencrypt, I believe actually the <a href=\"http://linuxserver.io\">linuxserver.io</a> image I linked above). <a href=\"https://docs.gitea.io/en-us/https-setup/\">https://docs.gitea.io/en-us/https-setup/</a></li>\n<li>Mastodon seems to rather strongly hint at following the \"speak plaintext to me, terminate your TLS at a reverse proxy\" pattern: <a href=\"https://github.com/mastodon/mastodon/blob/main/Dockerfile\">https://github.com/mastodon/mastodon/blob/main/Dockerfile</a> (plus other grepping around the source tree)</li>\n<li>Discourse is happy either way: <a href=\"https://meta.discourse.org/t/set-up-https-support-with-lets-encrypt/40709\">they document how to make a bundled nginx server speak HTTPS</a> as well as <a href=\"https://meta.discourse.org/t/allow-ssl-https-for-your-discourse-docker-setup/13847\">providing your own SSL cert</a>. This seems so far to be the closest analogue to what we do (they use s6 init in their container(s) to do a \"supercontainer\", too)</li>\n</ul>",
  "<p>That said, it appears neither Gitea or Discourse do any fiddling with <code>/etc/certbot</code> in their certificate pipeline, so there's still a good bit of digging I'll need to do here.</p>",
  "<p>I think we do that to help you avoid tripping Let\u2019s Encrypt <a href=\"https://letsencrypt.org/docs/rate-limits/\">rate limits</a> if you rebuild your container too frequently.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25085\">@Josh Klar</span> Docker is used for production and <code>provision.py</code> only for the development environment, so I'm not sure what the goal is here?</p>",
  "<p>Is the point to optimize the part of the Docker image build process where we need to run <code>provision</code> before building static assets?</p>",
  "<p>I guess that makes sense.</p>",
  "<p>There's no prior work on this but I imagine it would not be a super hard refactor to add some version of such an <code>only</code> option; basically one would come up with a list of ~10 values to break it into and have the various steps in the 100 line <code>main</code> function that mutate the state be inside an <code>if requested(\"yarn\"):</code> type of block. I'm not sure what a good name for the function <code>requested</code> here would be.</p>",
  "<p>I'm sure there'd be some quirks to work out, but I'd kinda expect that the caching systems we have in place would Just Work, in that they're essentially inside individual things called from <code>main</code>; there's no global cache.</p>",
  "<p>It's to optimize the first stage of the multi-stage image: <a href=\"https://github.com/zulip/docker-zulip/blob/e28311fab27096d6e5ebe534ffe028bdb76d9e11/Dockerfile#L41-L45\">https://github.com/zulip/docker-zulip/blob/e28311fab27096d6e5ebe534ffe028bdb76d9e11/Dockerfile#L41-L45</a> is part of building a release tarball <em>in the container</em>; that tarball is then used in the release stage to build the actual production image. This appears to be included to enable building Docker images for non-officially-released versions (eg. off of arbitrary commits).</p>",
  "<p>Sounds like there's no <em>known</em> dragons down this corridor so I'll take a stab at it.</p>",
  "<p>Sounds good!</p>",
  "<p>It came to my attention that in <code>zerver/data_import/import_util.py</code>, we set <code>zulip_message_dict[\"sending_client\"] = 1</code> when constructing messages that we're importing. I'm not sure exactly how this works, but I think probably this means every message imported from Slack/Mattermost/etc. will have the <code>sending_client</code> field set to \"website\". I wonder if it'd be better to set this to, for example, a Client object called \"ZulipSlackImport\", so that there's a straightforward way to check whether a given message was imported or not. </p>\n<p>Thoughts? <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> <span class=\"user-mention\" data-user-id=\"24078\">@Matt Keller</span> FYI.</p>",
  "<p>Wouldn't hurt. I have had a small handful of hand-verifications, but they were during iterative imports on otherwise empty orgs, so there was no organic growth to get in the way. After an imported org goes live it could be more valuable to be able to filter those.</p>",
  "<p>Yeah. I don't know that there's a quick way to backfill existing Message objects to have such a client, but maybe that's OK. (I'm sure it's possible to discern by finding the contiguous blocks of message IDs for imported realms, but I think we can just leave as a project to do if/when someone decides we have a calculation that would benefit from doing such a backfill).</p>",
  "<p>I loved Djot , it fixes a lot of limitations of markdown but Bullet Lists are most used features in markdown and Djot breaks it . <br>\nWe would need to wait till big guys support it (SO / GITHUB/GITTEA / VSCODE) <br>\nNow we are enjoying compatiblity between  Those platform .  </p>\n<p>I write all docs in markdown , then i paste it on the zulip , we chat/discuss and then , put it into our code which host in github. Thanks to good markdown support in Zulip , that collaboration is totally smooth.</p>",
  "<p>I think we should look into refactoring ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/splitting.20provision.2Epy/near/1483359\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"25085\">Josh Klar</span> Docker is used for production and <code>provision.py</code> only for the development environment, so I'm not sure what the goal is here?</p>\n</blockquote>\n<p>so docker is prefered method of deploying proudction these days for zulip?</p>",
  "<p>No, we recommend a dedicated virtual machine, but also support Docker in production, and this discussion is about optimizing the build process for the production image through making changes to the provision script.</p>",
  "<p>It\u2019s not fair to assert that Djot \u201cbreaks\u201d bulleted lists. Djot has full support for bulleted lists with a very reasonable syntax. It slightly diverges from Markdown, but it has solid reasons for this divergence based on its design priorities. If people have to leave a blank line between paragraphs and lists when they didn\u2019t before, they\u2019ll grumble a bit and they\u2019ll learn and it will be fine. I\u2019m not saying this is the only way or the best way forward, but we do need to admit that it <em>is</em> a way if we want our requests to be taken seriously. You might not <em>agree</em> with all of Djot\u2019s priorities, but an argument that doesn\u2019t <em>acknowledge</em> them isn\u2019t going to convince anyone of anything.</p>",
  "<p>Hey all. While it's technically outside the OIDC spec, it's common to see implementations add a groups claim that holds an array of strings that represent the groups a user belongs to. I've used this within Psono where you can create a user group and link it to a group returned by OIDC, so any user who is part of the group at the authentication provider also is added to the group at application level. </p>\n<p>Is this on the roadmap?</p>",
  "<p>Agreed. I think their bulleted lists syntax is the wrong design for Zulip, but that doesn't mean there aren't applications where it could be a good choice.</p>\n<p>I don't see a clear reason to wait on other products supporting Djot. It's close enough to markdown that I'm not sure we'd end up with our syntax being any more different from GitHub markdown than it is now.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"24643\">@Lachie Chapman</span> we do offer a similar feature for LDAP, so it could be done for Zulip. One big challenge with that class of feature is that we only get to inspect the expected state during login -- so if a user just remains logged in, their set of groups will not be updated (either added or removed). LDAP doesn't have that failure mode, because an automated job can query LDAP directly on a regular basis in order to do updates.</p>",
  "<p>So such a feature would always be unreliable for syncing a set of groups. It could still be potentially useful for \"setting the initial groups for a user\" , and we might build it for that purpose, but we'd need to be very careful to explain exactly what that class of integration can and cannot do.</p>",
  "<p>Large file size alone is a not a reason to split a file. The right question is \"What is the best organization for managing models.py\"?</p>",
  "<p>The main technical problem with a large file is that code formatters like <code>black</code> can be a bit slow; that is a real issue with <code>models.py</code> today.</p>",
  "<p>Though if a faster Python linting toolchain like <code>ruff</code> were to implement support for doing <code>black</code> formatting, that would cease to be a constraint. (I have no idea if that's plausibly on the horizon, to be clear, just making a conditional statement).</p>",
  "<p>The other consideration is navigation of our models -- if you're looking for the code for the <code>UserProfile</code> class, where do you find it?</p>",
  "<p>Right now, one answer is you open <code>models.py</code> and search for <code>class UserProfile</code> in your editor, and you're there. (There's also editor integrations that might jump you there directly from code showing it, if you use an editor with that feature)</p>",
  "<p>If we split <code>models.py</code>, we'd need to think carefully about how we organize the files we split out. For example, should the <code>UserBaseSettings</code> class live? It defines many of the properties that developers expect to be in <code>UserProfile</code>, so maybe it goes in the same file as that ... but then should <code>RealmUserDefault</code>, which also loads that table, go in the <code>zerver/models/userprofile.py</code>, or elsewhere?</p>",
  "<p>It gets annoying, with a lot of little fiddly decisions like that, many of which have no right answer, in that the goal in some sense is for an arbitrary developer to be able to guess where to find something, and different developers will make different assumptions.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/.5BRefactoring.5D.20Zulip.20models.2Epy.20is.20over.204000.20lines.20of.20code.20now/near/1488177\">said</a>:</p>\n<blockquote>\n<p>(There's also editor integrations that might jump you there directly from code showing it, if you use an editor with that feature)</p>\n</blockquote>\n<p>This reminds me that I eventually need to document my super-hacky-but-if-you-know-what-you're-doing-YOLO approach to getting <code>pyright</code> LSP + neovim playing nicely together. Navigating this codebase is a breeze with LSP <code>JumpToDefinition</code>. 10/10 recommend to anyone perusing models especially.</p>",
  "<p>Further, there's the file naming question -- do we call them <code>UserProfile.py</code>, named after the class that is defined there? Or some other encoding, which then one needs to translate to if you want to type the path to a given thing.</p>",
  "<p>Anyway, I have no particular attachment to having all the models in one giant file, but I think it's nontrivial to come up with a different architecture that is actually more ergonomic.</p>",
  "<p>Here's the top 14 biggest Python files in the codebase, BTW:</p>\n<div class=\"codehilite\"><pre><span></span><code>    2451 ./zerver/tests/test_upload.py\n    2709 ./zerver/lib/markdown/__init__.py\n    2720 ./zerver/tests/test_message_send.py\n    2778 ./zproject/backends.py\n    2785 ./zerver/tests/test_push_notifications.py\n    3039 ./zerver/tests/test_events.py\n    3131 ./zerver/tests/test_markdown.py\n    3373 ./zerver/tests/test_message_edit.py\n    4074 ./zerver/tests/test_message_fetch.py\n    4735 ./zerver/models.py\n    4893 ./corporate/tests/test_stripe.py\n    6104 ./zerver/tests/test_subs.py\n    6230 ./zerver/tests/test_signup.py\n    6817 ./zerver/tests/test_auth_backends.py\n</code></pre></div>",
  "<p>I think some of those test files are likely a higher priority to split, though they often also an interesting design question of how to do so ergonomically, in a way that doesn't just result in <code>test_signup_part1.py</code> and <code>test_signup_part2.py</code>, with no easy way to figure out where you should put a new test you're writing.</p>\n<p>(And probably in some cases, it'd be better to first look at refactoring them to design some better test helper functions to improve brevity).</p>",
  "<p>Hmm, I see your point. Perhaps I would be better off writing  something that can run periodically to query my backend and update the groups  in Zulip's backend manually?</p>",
  "<p>Alternatively, it looks to me like one can log in with OIDC and retrieve user information via LDAP. Since I'm using Authentik, I have access to both</p>",
  "<p>Actually that requires setting up an LDAP outpost and the docs are slim in that area. I'll try switching Zulip over to LDAP auth and see how I go.</p>",
  "<p>Yeah, that's probably a reasonable plan. There's an active PR for syncing groups from LDAP, so while that isn't available now, it probably will be fairly soon.</p>",
  "<p>Up to date group information from OIDC would be available from the userinfo endpoint if there is a valid access token available (updatable via refresh token) to the application and <a href=\"https://ldapwiki.com/wiki/Offline_access\">offline_access</a> scope is supported.</p>",
  "<p>Hmm, yeah, that could work as a mechanism.</p>",
  "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>Is there a way to relay metadata to the <code>https://{zulip instance}/login/saml?&amp;idp=my_idp</code> url ?<br>\nI tried passing more keys but they do not appear on the /saml/sso URL of the idp</p>\n<p>Thanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>  <span class=\"user-mention\" data-user-id=\"8081\">@tatsuya6502</span>  <span class=\"user-mention\" data-user-id=\"24078\">@Matt Keller</span>  Hello all, how is the process going? I am part of the Chinese community here on Zulip cloud, and we have been following up PGroonga for nearly year. If there is any tests that need to be done in Chinese, I'd be glad to help!<br>\nThanks for all the good work you have done so far!</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25691\">@Quentin Goinaud</span> can you explain in more detail what you're trying to do.</p>",
  "<p>For zulip to automatically redirect to a specific idp, you can use the URL I provided<br>\nThis make zulip send a SAMLRequest to my idp, but i'd like to pass metadatas to my idp</p>\n<p>For example: <br>\nhttps://{zulip instance}/login/saml?&amp;idp=my_idp&amp;redirect=/#narrow/stream/3-backend/topic/SAML.20Auth&amp;date=xxx</p>\n<p>And in the same way, I'd like my idp to POST /saml/complete with more infos like a redirect URL</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span></p>",
  "<p><span class=\"user-mention\" data-user-id=\"25691\">@Quentin Goinaud</span> I recommend looking at <code>get_relayed_params</code> and <code>auth_url</code> in <code>SAMLAuthBackend</code>; I'm not sure if you'll need to make code changes, but that's the code path.</p>",
  "<p>Per request by <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> , just wanted to bring up here for visibility that we're getting closer<br>\nwith the <code>UserPresence</code> backend rewrite in <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a>.</p>\n<p>Aside of needing some more general review of the backend code, this could particularly use<br>\nsome more eyes on the migration strategy I think. Currently this implements the migration<br>\napproach suggested by Tim in <a href=\"https://github.com/zulip/zulip/pull/16381#issuecomment-924494614\">https://github.com/zulip/zulip/pull/16381#issuecomment-924494614</a><br>\nAs the commits message describes:</p>\n<blockquote>\n<p>The way to deploy is to start the backfill migration with the server<br>\ndown and then start the server <em>without</em> the user_presence queue worker,<br>\nto let the migration finish without having new data interfering with it.<br>\nOnce the migration is done, the queue worker can be started, leading to<br>\nthe presence data catching up to the current state as the queue worker<br>\ngoes over the queued up events and updating the UserPresence table.</p>\n</blockquote>\n<p>In particular, the <code>0423_userpresence_new_table_schema</code> migration is very ugly, needing to manually<br>\nrename constraints etc. when renaming <code>UserPresence</code> to <code>UserPresenceOld</code>, so that could use some attention<br>\ntoo to see if there aren't any traps there that may have been missed.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25691\">@Quentin Goinaud</span> Yeah I think you'd need to customize the code. <code>auth_url</code> is the method you want for giving extra params to the IdP as Tim pointed out, you could modify it to add extra params there. For receiving extra params at <code>/complete/saml/</code> you'll want to look at <code>auth_complete</code> and modify there to take them and do stuff based on them - though I'd advise caution there since it'll just be arbitrary input under user control and can't be trusted like the IdP-signed SAMLResponse</p>",
  "<p>Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>To be explicit, the reason it has to rename constraints is because otherwise <code>RenameModel</code> doesn't do so, and otherwise the <code>CreateModel</code> tries to reuse the same names?</p>\n<p>Why does that leave us with a special-case of <code>zerver_userpresence_id_seq1</code>?</p>",
  "<p>For this query:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">latest_presence_per_user</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">UserPresenceOld</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">status__in</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"n\">PRESENCE_IDLE_STATUS</span><span class=\"p\">,</span>\n                <span class=\"n\">PRESENCE_ACTIVE_STATUS</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-timestamp\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"timestamp\"</span><span class=\"p\">,</span> <span class=\"s2\">\"user_profile__realm_id\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>It's not clear to me why we need to join to UserProfile here -- UserPresence has a <code>realm_id</code> on it.</p>\n<p>I believe the DISTINCT will DTRT, but I think I would more naturally write this as:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">realm_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_profile_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">max</span><span class=\"p\">(</span><span class=\"k\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_userpresence</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">group</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">realm_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_profile_id</span>\n</code></pre></div>\n<p>The explain for that is certainly better in Zulip Cloud and <a href=\"http://chat.zulip.org\">chat.zulip.org</a> -- here's comparison on the latter:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"k\">DISTINCT</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"user_profile_id\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"user_profile_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"timestamp\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userprofile\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"w\"> </span><span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userprofile\"</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userprofile\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"id\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"status\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"k\">ASC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_userpresence\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"timestamp\"</span><span class=\"w\"> </span><span class=\"k\">DESC</span><span class=\"p\">;</span>\n<span class=\"go\">                                           QUERY PLAN</span>\n<span class=\"go\">-------------------------------------------------------------------------------------------------</span>\n<span class=\"go\"> Unique  (cost=5735.70..5888.21 rows=25190 width=16)</span>\n<span class=\"go\">   -&gt;  Sort  (cost=5735.70..5811.95 rows=30503 width=16)</span>\n<span class=\"go\">         Sort Key: zerver_userpresence.user_profile_id, zerver_userpresence.\"timestamp\" DESC</span>\n<span class=\"go\">         -&gt;  Hash Join  (cost=2712.36..3463.73 rows=30503 width=16)</span>\n<span class=\"go\">               Hash Cond: (zerver_userpresence.user_profile_id = zerver_userprofile.id)</span>\n<span class=\"go\">               -&gt;  Seq Scan on zerver_userpresence  (cost=0.00..671.29 rows=30503 width=12)</span>\n<span class=\"go\">                     Filter: (status = ANY ('{2,1}'::integer[]))</span>\n<span class=\"go\">               -&gt;  Hash  (cost=2391.05..2391.05 rows=25705 width=8)</span>\n<span class=\"go\">                     -&gt;  Seq Scan on zerver_userprofile  (cost=0.00..2391.05 rows=25705 width=8)</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">realm_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_profile_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"nb\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_userpresence</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">group</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">realm_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_profile_id</span><span class=\"p\">;</span>\n<span class=\"go\">                                   QUERY PLAN</span>\n<span class=\"go\">--------------------------------------------------------------------------------</span>\n<span class=\"go\"> HashAggregate  (cost=900.06..1151.96 rows=25190 width=16)</span>\n<span class=\"go\">   Group Key: realm_id, user_profile_id</span>\n<span class=\"go\">   -&gt;  Seq Scan on zerver_userpresence  (cost=0.00..671.29 rows=30503 width=16)</span>\n<span class=\"go\">         Filter: (status = ANY ('{1,2}'::integer[]))</span>\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/UserPresence.20system.20rewrite/near/1494904\">said</a>:</p>\n<blockquote>\n<p>To be explicit, the reason it has to rename constraints is because otherwise <code>RenameModel</code> doesn't do so, and otherwise the <code>CreateModel</code> tries to reuse the same names?</p>\n</blockquote>\n<p>Yes</p>\n<blockquote>\n<p>Why does that leave us with a special-case of <code>zerver_userpresence_id_seq1</code>?</p>\n</blockquote>\n<p>Hmm good question, this was added long ago so I don't remember the thinking anymore, but it could be that the sequence just didn't need renaming for the sake of avoiding an error like the other objects like contraints did, so it was missed in that migration and instead a special case was added for  the generated new sequence name. It seems better to rename the sequence just like contraints  and avoid the special case, so I'll try to tweak that.</p>",
  "<p>Should I modify get_messages_backend backend api  (planning to add date parameter to there .)or create a new endpoint?</p>",
  "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"137\" href=\"/#narrow/stream/137-feedback/topic/time.20machine.20for.20All.20messages\">#feedback &gt; time machine for All messages</a> by <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25694\">@Bar\u0131\u015f</span> definitely don't create a new endpoint. Probably we want a special string value like <code>anchor: \"date\"</code> to indicate the anchor is to be determined using a provided date, and then a separate parameter for the <code>anchor_date</code> that would be the date itself.</p>",
  "<p>I posted a batch of comments on the time offset details that I'm not sure about.</p>",
  "<p>Just to lay out the plan for this -- once we merge this PR, it'll be possible for start having the presence API be much more compressed -- the client can start asking the server \"Please send me all the presence updates since time T\", where T is roughly the time of the last time the server looked up the answer for this client the last time. Because of queuing delay and other possible races, we'd probably want T to be something like \"5 minutes plus the time since the last request\", but we'd be able to entirely stop sending presence update data for anyone who's been offline for the last half hour (I think the current API has a value for that which is something like 2 weeks).</p>",
  "<p>I just moved a topic in a private stream here on CZO, and it took 37s to move 16 messages within a stream, from one topic to another.  It's not a big stream (16 users) so it's not due to subscribed-user scale, as if often the problem here on CZO.  And taking that long is big imposition to doing topic cleanups, which are a great feature we should be making as friction-free as possible.</p>\n<p>Have we done any performance analysis on topic renames?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/.22Jump.20to.20date.22.20.2323995/near/1496822\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"25694\">Bar\u0131\u015f</span> definitely don't create a new endpoint. Probably we want a special string value like <code>anchor: \"date\"</code> to indicate the anchor is to be determined using a provided date, and then a separate parameter for the <code>anchor_date</code> that would be the date itself.</p>\n</blockquote>\n<p>Got it.</p>",
  "<p>If you start the Zulip sign-up but don't confirm your email, does your ability to complete the process expire? If so, after how long? Is this the same for Zulip Cloud and self-hosted servers?</p>",
  "<p>Hi Everyone,</p>\n<p>As per  <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>  <a href=\"https://github.com/zulip/zulip/pull/23225#issuecomment-1402469847\">suggestion</a> and after having a discussion with <span class=\"user-mention silent\" data-user-id=\"16839\">Abhijeet Bodas</span> </p>\n<p>I went through various issues, PRs, and commits.</p>\n<p><a href=\"https://github.com/zulip/zulip/pull/2517\">#2517</a> <a href=\"https://github.com/zulip/zulip/pull/6027\">#6027</a> <a href=\"https://github.com/zulip/zulip/pull/12309\">#12309</a> <a href=\"https://github.com/zulip/zulip/pull/19272\">#19272</a> (Thanks to <code>Abhijeet Bodas</code> for these references)</p>\n<p><strong>What I concluded:</strong></p>\n<p>There are different theories/suggestions of users, on how they use topics.</p>\n<ol>\n<li><a href=\"https://github.com/zulip/zulip/issues/19483\">Pin topic within a stream</a> </li>\n<li>Mute/Unmute topics within a stream. (Already Implemented)</li>\n<li>Star Topic + My Topics</li>\n<li><a href=\"https://github.com/zulip/zulip/issues/6027\">Follow Topics</a> (notification-related settings for topics)</li>\n</ol>\n<p><strong>Regarding the <code>Follow Topics</code> feature:</strong></p>\n<p>I found the <a href=\"https://github.com/zulip/zulip/issues/12309#issuecomment-493275629\">technical design</a>, as suggested by <code>Tim Abbott</code> to implement this feature.</p>\n<p>And the <a href=\"https://github.com/zulip/zulip/pull/14555\">work which has been done till now</a></p>\n<p>(Of course, a lot of other preparatory work to make this possible has been done.)</p>\n<p><strong>My question:</strong></p>\n<ul>\n<li>\n<p>Can someone suggest to me some issues which I should pick, to continue the work for this<br>\nfeature.</p>\n</li>\n<li>\n<p>Also, some other PRs which I should have a look at. (which are important for this feature <br>\nand I would have missed it.)</p>\n</li>\n</ul>\n<p>Thanks.</p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> , <span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span></p>",
  "<p>Yeah this is a known problem that needs attention. I don't think we have debugged.</p>",
  "<p>There's messy stuff with moving things between public streams involving UserMessage, but that shouldn't be relevant here.</p>",
  "<p>In case it's relevant, yesterday I had the experience, on mobile, of trying to load the list of topics for a stream (which uses <code>GET users/me/{streamId}/topics</code>), and it took so long (20s+) that I gave up.</p>",
  "<p>On CZO?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> I remember <a href=\"https://github.com/zulip/zulip/pull/22923\">https://github.com/zulip/zulip/pull/22923</a> by <span class=\"user-mention\" data-user-id=\"13455\">@Kartik Srivastava</span> is certainly a thing in this space; I'm not sure whether he responded to my last feedback on the PR -- I don't see any comments suggesting he did, but he does have a code push since then. So you could take a look at that and discuss with him whether he'll have time to work on it further or if it makes sense for you to pick up that effort.</p>",
  "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rg<span class=\"w\"> </span><span class=\"s1\">'GET /api/v1/users/me/\\d+/topics'</span><span class=\"w\"> </span>/var/log/nginx/access.log<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>perl<span class=\"w\"> </span>-nale<span class=\"w\"> </span><span class=\"s1\">'print $F[-1]'</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sort<span class=\"w\"> </span>-n<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>tail\n<span class=\"go\">2.066</span>\n<span class=\"go\">2.114</span>\n<span class=\"go\">2.502</span>\n<span class=\"go\">2.704</span>\n<span class=\"go\">3.109</span>\n<span class=\"go\">3.630</span>\n<span class=\"go\">3.645</span>\n<span class=\"go\">53.375</span>\n<span class=\"go\">55.183</span>\n<span class=\"go\">55.955</span>\n</code></pre></div>\n<p>The last three are you, out of ~273 requests.  Welcome to being the p99? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>And then <a href=\"https://github.com/zulip/zulip/pull/14555\">#14555</a> is probably a similar question -- <span class=\"user-mention\" data-user-id=\"13033\">@Ryan Rehman</span> do you have time to rebase that at least? It'd make life easier for others picking up work on it if you do.</p>",
  "<p>But something clearly went very weird with those, yes.  Unclear if it's related, since the topic move thing seems very predictably slow.</p>",
  "<p>Yes, all confirmation emails expire. Those expire after 1 day; invitations, which are triggered by someone else, get 10 days.</p>",
  "<p>We should be able to <code>EXPLAIN ANALYZE</code> the queries for these -- any individual query above 500ms will be in the slow query log, and we can see if 1000 queries got done in the server logs.</p>",
  "<p>I need to clear <code>/emails/generate</code> fixes, Zoom security writeup, and more progress on the design draft stuff for thumbnailing off my plate, but if I knock those out before someone else gets to it I'd be happy to dig into this perf issue, probably mid-late next week if I had to guess. I definitely notice the sluggishness every time I move messages around (even single messages often get hit by it).</p>",
  "<p>Something in <span class=\"user-mention silent\" data-user-id=\"13313\">Chris Bobbe</span>'s query hits a bad statistics analysis:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">analyze</span><span class=\"w\">             </span><span class=\"k\">SELECT</span>\n<span class=\"w\">                </span><span class=\"s s-Name\">\"zerver_message\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"subject\"</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">topic</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"s s-Name\">\"zerver_message\"</span><span class=\"mf\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">max_message_id</span>\n<span class=\"w\">            </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_message\"</span>\n<span class=\"w\">            </span><span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_usermessage\"</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s s-Name\">\"zerver_usermessage\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"message_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"zerver_message\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"id\"</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s s-Name\">\"zerver_usermessage\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">13313</span><span class=\"w\"> </span><span class=\"k\">AND</span>\n<span class=\"w\">                </span><span class=\"s s-Name\">\"zerver_message\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"recipient_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">17255</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s s-Name\">\"zerver_message\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"subject\"</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"s s-Name\">\"zerver_message\"</span><span class=\"mf\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">DESC</span><span class=\"p\">;</span>\n<span class=\"go\">                                                                                                        QUERY PLAN</span>\n<span class=\"go\">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"go\"> Sort  (cost=8144.02..8144.16 rows=56 width=18) (actual time=52320.940..52320.964 rows=175 loops=1)</span>\n<span class=\"go\">   Sort Key: (max(zerver_message.id)) DESC</span>\n<span class=\"go\">   Sort Method: quicksort  Memory: 38kB</span>\n<span class=\"go\">   -&gt;  GroupAggregate  (cost=8141.41..8142.39 rows=56 width=18) (actual time=52319.518..52320.821 rows=175 loops=1)</span>\n<span class=\"go\">         Group Key: zerver_message.subject</span>\n<span class=\"go\">         -&gt;  Sort  (cost=8141.41..8141.55 rows=56 width=18) (actual time=52319.495..52319.771 rows=2364 loops=1)</span>\n<span class=\"go\">               Sort Key: zerver_message.subject</span>\n<span class=\"go\">               Sort Method: quicksort  Memory: 275kB</span>\n<span class=\"go\">               -&gt;  Hash Join  (cost=6759.17..8139.78 rows=56 width=18) (actual time=4274.677..52308.123 rows=2364 loops=1)</span>\n<span class=\"go\">                     Hash Cond: (zerver_usermessage.message_id = zerver_message.id)</span>\n<span class=\"go\">                     -&gt;  Index Only Scan using zerver_usermessage_user_profile_id_71a38b2c30f35402_uniq on zerver_usermessage  (cost=0.57..1298.15 rows=31633 width=4) (actual time=0.595..51952.774 rows=291016 loops=1)</span>\n<span class=\"go\">                           Index Cond: (user_profile_id = 13313)</span>\n<span class=\"go\">                           Heap Fetches: 272355</span>\n<span class=\"go\">                     -&gt;  Hash  (cost=6725.60..6725.60 rows=2640 width=18) (actual time=78.730..78.732 rows=2719 loops=1)</span>\n<span class=\"go\">                           Buckets: 4096  Batches: 1  Memory Usage: 189kB</span>\n<span class=\"go\">                           -&gt;  Index Only Scan using zerver_message_recipient_subject on zerver_message  (cost=0.43..6725.60 rows=2640 width=18) (actual time=0.778..77.118 rows=2719 loops=1)</span>\n<span class=\"go\">                                 Index Cond: (recipient_id = 17255)</span>\n<span class=\"go\">                                 Heap Fetches: 2537</span>\n<span class=\"go\"> Planning Time: 0.689 ms</span>\n<span class=\"go\"> Execution Time: 52321.115 ms</span>\n</code></pre></div>",
  "<p>It's expecting 31k rows out of <code>zerver_usermessage_user_profile_id_71a38b2c30f35402_uniq</code> and gets 291k, which takes 52s.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25085\">@Josh Klar</span>: I think this would be a great thing for you to put on one of your plates. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>But yeah, probably not the highest priority such thing.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/email.20confirmation.20question/near/1497645\">said</a>:</p>\n<blockquote>\n<p>invitations, which are triggered by someone else, get 10 days.</p>\n</blockquote>\n<p>I guess they used to; it's configurable.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"13313\">@Chris Bobbe</span> is the stream in question a private stream without shared history?</p>",
  "<p>If these are private streams without shared history, I think the crux of the problem is that in such a stream, the only way to determine which topics the user has access to in the stream is to inspect all of the messages in the stream that the user has access to, and group them by topic. For shared history streams, we can more directly use an index without joining on UserMessage.</p>",
  "<p>Ahh, yeah, it has to be a private stream without shared history for that to be the query.</p>",
  "<p>I expect the \"move topic\" issue is a totally independent issue.</p>",
  "<p>I wonder if there's an optimization for the GET topics code path would be to do the optimized <code>get_topic_history_for_public_stream</code> thing, and then do a bulk check for whether the user has access to the set of <code>max_message_id</code> message IDs in the topics returned.</p>",
  "<p>And then only do the more expensive <code>UserMessage</code> based thing for any topics where the user doesn't have access to the latest message.</p>",
  "<p>Not sure how helpful that is; might be easier to just try to improve the query plan to effectively do that internally.</p>",
  "<p>13 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/perf.3A.20GET.20users.2Fme.2F.7BstreamId.7D.2Ftopics\">#backend &gt; perf: GET users/me/{streamId}/topics</a> by <span class=\"user-mention silent\" data-user-id=\"13313\">Chris Bobbe</span>.</p>",
  "<p>(Moved from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/topic.20move.20performance\">#backend &gt; topic move performance</a>; in particular, from here: <a href=\"#narrow/stream/3-backend/topic/topic.20move.20performance/near/1497787\">https://chat.zulip.org/#narrow/stream/3-backend/topic/topic.20move.20performance/near/1497787</a>)</p>",
  "<p>I think <a href=\"https://github.com/zulip/zulip/pull/14555\">#14555</a> has been kinda superseded by the decisions which were made in <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/muted.20topics\">#api design &gt; muted topics</a>?</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/14555\">#14555</a> assumes all topics (and only those topics) which a user has sent messages to earlier are \"followed\" by the user--<br>\n<a href=\"/user_uploads/2/46/g07HZodvDJUQTkp_-v2W4bjV/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/2/c2/3t14LllgxhGQHLyXG04h4ioW/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/46/g07HZodvDJUQTkp_-v2W4bjV/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/46/g07HZodvDJUQTkp_-v2W4bjV/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/c2/3t14LllgxhGQHLyXG04h4ioW/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/c2/3t14LllgxhGQHLyXG04h4ioW/image.png\"></a></div><p>which is a different approach than what we are going to do (modify the earlier <code>MutedTopic</code> (which is now <code>UserTopic</code> table entries to hold data about which topics are followed. Here we expect that the user will manually \"follow\" a topic similar to how one manually mutes a topic currently)</p>\n<p>We might be able to salvage some of the later code for sending notifications, but a lot has changed in that codepath since then.</p>",
  "<p>(Also linking to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/MutedTopic.20table\">#backend &gt; MutedTopic table</a> and <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/unmuting.20in.20muted.20streams\">#design &gt; unmuting in muted streams</a> for context)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"21836\">Lauryn Menard</span> bumped me to think about scheduled email forever-retries (<a class=\"stream-topic\" data-stream-id=\"9\" href=\"/#narrow/stream/9-issues/topic/email-delivery-spam\">#issues &gt; email-delivery-spam</a>) again.</p>\n<p>We have three situations in terms of how we send email and handle failure:</p>\n<ol>\n<li>Things which send email synchronously (e.g. password resets, invitations, realm downgrades due to failure to pay) which fail just ... fail, and we never retry.</li>\n<li>Things in the <code>email_senders</code> (which is only missed message emails and new logins) queue use the <code>retry_send_email_failures</code> decorator which means they get 3 retries with ~no backoff besides being re-queued at the tail of that queue.</li>\n<li>Scheduled emails retry forever every 10s.</li>\n</ol>\n<p>We can't have the third case use the same codepath as the second, since it's not actually an event queue, just a table we're using as an event queue.</p>\n<p>I feel like the More Right solution in this space is to unify our three email-sending regimes.  I know <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> has pushed back against combining the scheduled emails and the email_senders queues, since the former can get a giant bolus of emails dumped into it from digests, and it'd be bad to block missed-message emails behind thousands of those.  Which is a reasonable argument -- but we can have separate queues and shared email-sending code with two workers pulling from two different queues.</p>",
  "<p>The short-term solution would be to catch <code>EmailNotDeliveredError</code>s and to adjust the <code>scheduled_timestamp</code> to later.  But we don't have a place to store number of failures to not retry forever, or to implement exponential backoff.  We can add a column for that, but that feels like building parallel functionality to our actual queue workers.</p>",
  "<p>There is also the even larger project of rebuilding our queueing system entirely, not on RabbitMQ, but I don't think anything in this problem necessitates that -- moving scheduled emails to the existing framework makes that easier to do later, not harder.</p>",
  "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"9\" href=\"/#narrow/stream/9-issues/topic/email-delivery-spam\">#issues &gt; email-delivery-spam</a> by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>.</p>",
  "<p>I just did another move which took 24.9s, and here's the log line for it:</p>\n<div class=\"codehilite\"><pre><span></span><code>2023-01-27 18:39:02.623 INFO pid:1254513 [zr] 96.230.124.173  POST    200 24.9s (mem: 25ms/15) (md: 26ms/2) (db: 2.6s/62q) /json/messages/1498040 [3] (12178@root via ZulipElectron/5.9.4)\n</code></pre></div>\n<p>There are no slow query lines in postgres from then.  So we spent ~20s in Python doing ... something, in addition to doing 62 queries which took 2.6s cumulatively.</p>",
  "<p>Hmm,<br>\nI found <a href=\"https://github.com/zulip/zulip/issues/2517#issuecomment-1099698272\">this comment</a> which summarizes things.</p>\n<p>PR <a href=\"https://github.com/zulip/zulip/pull/22923\">#22923</a> covers the following points: (taken from the comment)</p>\n<ul>\n<li>Use the UserTopic model's <code>visibility_policy=UserTopic.UNMUTED</code> to store which topics have been anti-muted, as planned.</li>\n<li>Add a <code>do_set_unmuted_visibility</code> function (not yet connected to the API) to be able to set this visibility policy for a topic.</li>\n<li>Add the plumbing for the server to do notifications as configured for a topic set this way, with tests. </li>\n</ul>\n<p>Once merged, the next step as mentioned:</p>\n<ul>\n<li>Once that's done, we'll need to do the second half, which is to add support for the web app to display topics of the form in the UI, etc., but I think the chunk above will be very helpful preparation for having something we can test.</li>\n</ul>\n<p><strong>I would await <span class=\"user-mention\" data-user-id=\"13455\">@Kartik Srivastava</span>  response on <a href=\"https://github.com/zulip/zulip/pull/22923\">#22923</a>, then would start working on this accordingly.</strong><br>\nTill then, I would probably work on some other issue.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> ok -- I think you can certainly try working on rebasing <a href=\"https://github.com/zulip/zulip/pull/22923\">#22923</a>, if you feel you're able to do it correctly; I don't think Kartik will mind.</p>",
  "<p>(My guess is most of the merge conflicts are very surface-level things, basically resulting from our having reformatted code that the PR changes.)</p>",
  "<p>Interesting. Yeah, that seems worth doing under a Python profiler; I think hand-editing <code>manage.py profile_request</code> and then running it is how I did that process the last time I needed to do that with <a href=\"http://chat.zulip.org\">chat.zulip.org</a> data.</p>",
  "<p>Hmm, I think the problem is that while <code>ScheduledEmail</code> could be used to manage emails to be sent immediately, the opposite isn't true -- the queue worker system cannot be used to send an email 2 days from now.</p>",
  "<p>I agree we can manage the digest issue in a number of ways, potentially including just having a \"priority\" column.</p>",
  "<p>I think unifying scheduled emails and <code>email_senders</code> makes a lot of sense. For synchronously sending emails, it's arguable -- it may be a better user experience to just give a user-facing failure for a password reset attempt than to have the password reset email show up hours or days later after outgoing email gets fixed -- and I think that's why we have code paths that do that.</p>",
  "<p>(More complex operations like invitations and downgrades feel different on that point).</p>",
  "<p>I think maybe the right direction, given all that, would be to replace the <code>email_senders</code> queue with an extension of <code>ScheduledEmail</code>, with a view in the design towards that scheduling system being extended in the future for moving other queue workers off RabbitMQ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> suggested that this would be a good place to post the latest comment on <a href=\"https://github.com/zulip/zulip/pull/24104\">#24104</a> for visibility:</p>\n<blockquote>\n<p>I think it would be a good idea to add documentation regarding this technicality already now.<br>\nWe have the same situation as strifel: Our users update their mail addresses on their own and we would have to lock that down to prevent confusion and problems. So this is an important issue for us.<br>\nTo have the option to use the LDAP uid as the primary identifier would be a nice solution.</p>\n</blockquote>",
  "<p>Yeah, my thinking is basically that we could add a section to the \"LDAP authentication\" documentation on changing email addresses, which would suggests users need to change their email address in Zulip when changing it in LDAP, either via an admin doing <code>manage.py change_user_email</code> or the user doing it in the UI.</p>\n<p>And then we can edit that section to explain the feature to keep track of LDAP accounts across the email address changing that users can setup once that's merged.</p>",
  "<p>This is probably the most common reported pain point for the LDAP integration, so an alternative plan would be for <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> to take over the existing PR working towards that and try to get it finished.</p>",
  "<p>But probably it's only a few minutes' work to write the documentation either way, and we probably need roughly the same text explaining the model in the section about the new option anyway.</p>",
  "<p>Would also be nice to have thoughts on the comment I left yesterday  (<a href=\"https://github.com/zulip/zulip/pull/22923#pullrequestreview-1272342360\">https://github.com/zulip/zulip/pull/22923#pullrequestreview-1272342360</a>), since the way that PR implements this is slightly different than what we had discussed in the <a class=\"stream\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design\">#api design</a> thread initially<span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Update:<br>\n<span class=\"user-mention silent\" data-user-id=\"13455\">Kartik Srivastava</span> PMed me that he got busy with an internship, so I should feel free to work on this.</p>\n<p>Also, I have rebased <a href=\"https://github.com/zulip/zulip/pull/22923\">#22923</a><br>\nNow, since I don't have permission to write <span class=\"user-mention silent\" data-user-id=\"13455\">Kartik Srivastava</span> fork. <br>\n<strong>So, should I open a new PR and cross-link both?</strong></p>",
  "<p>Yes, creating a new PR with the rebased commits should be fine.<br>\nYou can also add a co-author entry to the commit if you made significant changes to the code (<a href=\"https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors\">https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors</a>)</p>",
  "<p>This topic was moved to <a class=\"stream-topic\" data-stream-id=\"31\" href=\"/#narrow/stream/31-production-help/topic/SMTP.20configuration\">#production help &gt; SMTP configuration</a> by <span class=\"user-mention silent\" data-user-id=\"21836\">Lauryn Menard</span>.</p>",
  "<p>I have rebased <a href=\"https://github.com/zulip/zulip/pull/22923\">#22923</a><br>\nThe conflicts were the results of the following commits:</p>\n<ol>\n<li><a href=\"https://github.com/zulip/zulip/commit/6288d7ae3e66075d7b20cc5997c7250ccf82bb46\">test_event_queue: Split missed message hook tests.</a></li>\n<li><a href=\"https://github.com/zulip/zulip/commit/46329a2710c0e8d78c3e516f18050361e5d2b5da\">test_classes: Create a dedicate helper for query count check</a>.</li>\n</ol>\n<p>Some reformatting and re-writing of a test were required.</p>\n<p>Opened  PR <a href=\"https://github.com/zulip/zulip/pull/24236\">#24236</a></p>\n<p>Next, I will address the pending review comments on the PR.</p>",
  "<p>This is regarding <a href=\"https://github.com/zulip/zulip/pull/24214\">#24214</a>, needs some ideas to proceed further.<br>\n<a href=\"https://github.com/zulip/zulip/issues/23641\">this was the issue, #23641, which also contains link to the CZO discussion</a>.<br>\nAfter some <a href=\"#narrow/stream/49-development-help/topic/Notify.20users-account.20modified\">discussion in #development help</a> I went forward with the approach of using pre_save signal, but it doesn't seem to be appropriate to the issue's statement. The <a href=\"https://github.com/zulip/zulip/pull/24214#:~:text=For%20that%20I%20thought%20of%20implementing%20this%20functionality%20somehow%20from%20the%20functions%20in%20management/commands%20and%20views/users%20(and%20possibly%20other%20locations%20that%20I%20did%20not%20realize).%0Athis%20approach%20would%20be%20a%20long%20task%20and%20need%20to%20be%20tested%20a%20lot\">other approach</a> doesn't seem to be practical or a good choice in terms of maintainability and bug-free-ness. <br>\nPlease provide your insights.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> awesome, posted some comments after refreshing my memory on it.</p>",
  "<p>Documenting this just in case we get bitten in an upgrade to setuptools&gt;=66. Based on a quick skim of our dev.txt deps list, I think we should be good for direct dependencies, but there's always the possibility for Strange Things To Happen <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>.</p>\n<ul>\n<li><a href=\"https://hachyderm.io/@mikeymikey/109786872353648643\">https://hachyderm.io/@mikeymikey/109786872353648643</a></li>\n<li><a href=\"https://github.com/pypa/setuptools/issues/3772\">https://github.com/pypa/setuptools/issues/3772</a></li>\n<li><a href=\"https://peps.python.org/pep-0440/\">https://peps.python.org/pep-0440/</a></li>\n</ul>",
  "<p>Last night we had an outage of <a href=\"http://chat.zulip.org\">chat.zulip.org</a> because <code>get_realm_user_dicts</code> started being large enough that it no longer fit into the 1MB memcached size.  I temporarily mitigated it by increasing the max object size in memcached.</p>\n<p>This isn't the first time this has happened.  We ran into this issue in Zulip Cloud previously with a large realm, and it's <a href=\"#narrow/stream/31-production-help/topic/Internal.20server.20error.20-.20zulip.20ui/near/1436271\">been reported here</a> for a self-hoster as well.</p>\n<p><a href=\"https://github.com/zulip/zulip/pull/23215\">#23215</a> was one technique for slimming down the size of that cache, but clearly wasn't a big enough hammer.  What can we do to not have such a giant datastore that we ship to clients?  The sheer size of that is not only a problem for memcached, but also is the majority of the 1.5MB that we push down to users when they load <code>https://chat.zulip.org/</code></p>",
  "<p>Reverting <a href=\"https://github.com/zulip/zulip/commit/5db53029a590284f63414b2172c6bfd1c661d1d5\">5db53029a590284f63414b2172c6bfd1c661d1d5</a> is one potential step, but that's a very small amount of gain -- we should be considering techniques to make this significantly smaller.</p>\n<p>I know we've previously discussed limiting the contents to users that are not <code>long_term_idle</code> -- what failure modes would that have?</p>",
  "<p>While addressing one of the comments left on PR <a href=\"https://github.com/zulip/zulip/pull/24236\">#24236</a>, I found something logically wrong:</p>\n<p>Suppose there is a muted stream, and when we select to unmute a topic from the sidebar UI.</p>\n<p><strong>code flow</strong>:<br>\n<a href=\"https://github.com/zulip/zulip/blob/2e248cdbec02c16a822c79230fa509491948a0e3/zerver/views/muting.py#L68\">update_muted_topic</a>  ---&gt; <a href=\"https://github.com/zulip/zulip/blob/2e248cdbec02c16a822c79230fa509491948a0e3/zerver/views/muting.py#L50\">unmute_topic</a> ----&gt; <a href=\"https://github.com/zulip/zulip/blob/bd04733c0f5a2fe8cbebccc515847a2e96da559c/zerver/actions/user_topics.py#L50\">do_unmute_topic</a> ---&gt; <a href=\"https://github.com/zulip/zulip/pull/24236/commits/0b03e0114c06c9557847e1012a1037adee94fe31#diff-97e4a396cdf669d3e133f04bc7fe98e0057cc6eece60ef2aa80ea3fd40a9eb3bR140\">remove_topic_visibility_policy</a></p>\n<p><code>remove_topic_visibility_policy</code> will raise an error because we don't have the concerned row.<br>\nThe error message is <strong>\"Topic is not muted\"</strong></p>\n<p>I don't think this is the correct behavior.</p>\n<p><strong>Proposed solution:</strong><br>\nInstead of having <code>remove_topic_visibility_policy</code> , we can have only <code>add_topic_visibility_policy</code> renamed to <code>set_topic_visibility_policy</code><br>\nand it <code>bulk_create</code> if <code>user_topic</code> doesn't exist or update it to <code>MUTED</code>, <code>UNMUTED</code> etc if already exists.</p>\n<p>No need to delete the row. </p>\n<p>Let me know if I missed something?</p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> <span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span></p>",
  "<p>In the newly <a href=\"https://github.com/zulip/zulip/pull/24236/commits/ec3d5fd3ec5b47f1b887b7cf0f110af699692a2e#diff-6d10645ea7aca14f3a2a685d7753cfbe0fc5e8131b074b284e6cad00b859fc62R261\">included test</a>,<br>\nWe have used <code>add_topic_visibility_policy</code> only for both <code>mute</code> and <code>unmute</code> resulting in passed tests.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> I think moving to a world where there is just a <code>set_topic_visibility_policy</code> is the right abstraction. However, I think our intent is to have 4 possible states for a topic:</p>\n<ul>\n<li>MUTED  (This topic is muted regardless of whether the stream is muted)</li>\n<li>INHERIT (represented as no UserTopic row existing) -- this topic is not explicitly muted, and will be treated as muted or not depending on whether the stream is muted or not.</li>\n<li>UNMUTED (This topic is not muted even if the stream is muted).</li>\n<li>FOLLOWED (Not in scope for this project, but would be both unmuted and have additional notifications enabled)</li>\n</ul>",
  "<p>If the stream is currently muted and you remove the \"UNMUTED\" state, we probably want to set the topic's state to INHERIT (i.e. remove the UserTopic row) -- but that would be implemented via the browser sending a request to the server with INHERIT as the requested policy, not MUTED.</p>",
  "<p>Anyway, I like the idea of having a single function <code>set_topic_visibility_policy</code>, which just accepts the desired policy and implements that in whatever way is appropriate given the current state.</p>",
  "<p>The contents of that cache for each user are as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>realm_user_dict_fields: List[str] = [\n    &quot;id&quot;,\n    &quot;full_name&quot;,\n    &quot;email&quot;,\n    &quot;avatar_source&quot;,\n    &quot;avatar_version&quot;,\n    &quot;is_active&quot;,\n    &quot;role&quot;,\n    &quot;is_billing_admin&quot;,\n    &quot;is_bot&quot;,\n    &quot;timezone&quot;,\n    &quot;date_joined&quot;,\n    &quot;bot_owner_id&quot;,\n    &quot;delivery_email&quot;,\n    &quot;bot_type&quot;,\n    &quot;long_term_idle&quot;,\n]\n</code></pre></div>",
  "<p>We store items in these caches in compressed form. So for the memcached problem, what will be most useful is adjustments that will compress better.</p>",
  "<p>From a programming simplicity standpoint, ideally, we'd avoid needing to write client code to do asynchronous fetches of data that the web app displays on a user in order to use a user object for typeahead, messages, and user cards... it significantly impacts the snappiness of the experience and ends up being reasonably complex. Obviously at a certain scale, like 1M users in a realm, that becomes impossible.</p>",
  "<p>I feel like it may be worth playing with the data structure in <a href=\"http://chat.zulip.org\">chat.zulip.org</a> and trying to see what easy adjustments would improve its compressed size.</p>",
  "<p>For example, we could readily drop the <code>is_bot</code> field and just compute it from <code>bot_type</code>, which will be <code>None</code> whenever <code>is_bot=False</code>.</p>",
  "<p>But I have no idea if that actually does anything of value -- maybe the compression algorithm has figured that out and that tweak would only be a 0.2% adjustment in size.</p>",
  "<p>Anyway the things I would look at trying of that form are:</p>\n<ul>\n<li>Compute <code>is_bot</code> from the <code>bot_type</code> field, and only include the <code>bot_type</code> field if its value is not <code>None</code>.</li>\n<li>Include <code>bot_owner</code> only if its value is not <code>None</code>.</li>\n<li>Make <code>is_billing_admin</code> only present if the value is <code>True</code>, which should be the case for only a very small portion of users.</li>\n</ul>",
  "<p>The next class of thing one could try is to have fields that are only displayed when interacting with a user's profile or user card be fetched only when viewing those elements; this could include the following:</p>\n<ul>\n<li>timezone</li>\n<li>date_joined (would also be needed for the \"Users\" table in settings, which is annoying)</li>\n<li>custom profile fields, which are fetched via a separate database query anyway.</li>\n</ul>",
  "<p>And one more class of thing we can do is look at further adjustments to how we manage avatars; I haven't thought that through but the block in <code>format_user_row</code> around <code>user_avatar_url_field_optional</code> is useful context.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_realm_user_dicts.20size/near/1501054\">said</a>:</p>\n<blockquote>\n<p>We store items in these caches in compressed form. So for the memcached problem, what will be most useful is adjustments that will compress better.</p>\n</blockquote>\n<p>To be explicit, bmemcached uses zlib to compress the pickled data.  We're storing 1MiB of zlib-compressed data which we unzip to 3.75MiB of pickled data, which we unpickle and the json-serialize:</p>\n<div class=\"codehilite\"><pre><span></span><code>In [1]: from django.core.cache import cache\n   ...: from orjson import dumps\n   ...: from timeit import timeit\n   ...:\n   ...: client = cache._cache\n   ...: timeit(lambda: dumps(client.get(&quot;:1:e26e352c9cc13496d29a996d1c0dc4b3:realm_user_dicts:2&quot;)), number=100)/100\n   ...:\nOut[1]: 0.1492796527966857\n</code></pre></div>\n<p>So it takes us ~150ms to pull this out of memcached on our local host -- and that's skipping all of the transforms that we do on the raw value we pull out of memcached.  This is a significant performance cost, even pulled from memcached -- and not just a case of \"too big.\"</p>\n<p>(As a point of reference, it also \"only\" takes 330ms to pull the same data from the database and json-serialize it)</p>",
  "<p>Dropping <code>is_bot</code> moves us from 1048920 bytes to 1046703, which isn't very significant.  I suspect many of the other trimmings of the \"width\" of the cache are places where they're low-entropy, which is why we expect to get away with removing them.</p>\n<p>I think we probably need to address the <em>length</em> of the cache, not the width.  We're never going to get rid of the id, name, and email, which is where most of the entropy and thus size comes from.</p>",
  "<p>Limiting to just <code>'id','full_name','email', 'delivery_email'</code> is still 660k.</p>",
  "<p>Limiting to non-long-term-idle users, but keeping the original full width is <em>88k</em>.</p>",
  "<p>I don't think those extra 935k are doing us much good, and it seems like we should lazy-load them as needed, rather than upfront.</p>",
  "<p>I can imagine cases where this is would bite us (a zulip instance fallow for 28 days would soft-deactivate everyone, and might thus thrash at load-time pulling in the user-data for every user it needed to render information for) so we may need to be a little cleverer than that.</p>",
  "<p>(deleted)</p>",
  "<p>(deleted)</p>",
  "<p>Almost exactly at the time guesstimated; I'll be diving into this tomorrow morning for some initial local repro + investigation.</p>",
  "<p>(deleted)</p>",
  "<p>So I was a bit lost due to the naming of the functions.</p>\n<p>Here's my final conclusion:</p>\n<ul>\n<li><code>do_mute_topic</code> and <code>do_unmute_topic</code> is for <code>MUTE</code> and <strong><code>ROLLBACK MUTE or INHERIT</code></strong> respectively.</li>\n</ul>\n<p><strong>Important: <code>do_unmute_topic</code> here doesn't means updating the visibility_policy to <code>UNMUTED</code></strong> It just rollbacks <code>MUTED</code> to <code>INHERIT</code></p>\n<ul>\n<li><code>do_set_unmuted_visibility</code> actually sets the visibility_policy to <code>UNMUTE</code></li>\n</ul>\n<p>I think we should either change the name of <code>do_unmute_topic</code> or add a comment. Because it badly misleads to the intuition of updating<br>\n<code>visibility_policy</code> to <code>UNMUTE</code></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"22341\">Prakhar Pratyush</span> <a href=\"#narrow/stream/3-backend/topic/Follow.20Topics/near/1501251\">said</a>:</p>\n<blockquote>\n<p>I think we should either change the name of <code>do_unmute_topic</code> or add a comment. Because it badly misleads to the intuition of updating<br>\n<code>visibility_policy</code> to <code>UNMUTE</code></p>\n</blockquote>\n<p>In the earlier (ie, present) topic muting scheme, this isn't misleading, because a topic could have had only 2 states <em>muted</em> and <em>not muted</em>. Note that the old \"<em>not muted</em>\" is different from what our vision for an <em>unmuted</em> topic in the new feature is. With this new feature, an <em>UNMUTED</em> topic is still \"special\" in some way (in what way? For unread counters etc, it will work like a normal topic in a stream which is not muted, even if it's parent stream is indeed muted). In the old scheme, the \"not muted\" topic was not special at all.</p>",
  "<p>So I think it would be better to, for clarity, call what you are working on as \"unmuted topic within a muted stream\" (or at least UNMUTED in all caps) so as to not confuse with the old notion of unmuting a topic.</p>",
  "<p>Agreed.</p>\n<blockquote>\n<p>In the earlier (ie, present) topic muting scheme, this isn't misleading, because a topic could have had only 2 states muted and not muted. </p>\n</blockquote>\n<p>Now since we are introducing UNMUTED.</p>\n<p>I will just add a comment before <code>do_unmute_topic</code> to clarify that if you are looking for <code>UNMUTED</code> check foo() function.</p>",
  "<p>I think at this point we should also discuss what the new API endpoints will look like, since that will also influence what the view functions will endup looking like. From my understanding (and from what we had discussed in <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/muted.20topics\">#api design &gt; muted topics</a> last year):</p>\n<ul>\n<li>The current endpoint for topic muting  is this:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">rest_path</span><span class=\"p\">(</span><span class=\"s2\">\"users/me/subscriptions/muted_topics\"</span><span class=\"p\">,</span> <span class=\"n\">PATCH</span><span class=\"o\">=</span><span class=\"n\">update_muted_topic</span><span class=\"p\">),</span>\n</code></pre></div>\n<p>We will have to keep this endpoint even after implementing the new feature, since there will be older clients accessing this endpoint.</p>\n<ul>\n<li>After this new feature is complete, my interpretation of what Tim mentioned above is that, there will be a single, new endpoint (probably PATCH) which will have the <code>visibility_policy</code>as a parameter (but it would be great if Tim could clarify this once). It's not necessary to implement this new endpoint in your current PR -- that can be done later. But we should think about whether the old and the new endpoint will be assigned to the same view function or we will be creating a different view function for the new endpoint.</li>\n</ul>",
  "<p>I think it would also make sense to move the topic related stuff in <code>/zerver/views/muting.py</code> out into a new file (maybe something like <code>/zerver/views/user_topics.py</code>) because user topics are no longer just about muting. And then maybe rename <code>zerver/views/muting.py</code> to <code>zerver/views/user_mutes.py</code> or something like that, since that is all that would remain in that file. What do you think?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"16839\">Abhijeet Bodas</span> <a href=\"#narrow/stream/3-backend/topic/Follow.20Topics/near/1501279\">said</a>:</p>\n<blockquote>\n<p>I think it would also make sense to move the topic related stuff in <code>/zerver/views/muting.py</code> out into a new file (maybe something like <code>/zerver/views/user_topics.py</code>) because user topics are no longer just about muting. And then maybe rename <code>zerver/views/muting.py</code> to <code>zerver/views/user_mutes.py</code> or something like that, since that is all that would remain in that file. What do you think?</p>\n</blockquote>\n<p>Yes, that would clear up a lot of things.</p>",
  "<p>Now, coming to the functions:<br>\nApart from the view functions (which can be a single function for both the new and old endpoints, or 2 different functions for the old and new endpoints), all the existing functions in <code>/lib/user_topic.py</code> and <code>/actions/user_topics.py</code> should (in my opinion) be replaced by a single function (called <code>(do_)set_user_topic_visibility_policy</code> for example. I guess it would be fine for the function name to be a bit verbose if all we're going to have is a single function).<br>\nNote that this new single functions in these two files should send the old as well as the new style events (of types <code>muted_topics</code> and <code>user_topic</code> respectively) as they currently do. This is essential because older clients out there may still be expecting the old style events.</p>",
  "<p>I say that these should be replaced by \"single\" functions but what I mean is that we should have just one entry point into the file. I think it should be fine to write smaller helper functions if the main <code>set_user_topic_visibility_policy</code> ends up being too huge and unwieldy.</p>",
  "<blockquote>\n<p>all the existing functions in /lib/user_topic.py and /actions/user_topics.py should (in my opinion) be replaced by a single function called ((do_)set_user_topic_visibility_policy for example).</p>\n</blockquote>\n<p>Yes, I'm refactoring the code toward this approach.</p>\n<p>We'll have to take a decision for the views ( 1 or 2). Let's await <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> response on this.</p>",
  "<p>So to summarize, what we need to decide on is:</p>\n<ol>\n<li>What will the new API endpoint look like? Is a since PATCH endpoint fine?</li>\n<li>Shall we make a new view function for the new endpoint, or extend the old one?</li>\n</ol>",
  "<p>There were two separate perf issues here, and I think that probably <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/topic.20move.20performance\">#backend &gt; topic move performance</a> is the more common one (and the one we know less about).</p>",
  "<p>Actually, I don't think we have the option of using the same view function for the new endpoint, since the data that the client will pass to the new endpoint will be very different :)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"16839\">Abhijeet Bodas</span> <a href=\"#narrow/stream/3-backend/topic/Follow.20Topics/near/1501379\">said</a>:</p>\n<blockquote>\n<p>Actually, I don't think we have the option of using the same view function for the new endpoint, since the data that the client will pass to the new endpoint will be very different :)</p>\n</blockquote>\n<p>why so?</p>\n<p>Let's say we add an option for UNMUTE in the client<br>\n Now, within a view:</p>\n<div class=\"codehilite\"><pre><span></span><code>if op == &quot;add&quot;:  mute_topic()\nif op == &quot;remove&quot;: unmute_topic()\nif op == &quot;change_visibility_policy&quot;: set_visibility_policy()\n</code></pre></div>\n<p>It takes care of the older clients accessing this endpoint. right?</p>\n<p>But, of course, separating things into separate files (views/user_topic.py &amp; views/user_mutes.py) will be a better choice in my opinion.</p>",
  "<p>Cool, I'll take that as the priority item instead then. Thanks!</p>",
  "<p>It's definitely the one I run into the most.</p>",
  "<p>I don't think we can easily just not send at least the id/name pair for all users; a lot of components, like mention and private message recipient typeahead, need to be able to access all users that exist, not just those who have been active recently, and there's basically 3 simple options for how to handle that:</p>\n<ul>\n<li>Include the full <code>users</code> data set in the initial response.</li>\n<li>Fetch the full data <code>users</code> data set slightly lazily, e.g. the first time that the user tries to access it.</li>\n<li>Have the typeahead query the server after every keypress before it can show results. This is what GitHub's typeahead does, which makes sense given that they're a global namespace for users, but it's a visibly slow experience.</li>\n</ul>",
  "<p>I think probably the short-term answer here is to just allow this cache to be 2MB, given that.</p>",
  "<p>There are other fancy things that are theoretically possible, involving caching data on clients between sessions, but I'd rather avoid them if at all possible.</p>",
  "<p>I think a new view function is the right path forward. We may find that we can reimplement the old muted topic endpoint as calling the \"change topic visibility policy\" endpoint internally, but that's an implementation detail we can do if appropriate once we've got the interface we like.</p>",
  "<p>I think it's probably reasonable to moving the topic muting functions out of <code>zerver/views/muting.py</code> into a <code>user_topics.py</code> (and just have the legacy API endpoint functions sit at the end of that file as we add the modern <code>user_topics</code> API there) -- that's probably a better discoverability experience than leaving the muted topics views in the old file.</p>",
  "<p>And I generally agree that we should be able to replace all the functions with a <code>do_set_user_topic_visibility_policy</code> method that takes care of everything.</p>",
  "<p>So far I both can't get a repro locally (messages move quite quickly), and can't get the output I would expect from <a href=\"https://github.com/benfred/py-spy\">py-spy</a>, a profiler that can be attached to running Python processes on systems supporting <code>ptrace</code> (meaning if I could at least see the expected output, I could feasibly run this against CZO and quite literally \"test it in production\").</p>\n<p>Stepping away for lunch; will probably keep poking at <code>py-spy</code> for a bit before moving on to another profiling method.</p>",
  "<p>For the endpoint URL, we probably want something like <code>PATCH /users/me/subscriptions/&lt;int:stream_id&gt;/topics/&lt;str:topic_name&gt;</code>, with a <code>visibility_policy</code> parameter; that would provide the flexibility to add other <code>UserTopic</code> things there. But that's probably best proposed in detail in <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/muted.20topics\">#api design &gt; muted topics</a>.</p>",
  "<p>I expect that it's going to be hard to do the profiling in prod, since you don't have any control over which django process gets the request.  You may have success profiling against <code>./manage.py shell</code> calling the move function.</p>",
  "<p>I've used py-spy in prod when I had a specific process to profile (you can search here), and it worked moderately well.</p>",
  "<p>Just to be clear what I was suggesting above, <code>zilencer/management/commands/profile_request.py</code> is a tool that can be used for this purpose by hand-editing what request it makes.</p>",
  "<p>Aha, that makes sense.</p>",
  "<p>I have updated  PR <a href=\"https://github.com/zulip/zulip/pull/24236\">#24236</a></p>\n<p>Backend-Test is failing due to <code>2 lines missing coverage</code>.</p>\n<p>I have discussed the reason <a href=\"https://github.com/zulip/zulip/pull/24236/files#r1096335153\">here (comment)</a> [<strong>help needed</strong>]</p>\n<p><strong>All the major work is done.</strong></p>\n<p>ToDo(s):</p>\n<ul>\n<li><a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1092341658\">Tests Refactoring</a></li>\n<li><a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1092340038\">Refactoring -- Tests Helper functions</a></li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> <span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> <br>\nYou can have an initial look at the updated PR  -- Thanks.</p>",
  "<p>Is there anything blocking deletion of all our unused statsd code?</p>",
  "<p>I think the answer is no. It's generally all located in places that could be useful to instrument with whatever we're using for counters, but those places are pretty easy to find in any case, especially since we have Git to look at it.</p>",
  "<p>(Just did a look through <code>git grep statsd</code>)</p>",
  "<p>It is not possible to show the name of the user who made the changes in the message using pre_save or post_save signal. <br>\nThis was required in <a href=\"https://github.com/zulip/zulip/issues/23641\">the original issue</a>.<br>\nA workaround is sending a notif (adding the lines of code that send a notfi) in every function that lets user profile be changed.<br>\nShould this approach be followed? Or what else can be done?<br>\nFor reference, <a href=\"https://github.com/zulip/zulip/pull/24214\">this PR</a> contains the code with pre_save signal.</p>",
  "<p>I left some comments on the last commit. For the earlier ones, I think it would be fine to replace both the \"add\" and \"remove\" functions in a single commit  -- the same one which will introduce the new <code>set_user_topic</code> function.</p>",
  "<p>Yeah, I'm +1 on removing that.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_realm_user_dicts.20size/near/1501579\">said</a>:</p>\n<blockquote>\n<p>I think probably the short-term answer here is to just allow this cache to be 2MB, given that.</p>\n</blockquote>\n<p>This feels pretty unsatisfying.</p>\n<p>That we have a fundamental scaling problem which is O(n) in both time and space for the number of users that have ever signed up, during first page-load, seems pretty unfortunate.  Even what we do for web-public sessions, where we at least ship <code>/</code> so it can render s a spinning loading progressbar (and get users in a second request), seems probably preferable to what we do for logged-in sessions, where we wait for you to pull down and parse the huge JSON blog before we render <em>any</em> Zulip UI.</p>\n<p>I guess the point that I'm making isn't that 2MB is onerous on the server-side for the memcached limit, but rather that it's a smell for a protocol decision which I think has bad effects for clients trying to load Zulip.</p>",
  "<p>Cross linking <a href=\"https://github.com/zulip/zulip/pull/24236#issuecomment-1419347396\">PR summary (comment)</a></p>",
  "<p>Notify users when their account is modified <a href=\"https://github.com/zulip/zulip/issues/23641\">#23641</a><br>\nCurrently using pre_save or post_save signal it probably is not possible to show the name of the user who made the changes to receipients profile.<br>\n--&gt; This was required in <a href=\"https://github.com/zulip/zulip/issues/23641\">the issue</a>.<br>\n--&gt; A workaround is sending a notif (adding the lines of code that send a notfi) in every function that lets user profile be changed.<br>\nShould this approach be followed? Or what else can be done?<br>\nthe current code with pre_save signal is in <a href=\"https://github.com/zulip/zulip/pull/24214\">this PR</a></p>",
  "<p>Well, this was the short-term answer, not the long-term answer -- and my claim is there isn't a localized/cheap change that we can make here that would solve those problems.</p>",
  "<p>I agree we can and should shift the way the that the app loads to work like the public access view, where we do the <code>/register</code> API request after showing a loading page; probably worth forking a separate thread for that. (Or at least do that for organizations above a certain size; the current model saves an RTT and maybe that could be significant in smaller organizations with high latency to the Zulip server). But that just changes when we do the fetch -- we'll still not be able to let you do anything until we fetch the full data set.</p>",
  "<p>There are longer-term options for changing how we manage the <code>users</code> data set. Just to spell out probably the most credible idea:</p>\n<ul>\n<li><code>long_term_idle</code> is not suitable for not including a user in typeahead -- one does need to be able to mention someone who was active in the community a year ago and have that work. </li>\n<li>I think probably we just need the entire user data set to be accessible there. But we could potentially do something like lazy-load the full data the first time you do one of the ~5 tasks that actually require it -- filtering in the right sidebar, various typeaheads, the \"Users\" panel in settings, etc. We have precedent for this -- we do the same thing for \"what topics exist in a stream's history\" today. </li>\n<li>And then we could have whatever clever optimization algorithm we want for a smaller set that is sent on page load; might be <code>!long_term_idle</code>, or maybe a significantly larger but still small subset like \"has sent a message or been present in the last 3 months\". But the key thing would be that to arrange things such that nothing breaks if we don't have data on a user cached. </li>\n<li>We would need to change all the message fetching/display logic to fetch data for users that they need to display if that's not already available. Possibly it' d be simplest to just have those code paths all use the same \"Get me the full <code>users</code> data set\" function rather than fetching the individual users they need, and that's just an at-most-1-time thing you do per session.</li>\n</ul>\n<p>But that doesn't feel like a quick refactor, and that's not even the biggest chunk of the <code>/</code> response on extremely large organizations like this one. (I'm pretty sure it's the \"which users are in which streams\" structure, which is slightly quadratic but just a bunch of IDs, and we had some ideas for how to compress much better but haven't had a chance to pursue).</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25579\">@Ujjwal Aggarwal</span> yeah, I don't think you can do this via a Django post_save hook, since the <code>acting_user</code> will not be available; you'll instead want to change the actual <code>do_</code> functions to trigger this notification.</p>",
  "<p>That should be fine -- we have an architecture where all changes go through those functions in order to trigger the Tornado events via <code>send_event</code> correctly.</p>",
  "<p>You'll likely want to write a <code>notify_user_profile_edited</code> type function that you can call from a few places? Not sure, and maybe there's an existing function that you can extend to take care of this.</p>",
  "<p>Nice, thanks for the well-organized summary!</p>",
  "<p>So I think probably for the next 3 months, just increasing those cache sizes will buy us the time to do that without any cliff-shaped user-facing impact.</p>",
  "<p>Regarding <a href=\"https://github.com/zulip/zulip/pull/21535#issuecomment-1419775192\">https://github.com/zulip/zulip/pull/21535#issuecomment-1419775192</a>,<br>\nWould it be a good idea to convert the <code>topic_name</code> field in <code>UserTopic</code> model to use the <code>CIText</code> type? It allows Postgres to know that the field is case insensitive (and then the UNIQUE constraint will also become case insensitive as a result).</p>\n<p>References:</p>\n<ul>\n<li><a href=\"http://shuber.io/case-insensitive-unique-constraints-in-postgres/\">http://shuber.io/case-insensitive-unique-constraints-in-postgres/</a></li>\n<li><a href=\"https://www.postgresql.org/docs/current/citext.html\">https://www.postgresql.org/docs/current/citext.html</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.1/ref/contrib/postgres/fields/#citext-fields\">https://docs.djangoproject.com/en/4.1/ref/contrib/postgres/fields/#citext-fields</a></li>\n</ul>",
  "<p>Broadly, aren't topics case-insensitive throughout Zulip? Can we use this extension elsewhere as well?</p>",
  "<p>Hm -- I didn't think we did case-insensitive merging of topics, but apparently we do?</p>\n<p>These render in the client as the same -- even though if you click on them, they adjust the case of the topic in the reply box, so they clearly preserve their own case.<br>\n<a href=\"#narrow/stream/7-test-here/topic/TEST/near/1504317\">https://chat.zulip.org/#narrow/stream/7-test-here/topic/TEST/near/1504317</a><br>\n<a href=\"#narrow/stream/7-test-here/topic/test/near/1504306\">https://chat.zulip.org/#narrow/stream/7-test-here/topic/test/near/1504306</a></p>",
  "<blockquote>\n<p>The citext module provides a case-insensitive character string type, citext. Essentially, it internally calls lower when comparing values. Otherwise, it behaves almost exactly like text.</p>\n</blockquote>\n<p>CIText just uses <code>lower</code> internally for comparisons, so I guess the string would still be case-aware?</p>",
  "<p><code>get_context_for_message</code> has a bug, then, in that it uses <code>subject=</code> and not <code>subject__iexact=</code></p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/24316\">#24316</a> for that fix.</p>",
  "<p>Yes, topics are case-preserving but case-insensitive.</p>",
  "<p>Hmm, I see this note on the Django docs: </p>\n<blockquote>\n<p>On PostgreSQL 12+, it\u2019s preferable to use non-deterministic collations instead of the citext extension. You can create them using the CreateCollation migration operation. For more details, see Managing collations using migrations and the PostgreSQL documentation about non-deterministic collations.</p>\n</blockquote>",
  "<p>The postgres docs have a similar note. Here's the docs for the feature they recommend instead: <a href=\"https://www.postgresql.org/docs/current/collation.html#COLLATION-NONDETERMINISTIC\">https://www.postgresql.org/docs/current/collation.html#COLLATION-NONDETERMINISTIC</a></p>",
  "<p>Have you gotten any further time to poke at this, <span class=\"user-mention\" data-user-id=\"25085\">@Josh Klar</span>?</p>",
  "<p>Not to a degree that I have new learnings - time, yes, results yet, no. It's my sole focus item today rather than the typical bouncing around so I'm hopeful I'll get somewhere useful with this.</p>",
  "<p>Cool. Feel free to live-blog the investigation a bit -- that can be helpful for us having opportunities to suggest things to try.</p>",
  "<p>Earlier in <a href=\"https://github.com/zulip/zulip/pull/24236/files#diff-97e4a396cdf669d3e133f04bc7fe98e0057cc6eece60ef2aa80ea3fd40a9eb3bR108\"><code>set_user_topic_visibility_policy()</code></a>, we were using:</p>\n<div class=\"codehilite\"><pre><span></span><code>    UserTopic.objects.bulk_create(\n        [\n            UserTopic(\n                user_profile=user_profile,\n                stream_id=stream_id,\n                recipient_id=recipient_id,\n                topic_name=topic_name,\n                last_updated=date_muted,\n                visibility_policy=UserTopic.MUTED,\n            ),\n        ],\n        ignore_conflicts=ignore_duplicate,\n    )\n</code></pre></div>\n<p>It creates a new object or raises an <code>Integrity Error</code>.</p>\n<p>Now, we are planning to use: (b/c we have now other visibility policies, other than just MUTE)</p>\n<div class=\"codehilite\"><pre><span></span><code>        UserTopic.objects.bulk_create(\n            [\n                UserTopic(\n                    user_profile=user_profile,\n                    stream_id=stream_id,\n                    recipient_id=recipient_id,\n                    topic_name=topic_name,\n                    last_updated=date_added,\n                    visibility_policy=visibility_policy,\n                ),\n            ],\n            ignore_conflicts=ignore_duplicate,\n            update_conflicts=update_duplicate,\n            update_fields=[&quot;visibility_policy&quot;],\n            unique_fields=[&quot;user_profile&quot;, &quot;stream&quot;, &quot;topic_name&quot;],\n        )\n</code></pre></div>\n<p>It creates or updates (if {user_profile, stream, topic_name} already exists).</p>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/ref/models/querysets/#bulk-create\">Django Docs</a> -- related to new parameters being used.</p>\n<p><strong>We are no longer raising <code>Integrity Error</code>.</strong><br>\n<strong>Is it possible in this scenario to generate DB level <code>Integrity Error</code>?</strong></p>\n<p>Because, if we have {user_profile, stream, topic, <strong>same_visibility_policy</strong>} , then an <code>Integrity Error</code> should be raised. right?</p>",
  "<p>I think <code>ignore_conflicts</code> and <code>update_conflicts</code> are mutually exclusive.</p>",
  "<p>You should be able to test by using two <code>./manage.py shell</code> windows, but I expect that <code>update_conflicts</code> will do nothing with no exception if there's an insert of the same visibility policy.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/topic.20move.20performance/near/1501638\">said</a>:</p>\n<blockquote>\n<p>Just to be clear what I was suggesting above, <code>zilencer/management/commands/profile_request.py</code> is a tool that can be used for this purpose by hand-editing what request it makes.</p>\n</blockquote>\n<p>The hand-splicing here is definitely a bit \"fun\" to a codepath one isn't familiar with (<code>update_message_backend</code> in this case), but the output is more what I expected than what py-spy gave me the other day (and requires less hacking up the Docker container than py-spy or Austin did). (learning that no modern visualization tools work with <code>cProfile</code> and I had to fall back to qcachegrind-no-wait-now-it's-a-KDE-only-thing was the next speed bump here).</p>\n<p>The call graph for this endpoint is rather massive and I'm still trying to make sense of it: 77% of the time is spent in <code>zerver/actions/message_edit.py#do_update_message</code>, itself a massive function with lots of outbound calls (some appear DB-related, so while I still can't repro the sluggishness in message move locally, I have a hunch there's tricky N+1 stuff going on in here that would be a bigger deal on CZO than local).</p>\n<p>I've still got reading to do.</p>",
  "<p>There's also a very fun <code>&lt;cycle 6&gt;</code> entry in the trace which I expect is GC-related, but is formatted as if it were a function call itself, and includes a bunch of SQL-related lines, so there may be more to read into there (later).</p>",
  "<blockquote>\n<p>I think ignore_conflicts and update_conflicts are mutually exclusive.</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>I expect that update_conflicts <strong>will do nothing with no exception</strong> if there's an insert of the same visibility policy.</p>\n</blockquote>\n<p>Right </p>\n<p>So, regarding the ongoing discussion in <a href=\"#narrow/stream/3-backend/topic/UserTopic.3A.20Case.20insensitive.20topic.20name/near/1504315\"># backend &gt; UserTopic: Case insensitive topic name</a> which is somewhat related to the PR <a href=\"https://github.com/zulip/zulip/pull/24236\">#24236</a> <a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1097942447\">(related comment)</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Topic muting</span>\n    <span class=\"k\">if</span> <span class=\"n\">topic_is_muted</span><span class=\"p\">(</span><span class=\"n\">user_profile</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">JsonableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Topic already muted\"</span><span class=\"p\">))</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">do_mute_topic</span><span class=\"p\">(</span><span class=\"n\">user_profile</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">,</span> <span class=\"n\">date_muted</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">IntegrityError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">JsonableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Topic already muted\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<ul>\n<li>We should keep <a href=\"https://github.com/zulip/zulip/pull/21535#issuecomment-1419775192\">topic_is_muted</a> (comment) and remove the <code>Integrity Error</code>check. -- right? </li>\n</ul>\n<p>Our current plan is to --  remove <code>topic_is_muted</code> and perform only DB level <code>integrity error</code> check.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25085\">@Josh Klar</span> I think you can try uncommenting this block in <code>zproject/computed_settings.py</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>        ## Uncomment the following to get all database queries logged to the console\n        # &#39;django.db&#39;: {\n        #     &#39;level&#39;: &#39;DEBUG&#39;,\n        #     &#39;handlers&#39;: [&#39;console&#39;],\n        #     &#39;propagate&#39;: False,\n        # },\n</code></pre></div>",
  "<p>It will log every database query made as well as how long each of those queries took; this can be super useful for identifying queries in loops and the like.</p>",
  "<p>I'm happy to help analyze output if you can post it.</p>",
  "<p>The other direction is to use <code>manage.py populate_db --num-users=20000</code> (locally!) and see if that lets you reproduce this sort of slow behavior in a development environment.</p>",
  "<p>Populating might help - later into yesterday I tried a bunch of repro scenarios here, the only case that would repro the sluggishness was moving from this stream over to <a class=\"stream\" data-stream-id=\"7\" href=\"/#narrow/stream/7-test-here\">#test here</a>, not within <a class=\"stream\" data-stream-id=\"7\" href=\"/#narrow/stream/7-test-here\">#test here</a>. I tried various ways locally to make a stream act like this one (web public, more active/online users, etc) and couldn't repro, so largely started blindly reading profile output to take educated guesses of what was likely to slow down in such streams.</p>\n<p>I'll give this a go shortly and report back.</p>",
  "<p>I don't quite remember why we moved to <code>bulk_create</code> for a single row in the first place, but I think we should be able to just do a <code>get_or_create</code> operation inside a transaction, and handle updating an existing row in Python.</p>",
  "<p>I think structurally, the simplest option is to make sure we have a transaction around the whole block including the check for whether a row exists.</p>",
  "<p>Just an update on this PR -- I think the thing we're stuck on is <a href=\"https://github.com/zulip/zulip/pull/16381#discussion_r1100891702\">https://github.com/zulip/zulip/pull/16381#discussion_r1100891702</a>; apparently while the Zulip web app has consistently used <code>OFFLINE_THRESHHOLD_SECS=140</code>, the server has used both that value and <code>5 * 60 = 300</code>.</p>",
  "<p>OK, I think I understand the previous state of the world. <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> FYI:</p>\n<ul>\n<li>We use the 300s version in exactly two places.</li>\n<li>One of them is unimportant (the \"Go invisible\" code path's made up time stamp to have the user appear as offline immediately), though of course it should agree with the others.</li>\n<li>The other is that the <code>presence</code> API endpoint reports users as \"offline\" using the 300s value. I think this is mostly non-operative, because clients are supposed to use their own understanding of time to decide what's offline, to manage lag issues. I'll post the JS code shortly.</li>\n<li>Mobile has <code>OFFLINE_THRESHHOLD_SECS=140</code> hardcoded as well.</li>\n</ul>",
  "<p>Here's the web frontend's core logic here:</p>\n<div class=\"codehilite\"><pre><span></span><code>const OFFLINE_THRESHOLD_SECS = 140;\n....\n\n/*\n    If the server sends us `active_timestamp`, this\n    means at least one client was active at this time\n    (and hasn&#39;t changed since).\n\n    As long as the timestamp is current enough, we will\n    show the user as active (even if there&#39;s a newer\n    timestamp for idle).\n*/\nif (age(active_timestamp) &lt; OFFLINE_THRESHOLD_SECS) {\n    return {\n        status: &quot;active&quot;,\n        last_active,\n    };\n}\n\nif (age(idle_timestamp) &lt; OFFLINE_THRESHOLD_SECS) {\n    return {\n        status: &quot;idle&quot;,\n        last_active,\n    };\n}\n\nreturn {\n    status: &quot;offline&quot;,\n    last_active,\n};\n</code></pre></div>",
  "<p>I think in the new API, that will just look like:</p>\n<div class=\"codehilite\"><pre><span></span><code>if (age(last_connected_time) &gt; OFFLINE_THRESHOLD_SECS) {\n    // treat as offline\n}\n\nif (age(last_active_time) &gt; OFFLINE_THRESHOLD_SECS) {\n    // treat as idle\n}\n\n// treat as active\n</code></pre></div>",
  "<p>Overall what I think this means is that:</p>\n<ul>\n<li>We should standardize on a single value, which is currently 140s, and perhaps have that live in the <code>settings.py</code></li>\n<li>We should add that value to the <code>server_settings</code> section of the API, so that clients can just get this value from the server, making it possible to change it meaningfully from 140s. </li>\n<li>The initial value of that should be 140s, which I'm pretty sure was selected as \"plenty of network/other latency more than 2 x ACTIVE_PING_INTERVAL_MS\". This is a pretty aggressive value; even a single request being missed or 500ing can result in a user appearing offline. (Since there's a lag of up to one full ping interval between when the other client checks in and when you check in, and so we'll be at almost 2 ping intervals when you issue your next request that might get an updated connection time from that user ). We want to change this to at least <code>3 x ACTIVE_PING_INTERVAL_MS + 20s</code>, while still having it small enough that a user who leaves appears gone reasonably quickly -- so probably 180s given that the ping interval is currently 50s.</li>\n<li>We should also add the other similar constant to the API: <code>const ACTIVE_PING_INTERVAL_MS = 50 * 1000;</code>, since those two likely need to be related for a coherent experience.</li>\n</ul>",
  "<blockquote>\n<p>I don't quite remember why we moved to bulk_create for a single row in the first place,</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1092336633\">Relevant (comment)</a> -- If not used, it reverts the work done in <a href=\"https://github.com/zulip/zulip/commit/781107308da36f3a5ab70408a0f95acb3b2a82e4\">7811073</a></li>\n<li>Also, if we use <code>get_or_create</code> (which <span class=\"user-mention silent\" data-user-id=\"13455\">Kartik Srivastava</span> used in <a href=\"https://github.com/zulip/zulip/pull/22923\">#22923</a>) -- it leads to an increase in query count.<br>\n<a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1092337780\">Relevant (comment)</a></li>\n</ul>\n<p>ps: <a href=\"https://github.com/zulip/zulip/pull/24236#issuecomment-1419347396\">PR summary</a></p>",
  "<p>I posted a specific proposal for the API changes to pass constants to clients here: <a href=\"#narrow/stream/378-api-design/topic/presence.20rewrite/near/1506221\">https://chat.zulip.org/#narrow/stream/378-api-design/topic/presence.20rewrite/near/1506221</a></p>",
  "<p>I will note that my research suggests mobile is using 60s for the <code>ACTIVE_PING_INTERVAL</code> equivalent. Probably the right plan is to switch the web app to using that value as well; I don't think we have a strong reason to use 50s instead, and then we'll be able to have all clients agree on the current value (at the same time as we make it the case that we can change these in the future).</p>",
  "<p>Which I think suggests we actually want 200s, not 180s, for the future value of <code>ACTIVE_PING_INTERVAL_MS</code>, since that's somewhat more than 3x it. I believe it'll be completely safe for older versions of the mobile app to still be using 140s there -- they'll just be less tolerant of transient errors before marking someone offline.</p>",
  "<p>Apparently we used to have a value of 60s originally and moved it to 50s early in Zulip development in <a href=\"https://github.com/zulip/zulip/commit/a305a7de6380dc12e8bffe1dcea758c3455c6fbc\">a305a7de6380dc12e8bffe1dcea758c3455c6fbc</a>. I wonder if the original Zulip mobile apps had 60s, never got that update, and then were used as a reference instead of the the web app when writing the modern mobile apps' presence implementation.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> assuming that the analysis above makes sense and the naming proposals in <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/presence.20rewrite\">#api design &gt; presence rewrite</a> get approved, I think that means what we should do is a quick prep PR that:</p>\n<ul>\n<li>First, refactors the server to use <code>settings.OFFLINE_THRESHOLD_SECS</code>, changing its value to the original value of 140 that's currently used in all the important code paths. (Or maybe a new setting name that aligns with the name in the API design thread).</li>\n<li>Second, does the API change to add the new constants as determined by the API design thread.</li>\n<li>Third, has the web app use those values from <code>page_params</code> via the API.</li>\n<li>Fourth, changes the <code>OFFLINE_THRESHOLD_SECS</code> equivalent to 200s. </li>\n</ul>\n<p>And then we can deploy that here, make sure that presence doesn't exhibit weird quirks, and then be able to integrate and deploy <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/topic.20move.20performance/near/1506127\">said</a>:</p>\n<blockquote>\n<p>The other direction is to use <code>manage.py populate_db --num-users=20000</code> (locally!) and see if that lets you reproduce this sort of slow behavior in a development environment.</p>\n</blockquote>\n<p>(documenting for the sake of anyone who stumbles upon this in a search later: the arg is <code>--extra-users=20000</code>. expect it to take... upwards of 20 minutes, so far, and counting)</p>",
  "<p>That's a lot higher than I'd expect; but I perhaps should have suggested 3000 instead <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>.</p>",
  "<p>(Since realistically you'll know whether the profile is similar in shape or not at that size)</p>",
  "<p>my first timestamp in the logs is a memcache clear at 21:10 UTC. it's now 41 after, and we're still going <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I don't mind 20k user generation though, that's <em>about</em> the population of this stream and I hope that allows a local repro. I really don't want to have to hack profiling statements into CZO just to get to the bottom of this...</p>",
  "<p>Though for what it's worth, <code>update_messages_for_topic_edit</code> is my top hunch for now of where we might be burning such time on CZO (even if it's the shortest call locally): it's another mammoth method with lots of outbounds, notably, lots of topic changing after a <code>select_related</code> call that draws my attention, and method calls that seem to care about stream changes specifically (which would help explain why only <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a>  to <a class=\"stream\" data-stream-id=\"7\" href=\"/#narrow/stream/7-test-here\">#test here</a> seems to trigger the sluggishness in my testing). I'll dig in more once this (now 40+ minutes - I'll probably let it finish in spite of Sunken Cost Fallacy) population completes.</p>\n<p><a href=\"/user_uploads/2/71/7N9E95q5hWBJMOpS_WksAB6h/screenshot-2023-02-09-214250Z.png\">screenshot-2023-02-09-214250Z.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/71/7N9E95q5hWBJMOpS_WksAB6h/screenshot-2023-02-09-214250Z.png\" title=\"screenshot-2023-02-09-214250Z.png\"><img src=\"/user_uploads/2/71/7N9E95q5hWBJMOpS_WksAB6h/screenshot-2023-02-09-214250Z.png\"></a></div>",
  "<p>What're the % numbers on that diagram, and is that from local profiling or CZO?</p>",
  "<p>Local profiling. The % numbers are the rolled up total percentage of overall <code>update_message_backend</code> call time spent on that tree branch (inclusive of all children). This makes a touch more sense if I zoom out a bit or just give you the whole profile graph, as such: <a href=\"/user_uploads/2/3f/SwW0OKFy37c_lW3X6gjjHVzr/profile.png\">profile.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/3f/SwW0OKFy37c_lW3X6gjjHVzr/profile.png\" title=\"profile.png\"><img src=\"/user_uploads/2/3f/SwW0OKFy37c_lW3X6gjjHVzr/profile.png\"></a></div><p>I originally dived into <code>update_to_dict_cache</code> but didn't find much alarming in there yesterday compared to the other two methods. The breadcrumbs branch I'm still parsing my way through and don't have strong opinions on yet. All of this is high-level exploration until I can properly repro a slow case locally.</p>",
  "<p>(which, once I got GraphViz working yesterday, the <code>&lt;cycle 6&gt;</code> thing I'd alluded to became a bit more clear: it seems to be the bucket where external FFI calls go, in this case, to the SQL engine. what's a little less clear is why I don't see arrows leading from <code>update_messages_for_topic_edit</code> over to <code>&lt;cycle 6&gt;</code>, as that branch should be making SQL calls as well, from what I can see in the code)</p>",
  "<p>Final time to DB population: well over an hour (I know it crossed at least 1h15m last I'd looked at it). This winds up being a strong incentive to back up this DB for future use: if I need to recreate the Vagrant environment to re-add <code>--capability SYS_PTRACE</code> (say, to use <a href=\"https://github.com/P403n1x87/austin\">https://github.com/P403n1x87/austin</a> instead of cProfile), I don't want to sit through that again...</p>",
  "<p>Yikes!</p>",
  "<p>Hm, maybe the <code>&lt;cycle 6&gt;</code> link doesn't exist in this version because it didn't happen to catch any samples during SQL calls?&gt;  But that seems a bit dubious.</p>",
  "<p>I also think that tossing in a couple logging calls in CZO's deployment and running <code>./manage profile_request</code> is potentially reasonable.  They'll give ballpark senses of where to focus, if you can't repro it locally.</p>",
  "<p>Darn. With the new barrage of local \"users\" I finally reproed the sluggishness... and then got hit with a DB integrity error that 500'd the whole thing. Anyway, I think I have a path to getting a profile for at least the most egregiously bad parts of this now.</p>",
  "<p>I've dug through this trying to see if there's anything egregious Python-side (mind you this is a partial profile, as I get integrity 500s late in the process), but so far, signs are pointing to my hunch about <code>update_messages_for_topic_edit</code> only being a small chunk in the happy path being wrong: it's not even called during the slowest bits of the request. 36% of our time is spent in what seems to be a Django query iterator (and I don't yet have great insight as to what line is calling it, especially so many times, best I'm getting is that it's from <code>do_update_message</code>: more reading or tinkering required), 28% of our time is spent in that message breadcrumbs method I'd mentioned was something I haven't investigated too heavily yet (so now I guess I have a reason to do so). Total request time to move even just two messages in this case was ~8s before the 500 was triggered.</p>\n<p><a href=\"/user_uploads/2/5d/-0sn4fqip5GGjEGCmiF1BdA1/slowprofile.png\">slowprofile.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/5d/-0sn4fqip5GGjEGCmiF1BdA1/slowprofile.png\" title=\"slowprofile.png\"><img src=\"/user_uploads/2/5d/-0sn4fqip5GGjEGCmiF1BdA1/slowprofile.png\"></a></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Follow.20Topics/near/1506164\">said</a>:</p>\n<blockquote>\n<p>I don't quite remember why we moved to <code>bulk_create</code> for a single row in the first place, but I think we should be able to just do a <code>get_or_create</code> operation inside a transaction, and handle updating an existing row in Python.</p>\n</blockquote>\n<p>I guess <code>bulk_create</code> was used just to avoid using a transaction: <a href=\"https://github.com/zulip/zulip/pull/21535#discussion_r834574553\">https://github.com/zulip/zulip/pull/21535#discussion_r834574553</a> and <a href=\"https://github.com/zulip/zulip/pull/21535#issuecomment-1078518363\">https://github.com/zulip/zulip/pull/21535#issuecomment-1078518363</a></p>",
  "<p>(I opened <a href=\"https://github.com/zulip/zulip/pull/24354\">#24354</a>, which removes the first check for user mutes)</p>",
  "<p>I've also tried to add a case-insensitive index to the <code>UserTopic</code> table in that PR.</p>",
  "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/Follow.20Topics\">#backend &gt; Follow Topics</a> by <span class=\"user-mention silent\" data-user-id=\"16839\">Abhijeet Bodas</span>.</p>",
  "<p>Sending the moved-message breadcrumbs is surprising to me that it takes any time, since that's just ... sending a message, which we should be good and fast at?</p>",
  "<p>Like, taking 28% of the 8s means that took &gt; 2s?  That's crazy for just a message send.</p>",
  "<p>But there's also that <code>__iter__</code> hanging out taking 38% of the time, which is just as mysterious to me.</p>",
  "<p>Probably the <code>__iter__</code> of a psycopg2 query.</p>",
  "<p>Yeah, that's what I was assuming, but which query?  And I thought we previously determined that most of the time wasn't spent in Pg -- though that was based on the logline data, which may be flawed, I guess.</p>",
  "<p>Or I guess of a Django <code>QuerySet</code>, since we\u2019re above <code>TimeTrackingCursor.execute</code>.</p>",
  "<p>Hm, gotta be one of these, I guess?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># When messages are moved from one stream to another, some</span>\n<span class=\"c1\"># users may lose access to those messages, including guest</span>\n<span class=\"c1\"># users and users not subscribed to the new stream (if it is a</span>\n<span class=\"c1\"># private stream).  For those users, their experience is as</span>\n<span class=\"c1\"># though the messages were deleted, and we should send a</span>\n<span class=\"c1\"># delete_message event to them instead.</span>\n\n<span class=\"n\">subs_to_old_stream</span> <span class=\"o\">=</span> <span class=\"n\">get_active_subscriptions_for_stream_id</span><span class=\"p\">(</span>\n    <span class=\"n\">stream_id</span><span class=\"p\">,</span> <span class=\"n\">include_deactivated_users</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile\"</span><span class=\"p\">)</span>\n<span class=\"n\">subs_to_new_stream</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n    <span class=\"n\">get_active_subscriptions_for_stream_id</span><span class=\"p\">(</span>\n        <span class=\"n\">new_stream</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">include_deactivated_users</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Dunno what that <code>list</code> is doing in there, though that isn't the problem.</p>",
  "<p>But that's a very wide query for what is just the user-ids.</p>",
  "<p>It\u2019s iterated twice; the second iteration accesses <code>user_profile.is_guest</code>.</p>",
  "<p>Ahhh, yeah, later.  <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
  "<p>Someone may have thought the <code>list</code> was necessary to cache the result between the two iterations, even though <code>QuerySet</code> does that already.</p>",
  "<p><code>ums</code> is also an iterated <code>QuerySet</code>.</p>",
  "<p>As is <code>subscriber_ids = set(subscriptions.values_list(\"user_profile_id\", flat=True))</code> (potentially twice).</p>",
  "<p>Updated <a href=\"https://github.com/zulip/zulip/pull/24354\">#24354</a> to use the Django constraints API</p>",
  "<p>I guess using the collation method would a bigger project? (Since we might want to switch to using collations for the whole of Zulip, not just <code>UserTopic</code>s?)</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/24236#issuecomment-1426987581\">Updated summary (comment)</a> -- after <a href=\"https://github.com/zulip/zulip/pull/24196\">#24196</a> got merged.</p>",
  "<p>Forking from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/topic.20move.20performance\">#backend &gt; topic move performance</a>, on the time to run <code>./manage.py populate_db --extra-users=20000</code>:<br>\n<span class=\"user-mention silent\" data-user-id=\"25085\">Josh Klar</span> <a href=\"#narrow/stream/3-backend/topic/topic.20move.20performance/near/1506479\">said</a>:</p>\n<blockquote>\n<p>Final time to DB population: well over an hour (I know it crossed at least 1h15m last I'd looked at it). </p>\n</blockquote>\n<p>I wanted to do this myself (when wanting to poke at perf for <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a>), so I ran it in py-spy with 1000 users.  Making the users is 4% of the time:<br>\n<a href=\"/user_uploads/2/a0/YsbpQzTQLNN392mp7KNMdCDx/Screenshot-2023-02-17-at-11.20.45-AM.png\">Screenshot-2023-02-17-at-11.20.45-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/a0/YsbpQzTQLNN392mp7KNMdCDx/Screenshot-2023-02-17-at-11.20.45-AM.png\" title=\"Screenshot-2023-02-17-at-11.20.45-AM.png\"><img src=\"/user_uploads/2/a0/YsbpQzTQLNN392mp7KNMdCDx/Screenshot-2023-02-17-at-11.20.45-AM.png\"></a></div><p>The rest of the time goes to sending out the 1000 test messages (!).  Passing <code>--num-messages=0</code> hence moves making 1k users to taking ~37s, instead of taking 2m50s.  And about 1/3 of the time of that is running <code>clear_database</code> to scrub the database first (because of <code>flush_alert_words</code>, mostly?  I'm stopping on this rabbithole, but...).</p>\n<p>But it's puzzling and a little worrying that it takes that long to send 1000 messages, given that's something we, euh, should be good at.</p>",
  "<p>Hmm yeah, this isn't ideal <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span>  I tried looking at the timings wiht just regular <code>populate_db</code> (default num of users) since that takes a while too. The actual <code>send_messages(messages)</code>call (<a href=\"https://github.com/zulip/zulip/blob/7cafbefdef76da9bd95856dfb4d9423cde992b2e/zilencer/management/commands/populate_db.py#L1120\">https://github.com/zulip/zulip/blob/7cafbefdef76da9bd95856dfb4d9423cde992b2e/zilencer/management/commands/populate_db.py#L1120</a>) takes ~15s on my machine which is significant.  Roughly half of that is spent on this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    for message in messages:\n        message_dict = build_message_send_dict(message=message)\n        message_dict_list.append(message_dict)\n</code></pre></div>\n<p>and the other half on</p>\n<div class=\"codehilite\"><pre><span></span><code>do_send_messages(message_dict_list)\n</code></pre></div>\n<p>so both are pretty bad</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/populate_db.20users.20performance/near/1509255\">said</a>:</p>\n<blockquote>\n<p>And about 1/3 of the time of that is running <code>clear_database</code> to scrub the database first (because of <code>flush_alert_words</code>, mostly?  I'm stopping on this rabbithole, but...).</p>\n</blockquote>\n<p>I lied about not going further down the rabbithole.  This is because each alert word deletion updates the realm caches, which requires fetching the realm again.</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/24410\">#24410</a>.</p>",
  "<p>The <code>build_message_send_dict</code> codepath has two big queries:<br>\n<a href=\"/user_uploads/2/5b/TRZ1fzKWtLEPvhwyxLL1LkA1/Screenshot-2023-02-17-at-12.51.03-PM.png\">Screenshot-2023-02-17-at-12.51.03-PM.png</a> <br>\nThose are:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/5b/TRZ1fzKWtLEPvhwyxLL1LkA1/Screenshot-2023-02-17-at-12.51.03-PM.png\" title=\"Screenshot-2023-02-17-at-12.51.03-PM.png\"><img src=\"/user_uploads/2/5b/TRZ1fzKWtLEPvhwyxLL1LkA1/Screenshot-2023-02-17-at-12.51.03-PM.png\"></a></div><div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>         <span class=\"n\">subscription_rows</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n             <span class=\"n\">get_subscriptions_for_send_message</span><span class=\"p\">(</span>\n                 <span class=\"n\">realm_id</span><span class=\"o\">=</span><span class=\"n\">realm_id</span><span class=\"p\">,</span>\n                 <span class=\"n\">stream_id</span><span class=\"o\">=</span><span class=\"n\">stream_topic</span><span class=\"o\">.</span><span class=\"n\">stream_id</span><span class=\"p\">,</span>\n                 <span class=\"n\">possible_wildcard_mention</span><span class=\"o\">=</span><span class=\"n\">possible_wildcard_mention</span><span class=\"p\">,</span>\n                 <span class=\"n\">possibly_mentioned_user_ids</span><span class=\"o\">=</span><span class=\"n\">possibly_mentioned_user_ids</span><span class=\"p\">,</span>\n             <span class=\"p\">)</span>\n             <span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n                 <span class=\"n\">user_profile_email_notifications</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span>\n                     <span class=\"s2\">\"user_profile__enable_stream_email_notifications\"</span>\n                 <span class=\"p\">),</span>\n                 <span class=\"n\">user_profile_push_notifications</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile__enable_stream_push_notifications\"</span><span class=\"p\">),</span>\n                 <span class=\"n\">user_profile_wildcard_mentions_notify</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile__wildcard_mentions_notify\"</span><span class=\"p\">),</span>\n             <span class=\"p\">)</span>\n             <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span>\n                 <span class=\"s2\">\"user_profile_id\"</span><span class=\"p\">,</span>\n                 <span class=\"s2\">\"push_notifications\"</span><span class=\"p\">,</span>\n                 <span class=\"s2\">\"email_notifications\"</span><span class=\"p\">,</span>\n                 <span class=\"s2\">\"wildcard_mentions_notify\"</span><span class=\"p\">,</span>\n                 <span class=\"s2\">\"user_profile_email_notifications\"</span><span class=\"p\">,</span>\n                 <span class=\"s2\">\"user_profile_push_notifications\"</span><span class=\"p\">,</span>\n                 <span class=\"s2\">\"user_profile_wildcard_mentions_notify\"</span><span class=\"p\">,</span>\n                 <span class=\"s2\">\"is_muted\"</span><span class=\"p\">,</span>\n             <span class=\"p\">)</span>\n             <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile_id\"</span><span class=\"p\">)</span>\n         <span class=\"p\">)</span>\n\n         <span class=\"n\">message_to_user_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">\"user_profile_id\"</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">subscription_rows</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>and:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>         <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">ValuesQuerySet</span><span class=\"p\">[</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">ActiveUserDict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">UserProfile</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n             <span class=\"n\">is_active</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n         <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span>\n             <span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n             <span class=\"s2\">\"enable_online_push_notifications\"</span><span class=\"p\">,</span>\n             <span class=\"s2\">\"enable_offline_email_notifications\"</span><span class=\"p\">,</span>\n             <span class=\"s2\">\"enable_offline_push_notifications\"</span><span class=\"p\">,</span>\n             <span class=\"s2\">\"is_bot\"</span><span class=\"p\">,</span>\n             <span class=\"s2\">\"bot_type\"</span><span class=\"p\">,</span>\n             <span class=\"s2\">\"long_term_idle\"</span><span class=\"p\">,</span>\n         <span class=\"p\">)</span>\n\n         <span class=\"c1\"># query_for_ids is fast highly optimized for large queries, and we</span>\n         <span class=\"c1\"># need this codepath to be fast (it's part of sending messages)</span>\n         <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query_for_ids</span><span class=\"p\">(</span>\n             <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span>\n             <span class=\"n\">user_ids</span><span class=\"o\">=</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">user_ids</span><span class=\"p\">),</span>\n             <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n         <span class=\"p\">)</span>\n         <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I doubt those have much low-hanging fruit.</p>",
  "<p>The thing that looks fishy to me is how long <code>asdict</code> from <code>dataclases</code> takes, in the Tornado side of <code>do_send_messages</code>:<br>\n<a href=\"/user_uploads/2/4b/NWuuepjO5kZh4HCDKvr0HBYc/Screenshot-2023-02-17-at-12.54.04-PM.png\">Screenshot-2023-02-17-at-12.54.04-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/4b/NWuuepjO5kZh4HCDKvr0HBYc/Screenshot-2023-02-17-at-12.54.04-PM.png\" title=\"Screenshot-2023-02-17-at-12.54.04-PM.png\"><img src=\"/user_uploads/2/4b/NWuuepjO5kZh4HCDKvr0HBYc/Screenshot-2023-02-17-at-12.54.04-PM.png\"></a></div>",
  "<p>That's 17% of the total time.</p>",
  "<p>And this whole thing seems a bit silly because <em>there are no clients connected</em>.  So all of the work in <code>process_message_event</code> we <em>know</em> is useless after the first line, where we call <code>get_client_info_for_message_event</code> and find no clients connected.  But we iterate over all of the users in the message regardless.</p>",
  "<p>Like, <a href=\"https://github.com/zulip/zulip/pull/24411\">#24411</a> seems reasonable to me as a optimization that prevents us doing a bunch of work for users who are never going to get a message in their queues?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/populate_db.20users.20performance/near/1509271\">said</a>:</p>\n<blockquote>\n<p>The <code>build_message_send_dict</code> codepath has two big queries:</p>\n</blockquote>\n<p>This also had a useless <code>SELECT realm...</code> fetch in a loop that just opened <a href=\"https://github.com/zulip/zulip/pull/24412\">https://github.com/zulip/zulip/pull/24412</a> to tweak. Only shaves off a second of my <code>manage.py populate_db</code> run (the <code>build_message_send_dict</code> loop goes from 7.5s to 6.5s) so not a big difference, but might as well get this little tweak out  of this rabbit hole i went down</p>",
  "<p>Hah.  I saw the same thing, but my fix wasn't as elegant:</p>\n<div class=\"codehilite\"><pre><span></span><code>From 50a905e845c623c4ff9807702e5d80eb9d2a2018 Mon Sep 17 00:00:00 2001\nFrom: Alex Vandiver &lt;alexmv@zulip.com&gt;\nDate: Fri, 17 Feb 2023 18:02:57 +0000\nSubject: [PATCH] populate_db: Reuse the same realm object.\n\nThis saves `build_message_send_dict` from re-fetching it every time.\n---\n zilencer/management/commands/populate_db.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/zilencer/management/commands/populate_db.py b/zilencer/management/commands/populate_db.py\nindex 8188f9e63e..28c3eb3bf1 100644\n--- a/zilencer/management/commands/populate_db.py\n+++ b/zilencer/management/commands/populate_db.py\n@@ -1136,8 +1136,9 @@ def send_messages(messages: List[Message]) -&gt; None:\n     # life of the database, which naturally throws exceptions.\n     settings.USING_RABBITMQ = False\n     message_dict_list = []\n+    realm = get_realm(&quot;zulip&quot;)\n     for message in messages:\n-        message_dict = build_message_send_dict(message=message)\n+        message_dict = build_message_send_dict(realm=realm, message=message)\n         message_dict_list.append(message_dict)\n     do_send_messages(message_dict_list)\n     bulk_create_reactions(messages)\n--\n2.39.0\n</code></pre></div>",
  "<p>Ah, <a href=\"https://github.com/zulip/zulip/pull/24411\">#24411</a> doesn't work because of the <code>maybe_enqueue_notifications</code> call in there.</p>",
  "<p>Pushed a new version of <a href=\"https://github.com/zulip/zulip/pull/24411\">#24411</a> which removes the asdict.  This shaves like 20 seconds off of the <code>./manage.py populate_db --extra-users=1000</code> time, and should also help tornado performance.</p>",
  "<p>So I think the big performance thing that we could do here is create 95% of the <code>--extra-users</code> users with <code>long_term_idle=True</code>, so that we're not writing a <code>UserMessage</code> row for every single one of them when sending messages. I'd make it a parameter to <code>populate_db</code>, <code>--long-term-idle-portion</code> or something.</p>",
  "<p>We had observed a last year that Tornado throughput seemed to have regressed at some point -- I bet the migration to the dataclass with <code>asdict</code> was responsible, so that's a great find.</p>",
  "<p>Thanks for looking into this, folks! These sorts of development tool things really matter.</p>",
  "<p>Cool, thanks for the detailed status updates <span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span>!</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/24429\">https://github.com/zulip/zulip/pull/24429</a> for this</p>",
  "<p>Soooooooo I guess the curse of working not only west coast hours, but generally more of a 9:30 or 10am start, is that I miss stuff like <a href=\"https://github.com/zulip/docker-zulip/pull/388\">https://github.com/zulip/docker-zulip/pull/388</a> when it's opened, and so I'm getting this feedback in <em>after</em> the merge. But anyway, I think requiring use of DC 2.1.1+ features is a bit too bleeding edge to be a good UX, given that <a href=\"https://repology.org/project/docker-compose/versions\">very many distros haven't packaged DC 2.x to begin with</a>, despite <a href=\"https://www.docker.com/blog/announcing-compose-v2-general-availability/\">its (then-immediate) deprecation upstream</a>. That list (to save you a click, and assuming Repology is correct) includes all versions of Fedora, Alpine, Debian, Guix, all but the latest version of NixOS, all versions of Raspbian (Debian fork for RPis), and all stable versions of Ubuntu (other than those using PPAs for Docker).</p>\n<p>In short, this is a bad user experience for a huge number of users. I think we should discuss either a roll back, or a roll forward to something more backwards compatible. If we do neither of those, we need to document this somewhere as an expected bit of breakage for all of those distros (many of which are very common Docker host systems).</p>\n<p>What we used to do for this purpose was have containers run via a <code>wait-for</code> wrapper script (or just <code>sh -c \"wait-for-whatever; my-service\"</code>). Some examples of that flow are discussed in <a href=\"https://github.com/docker/compose/issues/8351\">https://github.com/docker/compose/issues/8351</a></p>",
  "<p>cc <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> mostly on ^ but also <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> who requested my post-merge review. I think here's a better place to discuss than in GitHub but I can copy this over there if desired.</p>",
  "<p>Sorry for you not getting a chance to weigh in before it got merged!  And thanks for that analysis.  And since we're talking Docker, we don't have any compatibility matrix to claim, so knowing that most distros don't have it is good to know.</p>\n<p>Rolling back doesn't make sense, in that the script has never worked because it has always required 2.1.1 -- <a href=\"https://github.com/zulip/docker-zulip/pull/388\">#DZ388</a> just made it explicit, where it would otherwise have just failed.</p>",
  "<p>That's a good point - rolling forward or a docs line (which I guess to some extent this PR provides an action item, which is a form of documentation, but IMO it's late in the process, after someone's already tried to pull and run the stack) would make decent sense here.</p>\n<p>Given, indeed, nothing changed about how we call Docker itself, maybe this isn't much of an urgent item. I'm already taking some things in <code>docker-zulip</code> on this week; maybe I'll do a drive by change then to move this to a <code>wait-for</code> script of some sort?</p>",
  "<p>Yeah, I agree that the user should have some heads-up about the requirement before they get to the service being down and scrambling to get a new enough <code>docker-compose</code> <em>somehow</em>.  I'll push a short doc fix for now?</p>",
  "<p>When was docker-compose 2.1.1 released?</p>",
  "<p>That works for me!</p>",
  "<p>November 2022.</p>",
  "<p>Sorry, November 2021.</p>",
  "<p>Yeah, agreed that's probably more recent that we ideally want to require, even for a client-side thing that should theoretically be easy to upgrade. (We don't know what else they're using docker-compose for).</p>",
  "<p>Yeah, Nov 2021 per <a href=\"https://github.com/docker/compose/releases/tag/v2.1.1\">https://github.com/docker/compose/releases/tag/v2.1.1</a></p>",
  "<p>Cool, merged <a href=\"https://github.com/zulip/zulip/pull/24429\">#24429</a> with a few tweaks to the documentation. For the record, we're going with 60s/200s for the constants going forward, but the big prize for that work is clients being able to stop hardcoding those values, allowing us to change them without waiting for a whole backwards-compatibility cycle ... at least after a single such cycle for getting the clients to use it.</p>",
  "<p>In theory April 2023 is Docker Inc's EOL date for DCv1, but with it being packaged by Debian and Alpine (read: stable, slow-to-upgrade distros), that'll be at least another 1-3 years before truly everyone is off of DCv1</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> let me know when you've updated <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a> on top of that -- I think this has resolved the remaining blocker to trying that out, though I probably need to reread the migrations before merging it and deploying it here.</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/docker-zulip/pull/389\">#DZ389</a>.</p>",
  "<p>Approved; not auto-merging in case Tim wants a word of review in there.</p>",
  "<p>Thanks <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> !</p>",
  "<p>I have a couple pending notes on <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a>, and wanted do to a quick stress test on it (ref <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/populate_db.20users.20performance\">#backend &gt; populate_db users performance</a>) as well.  Let me submit the former and bump the latter back to the top of my stack.</p>",
  "<p>Thank <em>you</em> for catching that!  I'm running homebrew <code>docker-compose</code>, which is why I had a shiny enough version to have that new feature, and didn't notice how new it was.</p>",
  "<p>Sounds good.</p>",
  "<p>Because it's not going to be a super pleasant migration to reverse or renumber, I imagine that we're going to end up wanting to merge to <code>main</code> and fix it forward following the first deployment to <a href=\"http://chat.zulip.org\">chat.zulip.org</a>.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/24236\">#24236</a> is rebased and updated -- after <a href=\"https://github.com/zulip/zulip/pull/24354\">#24354</a> got merged.</p>\n<p><a href=\"https://github.com/zulip/zulip/pull/24236#issuecomment-1438633719\">Updated summary</a></p>",
  "<p>We switched to calling <code>html2text</code> as a subprocess for licensing reasons in <a href=\"https://github.com/zulip/zulip/commit/f3254bb558b904e8e26e107013b0b8fc1c6da445\">f3254bb558b904e8e26e107013b0b8fc1c6da445</a>.  Mattermost conversions call this in a right loop, for every message, which means that we spend most of our time spawning the subprocess and reading the output.</p>\n<p>Anyone know of good potential in-process replacements?  I found <a href=\"https://github.com/deanmalmgren/textract\">https://github.com/deanmalmgren/textract</a> but it's not terribly maintained, and pulls in a bunch we don't need (PDF extraction, etc).</p>\n<p>We could also build our own using our existing beautifulsoup dependency -- which would probably be OK for the probably-limited Mattermost markup, but probably hard to make good enough for the incoming email gateway, which is the other place we use it currently.</p>",
  "<p>We could FFI wrap <a href=\"https://crates.io/crates/html2text\">https://crates.io/crates/html2text</a> which uses Mozilla's Servo to fulfill the same task</p>",
  "<p>(Disclaimer: I've done rust FFI work to Lua, but never to Python, so not 100% sure what that flow is like, but I imagine it's halfway feasible)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> It's based and tweaked on top of <code>main</code> now</p>\n<blockquote>\n<p>Because it's not going to be a super pleasant migration to reverse or renumber</p>\n</blockquote>\n<p>Theoretically these migration are written to be reversible (except the last step which drops <code>UserPresenceOld</code>) - and reverting seems to work fine development environment with some brief testing.</p>\n<p>When deploying this to czo it might also be worth remembering to execute the migration in line with the instructions in the commit message:</p>\n<div class=\"codehilite\"><pre><span></span><code>The way to deploy is to start the backfill migration with the server\ndown and then start the server *without* the user_presence queue worker,\nto let the migration finish without having new data interfering with it.\nOnce the migration is done, the queue worker can be started, leading to\nthe presence data catching up to the current state as the queue worker\ngoes over the queued up events and updating the UserPresence table.\n</code></pre></div>\n<p>so that we have this process tested reasonably well. I gave it a basic test in dev env to double-check it works the way it did originally</p>",
  "<p>We could try <a href=\"https://github.com/matthewwithanm/python-markdownify\">https://github.com/matthewwithanm/python-markdownify</a>.</p>",
  "<p>So we do a check against <code>client_name</code> in <code>zerver/decorator.py#process_client</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">process_client</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span>\n    <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">AnonymousUser</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span>\n    <span class=\"n\">is_browser_view</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">client_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"The optional user parameter requests that a UserActivity row be</span>\n<span class=\"sd\">    created/updated to record this request.</span>\n\n<span class=\"sd\">    In particular, unauthenticate requests and those authenticated to</span>\n<span class=\"sd\">    a non-user object like RemoteZulipServer should not pass the</span>\n<span class=\"sd\">    `user` parameter.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">request_notes</span> <span class=\"o\">=</span> <span class=\"n\">RequestNotes</span><span class=\"o\">.</span><span class=\"n\">get_notes</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">client_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">client_name</span> <span class=\"o\">=</span> <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">client_name</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">client_name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># We could check for a browser's name being \"Mozilla\", but</span>\n    <span class=\"c1\"># e.g. Opera and MobileSafari don't set that, and it seems</span>\n    <span class=\"c1\"># more robust to just key off whether it was a browser view</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_browser_view</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">client_name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"Zulip\"</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Avoid changing the client string for browsers, but let</span>\n        <span class=\"c1\"># the Zulip desktop apps be themselves.</span>\n        <span class=\"n\">client_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"website\"</span>\n\n    <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">get_client</span><span class=\"p\">(</span><span class=\"n\">client_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n        <span class=\"n\">update_user_activity</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>After trying to figure out why one of the commits in the series that becomes <a href=\"https://github.com/zulip/zulip/pull/24231\">#24231</a> was so important that the <code>AssertionError</code> came back without it, I end up with <code>request_notes</code> of <code>RequestNotes(client=&lt;Client: &lt;Client: website&gt;&gt;, client_name='internal', client_version=None, ...)</code></p>\n<p>The change in <a href=\"https://github.com/zulip/zulip/pull/24231/commits/e8122ae3e0e26a0b4e5db5bb8d05670b7cd4f6f8\">https://github.com/zulip/zulip/pull/24231/commits/e8122ae3e0e26a0b4e5db5bb8d05670b7cd4f6f8</a> was worded differently, which I think might have led to the concern over its inclusion: I'd originally tracked down errors related to <code>request_notes.client.name</code> being <em>none</em>, and thus prioritized <code>request_notes.client_name</code> over it, falling back to the nested lookup. However, in this case, it's not a null-coalesce, it's outright differing values.</p>\n<p>Three thoughts come to mind, two are probably more actionable:</p>\n<ul>\n<li>One, I could change <code>process_client</code> to ignore overriding the local stack <code>client_name</code> if <code>client_name.startswith(\"internal\")</code></li>\n<li>Two, I could reword the commit that already exists in this series to reflect this other way of ending up hitting the new codepath (and thus the wording becomes more simple: <code>rate_limiter: Always prefer request_notes.client_name over request_notes.client.name to determine exemptions.</code> (subject to character limit...)</li>\n<li>Three, we could start tearing things apart to figure out why we have two confusingly similar (one character difference in lookup code...) strings stored in this struct to begin with (from some commit message reading I did of stuff that landed last summer/fall, it seems to be a transitional step of organic growth) and see if one can go away, though this seems both somewhat unbounded, and also somewhat out of scope for this PR.</li>\n</ul>\n<p>I guess this is me asking for input from anyone with opinions, but particularly <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> since he has the blocking comment in the PR.</p>",
  "<p>So I think we need the fuller context of that function to see the bug:</p>\n<div class=\"codehilite\"><pre><span></span><code>request_notes = RequestNotes.get_notes(request)\nif client_name is None:\n    client_name = request_notes.client_name\n\nassert client_name is not None\n\n# We could check for a browser&#39;s name being &quot;Mozilla&quot;, but\n# e.g. Opera and MobileSafari don&#39;t set that, and it seems\n# more robust to just key off whether it was a browser view\nif is_browser_view and not client_name.startswith(&quot;Zulip&quot;):\n    # Avoid changing the client string for browsers, but let\n    # the Zulip desktop apps be themselves.\n    client_name = &quot;website&quot;\n</code></pre></div>",
  "<p>(ah, yeah, I'll update OP)</p>",
  "<p>I'm pretty sure the bug here is that in that <code>is_browser_view</code> case, we should be setting <code>client_name = request_notes.client_name = \"website\"</code>.</p>",
  "<p>Well, that would resolve the issue of the difference in strings, but wouldn't then qualify the route for RL exemption.</p>",
  "<p>Or possibly some other refactor -- it is not intended to be possible for these to be different, and it's good that we discovered that they can be.</p>",
  "<p>I should note this is the code path in <code>middleware.py</code> that calls this function:</p>\n<div class=\"codehilite\"><pre><span></span><code>try:\n    request_notes.client_name, request_notes.client_version = parse_client(request)\nexcept JsonableError as e:\n    logging.exception(e)\n    request_notes.client_name = &quot;Unparsable&quot;\n    request_notes.client_version = None\n</code></pre></div>",
  "<p>I think this code path is a bit messed up; I think we'd be much better served having a <code>Client</code> object attached to <code>Unparsable</code> in that exception case.</p>",
  "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">(</span>woods<span class=\"o\">)</span><span class=\"w\"> </span>zulip<span class=\"w\">  </span>\u00bb<span class=\"w\"> </span>email-generation-unratelimit-2<span class=\"w\"> </span>*<span class=\"w\"> </span>\u00bb<span class=\"w\"> </span>rg<span class=\"w\"> </span><span class=\"s1\">'notes.client_name'</span>\nzerver/decorator.py\n<span class=\"m\">219</span>:<span class=\"w\">        </span><span class=\"nv\">client_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>request_notes.client_name\n\nzerver/tornado/handlers.py\n<span class=\"m\">249</span>:<span class=\"w\">        </span>request_notes.client_name<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>old_request_notes.client_name\n\nzerver/tests/test_decorators.py\n<span class=\"m\">159</span>:<span class=\"w\">        </span>self.assertEqual<span class=\"o\">(</span>request_notes.client_name,<span class=\"w\"> </span><span class=\"s2\">\"Unparsable\"</span><span class=\"o\">)</span>\n<span class=\"m\">2194</span>:<span class=\"w\">            </span>assert<span class=\"w\"> </span>notes.client_name<span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>None\n<span class=\"m\">2195</span>:<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span>notes.client,<span class=\"w\"> </span>notes.client_name\n\nzerver/lib/rate_limiter.py\n<span class=\"m\">576</span>:<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span>notes.client_name<span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>None:\n<span class=\"m\">577</span>:<span class=\"w\">        </span><span class=\"nv\">client_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>notes.client_name\n\nzerver/middleware.py\n<span class=\"m\">366</span>:<span class=\"w\">            </span>request_notes.client_name,<span class=\"w\"> </span>request_notes.client_version<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>parse_client<span class=\"o\">(</span>request<span class=\"o\">)</span>\n<span class=\"m\">369</span>:<span class=\"w\">            </span>request_notes.client_name<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Unparsable\"</span>\n<span class=\"m\">429</span>:<span class=\"w\">        </span>assert<span class=\"w\"> </span>request_notes.client_name<span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>None<span class=\"w\"> </span>and<span class=\"w\"> </span>request_notes.log_data<span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>None\n<span class=\"m\">437</span>:<span class=\"w\">            </span>request_notes.client_name,\n</code></pre></div>\n<p>I really, really, really didn't want to open the side quest can of worms of considering ripping out <code>client_name</code> and coercing to <code>client.name</code>, but there's a fairly small set of callsites for it such that it could be worth considering as Option Three.</p>",
  "<p>(of course this is a very imperfect grep that presumes a naming pattern, but I think it gives us a rough idea)</p>",
  "<p>Can you explain what the reproducer is here? I wouldn't expect <code>is_browser_view</code> to be true for an internal API request, and it seems possible we're doing something wrong in the request in question.</p>",
  "<p>I've re-pushed the branch after a rebase and such, but with all the commits still in. Thus:</p>\n<ul>\n<li>At current tip of <code>email-generation-unratelimit-2</code> (56d1d1e), throwing a debugger breakpoint at <code>zerver/decorator.py:223</code> and stepping through will let you see the setup of why the changes to <code>zerver/lib/rate_limiter.py#client_is_exempt_from_rate_limiting</code> were necessary</li>\n<li>Branch currently includes dec842c which is this diff:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/zerver/lib/rate_limiter.py b/zerver/lib/rate_limiter.py</span>\n<span class=\"gh\">index d9e2b0b696..40456089f4 100644</span>\n<span class=\"gd\">--- a/zerver/lib/rate_limiter.py</span>\n<span class=\"gi\">+++ b/zerver/lib/rate_limiter.py</span>\n<span class=\"gu\">@@ -569,8 +569,16 @@ def client_is_exempt_from_rate_limiting(request: HttpRequest) -&gt; bool:</span>\n\n<span class=\"w\"> </span>    # Don't rate limit requests from Django that come from our own servers,\n<span class=\"w\"> </span>    # and don't rate-limit dev instances\n<span class=\"gd\">-    client = RequestNotes.get_notes(request).client</span>\n<span class=\"gd\">-    return (client is not None and client.name.lower() == \"internal\") and (</span>\n<span class=\"gi\">+    notes = RequestNotes.get_notes(request)</span>\n<span class=\"gi\">+    # Take client_name before the Client object's name to ensure edge cases like overriding client=internal in</span>\n<span class=\"gi\">+    # request bodies work as expected.</span>\n<span class=\"gi\">+    client_name = \"\"</span>\n<span class=\"gi\">+    if notes.client_name is not None:</span>\n<span class=\"gi\">+        client_name = notes.client_name</span>\n<span class=\"gi\">+    if notes.client is not None and client_name == \"\":</span>\n<span class=\"gi\">+        client_name = notes.client.name</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    return client_name.lower() == \"internal\" and (</span>\n<span class=\"w\"> </span>        is_local_addr(request.META[\"REMOTE_ADDR\"]) or settings.DEBUG_RATE_LIMITING\n<span class=\"w\"> </span>    )\n</code></pre></div>\n<ul>\n<li>Rebasing that commit away from the branch will bring back the <code>AssertionError</code> on <code>/emails/generate</code>, because an internal sub-request within that endpoint (I don't remember which right now; I think it's one of the user settings JSON endpoints maybe, or at least that's the last one I remember debugging) gets 429'd.</li>\n</ul>",
  "<p>(right, my comment in that diff reminds me that there's another edge case in why <code>client_name</code> is separate from <code>client.name</code>, which I make use of elsewhere in the patch series: passing <code>client_name</code> as a POST/PATCH parameter in the request body... though of course that should be able to be flattened out without too many concerns)</p>",
  "<p>The answer to your \"I wouldn't expect <code>is_browser_view</code> to be true for an API request\" mystery likely lies in doing a quick rebase dance to get rid of dec842c and see which request is failing, so let me tear a few things down and do that real quick.</p>",
  "<p><code>email_log.py:103</code>, which is</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">change_user_is_active</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># account on different realm</span>\n    <span class=\"k\">assert</span> <span class=\"n\">other_realm</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"/accounts/password/reset/\"</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"client\"</span><span class=\"p\">:</span> <span class=\"s2\">\"internal\"</span><span class=\"p\">,</span> <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"n\">registered_email</span><span class=\"p\">},</span>\n        <span class=\"n\">HTTP_HOST</span><span class=\"o\">=</span><span class=\"n\">other_realm</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">302</span>\n</code></pre></div>\n<p>This is largely the same kind of request as those above it, and is pretty early in the <code>/emails/generate</code> flow, which hints to me that the entire patch series largely depends on this changed behavior to take <code>notes.client_name</code> as priority over <code>notes.client</code> (currently - of course not to say we can't take one of the other branching paths here)</p>",
  "<p>I should note that passing <code>client: internal</code> here is also a recent change, which came in <a href=\"https://github.com/zulip/zulip/pull/24231/commits/56d1d1edf9c6844a67dc4e361e182ce3305fcc64\">https://github.com/zulip/zulip/pull/24231/commits/56d1d1edf9c6844a67dc4e361e182ce3305fcc64</a></p>",
  "<p><code>asdict(c)</code> does a deep copy (<a href=\"https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict\">documentation</a>), while <code>{**c.__dict__}</code> or <code>{**vars(c)}</code> does a shallow copy.</p>",
  "<p>Yeah, I note the deep copy in the commit message.</p>",
  "<p>We should also note that an ANALYZE is pretty strongly necessary on the presence table after the migration, to get stats to the query planner.</p>",
  "<p>Giving folks a heads-up in case you try doing fresh provisioning this evening that Puppet is having Quite An Evening and alternating between 502 errors and Cloudfront failure pages. So I've now got a <code>watch http https://forgeapi.puppet.com/v3/releases?module=...</code> running to twiddle proverbial thumbs before getting back to some <code>docker-zulip</code> work <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I'll holler again when that's resolved.</p>",
  "<p>Profiling looks reasonable (and caused me to notice <a href=\"https://github.com/zulip/zulip/pull/24453\">#24453</a>), but we'll really only get a real complete shakedown of it once it's here on CZO.  It's hard to get the query planner to do anything unless there's real data in there -- <code>./manage.py opulate_db</code> doesn't compare to Real Data.</p>",
  "<p>Oh this might be a bigger problem we actually need to keep an eye on. I don't Twitter anymore but decided to go look through it to see if the outage had been reported, since there's no official status page for Puppet Forge. Indeed it has been: <strong>two days ago</strong>. <a href=\"https://twitter.com/_AbigailMurray/status/1627617915112497155\">https://twitter.com/_AbigailMurray/status/1627617915112497155</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/_AbigailMurray/status/1627617915112497155\"><img class=\"twitter-avatar\" src=\"/external_content/e6009e3d9b1f04e6642b4a7d3e61cfdd01febbcb/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313538313931313630383833373636383836342f55454230754677455f6e6f726d616c2e6a7067\"></a><p>It looks like puppet forge has died #puppet <a href=\"https://t.co/QDRiZaAxih\">https://twitter.com/_AbigailMurray/status/1627617915112497155/photo/1</a></p><span>- Abigail Murray (@_AbigailMurray)</span><div class=\"twitter-image\"><a href=\"https://t.co/QDRiZaAxih\"><img src=\"/external_content/a96c1bd1a360da07a408bba7b523f032e937df02/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46705a3176706e575941454757754a2e706e673a6c61726765\"></a></div></div></div>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> are you aware of any trustable mirrors for <a href=\"http://forgeapi.puppet.com\">forgeapi.puppet.com</a> or is rel eng related stuff just going to be blocked for a while spinlocking for upstream resolution?</p>",
  "<p>They've had spates of this in the past: <a href=\"#narrow/stream/49-development-help/topic/Error.3A.20Request.20to.20Puppet.20Forge.20failed.2E/near/1477575\">https://chat.zulip.org/#narrow/stream/49-development-help/topic/Error.3A.20Request.20to.20Puppet.20Forge.20failed.2E/near/1477575</a></p>\n<p>But this seems like it's recurred enough that we should consider how to usefully cache those packages.  See also that they're not currently integrity-checked, because Puppet Forge doesn't provide SHAs for them.</p>",
  "<p>(well, that's an overly simplistic duality on my part above: there's other options including pulling module cache from some known-good node and mirroring them ourselves, perhaps on GitHub if licensing allows)</p>",
  "<p>I'm not aware of any mirrors, but I don't think I've gone looking in the past -- the outages have generally been pretty short-lived the couple of times I've seen them before.</p>",
  "<p>Cool - I'll go looking a bit, but this will wind up being a release blocker for at least <code>docker-zulip</code> 6.1 (whenever we decide to cut a 6.1), and I have to imagine is also currently blocking self-hosted installs, so I suspect we'll want to tackle this as something of a priority item \"soon-ish?\" - assuming we can figure out what a resolution even looks like.</p>",
  "<p>Someone made a Ruby tool to mirror Puppet Forge (clear back in 2014, though the API version seems unchanged since then at v3) which also hints at MD5 checksumming, but it depends on Puppet Forge being accessible (meant for clustered deployments to use internal/local bandwidth rather than jamming the outbound) <a href=\"https://github.com/jhaals/puppet-forge-mirror\">https://github.com/jhaals/puppet-forge-mirror</a></p>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/24456\">#24456</a> for another small optimization.</p>",
  "<p>I wonder if Puppet is just self-imploding as a whole. Their <a href=\"https://slack.puppet.com\">https://slack.puppet.com</a> bouncer to generate Slack invites (I presume) is also down, so I can't even join the Slack to see if folks are talking about workarounds. <a href=\"/user_uploads/2/1/utFfNYd8KSP8WiRUOMFk6zha/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/1/utFfNYd8KSP8WiRUOMFk6zha/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/1/utFfNYd8KSP8WiRUOMFk6zha/image.png\"></a></div>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/24464\">#24464</a> to use sha256 pins.  This still depends on <a href=\"http://forgeapi.puppet.com\">forgeapi.puppet.com</a>, though.</p>",
  "<p>We can remove the API dependency and just use predictable file paths if we find (or make) a mirror.</p>",
  "<p>Looks like I'm now getting 400s on my looping httpie call, so that's maybe marginally better. I'll see if I can provision <code>docker-zulip</code> builds again.</p>\n<p>Also approved-with-comment-so-not-auto-merged your PR, thanks <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>!</p>",
  "<p>Looks like my amd64 images are building again (the arm64 experimental stuff I'd been hacking on in the branch in question I was trying to wrap up last night, alas, still building because <code>qemu-user-static</code> is slow), so I guess the outage is \"done\" (for now).</p>",
  "<p>OK. <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> you should feel free to test-deploy this when convenient. I've checked the existing <a href=\"http://chat.zulip.org\">chat.zulip.org</a> branch rebases cleanly onto <code>upstream/main</code>.</p>",
  "<p>I have had this branch sitting open for ages, and previously was having all sorts of problems getting the provisioners in the first stage of the multi-stage image build to run correctly in the QEMU cross-compile environment. Whether by way of changes in zulip/zulip, by way of changes to the ubuntu:20.04 arm64 Docker images, or by way of system cleanup when I moved machines recently and got a fresh OS install, those issues are gone now, and so I have a Makefile wrapper around (locally) building arm64 Zulip OCI images now: <a href=\"https://github.com/zulip/docker-zulip/pull/390\">#DZ390</a>. <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> might be a good reviewer?</p>",
  "<p>I\u2019ve heard <a href=\"https://mjml.io/\">MJML</a> recommended as a more modern email styling solution.</p>",
  "<p>Hmm, it seems like it could be nice for doing fancy looking emails at scale, but also is another custom DSL to learn; the thing which is nice about our current system's interface is that you just design the email content using HTML/CSS like you would any other page.</p>\n<p>Since most of our emails are transactional authentication flow things where we want basically the same design just with different content in the center, I'm not whether it'd help with our main sources of complexity (i18n and templating variables from our Python codebase), but could be worth playing around with.</p>",
  "<p>Looked into it a bit more; I think it's not going to help with this class of i18n problem; the main thing it seems it'd do is let us replace the giant nesting of tables that is <code>templates/zerver/emails/email_base_default.source.html</code> with something a lot more readable looking.</p>",
  "<p>Yeah I haven\u2019t investigated what it has to say about i18n, but if it\u2019s fast enough to run on-the-fly that might be one solution. The main problem that it\u2019s designed to solve is that email is not HTML/CSS like any other page, because Gmail and Outlook and other proprietary email systems have restrictions on the HTML and CSS you can actually use, and you don\u2019t want to go and test them all every time you change it.</p>",
  "<p>Yeah, it looks nicer than <code>Premailer</code>, which is what we're using for the part of <code>inline_email_css</code> that isn't hacking around the fact that we want <code>Jinja2</code> to run after the CSS inlining basically because of the performance issue.</p>\n<p>Though maybe not sufficiently so to be worth switching not as part of an emails redesign project.</p>",
  "<p>(It might very well be worth it if we're redoing the design)</p>",
  "<p>6 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"58\" href=\"/#narrow/stream/58-translation/topic/email.20notification.20footers\">#translation &gt; email notification footers</a> by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>.</p>",
  "<p>My only request is that we stop applying Markdown and then jinja2.  That's what causes me dread every time I interact with this system.</p>",
  "<p>That isn't a thing we ever do with our normal emails, which are just written in HTML -- just the \"custom\" email hack on top of it.</p>",
  "<p>Hi! Any updates on this issue? I'm unable to activate Certbot certificate.</p>",
  "<p>This is a thing I'm working on today now that a few other things are off my immediate plate. No word on exactly when a fix might roll out, but it's being actively looked at.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/mjml/near/1513581\">said</a>:</p>\n<blockquote>\n<p>My only request is that we stop applying Markdown and then jinja2.  That's what causes me dread every time I interact with this system.</p>\n</blockquote>\n<p><a href=\"https://github.com/zulip/zulip/pull/24503\">#24503</a></p>",
  "<p>Hmm how does that work for emails where we have a variable to substitute coming coming from Django? E.g. an email with an extra sentence for organization administrators, or with your realm name in it?</p>",
  "<p>I thought that was the constraint that made us run Jinja2 at all in the email pipeline.</p>",
  "<p>Well the honest answer is that running Jinja before Markdown works almost as poorly for this as running Markdown before Jinja. Markdown and Jinja were not designed to be smashed together in either direction. But switching to markdown-it-py is going to escape all our <code>\"</code> characters as <code>&amp;quot;</code> and break our Jinja templates, so the current direction isn\u2019t really an option.</p>",
  "<p>A better option might be switching to template language with an HTML-compatible syntax, such as <a href=\"https://pagetemplates.readthedocs.io/en/latest/\">TAL</a> or <a href=\"https://docs.twistedmatrix.com/en/stable/web/howto/twisted-templates.html\"><code>twisted.web.template</code></a>, since CommonMark is designed to pass through HTML syntax.</p>",
  "<p>Well moving off Jinja2 would mean whatever we replace it with needs to have its own internationalization support as well as variable substitution, which seems like a pain. </p>\n<p>The original design for this system BTW was that we'd run markdown on our custom email content to produce an HTML file as a shortcut to generate roughly what we wanted without having to hand write HTML. Then we'd hand edit that file to be what we actually want to send, and then send that now HTML email template using Jinja2 templating.</p>\n<p>Then we later decided it was kinda handy to just pipe those two steps together for most emails that don't have anything too complicated in them. It's possible we should just stop doing that automated smashing together.</p>",
  "<p>Jinja internationalization doesn\u2019t work after Markdown processing either.</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/docker-zulip/pull/391\">#DZ391</a> to address this finally.</p>",
  "<p>These are all of our use of Jinja in Markdown files (after <a href=\"https://github.com/zulip/zulip/pull/24520\">#24520</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Django/Jinja\"><pre><span></span><code><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">event_type</span> <span class=\"k\">in</span> <span class=\"nv\">all_event_types</span> -<span class=\"cp\">%}</span><span class=\"x\"> </span><span class=\"cp\">{{</span><span class=\"o\">-</span> <span class=\"nv\">comma</span><span class=\"o\">()</span> -<span class=\"cp\">}}</span><span class=\"x\"> `</span><span class=\"cp\">{{</span> <span class=\"nv\">event_type</span> <span class=\"cp\">}}</span><span class=\"x\">` </span><span class=\"cp\">{%</span>- <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"s1\">'IRC'</span> <span class=\"k\">in</span> <span class=\"nv\">integration_display_name</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">all_event_types</span> <span class=\"k\">is</span> <span class=\"nf\">defined</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">api_url</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">api_url_scheme_relative</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">external_uri_scheme</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">hubot_docs_url</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">integration_display_name</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">integration_name</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">integration_url</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">recommended_stream_name</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">support_email</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">zulip_url</span> <span class=\"cp\">}}</span>\n</code></pre></div>\n<p>The conditionals are unnecessary since each integration knows whether it\u2019s IRC and whether it has <code>all_event_types</code>. So we could replace all use of Jinja with a tiny Markdown plugin that replaces specific known variables. (markdown-it-py already has such an plugin: <a href=\"https://github.com/executablebooks/mdit-py-plugins/blob/v0.3.4/mdit_py_plugins/substitution.py\"><code>mdit_py_plugins.substitution</code></a>.)</p>",
  "<p>Yeah good thought, such a plugin is probably the most reasonable path forward.</p>",
  "<p>I think I might be missing some context here as to the removal of <code>--standalone</code> from certbot incantations. Let's unwind a stack frame:</p>\n<ul>\n<li><a href=\"https://github.com/zulip/docker-zulip/pull/391\">#DZ391</a> is currently generating a certificate (sometimes), but not restarting nginx to pick up the new cert.</li>\n<li>Rather than applying a hack of just restarting nginx, I wanted to dig into why we do the self-signed to certbot juggling act to begin with. The source comments pointed me to <a href=\"https://github.com/zulip/docker-zulip/pull/142\">#DZ142</a>, where <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> recommended the same approach I was leaning towards: use <code>certbot --standalone</code> to generate a certificate <em>before</em> spinning up nginx at all.</li>\n<li>From here, eventually <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> closed the issue referring to <a href=\"https://github.com/zulip/zulip/pull/20593\">#20593</a>, where certificates issued in standalone mode weren't being properly renewed. <a href=\"https://github.com/zulip/zulip/pull/20834\">#20834</a> was introduced by <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> to switch to our current juggling behavior and resolve 20593.</li>\n<li><a href=\"https://github.com/zulip/zulip/pull/20834/files#diff-1af2099d8e30f90ca40ba8fda6b98662de13f351deaff571fc3e23ea385f0ed2R10\">This line of #20834</a>, however, confirms what I tested on a DO droplet today: that changing the mode of a certbot renewal with <code>--force-renewal</code> will rewrite <code>/etc/letsencrypt/renewal/mydomain.example.com.conf</code>with the appropriate plugin. In this PR, it was used to rewrite standalone configs to be webroots: <strong>exactly what I planned on doing to resolve <a href=\"https://github.com/zulip/docker-zulip/pull/142\">#DZ142</a></strong>.</li>\n</ul>\n<p>I guess at this point I'm stuck wondering: what's the skeleton in the closet I'm missing, if any, that stops me from reverting <a href=\"https://github.com/zulip/zulip/pull/20834\">#20834</a> and moving us to a <code>--standalone</code> -&gt; <code>--webroot</code> flow that doesn't require nginx restarts when spinning up our <code>docker-compose</code> stack (or, I presume, also bare metal instances that use certbot)? To me this feels like the much simpler approach and should resolve the root issue at play currently blocking merge of <a href=\"https://github.com/zulip/docker-zulip/pull/391\">#DZ391</a> (that the new certs aren't used).</p>",
  "<p>We don\u2019t want to force a renewal. That will drive you into Let\u2019s Encrypt\u2019s aggressive rate limits twice as quickly.</p>",
  "<p>I don't want to force renewals on every container startup or every app node bootup (because yeah, those RLs are rough, I already tripped one today), I only propose a force renewal after the first issuance. The RLs appear to be 5 certs per rolling 7-day window per unique set of domains issued; this means spinning up our <code>docker-compose</code> stack without a pre-existing volume would use 2 of those slots to get the stack brought up, but then the volume persists indefinitely and so only the typical renewal schedule (30 days I think is typical?) applies.</p>",
  "<p>(to be clear: I tripped the RLs by <code>docker volume rm docker-zulip_zulip</code> a bunch of times, not through any flow I'd expect end users to actually see)</p>",
  "<p>It should also be noted that we need to be sure that nginx will correctly reload 3 months later when the certificate <em>does</em> need to be renewed, and correctly reloading it on initial setup ought to just be a special case of that.</p>",
  "<p>The way this works on non-Docker is via our <code>/etc/letsencrypt/renewal-hooks/deploy/001-nginx.sh</code> hook. We\u2019re in complete control of that, and there\u2019s no reason we shouldn\u2019t be able to make it work with Docker.</p>",
  "<p>I'm thinking maybe a flow of:</p>\n<ul>\n<li>Install a certbot post-hook trigger to immediately do a <code>--webroot --force-renewal</code> renewal if <code>standalone</code> is detected in any config file under <code>/etc/letsencrypt/renewal</code> (escape hatch check could be put here that fails with a fatal logline if <code>$0</code> is found more than once in <code>ps aux</code>, implying we've hit some sort of recursion loop. this <em>should</em> never happen)</li>\n<li>certbot <code>--standalone</code> to generate the cert</li>\n<li>The post-hook immediately converts the standalone cert to a webroot one</li>\n<li>Now start nginx and the certbot renewal service (or background script, in the case of the docker image)</li>\n</ul>",
  "<p>This makes us <em>exceptionally</em> unfriendly to any attempts to run Zulip on the same OS image (be that bare metal or container) as any other appliances that might interact with LetsEncrypt, but we already don't really pretend to cater to that case. Multi-service nodes are already generally pointed the Docker direction, so I don't think this is worth solving for.</p>",
  "<p>Why? You\u2019re adding complexity and burning through more rate limits; what have you gained in return?</p>",
  "<p>It's a trade to remove this: (DZ <code>entrypoint.sh:455</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\"># Hack: We run this in the background, since we need nginx to be</span>\n<span class=\"w\">    </span><span class=\"c1\"># started before we can create the certificate.  See #142 for</span>\n<span class=\"w\">    </span><span class=\"c1\"># details on how we can clean this up.</span>\n<span class=\"w\">    </span>runCertbotAsNeeded<span class=\"w\"> </span><span class=\"p\">&amp;</span>\n</code></pre></div>\n<p>(which then points us back to my OP)</p>",
  "<p>Maybe it's a difference of opinion but I'm happier to use one more rate limit slot and install an extra post-hook in the name of simplifying the startup process to be more predictable and linear.</p>",
  "<p>Yeah I don\u2019t agree. We need background renewals to work correctly, so any complexity involved in ensuring that they work correctly is essential complexity.</p>",
  "<p>I'm not sure I'm following why background renewals <em>wouldn't</em> work correctly in this proposed setup, can you elaborate on where that concern stems from so I can work to address it?</p>",
  "<p>If background renewals were working correctly, we wouldn\u2019t be having this problem.</p>",
  "<p>We\u2019re successfully getting a certificate and failing to reload nginx. No matter what you do to avoid this flow on initial setup, it\u2019s going to happen anyway in three months.</p>",
  "<p>Thanks for that long history dive, <span class=\"user-mention silent\" data-user-id=\"25085\">Josh Klar</span>!</p>\n<p>Let me try to lay out what I think I understand of our constraints:</p>\n<ol>\n<li><code>certbot</code> writes its config file based on how it was last run, and renewals use that.  We don't have a programmatic way of modifying the config files written by <code>certbot</code>, so we need to do a <code>--webroot</code> run at some point during the setup process.</li>\n<li>If we're running cerbot with webroot, <code>nginx</code> needs to be started by then to serve http.</li>\n<li>If nginx is started, it needs a certificate to serve TLS.</li>\n<li>We can only run <code>certbot --webroot</code> and <em>also</em> be running <code>nginx</code> if one of them is in the background somehow.</li>\n</ol>\n<p>So this is mostly about <em>what</em> certificate we're seeding nginx with.  We <em>could</em> fudge a couple of those constraints a little:</p>\n<ul>\n<li>We could hackily regex-edit the certbot config file post-certbot to say webroot.  I don't like this because it lays a time bomb for 3 months down the road if anything goes wrong, and it's very likely to.  This option is pretty much off the table, but I mention it for completeness.</li>\n<li>We could start nginx with an http-only config, run certbot to get a cert with that, and then install and reload into an http+https nginx config.  This has the mild upside that we never serve a bad cert on https, but adds some of complexity to swap between http_only and not.  But this <em>only</em> saves us presenting the bad cert temporarily, because...</li>\n</ul>\n<p>...there's no getting around point (4) on the first list.  That <code>&amp;</code> \"hack\" is <em>forced</em> because we have to run webroot because of (1), so nginx has to be running at the same time.  Juggling making a cert using <code>--standalone</code> first, as <span class=\"user-mention\" data-user-id=\"25085\">@Josh Klar</span> suggests above, doesn't save us from this -- the post-hook would need to start nginx and also run the webhook renewal, so one of those would need to be backgrounded.  The juggling of the post-hook trigger in standalone mode doesn't actually solve it.</p>\n<p>We can pull tricks to hide the <code>&amp;</code> better, but we're forced into its existence by point (1) and (4) on the first list.  Personally, I don't find it all that much of a hack -- we can pretty it up by moving it into a one-shot supervisor service if we want, but a <code>nginx reload</code> to pick up a new cert isn't all that disruptive.   And I agree with Anders' logic that it's helpful to essentially do a full end-to-end test-run of the normal (re)new-and-reload process during first boot, to suss out problems.</p>",
  "<p>Thanks for the clear summary! I think the more fruitful hunt on my end is going to be figuring out <em>why</em> nginx failed to restart within the container at the expected time - I had a hunch early as to why, but (thankfully?) was able to prove it wrong, so I'm back at square 1 in that regard.</p>\n<p>Here's one other mystery for us, though (I'm using <code>--test-cert</code> to hit the staging server, which <strong>may</strong> be a cause here, though I'd be frustrated with LetsEncrypt if staging acted this differently from production):</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">(</span>zulip-py3-venv<span class=\"o\">)</span><span class=\"w\"> </span>zulipdev@klardotsh:~/docker-zulip$<span class=\"w\"> </span>ps<span class=\"w\"> </span>aux<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>grep<span class=\"w\"> </span>nginx\nzulipdev<span class=\"w\">   </span><span class=\"m\">42728</span><span class=\"w\">  </span><span class=\"m\">0</span>.0<span class=\"w\">  </span><span class=\"m\">0</span>.0<span class=\"w\">   </span><span class=\"m\">5192</span><span class=\"w\">   </span><span class=\"m\">720</span><span class=\"w\"> </span>pts/2<span class=\"w\">    </span>S+<span class=\"w\">   </span><span class=\"m\">02</span>:38<span class=\"w\">   </span><span class=\"m\">0</span>:00<span class=\"w\"> </span>grep<span class=\"w\"> </span>--color<span class=\"o\">=</span>auto<span class=\"w\"> </span>nginx\n<span class=\"o\">(</span>zulip-py3-venv<span class=\"o\">)</span><span class=\"w\"> </span>zulipdev@klardotsh:~/docker-zulip$<span class=\"w\"> </span>sudo<span class=\"w\"> </span>certbot<span class=\"w\"> </span>renew<span class=\"w\"> </span>--webroot<span class=\"w\"> </span>--test-cert<span class=\"w\"> </span>-m<span class=\"w\"> </span>josh@zulip.com<span class=\"w\"> </span>--agree-tos<span class=\"w\"> </span>--no-eff-email<span class=\"w\">  </span>--force-renewal<span class=\"w\"> </span>--break-my-certs\nSaving<span class=\"w\"> </span>debug<span class=\"w\"> </span>log<span class=\"w\"> </span>to<span class=\"w\"> </span>/var/log/letsencrypt/letsencrypt.log\n\n-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-\nProcessing<span class=\"w\"> </span>/etc/letsencrypt/renewal/klardotsh.zulipdev.org.conf\n-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-\nPlugins<span class=\"w\"> </span>selected:<span class=\"w\"> </span>Authenticator<span class=\"w\"> </span>webroot,<span class=\"w\"> </span>Installer<span class=\"w\"> </span>None\nRenewing<span class=\"w\"> </span>an<span class=\"w\"> </span>existing<span class=\"w\"> </span>certificate\n\n-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-\nnew<span class=\"w\"> </span>certificate<span class=\"w\"> </span>deployed<span class=\"w\"> </span>without<span class=\"w\"> </span>reload,<span class=\"w\"> </span>fullchain<span class=\"w\"> </span>is\n/etc/letsencrypt/live/klardotsh.zulipdev.org/fullchain.pem\n-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-\n\n-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-\n\nCongratulations,<span class=\"w\"> </span>all<span class=\"w\"> </span>renewals<span class=\"w\"> </span>succeeded.<span class=\"w\"> </span>The<span class=\"w\"> </span>following<span class=\"w\"> </span>certs<span class=\"w\"> </span>have<span class=\"w\"> </span>been<span class=\"w\"> </span>renewed:\n<span class=\"w\">  </span>/etc/letsencrypt/live/klardotsh.zulipdev.org/fullchain.pem<span class=\"w\"> </span><span class=\"o\">(</span>success<span class=\"o\">)</span>\n-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-\n</code></pre></div>",
  "<p>(for those not in the mood for reading terminal output: nginx <strong>not</strong> running, <code>certbot renew --webroot</code> succeeded anyway)</p>",
  "<p>wat</p>",
  "<p>I bet nothing hits port 80 if you tcpdump</p>",
  "<p>So I'm not at <strong>all</strong> trying to say point 4 is wrong. I think in theory point 4 should be the skeleton in the closet I was missing in OP and kinda solves the overall mystery. But I'll at least say this was part of <em>why</em> I forgot point 4 (I actually discovered this many hours ago; I just reran a moment ago after triple-checking nginx was not running before I went and made a fool of myself)</p>",
  "<p>Yeah, that sort of weird behaviour form certbot's test servers would certainly lead one astray!</p>",
  "<p>nothing on port 80. 443 gets a barrage of traffic (right as I hit a LE rate limit, dang flabbit), but there's nothing listening on that port per <code>sudo lsof -nP -iTCP:443 -sTCP:LISTEN</code></p>",
  "<p>Huh.  So something must be lying about doing any verification, I guess?</p>",
  "<p>I mean, it is a test cert, but I'd expect it to still do a probe like the live one would.  <em>Weird.</em></p>",
  "<p>Maybe <a href=\"https://github.com/letsencrypt/pebble\">https://github.com/letsencrypt/pebble</a> is useful for testing without rate limits? I haven\u2019t tried it.</p>",
  "<p>I might spin up a non-ratelimited DO droplet (maybe later tonight, or in the morning) on <a href=\"http://klardotsh2.zulipdev.org\">klardotsh2.zulipdev.org</a> and do this same flow with a real cert (drop the <code>--test-cert</code>). if it works, weird, but it would bypass Step 4 in your above list (maybe, if it's replicable) (well, OR it's a bug in LE's servers to be reported)</p>",
  "<p>OK, I clearly don't understand ACME!</p>\n<div class=\"codehilite\"><pre><span></span><code>root@alexmv-prod:~# ss -ltpn | grep :80\nroot@alexmv-prod:~# certbot renew --webroot -m alexmv@zulip.com --agree-tos --no-eff-email --force-renewal\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nProcessing /etc/letsencrypt/renewal/alexmv-prod.zulipdev.org.conf\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlugins selected: Authenticator webroot, Installer None\nRenewing an existing certificate\nRunning deploy-hook command: /etc/letsencrypt/renewal-hooks/deploy/001-nginx.sh\ndeploy-hook command &quot;/etc/letsencrypt/renewal-hooks/deploy/001-nginx.sh&quot; returned error code 1\nError output from deploy-hook command 001-nginx.sh:\nnginx.service is not active, cannot reload.\n\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nnew certificate deployed without reload, fullchain is\n/etc/letsencrypt/live/alexmv-prod.zulipdev.org/fullchain.pem\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nCongratulations, all renewals succeeded. The following certs have been renewed:\n  /etc/letsencrypt/live/alexmv-prod.zulipdev.org/fullchain.pem (success)\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n</code></pre></div>",
  "<p>And I do have a new cert:</p>\n<div class=\"codehilite\"><pre><span></span><code>root@alexmv-prod:~# openssl x509 -noout -text -in /etc/letsencrypt/live/alexmv-prod.zulipdev.org/fullchain.pem\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            04:d2:ce:b2:bb:a9:cc:64:04:5a:8f:b4:4b:ac:13:34:3c:4d\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = Let&#39;s Encrypt, CN = R3\n        Validity\n            Not Before: Mar  2 01:49:51 2023 GMT\n            Not After : May 31 01:49:50 2023 GMT\n</code></pre></div>",
  "<p>No traffic to port 80 observed via tcpdump.</p>",
  "<p>I think Let\u2019s Encrypt caches domain validations to your account key for some time (60 days?).</p>",
  "<p>But my guess is that that doesn't hold if it's a <em>new</em> cert?</p>",
  "<p>Yeah, makes sense.</p>",
  "<p>It appears that <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> 's suspicion is explicitly allowed/enabled by <a href=\"https://www.rfc-editor.org/rfc/rfc8555#section-7.1.3\">the RFC</a>:</p>\n<blockquote>\n<p>Note that just because an authorization URL is listed in the \"authorizations\" array of an order object doesn't mean that the client is required to take action.  There are several reasons that  the referenced authorizations may already be valid:</p>\n</blockquote>\n<p>o  The client completed the authorization as part of a previous order</p>\n<p>o  The client previously pre-authorized the identifier (see<br>\n      Section 7.4.1)</p>\n<p>o  The server granted the client authorization based on an external<br>\n      account</p>\n<blockquote>\n<p>Clients SHOULD check the \"status\" field of an order to determine whether they need to take any action.</p>\n</blockquote>",
  "<p>I'd have to dig into LE's docs or the actual responses returned by LE's servers to figure out if that's what's happening here.</p>",
  "<p>It's probably easier to do the test you suggested above, of seeing what happens on a new cert.  That's the case we're most concerned with, and we suspect it will fail on (i.e. does require nginx to be up).  So no need to go digging too far if we have a fairly simple real-world test we expect it to fail on.</p>",
  "<p>Probably a new account key suffices for this test (<code>rm -rf /etc/letsencrypt/accounts/acme-v02.api.letsencrypt.org</code>).</p>",
  "<p>Hm:</p>\n<div class=\"codehilite\"><pre><span></span><code># certbot renew --webroot -m alexmv@zulip.com --agree-tos --no-eff-email --force-renewal\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nProcessing /etc/letsencrypt/renewal/alexmv-prod.zulipdev.org.conf\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlugins selected: Authenticator webroot, Installer None\nAttempting to renew cert (alexmv-prod.zulipdev.org) from /etc/letsencrypt/renewal/alexmv-prod.zulipdev.org.conf produced an unexpected error: Account at /etc/letsencrypt/accounts/acme-v01.api.letsencrypt.org/directory/a5537d6c0f53acddaae956fca02e5e0d does not exist. Skipping.\nAll renewal attempts failed. The following certs could not be renewed:\n  /etc/letsencrypt/live/alexmv-prod.zulipdev.org/fullchain.pem (failure)\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nAll renewal attempts failed. The following certs could not be renewed:\n  /etc/letsencrypt/live/alexmv-prod.zulipdev.org/fullchain.pem (failure)\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1 renew failure(s), 0 parse failure(s)\n</code></pre></div>",
  "<p>Mm okay, maybe more deletions are needed.</p>",
  "<p>If I blow ~all of <code>/etc/letsencrypt</code> away, then <code>certbot renew</code> fails because there's nothing to renew.  Getting a new cert with <code>certbot certonly</code> does fail with nginx not running.</p>",
  "<p>I can't find a middle ground which lets me renew but gets a new account key.</p>",
  "<p>I need to step away here in a few but I have a minute so I'll do this test now. Spun up <code>klardotsh2-acmetest</code> as a tiny ubuntu 22.04 droplet with DNS attached to it but otherwise nothing useful (no Zulip-related stuff). installing certbot; will let ya know if the flow works.</p>",
  "<p>everything worked fine.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Massive blob of console output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>root@ubuntu-s-1vcpu-1gb-sfo1-01:~# certbot certonly --standalone -m <a href=\"mailto:josh@zulip.com\">josh@zulip.com</a> --agree-tos --no-eff-email -d <a href=\"http://klardotsh2-acmetest.zulipdev.org\">klardotsh2-acmetest.zulipdev.org</a><br>\nSaving debug log to /var/log/letsencrypt/letsencrypt.log<br>\nAccount registered.<br>\nRequesting a certificate for <a href=\"http://klardotsh2-acmetest.zulipdev.org\">klardotsh2-acmetest.zulipdev.org</a></p>\n<p>Successfully received certificate.<br>\nCertificate is saved at: /etc/letsencrypt/live/klardotsh2-acmetest.zulipdev.org/fullchain.pem<br>\nKey is saved at:         /etc/letsencrypt/live/klardotsh2-acmetest.zulipdev.org/privkey.pem<br>\nThis certificate expires on 2023-05-31.<br>\nThese files will be updated when the certificate renews.<br>\nCertbot has set up a scheduled task to automatically renew this certificate in the background.</p>\n<hr>\n<p>If you like Certbot, please consider supporting our work by:<br>\n * Donating to ISRG / Let's Encrypt:   <a href=\"https://letsencrypt.org/donate\">https://letsencrypt.org/donate</a><br>\n * Donating to EFF:                    <a href=\"https://eff.org/donate-le\">https://eff.org/donate-le</a></p>\n<hr>\n<p>root@ubuntu-s-1vcpu-1gb-sfo1-01:~# ps aux | grep nginx<br>\nroot        2654  0.0  0.2   7004  2136 pts/0    S+   03:13   0:00 grep --color=auto nginx<br>\nroot@ubuntu-s-1vcpu-1gb-sfo1-01:~# ss -ltpn | grep :80<br>\nroot@ubuntu-s-1vcpu-1gb-sfo1-01:~# ss -ltpn | grep :443<br>\nroot@ubuntu-s-1vcpu-1gb-sfo1-01:~# certbot renew --webroot -m <a href=\"mailto:josh@zulip.com\">josh@zulip.com</a> --agree-tos --no-eff-email --force-renewal<br>\nSaving debug log to /var/log/letsencrypt/letsencrypt.log</p>\n<hr>\n<p>Processing /etc/letsencrypt/renewal/klardotsh2-acmetest.zulipdev.org.conf</p>\n<hr>\n<p>Renewing an existing certificate for <a href=\"http://klardotsh2-acmetest.zulipdev.org\">klardotsh2-acmetest.zulipdev.org</a></p>\n<hr>\n<p>Congratulations, all renewals succeeded: <br>\n  /etc/letsencrypt/live/klardotsh2-acmetest.zulipdev.org/fullchain.pem (success)</p>\n<hr>\n</div></div>",
  "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>letsencrypt renewal config after the fact</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>root@ubuntu-s-1vcpu-1gb-sfo1-01:~# cat /etc/letsencrypt/renewal/klardotsh2-acmetest.zulipdev.org.conf </p>\n<h1>renew_before_expiry = 30 days</h1>\n<p>version = 1.21.0<br>\narchive_dir = /etc/letsencrypt/archive/klardotsh2-acmetest.zulipdev.org<br>\ncert = /etc/letsencrypt/live/klardotsh2-acmetest.zulipdev.org/cert.pem<br>\nprivkey = /etc/letsencrypt/live/klardotsh2-acmetest.zulipdev.org/privkey.pem<br>\nchain = /etc/letsencrypt/live/klardotsh2-acmetest.zulipdev.org/chain.pem<br>\nfullchain = /etc/letsencrypt/live/klardotsh2-acmetest.zulipdev.org/fullchain.pem</p>\n<h1>Options used in the renewal process</h1>\n<p>[renewalparams]<br>\naccount = &lt;snip, not sure this is really private though&gt;<br>\nauthenticator = webroot<br>\nserver = <a href=\"https://acme-v02.api.letsencrypt.org/directory\">https://acme-v02.api.letsencrypt.org/directory</a></p>\n</div></div>",
  "<p>Looks like our validation window could be as long as 30 days presuming all validations work the way TXT DNS validations do, meaning doing a double-order (standalone, then webroot-without-nginx-running) to init the container could be a valid path. Uses 2/5 of the rate limit for the 7-day rolling window on the unique set of domains, but otherwise simplifies our setup. <a href=\"https://community.letsencrypt.org/t/will-renewal-always-require-new-dns-acme-challenge-txt/102820/2\">https://community.letsencrypt.org/t/will-renewal-always-require-new-dns-acme-challenge-txt/102820/2</a></p>",
  "<p>Though a moderator does mention down-thread that that window \"could change\". Hm.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> did you have further thoughts here on how you'd like to see this shape up? There's a few branching paths enumerated upthread (a simple commit re-word for clarity and retaining all changes, making <code>client_name.startswith(\"internal\")</code> skip rewriting <code>client_name</code>, figuring through <code>is_browser_view</code>, or potentially some combo of the above where we merge a potentially-less-optimal thing that unblocks the endpoint now, and circle back to a cleaner fix later)</p>",
  "<p>Bumping this for review (<span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> ) and/or re-review (<span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> - well, I guess, more \"what do you think of the rewording I left in the comment thread?\") if either of you have time coming up.</p>",
  "<p>I guess I'm not convinced that making certbot recursive, and potentially relying on their internal caching details, is worth removing the <code>&amp;</code>.  I certainly agree that single-process reasoning is easier than reasoning about mutli-process settings -- but the actual renewal will happen in a multi-process setting, so it doesn't seem all that more complexity.</p>",
  "<p>Fair.</p>\n<p>There's a whole other can of worms I'm avoiding opening somewhat intentionally: in most Docker stacks, the fact that we do a certbot+nginx dance within the same container as the Zulip Server app itself is pretty unidiomatic. I certainly would be fairly surprised to have to configure such an \"all in one\" container in this way. Some part of me wonders how much investment it's actually worth to try to keep tinkering with the nginx-in-the-monolith-container vs doing the more commonly expected thing and splitting nginx+certbot to its own container that speaks to Zulip over an internal Docker network (in plain text)</p>",
  "<p>That seems mostly-tangential to this, though?  In that we'd still have the same certificate complexity, but I guess it'd be separated into its own docker container and disparate from, say, the shenanigans of getting <code>/etc/zulip/settings.py</code> set up?</p>",
  "<p>Separated, and something we potentially don't have to deal with ourselves as a maintenance burden - <a href=\"http://linuxserver.io\">linuxserver.io</a> images and etc. have been solving that problem space well for a Very Long Time.</p>",
  "<p>:nod:  How much rope do those give for dropping in bits of nginx config files?  And what's the canonical solution for how to load them with static content?</p>",
  "<p>It varies. One of the more popular images <a href=\"https://github.com/linuxserver/docker-swag#site-config-and-reverse-proxy\">provides a volume mount that can be populated with <code>site-confs</code> configs</a></p>",
  "<p>Static content I'd need to do more digging on. Vaguely I recall the same volume mount thing being common for some images, others depend on the underlying application serving up its own static content (in other words, serving solely as a reverse proxy)</p>",
  "<p>I think it'd be pretty annoying to manage <code>nginx</code> configuration in a separate container with any real configuration -- just in terms of where the code for those options lives and is maintained. </p>\n<p>But if the separate container just has a certificate and reverse proxies all HTTP requests to the <code>zulip</code> container which also runs <code>nginx</code>, that could possibly work (because the outer <code>nginx</code> wouldn't require any options at all), albeit it'd be a waste of resources.</p>",
  "<p>I've mostly determined I need a bigger chunk of time than I've had this week to read this, so it's being left marked as unread. (Sorry I've been sick this week!)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1519345\">said</a>:</p>\n<blockquote>\n<p>How do we know that it was an image?  It feels not-quite-right to always serve that 404 as an image.</p>\n</blockquote>\n<p>we are serving 404 as an image which says \"This file you are requesting does not exist or is no longer available.\", o I think it will be understandable.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"26238\">Ishaan Singh</span> has marked this topic as resolved.</p>",
  "<p>Update: <a href=\"https://github.com/zulip/zulip/pull/24236\">#24236</a> is merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<hr>\n<p><strong>I am planning to focus first, on the smaller follow-ups:</strong></p>\n<ul>\n<li>Reorganize  <code>do_set_user_topic_visibility_policy</code> to remove the if/else clause and just have a single call to <code>set_user_topic_visibility_policy_in_database</code></li>\n<li><a href=\"https://github.com/zulip/zulip/pull/24574\">#24574</a> - Move/Delete 'UserTopic' records, regardless of the visibility_policy, during a move-topic operation <a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1125358080\">(comment)</a></li>\n<li>\n<p>Discussion around: </p>\n<blockquote>\n<p>what do we want the long-term semantics to be around \"What if the topic already has the target visibility policy\"</p>\n</blockquote>\n<p>Details: <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/duplicate.20request.20to.20update.20UserTopic.20row\">#api design &gt; duplicate request to update UserTopic row</a> </p>\n</li>\n<li>\n<p>Split <code>zerver/tests/test_users.py</code> -- 200+ lines long test into multiple smaller tests. (<a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1092742332\">comment</a>) (not a blocker for this feature)</p>\n</li>\n</ul>\n<hr>\n<p>Plan for the next major steps in completing the feature itself.</p>\n<ul>\n<li>Add a new URL and view for this feature.</li>\n<li><a href=\"https://github.com/zulip/zulip/pull/24244\">#24244</a> - Implement an option to unmute a topic in the dev environment</li>\n<li><a href=\"https://github.com/zulip/zulip/pull/24243\">#24243</a> - Implement UI for unmuting a topic within a muted stream</li>\n</ul>",
  "<p>Also, if any of the moderators can rename the topic to <code>Unmute Topics</code>. That would be great.<br>\nI mistakenly named it Follow Topics in the initial days of the PR, due to confusion with MUTE/UNMUTE namings.</p>",
  "<p>Today I added a commit to my open PR ( <a href=\"https://github.com/zulip/zulip/pull/24587\">https://github.com/zulip/zulip/pull/24587</a>) only one check was unsuccessful but when I ran <code>./tools/test-all</code> in my local machine all tests were passed. Can anyone help me with this?</p>",
  "<p>Did you investigate specifically what the failing check was?</p>",
  "<p>Yes, I checked the failing case and fixed it. Now, it's working fine can you please review it?</p>",
  "<p>For a system that is running <em>only</em> Zulip it'd be a waste of resources, sure. If I want to use a wildcard cert for my entire domain and use host-based routing between, say, a Zulip server, a Mastodon server, and a Discourse server, it's nice to have a single container in charge of all things TLS-termination-y (and I guess internal routing). To some degree this \"global nginx container\" pattern emulates what we use ALBs for in AWS-land.</p>",
  "<p>In general, please do some investigation first before asking for help. See <a href=\"https://zulip.readthedocs.io/en/latest/contributing/asking-great-questions.html\">RTD/contributing/asking-great-questions.html</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span> <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1520026\">said</a>:</p>\n<blockquote>\n<p>In general, please do some investigation first before asking for help. See <a href=\"https://zulip.readthedocs.io/en/latest/contributing/asking-great-questions.html\">RTD/contributing/asking-great-questions.html</a></p>\n</blockquote>\n<p>Ok, thanks from now I will keep this in mind.</p>",
  "<p>I don't think anyone's arguing that we shouldn't have a way to have your <code>docker-zulip</code> image not do <code>certbot</code>, so that you can do your own custom TLS termination proxy in front of it. But I guess I don't really see how our putting an <code>nginx</code> reverse proxy in a separate image would help with that use case?</p>",
  "<p>(You'll have to do your own configuration thing to proxy to all 3 of those services, since no individual one can provide you with a setup that's going to proxy to all 3 correctly).</p>",
  "<p>So I think it'd be nice to preserve the option to offer <code>certbot</code> in the Docker image with the copy of <code>nginx</code> that we need to provide on the application host to serve the app itself, rather than putting a second copy of <code>nginx</code> in front of it.</p>",
  "<p>Maybe I'm missing something, but I don't see a plan that lets us not have a copy of <code>nginx</code> on the <code>zulip</code> application server host -- that's how we serve the web app, among other things.</p>",
  "<p>Splitting <code>RecipientInfoTest</code> seems like it may not be easy to do well; we need to make sure the test setup is done consistently and correctly, such that one can feel confident that we're testing what we think we're testing in each case when split into multiple tests. </p>\n<p>(It's the kind of thing that, especially if a lot of copy/paste of setup code is involved in splitting it, you can end up having the tests be useless because you're not testing what you think you are due to bugs in the setup code).</p>",
  "<p>There\u2019s a possible future where we rewrite part of the backend in Rust, and then flip things around so that a Rust server calls into Django rather than a Django server calling into Rust, and then the Rust server can take over the responsibilities of nginx, and we don\u2019t need nginx anymore. That\u2019s very long-term though.</p>",
  "<p>There\u2019s another possible future where we replace nginx with <a href=\"https://caddyserver.com/\">Caddy</a>, which handles ACME by itself automatically. (We\u2019d still need a way to persist its certificates across container rebuilds though.)</p>",
  "<p>I\u2019m pretty fed up with nginx <a href=\"https://trac.nginx.org/nginx/ticket/348\">never fixing bugs</a> and would be happy to see it replaced with something that does.</p>",
  "<p>(ref <a href=\"https://github.com/zulip/zulip/commit/d41a00b83b5a392f6c3a3f6ca9823191294fc66c\">d41a00b83b5a392f6c3a3f6ca9823191294fc66c</a> for that bug, in case folks are confused why Anders is calling that one out specifically)</p>",
  "<p>Interesting to see mention of Caddy, which I remember coming across years ago, though I could have sworn that it wasn't OSS then (though for some reason I thought there were limitations with nginx too).</p>",
  "<p>We\u2019ve actually had a minor service (the Zulipbot webhook) behind Caddy for 1.5 years. It once gave us a ZeroSSL certificate during a momentary Let\u2019s Encrypt outage.</p>",
  "<p>Caddy's great. I switched to it for my personal hosts, including for static content and RPing a Matrix homeserver: <a href=\"https://github.com/klardotsh/klar.sh/blob/master/Caddyfile\">https://github.com/klardotsh/klar.sh/blob/master/Caddyfile</a>. I wouldn't be opposed to such a setup.</p>",
  "<p>I heard grumblings in the Caddy 1-&gt;2 transition for one reason or another (I think the big one being more configuration complexity, don't quote me on that though), but <img alt=\":shrug:\" class=\"emoji\" src=\"/user_avatars/2/emoji/images/31.png\" title=\"shrug\">  It Just Works <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> for my purposes.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/certbot/near/1520141\">said</a>:</p>\n<blockquote>\n<p>Maybe I'm missing something, but I don't see a plan that lets us not have a copy of <code>nginx</code> on the <code>zulip</code> application server host -- that's how we serve the web app, among other things.</p>\n</blockquote>\n<p>Yeah I suppose short of having the Django app serve its own statics when in a containerized environment (this is somewhat what I'm most familiar with seeing from other applications in a nginx-in-its-own-container world) there needs to be <em>something</em> there (or the static assets read by another container entirely).</p>",
  "<p>It's looking clear the short term task is \"figure out why nginx wasn't restarted correctly and otherwise change nothing about the container\", with a potential near-term follow-up to enable telling the container \"hey, TLS is terminating a level above you, skip everything HTTPS-related\" (which I think we already have much if not all of?)</p>",
  "<p>Yes, we already have <code>DISABLE_HTTPS</code>, users that are using it, and some <a href=\"https://github.com/zulip/docker-zulip#networking-and-reverse-proxy-configuration\">documentation</a> for that setup.</p>",
  "<p>Django is so bad at performantly serving static content that it refuses to do so in production.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1519345\">said</a>:</p>\n<blockquote>\n<p>How do we know that it was an image?  It feels not-quite-right to always serve that 404 as an image.</p>\n</blockquote>\n<p>That's a good question -- what do other applications that host uploaded files do with deleted files that were not originally images?</p>",
  "<p>I feel like we certainly could make our behavior here conditional on file extension, if we had something else we wanted to do for a missing/deleted non-image file.</p>",
  "<p>I think the most natural thing to be for a non-image file would be for clicking the link to serve you a normal 404 file-not-found webpage, not an image that says a version of \"file not found\".</p>",
  "<p>We know it\u2019s an image because the browser sends a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation/List_of_default_Accept_values\">different <code>Accept</code> header</a>.</p>",
  "<p>OK, but I don't see what in <a href=\"https://github.com/zulip/zulip/pull/24587\">#24587</a> would be checking that?</p>",
  "<p>It doesn\u2019t; it should.</p>",
  "<p>And we shouldn't be 302'ing to a 200, but sending the svg content with a 404 status.</p>",
  "<p>WhiteNoise is a thing, for what it's worth. For serving static content from Python/Django in production.</p>\n<p><a href=\"https://whitenoise.readthedocs.io/\">https://whitenoise.readthedocs.io/</a><br>\n<a href=\"https://github.com/evansd/whitenoise\">https://github.com/evansd/whitenoise</a> (2.2k stars, actively maintained)</p>\n<p><a href=\"https://whitenoise.readthedocs.io/en/latest/#infrequently-asked-questions\">https://whitenoise.readthedocs.io/en/latest/#infrequently-asked-questions</a></p>",
  "<p>The current behavior for the non-image file is it shows \"File you are requesting does not exist or is no longer available.\" in a new webpage.<br>\nI tested with .docx, .txt, and .mp4 files.</p>",
  "<p>Are there any changes that are needed apart from the 404  status code?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>  <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span>  Can you suggest me some necessary changes?</p>",
  "<p>So the goal is to return a different response (text, or image) depending on what the browser sends as an <code>Accept</code> header.  The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation/List_of_default_Accept_values\">list Anders linked to</a> shows that in different contexts, browsers ask for different things.  For instance, Chrome for an <code>&lt;img&gt;</code> tag sends:</p>\n<div class=\"codehilite\"><pre><span></span><code>Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\n</code></pre></div>\n<p>This means that it would like any of:</p>\n<ul>\n<li><code>image/avif</code></li>\n<li><code>image/webp</code></li>\n<li><code>image/apng</code></li>\n<li><code>image/*</code></li>\n<li><code>*/*</code> but only with <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Quality_values\">quality 0.8</a> -- so everything else not listed above is not preferred, but will work.</li>\n</ul>\n<p>The <a href=\"https://docs.djangoproject.com/en/4.1/ref/request-response/#django.http.HttpRequest.accepts\">built-in Django <code>.accepts()</code></a> only tells you a binary \"yes\" or \"no,\" but because of that last \"anything goes, but not as preferred\" sort of value, we need more than a binary yes/no -- we need to be able to answer \"does the browser prefer <code>text/html</code> or <code>image/svg</code>, based on its quality ranking?\"</p>\n<p>You should write a commit to provide a function which takes a list of potential content-types we can return, and return the highest-ranked one which the browser will accept, or None if it won't accept any of them.</p>\n<p>You will want to use <a href=\"https://github.com/django/django/blob/32d4b61c313be5169137047e9fb3668da20a5d89/django/http/request.py#L107\">the <code>.accepted_types</code> method</a> and the resulting <a href=\"https://github.com/django/django/blob/32d4b61c313be5169137047e9fb3668da20a5d89/django/http/request.py#L663\">MediaType objects</a>.</p>",
  "<p>Once you have that, we can use it to either return a normal <code>text/html</code> <code>HttpResponseNotFound</code> <em>or</em> a 404 status with an internal redirect to the static image content via nginx.  We can discuss how to do that second part once you've tackled the first part.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1520675\">said</a>:</p>\n<blockquote>\n<p>You should write a commit to provide a function which takes a list of potential content-types we can return, and return the highest-ranked one which the browser will accept, or None if it won't accept any of them.</p>\n</blockquote>\n<p>This might be a reasonable thing to try and upstream into core Django, actually.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>  I got the technical aspect of what you just said but didn't get the need. Do we have to show different responses for different file types? For example:</p>\n<p>images: image not found<br>\ndocx/pdf/etc.: Document not found <br>\netc.</p>",
  "<p>For now, mostly images vs text.  In the future, we may want to extend that to, for example, videos.</p>\n<p>Imagine you uploaded a video and we link to it with a <code>&lt;video&gt;</code> tag.  The browser will expect that the response it gets is something it can play as a video.  If we return text, it's going to be a broken UI.  Same if we return an image.  We need to tailor the content-type of the response to what the browser can handle.</p>",
  "<p>As we just show thumbnails for images, in my latest commit I deal with that broken thumbnail and also when it is clicked. Similarly, for any other file types it redirects to a different webpage saying \"File you are requesting does not exist or is no longer available.\".</p>",
  "<p>While serving an image will work for missing <code>&lt;img&gt;</code> tags, if I open that URL in a browser, we might want to serve a webpage with nice Zulip branding which says \"File not found.\"</p>",
  "<p>Yes, with this current code, we can do this. We have to create that nicely branded webpage.</p>",
  "<p>You made the thumbnail endpoint return the image, and everything else still returns text.  That means that the inline <code>&lt;img src=\"/user_uploads/...\"&gt;</code> is still going to be returning text, and thus a broken image.</p>",
  "<p>My point is that always returning text, or always returning an image, is going to result in cases where we break things -- because it's not what the browser expects.  But <em>the browser tells us what it wants</em> and we should be using that information.</p>",
  "<p>Arguably, the thumbnail endpoint can always return an image, and that's fine -- but the generic \"get me a file that was uploaded\" endpoint has to be somewhat selective to how the browser is calling it, since the whole problem is that we don't have the file anymore to know what file-type it was originally.</p>",
  "<p>Yes, now it totally makes sense. Thanks.<br>\nBut the only way right now I am thinking to fix this using check for the request  accept header in validate_thumbnail_request</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"n\">validate_thumbnail_request</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">maybe_user_profile</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s2\">\"static/images/errors/not2.svg\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Oh, part of the confusion is probably the thumbnail endpoint -- which is only turned on in development, since it doesn't do anything anymore.  Which is why your code looks to work right now.</p>\n<p>If you set <code>THUMBNAIL_IMAGES = False</code> in <code>zproject/dev_settings.py</code> and upload a new image, delete it, and reload the page, you'll see a broken image link.</p>",
  "<p>Yes, we'll need to replace that <code>return redirect(...)</code> with code that checks the Accept header.</p>",
  "<p>We should probably turn off <code>THUMBNAIL_IMAGES</code> in dev since it's a no-op and does not match how prod deploys work.</p>",
  "<p>Yes about that as you mentioned we don't know what was the file type, so what to do?</p>",
  "<p>Check the <code>Accept</code> header, as I explained.</p>",
  "<p>(deleted)</p>",
  "<p>(deleted)</p>",
  "<p>As I think you noticed, I think your first pass doesn't quite work right.  Take some time, write some good test cases, and push it to the PR. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Yeah, I took a completely different approach for my first commit, but I fixed those in the latest commit. :)</p>",
  "<p>And up to now, it works both in the case of functionality and tests.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"26262\">@Srijan</span> you should read our guide on writing reviewable PRs -- if the later commits are just fixing up earlier commits, you should squash them, so that a reviewer doesn't need to spend time understanding directions that you know to not be correct.</p>",
  "<p>Sorry, I must have missed that part.</p>",
  "<p>I will keep that in mind</p>",
  "<p>Hello could someone please advise if Zulip (self-hosted) supports CDN for file uploads? Trying to setup Cloudfront for S3 and adding <code>S3_ENDPOINT_URL</code> doesn't seem enough - images won't upload or load</p>",
  "<p>I was just poking around this on the frontend in the dev environment today, noticed that I could create a bot with all sorts of characters in the email name. I was confused because the modal text indicated that I could only use a limited set of characters (see screenshot below). Looking at recent(-ish) commits, I found my way to this conversation that didn't end up having any follow-up / conclusion reached.</p>\n<p><a href=\"/user_uploads/2/37/yoaAMypxNqwN9sXwH8iOmt0b/Screenshot-from-2023-03-08-19-45-58.png\">Screenshot-from-2023-03-08-19-45-58.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/37/yoaAMypxNqwN9sXwH8iOmt0b/Screenshot-from-2023-03-08-19-45-58.png\" title=\"Screenshot-from-2023-03-08-19-45-58.png\"><img src=\"/user_uploads/2/37/yoaAMypxNqwN9sXwH8iOmt0b/Screenshot-from-2023-03-08-19-45-58.png\"></a></div>",
  "<p>I assume most people will follow instructions and only use the subset of characters listed in the modal. But it would be good to get consensus and maybe add the validation if we do want to limit what characters can be used in that field?</p>\n<p>I'll also note that the backend change noted above was dropped from the merged commit. So we currently only make sure that the value isn't an empty string on the backend. The frontend does do the regex check above.</p>",
  "<p>Zulip serves the file uploads directly from the server, because it wants to apply access control to the requests.  If you're storing files in S3, Zulip 5.x and earlier send a redirect to a temporary URL in S3, which serves the file; in <code>main</code> (what will be 6.x and later) the Zulip server fetches the content from S3 and serves it directly, so the browsers can cache it.</p>\n<p>So theoretically in 5.x we could serve a slightly different redirect to clients which was fronted by a CDN -- but that request is not a good one to cache, since it's a time-limited signed request.  And in 6.x the only place oner could apply a CDN is between the user and the Zulip server -- and the user uploads are still not cacable by an intermediate proxy because they're private, so you'd only be benefiting from the accelerated distribution networks that CDNs often offer.</p>\n<p><code>S3_ENDPOINT_URL</code> is only if you have a S3-compatable-but-not-S3 service you're using (e.g. <a href=\"https://www.digitalocean.com/products/spaces\">DigitalOcean Spaces</a>)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1520816\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"26262\">Srijan</span> you should read our guide on writing reviewable PRs -- if the later commits are just fixing up earlier commits, you should squash them, so that a reviewer doesn't need to spend time understanding directions that you know to not be correct.</p>\n</blockquote>\n<p>I squashed the two commits in one</p>",
  "<p>Routing Tornado connections asynchronously is an even bigger issue than static content.</p>",
  "<p>thank you. any suggestion how to speed up image upload? Or is there nothing on Zulip side that we could do and any optimizations are on the user side (reducing size etc)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> <span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> <br>\nThis is regarding the various constant values we have in our models for enum fields, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserTopic</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user_profile</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Stream</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">recipient</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Recipient</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">topic_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"n\">MAX_TOPIC_NAME_LENGTH</span><span class=\"p\">)</span>\n\n    <span class=\"n\">VISIBILITY_POLICY_INHERIT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">MUTED</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">UNMUTED</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">FOLLOWED</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>and also, other settings:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Realm</span><span class=\"p\">():</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">POLICY_MEMBERS_ONLY</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">POLICY_ADMINS_ONLY</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">POLICY_FULL_MEMBERS_ONLY</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n    <span class=\"n\">POLICY_MODERATORS_ONLY</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n    <span class=\"n\">POLICY_EVERYONE</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n    <span class=\"n\">POLICY_NOBODY</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n    <span class=\"n\">POLICY_OWNERS_ONLY</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n    <span class=\"c1\"># ...</span>\n</code></pre></div>",
  "<p>The question (which came up in <a href=\"https://github.com/zulip/zulip/pull/24618\">#24618</a>) is whether it would be better to have keep the prefixes (<code>VISIBILITY_POLICY_</code> and <code>POLICY_</code> in the above examples), or create a new class having it's fields as the remaining part of the variable name? For example, we could create a class like the following for the <code>UserTopic</code> case:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserTopicVisibilityPolicy</span><span class=\"p\">():</span>\n    <span class=\"n\">MUTED</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">INHERIT</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">UNMUTED</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n    <span class=\"n\">FOLLOWED</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>Then, whenever we want to access the value of the setting, we could do it as <code>UserTopicVisibilityPolicy.INHERIT</code> instead of <code>UserTopic.VISIBILITY_POLICY_INHERIT</code></p>",
  "<p>I can imagine us getting more use of autocomplete features etc in editors if we create a dedicated class like the one shown above. But doing so will also increase the imports into other files.</p>",
  "<p>For an in-action example of the above method, see the <code>models.py/NotificationTriggers</code>class:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">NotificationTriggers</span><span class=\"p\">:</span>\n    <span class=\"c1\"># \"private_message\" is for 1:1 PMs as well as huddles</span>\n    <span class=\"n\">PRIVATE_MESSAGE</span> <span class=\"o\">=</span> <span class=\"s2\">\"private_message\"</span>\n    <span class=\"n\">MENTION</span> <span class=\"o\">=</span> <span class=\"s2\">\"mentioned\"</span>\n    <span class=\"n\">WILDCARD_MENTION</span> <span class=\"o\">=</span> <span class=\"s2\">\"wildcard_mentioned\"</span>\n    <span class=\"n\">STREAM_PUSH</span> <span class=\"o\">=</span> <span class=\"s2\">\"stream_push_notify\"</span>\n    <span class=\"n\">STREAM_EMAIL</span> <span class=\"o\">=</span> <span class=\"s2\">\"stream_email_notify\"</span>\n</code></pre></div>",
  "<p>Thoughts?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> can you add a bit on this?</p>\n<blockquote>\n<p>I can imagine us getting more use of autocomplete features etc in editors if we create a dedicated class like the one shown above.</p>\n</blockquote>\n<p>These are still class variables, so I'm not sure how it is going to be a better choice in terms of autocomplete features.</p>\n<p>In terms of readability, <code>UserTopicVisibilityPolicy.INHERIT</code> sounds <strong>slightly</strong> better to me as compared with <code>UserTopic.VISIBILITY_POLICY_INHERIT</code>. </p>\n<p>But again, I think we should go with <code>UserTopic.VISIBILITY_POLICY_INHERIT</code> because (as <a href=\"https://github.com/zulip/zulip/pull/24618#issuecomment-1460591292\">mentioned</a> by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> ) we are moving towards a pattern of having prefixes in other models.</p>",
  "<p>Are you using the <a href=\"https://zulip.readthedocs.io/en/stable/production/upload-backends.html#s3-backend-configuration\">S3 storage backend</a>, or the default on-disk storage?</p>",
  "<p>But the biggest impact adjustments are always going to be to have fewer bytes to upload, by having smaller files, yes.  Other things to optimize include reducing latency from users to the server (e.g. putting it in a location close to them) or reducing latency to the S3 storage if you're using that (e.g. choosing the right AWS region).</p>",
  "<p>Do we want to use the <a href=\"https://docs.djangoproject.com/en/4.1/ref/models/fields/#field-choices-enum-types\">core Django enums</a>?</p>",
  "<blockquote>\n<p>These are still class variables, so I'm not sure how it is going to be a better choice in terms of autocomplete features.</p>\n</blockquote>\n<p>If you don't have fuzzy autocomplete, typing out <code>UserTop&lt;TAB&gt;. IN&lt;TAB&gt;</code> might be a better experience than <code>VISI&lt;TAB&gt;</code>. But that's just a speculation, I haven't used any editor without fuzzy autocomplete.</p>",
  "<p>The core Django enum IntegerChoices class might be nice, I'd be curious to see how switching to that for a single setting reads.</p>",
  "<p>We may not need these constants for many realm settings as we move to groups permissions model. I don't see any real advantage in defining separate classes for these constants other than readability in some cases.</p>",
  "<p>We currently do not do database level validation for all the integer type setting fields. Though we do it at API level.</p>\n<p>Using Django enum IntegerChoices class can help in this too by defining \"choices\" value for these fields if validating at database level is beneficial.</p>",
  "<p>Looping back on this conversation to say that <a href=\"https://github.com/zulip/zulip/pull/22808\">#22808</a> was merged this week, which implements returning <code>ignored_parameters_unsupported</code> for all JSON success responses.</p>",
  "<p>Noting here the follow-ups noted on the pull request:</p>\n<ul>\n<li>Implementing <code>ignored_parameters_unsupported</code> for JSON error responses.</li>\n<li>Having the <code>method</code> parameter processed through our <code>REQ</code> framework.</li>\n<li>Refactoring to remove the <code>request</code> parameter from our JSON response functions.</li>\n<li>Following-up on the <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/ignored.20parameters.20in.20python.20bindings\">#api design &gt; ignored parameters in python bindings</a> conversation.</li>\n</ul>",
  "<p>I'll follow up on the <a class=\"stream\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design\">#api design</a> conversation next. And I have the other two tasks on my to-do list.</p>",
  "<p>For the JSON error responses, do we want to write up an issue after discussing here a bit?</p>",
  "<p>(deleted)</p>",
  "<p>Here's the first follow-up PR <a href=\"https://github.com/zulip/zulip/pull/24629\">#24629</a> to </p>\n<ul>\n<li>Reorganize<code> do_set_user_topic_visibility_policy</code> to remove the if/else clause and just have a single call to <code>set_user_topic_visibility_policy_in_database</code></li>\n</ul>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/24518\">#24518</a>, I've now separated the frontend and backend changes into different commits, and pushed a revision using the Django <code>choices</code> feature. Let me know how it looks.</p>",
  "<p>Typo, <a href=\"https://github.com/zulip/zulip/pull/24618\">#24618</a> is the right PR :)</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"n\">validate_thumbnail_request</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">maybe_user_profile</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">accept_header</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_ACCEPT'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">accept_header</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s1\">'image'</span> <span class=\"ow\">in</span> <span class=\"n\">accept_header</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s2\">\"static/images/errors/not2.svg\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s1\">'File you are requesting does not exist or is no longer available.'</span><span class=\"p\">)</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>  I wrote this function and it works. Can, you please check it so that I can commit it?</p>",
  "<p>While that may work, that's not doing any proper parsing of the header, so it will be brittle in unexpected ways -- e.g. <code>Accept: image/*;q=0.8,text/html</code> is the browser saying it prefers text/html to images (based on the quality score), and your method will still return the image.</p>\n<p>Please re-read the outline I wrote of the work you should do, in <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1520675\">https://chat.zulip.org/#narrow/stream/101-design/topic/deleted.20files/near/1520675</a>  Specifically, write a general purpose function so we can reuse it, and have it use the <code>.accepted_types</code> method on the request to get the properly-parsed information out.</p>",
  "<p>Yeah I think it's worth discussing the desired semantics for error responses. The main thing that's tricky about errors is that in theory, you can get an error inside a validator, before seeing what all the parameters that were passed are. (Especially if using REQ recursively). </p>\n<p>I think it's a solvable problem without doing anything fancy, though, and seems important; a major end user benefit I have in mind for this feature as a whole is being a way for you to realize you have a typo in a parameter you're passing.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>  I wrote a general-purpose function to sort the accept header. Here's the function</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sort_func</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span><span class=\"n\">HttpRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">accepted_types</span><span class=\"p\">)</span>\n    <span class=\"n\">med</span> <span class=\"o\">=</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n    <span class=\"n\">sorted_media</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">med</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">mt</span><span class=\"p\">:</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">mt</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">';q='</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"s1\">';q='</span> <span class=\"ow\">in</span> <span class=\"n\">mt</span> <span class=\"k\">else</span> <span class=\"s1\">'1.0'</span><span class=\"p\">),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sorted_media</span>\n</code></pre></div>",
  "<p>Also, I changed the <code>if validate_thumbnail_request(realm, maybe_user_profile, url) is None:</code> in this way:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">validate_thumbnail_request</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">maybe_user_profile</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">sorted_accept</span> <span class=\"o\">=</span> <span class=\"n\">sort_func</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">img_path</span> <span class=\"o\">=</span> <span class=\"s1\">'static/images/errors/not2.svg'</span>\n        <span class=\"n\">img_type_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'image/jpeg'</span><span class=\"p\">:</span><span class=\"s1\">'static/images/errors/not2.svg'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'image/png'</span><span class=\"p\">:</span><span class=\"s1\">'static/images/errors/not2.svg'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'image/webp'</span><span class=\"p\">:</span><span class=\"s1\">'static/images/errors/not2.svg'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'image/avif'</span><span class=\"p\">:</span><span class=\"s1\">'static/images/errors/not2.svg'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'image/svg+xml'</span><span class=\"p\">:</span><span class=\"s1\">'static/images/errors/not2.svg'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">mt</span> <span class=\"ow\">in</span> <span class=\"n\">sorted_accept</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">mt</span> <span class=\"ow\">in</span> <span class=\"n\">img_type_map</span><span class=\"p\">:</span>\n                <span class=\"n\">img_path</span> <span class=\"o\">=</span> <span class=\"n\">img_type_map</span><span class=\"p\">[</span><span class=\"n\">mt</span><span class=\"p\">]</span>\n                <span class=\"k\">break</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">img_path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">extension</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">==</span><span class=\"s1\">'.svg'</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s1\">'image/svg+xml'</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"n\">mt</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'Content-Deposition'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'inline; filename'</span><span class=\"o\">+</span><span class=\"n\">img_path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">img_path</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">img_file</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">img_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n</code></pre></div>\n<p>after making these changes the desired output is obtained.</p>",
  "<p>You seem to have made up your own grammar for the <code>Accept</code> header. We need to follow the <a href=\"https://httpwg.org/specs/rfc9110.html#field.accept\">specification</a>. (For example: the entire header is optional, <code>q</code> is optional, <code>q</code> is not the only possible parameter, whitespace is allowed, wildcards are allowed.) Ideally we would find a library that does this for us, like <a href=\"https://pypi.org/project/accept-types/\">accept-types</a>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span>  Can you please suggest some improvements?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"26262\">@Srijan</span> I would recommend starting with reading the specification and/or other libraries that parse it -- it's a web standard. Doing this kind of research into the correct way to handle a web standard is an important part of software development and well worth spending several hours on getting right.</p>\n<p>(Or if you're finding this difficult, it's possible someone else should take over finishing the issue).</p>",
  "<p>You don't need to do any parsing, even - the <a href=\"https://github.com/django/django/blob/32d4b61c313be5169137047e9fb3668da20a5d89/django/http/request.py#L107-L109\"><code>.accepted_types</code> method</a> returns parsed <a href=\"https://github.com/django/django/blob/32d4b61c313be5169137047e9fb3668da20a5d89/django/http/request.py#L663\">MediaType objects</a>.  Don't call <code>str</code> on it, use them.</p>",
  "<p>This is <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1520675\">what I suggested originally</a>.</p>",
  "<p>Hi everyone! I didn't see that Srijan was already working on the issue and attempted it on my own (completely new to opensource, just saw the issue listed at GSoC repo)</p>\n<p>So basically I moved hadling deleted files to another function: </p>\n<div class=\"codehilite\"><pre><span></span><code>def handle_file_not_found(request):\n    accept_header = request.META.get(&#39;HTTP_ACCEPT&#39;, &#39;&#39;)\n    if &#39;image&#39; in accept_header:\n        with open(&#39;static/images/errors/imageNotFound.png&#39;, &#39;rb&#39;) as f:\n            image_data = f.read()\n        return HttpResponseNotFound(image_data, content_type=&#39;image/png&#39;)\n    else:\n        error_data = {&#39;error&#39;: &#39;This file does not exist or has been deleted&#39;}\n        return HttpResponseNotFound(error_data, content_type=&#39;application/json&#39;)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>def serve_file(...)\n...\n     if is_authorized is None:\n         return handle_file_not_found(request)\n</code></pre></div>\n<p>for thumbnails:</p>\n<div class=\"codehilite\"><pre><span></span><code>def backend_serve_thumbnail()\n ...\naccept_header = request.META.get(&#39;HTTP_ACCEPT&#39;, &#39;&#39;)\n    if is_authorized is None:\n        if &#39;image&#39; in accept_header:\n            return redirect(&quot;static/images/errors/imageNotFound.png&quot;)\n..\n</code></pre></div>\n<p>This is the result of my attempt...<br>\n<a href=\"/user_uploads/2/ee/AQ5KY_sUn9EsDi5nzgI2SRWh/Screenshot-2023-03-12-135901.png\">Screenshot-2023-03-12-135901.png</a> <a href=\"/user_uploads/2/ad/xYrOSRz_zwjyZkKvAEri4VqF/Screenshot-2023-03-12-135907.png\">Screenshot-2023-03-12-135907.png</a> <a href=\"/user_uploads/2/d7/Yc939HWu9U4NUEb_4BPon8RI/Screenshot-2023-03-12-135915.png\">Screenshot-2023-03-12-135915.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/ee/AQ5KY_sUn9EsDi5nzgI2SRWh/Screenshot-2023-03-12-135901.png\" title=\"Screenshot-2023-03-12-135901.png\"><img src=\"/user_uploads/2/ee/AQ5KY_sUn9EsDi5nzgI2SRWh/Screenshot-2023-03-12-135901.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/ad/xYrOSRz_zwjyZkKvAEri4VqF/Screenshot-2023-03-12-135907.png\" title=\"Screenshot-2023-03-12-135907.png\"><img src=\"/user_uploads/2/ad/xYrOSRz_zwjyZkKvAEri4VqF/Screenshot-2023-03-12-135907.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/d7/Yc939HWu9U4NUEb_4BPon8RI/Screenshot-2023-03-12-135915.png\" title=\"Screenshot-2023-03-12-135915.png\"><img src=\"/user_uploads/2/d7/Yc939HWu9U4NUEb_4BPon8RI/Screenshot-2023-03-12-135915.png\"></a></div><p>Can I still commit my attempt even though the issue is assigned to someone else?</p>",
  "<p>Nevermind whatever I wrote in the previous message lol.<br>\nRead the discussion here, saw <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> suggesting to use accept_types library, changed the code and raised <a href=\"https://github.com/zulip/zulip/pull/24657\">PR#24657</a>. It looks like it passes all of the tests, but says that i lost 100% of test coverage in file thumbnail.py... no idea where that might come from, because I deleted the function I made earlier. Also, it runs  smoothly on prod suite. What should I do?</p>\n<div class=\"codehilite\"><pre><span></span><code>ERROR: zerver/views/thumbnail.py no longer has complete backend test coverage\n  Lines missing coverage: [49]\n\nIt looks like your changes lost 100% test coverage in one or more files\nUsually, the right fix for this is to add some tests.\nBut also check out the include/exclude lists in tools/test-backend.\nIf this line intentionally is not tested, you can use a # nocoverage comment.\nTo run this check locally, use `test-backend --coverage`.\nError: Process completed with exit code 1.\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1522965\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"26262\">Srijan</span> I would recommend starting with reading the specification and/or other libraries that parse it -- it's a web standard. Doing this kind of research into the correct way to handle a web standard is an important part of software development and well worth spending several hours on getting right.</p>\n<p>(Or if you're finding this difficult, it's possible someone else should take over finishing the issue).</p>\n</blockquote>\n<p>Ok, I will take the time to read and I want to work on it. But, since <span class=\"user-mention\" data-user-id=\"26395\">@Aniyar Durmagambetova</span>  submitted a PR what shall I do?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>  Can I use other libraries like the one <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> mentioned? If yes then I may have found a fix.</p>",
  "<p>We can use this function to get the best matching mimetype .</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">get_best_match</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">:</span><span class=\"n\">List</span><span class=\"p\">[],</span> <span class=\"n\">request</span><span class=\"p\">:</span><span class=\"n\">HttpRequest</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">accepted_types</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">accepted_types</span>\n    <span class=\"n\">return_type</span>  <span class=\"o\">=</span> <span class=\"n\">get_best_match</span><span class=\"p\">(</span><span class=\"n\">accepted_types</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">return_type</span>\n</code></pre></div>",
  "<p>Similarly, we can use the above function to fix our initial problem like:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">validate_thumbnail_request</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">maybe_user_profile</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">li</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'image/avif'</span><span class=\"p\">,</span><span class=\"s1\">'image/webp'</span><span class=\"p\">,</span><span class=\"s1\">'image/apng'</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">get_best_match</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">li</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'image'</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s2\">\"static/images/errors/not2.svg\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Is this implementation correct?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> any feedback?</p>",
  "<p>Please follow our <a href=\"https://zulip.com/development-community/#getting-help\">development community norms</a> and don't @ core contributors unless it is actually urgent.</p>\n<p>I guarantee I'll get to this topic when I have time today.</p>",
  "<p>Ok, I am really sorry.</p>",
  "<p>I think this looks pretty readable. The one concern I had is whether having a <code>class VisibilityPolicy</code> defined inside <code>class UserTopic</code> results in any performance/memory concern. (Well, it likely doesn't matter here, but if we're thinking about a pattern for UserProfile/Stream/Realm, it might matter!)</p>",
  "<p>I think that the answer is basically no -- the class will be instantiated once when defining <code>class UserTopic</code>, and while very <code>UserTopic</code> object will have a <code>.VisibilityPolicy</code>, those will all be pointers to the same singleton object.</p>",
  "<p>If that's correct, I think the only other question is whether we want to think more about the name -- E.g. <code>class VisibilityPolicyChoices</code> would be more readable that this is an enum type thing defining set of choices, not an object that might have a bunch of data on it... But the lines of code using these are already pretty long.</p>",
  "<p>Thoughts?</p>",
  "<p>I think just <code>VisibilityPolicy</code> is a fine name.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/models.2Epy.20.3A.20settings.20constants/near/1523694\">said</a>:</p>\n<blockquote>\n<p>I think that the answer is basically no -- the class will be instantiated once when defining <code>class UserTopic</code>, and while very <code>UserTopic</code> object will have a <code>.VisibilityPolicy</code>, those will all be pointers to the same singleton object.</p>\n</blockquote>\n<p>I verified this (assuming Django does not change the default way in which Python handles nested classes):</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Outer</span><span class=\"p\">():</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Inner</span><span class=\"p\">():</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">o1</span> <span class=\"o\">=</span> <span class=\"n\">Outer</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o1</span><span class=\"o\">.</span><span class=\"n\">Inner</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>    <span class=\"c1\"># 1</span>\n<span class=\"n\">o2</span> <span class=\"o\">=</span> <span class=\"n\">Outer</span><span class=\"p\">()</span>\n\n<span class=\"n\">o1</span><span class=\"o\">.</span><span class=\"n\">Inner</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o1</span><span class=\"o\">.</span><span class=\"n\">Inner</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>    <span class=\"c1\"># 5</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o2</span><span class=\"o\">.</span><span class=\"n\">Inner</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>    <span class=\"c1\"># 5</span>\n</code></pre></div>",
  "<p>61 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/deleted.20files\">#design &gt; deleted files</a> by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"26262\">@Srijan</span> <a href=\"#narrow/stream/3-backend/topic/404s.20for.20deleted.20files.20.2323739/near/1523453\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> any feedback?</p>\n</blockquote>\n<p>Your implementation is not correct, and does not compile; trying to run it (or writing tests for it!) should have shown you this.</p>\n<p>This issue seems to be giving you a lot of trouble -- I've reassigned it, and perhaps you can find a different issue to work on which you may find easier to tackle.</p>\n<p><span class=\"user-mention\" data-user-id=\"26395\">@Aniyar Durmagambetova</span>: Your PR has a few issues as well, but I'll follow up with the review on the PR, rather than here.  In general, however, it's a good idea to check if the issue has been assigned before starting any work on it.</p>",
  "<p>Ok, thank you for your help and guidance so far. I really like this project so I will keep working on this. But, this time I will read and understand this project rather than rushing my PRs. And also sorry for rushing you regarding this issue. :)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/cdn/near/1521553\">said</a>:</p>\n<blockquote>\n<p>Are you using the <a href=\"https://zulip.readthedocs.io/en/stable/production/upload-backends.html#s3-backend-configuration\">S3 storage backend</a>, or the default on-disk storage?</p>\n</blockquote>\n<p>The S3 storage. Do you have any extra suggestion for  it by any chance? The most issues we have are with uploading videos from mobile however.</p>",
  "<p>My notes above about S3 storage apply, then --- make sure you're storing them in the same region, and are using <a href=\"https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-s3.html\">AWS S3 VPC endpoints</a> to keep the traffic inside the region.</p>\n<p>But that's only going to solve the \"server saves it to S3\" part of the latency -- if you're uploading large videos from mobile, te bottleneck is likely in the client's network, which is not really something you have any real control over.</p>",
  "<p>Here's the second follow-up PR <a href=\"https://github.com/zulip/zulip/pull/24690\">#24690</a></p>\n<ul>\n<li>what do we want the long-term semantics to be around \"What if the topic already has the target visibility policy\"</li>\n</ul>\n<p>Discussion: <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/duplicate.20request.20to.20update.20UserTopic.20row\">#api design &gt; duplicate request to update UserTopic row</a></p>",
  "<p>One of those is merged; the other looks on track to be integrated soon as well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p><span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> great!</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"16839\">Abhijeet Bodas</span> <a href=\"#narrow/stream/3-backend/topic/models.2Epy.20.3A.20settings.20constants/near/1524269\">said</a>:</p>\n<blockquote>\n<p>I think just <code>VisibilityPolicy</code> is a fine name.</p>\n</blockquote>\n<p>OK. I feel like having an <code>Options</code> type thing in the name would be clearer to me, but we can go with this for now and if/when we do a project to more broadly rename our other policy fields, we can take a look at how they'd feel and change our minds on this.</p>\n<p>(These names don't appear in either the database or the API, so it'll be easy to do a sweep to change them if needed).</p>",
  "<p>Merged <a href=\"https://github.com/zulip/zulip/pull/24618\">#24618</a>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22838\">@Yogesh Sirsat</span> do you remember what happened here?</p>",
  "<p>I think the thing that I actually want to do here is work towards bot email addresses not being a thing that exists in the API. I've been vaguely thinking in the direction of moving our API authentication structure away from the current (username, api_key) pair that you send as an HTTP Basic authentication combined <code>{email_address}:{api_key}</code> to just a single API key token that we generate that might have the form <code>{human-pneumonic}-{api_key}</code>, where the human-readable part is really just there to help you figure out, given one of these entries in a configuration file, which account it goes with. I've not through about the precise encoding details, but I'm imagining something like:</p>\n<ul>\n<li>If you named a bot \"GitHub Bot\" when creating it, we'd generate a token that looks like \"github-bot-abcd1234\" for you. If you rotate its API key, it'll do the same algorithm but using the new/current name.</li>\n<li>If you're a human user, we'd generate an API token that looks like \"tim-abbott-abcd1234\".</li>\n</ul>\n<p>The nice thing about needing only one thing rather than two things is that  (1) the email addresses we're currently using are mutable and thus bad and (2) their main purpose is to help you, when reading your <code>zuliprc</code> file, figure out which bot something is.</p>",
  "<p>For reference, issues <a href=\"https://github.com/zulip/zulip/pull/24244\">#24244</a> and <a href=\"https://github.com/zulip/zulip/pull/24243\">#24243</a> are the next steps for this feature (after the followups from <a href=\"https://github.com/zulip/zulip/pull/24236\">#24236</a>).</p>",
  "<p>Actually, this is what I <a href=\"#narrow/stream/3-backend/topic/Unmute.20Topics/near/1519871\">planned</a> earlier for this project.<br>\nLet me know of any suggestions for changes in this.</p>",
  "<p>Apart from dropping the 'Split <code>zerver/tests/test_users.py</code> ...' changes as of now.</p>",
  "<p>This plan looks good <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
  "<p>Update: <a href=\"https://github.com/zulip/zulip/pull/24690\">#24690</a> -- Addressed the review comments</p>",
  "<p>Posted a few more but this is looking close.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/24690\">#24690</a> is merged.</p>",
  "<p>As a next step,<br>\nI have created a draft PR <a href=\"https://github.com/zulip/zulip/pull/24742\">#24742</a> to fix <a href=\"https://github.com/zulip/zulip/pull/24574\">#24574</a> -- <a href=\"https://github.com/zulip/zulip/pull/24236#discussion_r1117397531\">related comment</a></p>\n<p>It needs a discussion around, how to handle the <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/message_edit.py#L769\">TODO comment</a> regarding bulk_update</p>\n<p>I can think of one way to create functions <code>bulk_do_set_user_topic_visibility_policy</code> and <code>bulk_set_user_topic_visibility_policy_in_database</code> in parallel with the existing functions (<a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/user_topics.py#L15\">do_set_user...</a> and <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/user_topics.py#L111\">set_user_topic...</a>).</p>\n<ul>\n<li>\n<p>For database operations, we can use <a href=\"https://docs.djangoproject.com/en/4.1/ref/models/querysets/#bulk-create\">bulk_create with update_conflicts=True</a> and for deletion, we can do <a href=\"https://docs.djangoproject.com/en/4.2/topics/db/queries/#deleting-objects\">queryset.delete()</a></p>\n</li>\n<li>\n<p>Using this approach, we <strong>could not</strong> skip send_event() in the case of <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/user_topics.py#L155\">duplicate_requests</a>. (as we do <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/user_topics.py#L39\">currently</a>)<br>\nBut I think this is not a problem in this case as we are sure that the database will be changed (because <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/message_edit.py#L764\">moved_all_visible_messages</a> has initiated this, so we are certain about updating the UserTopic row for every concerned user)</p>\n</li>\n<li>\n<p>One problem I can think of is <strong>bulk send_event</strong>. We would need to finally loop here to send_event, right? (Any suggestions to tackle this?)</p>\n</li>\n</ul>\n<p>Thoughts?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/New.20bot.20email.20validation/near/1524796\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"22838\">Yogesh Sirsat</span> do you remember what happened here?</p>\n</blockquote>\n<p>I don't remember explicitly what happened, but after checking PR <a href=\"https://github.com/zulip/zulip/pull/22629\">#22629</a> and reading conversations, I guess we didn't give priority to changing the regex at that time or I could have forgotten to raise a new different issue for that regex!</p>",
  "<p>I don't think we can avoid the multiple <code>send_event</code> calls, since the events need to be sent to different users.</p>\n<p>I think creating <code>bulk_</code> functions seems like a fine approach. I'm assuming, for example <code>bulk_set_user_topic_visibility_policy_in_database</code> would be a much simpler function than <code>set_user_topic_visibility_policy_in_database</code>?</p>",
  "<blockquote>\n<p>bulk_set_user_topic_visibility_policy_in_database would be a much simpler function than set_user_topic_visibility_policy_in_database?</p>\n</blockquote>\n<p>Yes.</p>",
  "<p>I have updated <a href=\"https://github.com/zulip/zulip/pull/24742\">#24742</a> to address the <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/message_edit.py#L769\">TODO comment</a></p>\n<p>It needs a discussion around </p>\n<blockquote>\n<p>How to handle the case of move-topic operation when a user has visibility_policy set for both original and target topics?</p>\n</blockquote>\n<p><a href=\"https://github.com/zulip/zulip/pull/24742#discussion_r1142623662\">Details</a></p>",
  "<p>I left a review on the code.</p>\n<blockquote>\n<p>How to handle the case of move-topic operation when a user has visibility_policy set for both original and target topics?</p>\n</blockquote>\n<p>Let's wait for <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>  or <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span> to comment on this.</p>",
  "<p>Does anyone use <code>tools/create-test-api-docs</code>? It\u2019s had no changes since 2017 other than generic maintenance sweeps.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> I don't think I've run it since then, feel free to delete.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/24850\">#24850</a>. I guess the next question is whether anyone uses the <code>var/url_coverage.txt</code> file that the test runner generates to support it.</p>",
  "<p>I think the only part that's important in that code path is the logic for <code>ERROR: Some URLs are untested!  Here's the list of untested URLs:\"</code>. Ensuring tests render every Django page is pretty valuable -- making sure we have those tests catches issues like broken context introduced while refactoring, and Django makes it easy to have pages that are never visited by the tests still have 100% test coverage for their Python code.</p>",
  "<p>As noted in my review, I think the <code>bulk_</code> functions are good, but we should try really hard to just make the existing functions support bulk operations, instead of adding duplicates; duplicate implementations for this sort of thing always lead to bugs.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"19257\">@Alya Abbott</span> there's a product question here that's sufficiently in the implementation weeds that I think we can just talk about it here. When you move messages from one topic to another, we currently migrate the UserTopic rows (i.e. everyone's \"muted topics\" configuration for that stream, but of course the \"followed topics\" and \"unmuted topics\" features should work similarly) in some circumstances; I don't remember the precise algorithm, but for the purpose of this question, assume it's the obvious case where someone has moved the entire old topic to another topic.</p>\n<p>The question is how to handle the situation when the destination topic already has messages, and not only messages, but actually had UserTopic configuration. (For example, they'd explicitly unmuted a topic that is merged into an explicitly muted topic).</p>",
  "<p>We can't easily prompt the user before doing something, though I do think a possible portion of an answer could be to trigger a Zulip message from Notification bot, e.g. something to the effect of \"Topic X was merged into topic Y; you'd previously configured topic notifications for both topics, and we've resolved this by Z\".</p>",
  "<p>I think the general philosophy should be to err on the side of showing messages rather than hiding them; I believe we picked a fairly conservative approach for moving over topic mutedness for that reason.</p>",
  "<p>Yeah, that seems right.</p>",
  "<p>So I think we should merge by choosing the highest between the two topics being merged.</p>",
  "<p>I think probably not sending a special notification is fine for v1; we can consider such a notification if/when we get reports of actual confusion.</p>",
  "<p>Yeah, that's what I was thinking.</p>",
  "<p>(It wouldn't be a hard extension to trigger notifications when this happens; in practice it'll be quite rare, so I don't think anyone would be likely to be unhappy to get the notifications, so this is mostly about avoiding  doing a bunch of work implementing something that's probably not important)</p>",
  "<blockquote>\n<p>As noted in my review, I think the bulk_ functions are good, but we should try really hard to just make the existing functions support bulk operations, instead of adding duplicates; duplicate implementations for this sort of thing always lead to bugs.</p>\n</blockquote>\n<p>Sure, </p>\n<p>While thinking about this comment of <span class=\"user-mention silent\" data-user-id=\"16839\">Abhijeet Bodas</span> </p>\n<blockquote>\n<p>Not specific to this PR, but is there a specific reason to use the delete-and-update pattern in the message edit code (where in, old topic UserTopic rows are first deleted, and new topic UserTopic rows are then created)? Can we not just update the stream/topic field in a single query for these topics?</p>\n</blockquote>\n<p>I am thinking of another way of doing this:</p>\n<p>Here's some pseudocode to explain</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">user_topics</span> <span class=\"o\">=</span> <span class=\"n\">get_user_topics</span><span class=\"p\">(</span><span class=\"n\">stream_being_edited</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">orig_topic_name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">user_topics_to_remove</span><span class=\"p\">:</span> <span class=\"n\">QuerySet</span><span class=\"p\">[</span><span class=\"n\">UserTopic</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user_topics</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">user_profile_id__in</span> <span class=\"o\">=</span> <span class=\"n\">delete_event_notify_user_ids</span><span class=\"p\">)</span>\n        <span class=\"n\">user_topics_to_update</span><span class=\"p\">:</span> <span class=\"n\">QuerySet</span><span class=\"p\">[</span><span class=\"n\">UserTopic</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user_topics</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">user_topics_to_remove</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If the messages are being moved to a stream the user</span>\n        <span class=\"c1\"># cannot access, then we treat this as the</span>\n        <span class=\"c1\"># messages/topic being deleted for this user. This is</span>\n        <span class=\"c1\"># important for security reasons; we don't want to</span>\n        <span class=\"c1\"># give users a UserTopic row in a stream they cannot</span>\n        <span class=\"c1\"># access. Remove the user topic rows for such users.</span>\n        <span class=\"n\">bulk_do_set_user_topic_visibility_policy</span><span class=\"p\">(</span>\n            <span class=\"n\">user_topics_to_remove</span><span class=\"p\">,</span>\n            <span class=\"n\">stream_being_edited</span><span class=\"p\">,</span>\n            <span class=\"n\">orig_topic_name</span><span class=\"p\">,</span>\n            <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"s2\">\"remove\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># If the messages are being moved to a stream the user</span>\n        <span class=\"c1\"># can access. We move the user topic records for such</span>\n        <span class=\"c1\"># users.</span>\n        <span class=\"n\">bulk_do_set_user_topic_visibility_policy</span><span class=\"p\">(</span>\n            <span class=\"n\">user_topics_to_update</span><span class=\"p\">,</span>\n            <span class=\"n\">new_stream</span> <span class=\"k\">if</span> <span class=\"n\">new_stream</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">stream_being_edited</span><span class=\"p\">,</span>\n            <span class=\"n\">topic_name</span> <span class=\"k\">if</span> <span class=\"n\">topic_name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">orig_topic_name</span><span class=\"p\">,</span>\n            <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"s2\">\"update\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</code></pre></div>\n<p>Now in the bulk_ function, we can do</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"s2\">\"remove\"</span><span class=\"p\">:</span>\n    <span class=\"n\">user_topics</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span>\n\n<span class=\"n\">user_topics</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">stream_id</span><span class=\"o\">=</span><span class=\"n\">stream_id</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"o\">=</span><span class=\"n\">topic_name</span><span class=\"p\">,</span> <span class=\"n\">recipient_id</span><span class=\"o\">=</span><span class=\"n\">recipient_id</span><span class=\"p\">,</span> <span class=\"n\">last_updated</span><span class=\"o\">=</span><span class=\"n\">last_updated</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>and the send_event using a loop.</p>\n<p>thoughts?</p>",
  "<p>I don't think so; I imagine we'll try to do the whole operation inside a single database transaction, so it should be atomic; my guess is that just felt simple enough to implement.</p>",
  "<p>(please @-mention me again if more feedback is needed from my side)</p>",
  "<p>As mentioned:</p>\n<blockquote>\n<p>I think the general philosophy should be to err on the side of showing messages rather than hiding them; </p>\n</blockquote>\n<p>This is the current behavior:<br>\n(Read nvp as no visibility policy)</p>\n<table>\n<thead>\n<tr>\n<th>original topic</th>\n<th>target topic</th>\n<th>final behaviour</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nvp</td>\n<td>nvp</td>\n<td>nvp</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>nvp</td>\n<td>muted</td>\n</tr>\n<tr>\n<td>nvp</td>\n<td>muted</td>\n<td>muted</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>muted</td>\n</tr>\n<tr>\n<td>nvp</td>\n<td>unmuted</td>\n<td>unmuted</td>\n</tr>\n<tr>\n<td>unmuted</td>\n<td>nvp</td>\n<td>unmuted</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>unmuted</td>\n<td>muted</td>\n</tr>\n<tr>\n<td>unmuted</td>\n<td>muted</td>\n<td>unmuted</td>\n</tr>\n</tbody>\n</table>\n<p>I think, the following is incorrect behavior:</p>\n<table>\n<thead>\n<tr>\n<th>original topic</th>\n<th>target topic</th>\n<th>final behaviour</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unmuted</td>\n<td>nvp</td>\n<td>unmuted</td>\n</tr>\n<tr>\n<td>unmuted</td>\n<td>muted</td>\n<td>unmuted</td>\n</tr>\n</tbody>\n</table>\n<p>They should be nvp and muted respectively.</p>\n<p><span class=\"user-mention\" data-user-id=\"19257\">@Alya Abbott</span> please let me know if this behavior is expected.</p>",
  "<p>There is a <a href=\"https://github.com/zulip/zulip/issues/24686\">issue</a> created by alya for a new feature about sending a deactivation mail to the owners of the organization notifying them about data deletion date when organization is deactivated.<br>\nProblem is divided into two parts:- (priority wise)</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/zulip/zulip/issues/24677\">First</a> is, Giving an option to the human(who is deactivating the org) to schedule a data deletion of the organization. As present, there is no automated data deletion process.<br>\nThis issue is somehow is pretty long as there is a lot of work there about backend and frontend(making a UI for option to schedule).</p>\n</li>\n<li>\n<p><a href=\"https://github.com/zulip/zulip/issues/24685\">Second</a> is, Sending a deactivation mail to all the owners out there of the organization that their org is deactivated.<br>\nOnce both the features are implemented end to end, then there will be a small change in mail about data deletion, then boom above feature is implemented.<br>\n<span class=\"user-mention\" data-user-id=\"22629\">@Akarsh Jain</span> is working on the first issue.<br>\nI have worked on the second issue and made PR, but I think there is some changes required to the PR.<br>\nI am pinging here because that is there for a week now. Can someone please take a look at the PR and suggest some changes.<br>\n<a href=\"https://github.com/zulip/zulip/pull/24787\">PR</a></p>\n</li>\n</ol>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span>: <a href=\"https://github.com/zulip/github-actions-zulip/pull/99\">https://github.com/zulip/github-actions-zulip/pull/99</a> is ready for a re-review after another deps bump and after the successful regression test (Actions link in the comments here)</p>\n<p>I don't seem to have permission to publish to Marketplace as was requested in <a href=\"https://github.com/zulip/github-actions-zulip/issues/28\">https://github.com/zulip/github-actions-zulip/issues/28</a> (or at least, the banner doesn't show up when navigating to <code>action.yml</code> as described by GitHub's documentation), so it's not looking like I'll be tackling that alongside the above today. I'll still chime in on the thread real quick with a workaround.</p>",
  "<p>Huh, I don't see one on <a href=\"https://github.com/zulip/github-actions-zulip/blob/main/send-message/action.yml\">https://github.com/zulip/github-actions-zulip/blob/main/send-message/action.yml</a> either.</p>",
  "<p>I'm guessing we just need to push a tag?</p>",
  "<p>There's some chatter up-thread about subdirectories not playing nicely, which may be the concern, though honestly I'm not totally sure how it was ever published to begin with if that's the case.</p>",
  "<p>This page seems to strongly hint that GHA encourages a single action per repo model? <a href=\"https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions\">https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions</a></p>",
  "<p>In any event, I've left <a href=\"https://github.com/zulip/github-actions-zulip/issues/28#issuecomment-1487516293\">https://github.com/zulip/github-actions-zulip/issues/28#issuecomment-1487516293</a> to document a workaround for the time being, though this of course means folks would have to find this issue + comment after the Marketplace shortcuts fail them in the future (when node12 is removed from GHA)</p>",
  "<p><a href=\"https://docs.github.com/en/actions/creating-actions/publishing-actions-in-github-marketplace#about-publishing-actions\">https://docs.github.com/en/actions/creating-actions/publishing-actions-in-github-marketplace#about-publishing-actions</a> is pretty clear:</p>\n<blockquote>\n<p>When you plan to publish your action to GitHub Marketplace, you'll need to ensure that the repository only includes the metadata file, code, and files necessary for the action. Creating a single repository for the action allows you to tag, release, and package the code in a single unit. GitHub also uses the action's metadata on your GitHub Marketplace page.</p>\n<p>Actions are published to GitHub Marketplace immediately and aren't reviewed by GitHub as long as they meet these requirements:<br>\n- The action must be in a public repository.<br>\n- Each repository must contain a single action.<br>\n- The action's metadata file (action.yml or action.yaml) must be in the root directory of the repository.<br>\n[...]</p>\n</blockquote>",
  "<p>I assume those rules changed since this was originally published :\\</p>",
  "<p>Maybe?  That's just \"published to GitHub Marketplace immediately and aren't reviewed by GitHub\" so maybe it got manually approved?</p>\n<p>Previously:<br>\n<a href=\"#narrow/stream/127-integrations/topic/GitHub.20Actions/near/1248815\">https://chat.zulip.org/#narrow/stream/127-integrations/topic/GitHub.20Actions/near/1248815</a><br>\n<a href=\"https://github.com/orgs/community/discussions/5474\">https://github.com/orgs/community/discussions/5474</a></p>",
  "<p>Hm, I would imagine something like this:</p>\n<ol>\n<li>If original and target match, use that policy:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>original topic</th>\n<th>target topic</th>\n<th>final behaviour</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nvp</td>\n<td>nvp</td>\n<td>nvp</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>muted</td>\n</tr>\n<tr>\n<td>unmuted</td>\n<td>unmuted</td>\n<td>unmuted</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>Otherwise, use the higher-visibility policy, regardless of whether it's the target or the original. This only applies if there is some content in the target, so if the target is a brand new topic, you'd use the visibility for the original topic.</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>original topic</th>\n<th>target topic</th>\n<th>final behaviour</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>muted</td>\n<td>nvp</td>\n<td>nvp</td>\n</tr>\n<tr>\n<td>nvp</td>\n<td>muted</td>\n<td>nvp</td>\n</tr>\n<tr>\n<td>nvp</td>\n<td>unmuted</td>\n<td>unmuted</td>\n</tr>\n<tr>\n<td>unmuted</td>\n<td>nvp</td>\n<td>unmuted</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>unmuted</td>\n<td>unmuted</td>\n</tr>\n<tr>\n<td>unmuted</td>\n<td>muted</td>\n<td>unmuted</td>\n</tr>\n</tbody>\n</table>\n<p>Does that seem resonable?</p>",
  "<p>Yeah, that's what I was thinking.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"25085\">Josh Klar</span> <a href=\"#narrow/stream/3-backend/topic/github.20actions/near/1535663\">said</a>:</p>\n<blockquote>\n<p>This page seems to strongly hint that GHA encourages a single action per repo model? <a href=\"https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions\">https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions</a></p>\n</blockquote>\n<p>I think that's the simpler way to do things and thus what their documentation is going to focus on, but I'm pretty sure what we're doing is a fully supported model.</p>",
  "<p>Hi, i'm working on <a href=\"https://github.com/zulip/zulip/issues/20398\">https://github.com/zulip/zulip/issues/20398</a> and am looking into updating the tests but i'm running into a problem.<br>\nI am getting this stack trace:<br>\n<a href=\"/user_uploads/2/16/z8Rzaku5Iocpfbf9wWGwpKjX/image.png\">image.png</a> <br>\nFor the tests I updated the call to the api as follows<br>\n<a href=\"/user_uploads/2/1a/_Ze6TDDEwEN4qL9UVZpk-pD1/image.png\">image.png</a> <br>\nwhere send_notification is a parameter to the function.<br>\nIs there anywhere in the tests where I should define this part of the api call or am i not understanding this problem right?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/16/z8Rzaku5Iocpfbf9wWGwpKjX/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/16/z8Rzaku5Iocpfbf9wWGwpKjX/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/1a/_Ze6TDDEwEN4qL9UVZpk-pD1/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/1a/_Ze6TDDEwEN4qL9UVZpk-pD1/image.png\"></a></div>",
  "<p>And another question I had regarding these notifications. Are there any tests that check if the message is send that someone has accepted the invitation? I've been looking through the testing files but couldn't find it</p>",
  "<p>Currently, we have <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/streams.py#L494\">access_stream_for_unmute_topic_by_name</a> having the comment:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">Our</span> <span class=\"n\">policy</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">streams</span> <span class=\"n\">when</span> <span class=\"n\">you</span> <span class=\"n\">unmute</span> <span class=\"n\">a</span> <span class=\"n\">topic</span> <span class=\"ow\">is</span> <span class=\"n\">that</span> <span class=\"n\">you</span>\n    <span class=\"n\">don</span><span class=\"s1\">'t necessarily need to have an active subscription or even \"legal\"</span>\n    <span class=\"n\">access</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">stream</span><span class=\"o\">.</span>  <span class=\"n\">Instead</span><span class=\"p\">,</span> <span class=\"n\">we</span> <span class=\"n\">just</span> <span class=\"n\">verify</span> <span class=\"n\">the</span> <span class=\"n\">stream_id</span> <span class=\"n\">has</span> <span class=\"n\">been</span>\n    <span class=\"n\">muted</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">past</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">here</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">caller</span><span class=\"p\">)</span><span class=\"o\">.</span>\n</code></pre></div>\n<p>The function is <a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/user_topics.py#L53\">used</a> in zerver/views/user_topics.py to access a stream while unmuting (not muting).</p>\n<p>Whereas for muting; we are using <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/streams.py#L464\">access_stream_by_name</a> which includes the permission check for whether you can access stream or not.</p>\n<p>This is the <a href=\"https://github.com/zulip/zulip/commit/4ac6bc46c77714e2dd1a9208d682fa0eab7bda95#diff-608299d87d5c04368d5ad7599a9fa122dbcf2ab2da717e6d47ebc2c3b1201dc5R98\">commit where it was included</a> </p>\n<p>A little background around the commented decision would be helpful to decide whether it is still relevant?</p>",
  "<p>i think the doubt was resolved in <a class=\"stream-topic\" data-stream-id=\"49\" href=\"/#narrow/stream/49-development-help/topic/.E2.9C.94.20JSON.20serialization.20error.3F\">#development help &gt; \u2714 JSON serialization error?</a>  </p>\n<p>Also, please avoid posting the same messages in different streams. :)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> good question!</p>",
  "<p>I think the intent of that logic was that we should allow you to remove a topic visibility policy even if you're no longer subscribed to the stream containing the topic -- because we don't want you to be stuck with a thing you can't remove.</p>",
  "<p>I think we previously rejected the option of \"unsubscribing removes all your topic muting configuration\" because it feels annoying if you unsubscribe and then resubscribe; but possibly we should migrate to that option for a cleaner data model?</p>",
  "<p>I think the other defensible option would be to not allow removing visibility policy in a stream you're no longer subscribed to, and just have that state be more or less invisible instead.</p>",
  "<p>Thoughts?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"26241\">@Himanshu Suryawanshi</span> it looks like you've gotten some reviews, mostly about following the contributing guide.</p>",
  "<p>I was working on <a href=\"https://github.com/zulip/zulip/pull/24787\">#24787</a>, and there, I have to demonstrate the Zulip cloud version of email template. But, I have not found anything, how to do that. Can someone attach any documentation or give me direction on how to do that.?</p>",
  "<ol>\n<li>unsubscribing removes all your topic muting configuration</li>\n</ol>\n<p>I think it will lead to a cleaner data model but also (as mentioned) be annoying from a user perspective. I would not want to lose my topic configurations just because I wrongly clicked on Unsubscribe. I would at least like an alert popup (while unsubscribing) telling me the consequences.</p>\n<p>Since you can add a topic configuration only if you are subscribed to the stream, you shouldn't have any topic configuration for an unsubscribed stream.</p>",
  "<ol start=\"2\">\n<li>Do not allow removing visibility policy in a stream you're no longer subscribed to; have that state be more or less invisible instead.</li>\n</ol>\n<p>I think this will lead to the display aspect being governed by both the \"topic visibility_policy\" and \"whether you are subscribed/unsubscribed\". </p>\n<p>We would want to govern the display aspect using visibility_policy only, right?<br>\n(Not sure, but involving subscribed/unsubscribed might lead to a new cluster of edge cases?)</p>\n<p>Also, we would need to notify the user to subscribe first to remove the visibility_policy.</p>",
  "<p>This doc might help: <a href=\"https://zulip.readthedocs.io/en/latest/subsystems/email.html\">Zulip email system</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> How could I be able to open my development environment in Zulip cloud. If this is possible, then I could easily demonstrate the email of cloud version.</p>",
  "<p>I think, the approach should be:</p>\n<div class=\"codehilite\"><pre><span></span><code>{% if corporate_enabled %}\n    Text corresponding to Zulip cloud.\n{% else %}\n    Text corresponding to self-hosted\n{% endif %}\n</code></pre></div>",
  "<p>The value of <code>settings.CORPORATE_ENABLED</code> can be used to distinguish between self-hosted servers and Zulip Cloud organizations.</p>",
  "<p>ok wait, you have used a bit different approach which also seems good. I will review the PR once and then will try to help you in a better manner.</p>",
  "<p>Cool, added some review comments.</p>",
  "<blockquote>\n<p>Also, we would need to notify the user to subscribe first to remove the visibility_policy.</p>\n</blockquote>\n<p>I think the intent with \"have that state be more or less invisible instead.\" is that the user should never notice (in the UI) that he has some topic(s) which he set a <code>visibility_policy</code> in the past for in a stream he isn't subscribed to (now).</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Unmute.20Topics/near/1538906\">said</a>:</p>\n<blockquote>\n<p>I think we previously rejected the option of \"unsubscribing removes all your topic muting configuration\" because it feels annoying if you unsubscribe and then resubscribe; but possibly we should migrate to that option for a cleaner data model?</p>\n</blockquote>\n<p>That may not be intuitive. We allow starring messages in not-subscribed streams, then it probably makes sense to allow keeping <code>UserTopic</code>s in not-subscribed streams, for consistence?</p>",
  "<blockquote>\n<p>I think this will lead to the display aspect being governed by both the \"topic visibility_policy\" and \"whether you are subscribed/unsubscribed\". </p>\n</blockquote>\n<p>Yup!</p>\n<blockquote>\n<p>We would want to govern the display aspect using visibility_policy only, right?<br>\n(Not sure, but involving subscribed/unsubscribed might lead to a new cluster of edge cases?)</p>\n</blockquote>\n<p>I'm not sure which edge cases you are talking of, but this won't be much complexity. There would be probably be a <code>is_subscribed(stream_id)</code> style function which you can directly use here.</p>",
  "<p>When modifying a scheduled message, how should we handle the race to sending the scheduled message vs modifying it? Should just using <code>transaction.atomic</code> would be enough since it locks the row for us and changing <code>delivered=true</code> would fail if we are trying to send the message in parallel? </p>\n<p>There is a possibility of a scheduled message being sent between us locking the row and the user sending the patch request, which I am not sure how to handle. The best option is probably to just send an error message to the user, right? or, should we delete the scheduled message when the user clicks on edit button in the UI to avoid this behaviour altogether?</p>",
  "<p>Should I also be worried about any more races? I am not sure any other races are possible since we're using <code>lte</code> when deciding which messages to send.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">messages_to_deliver</span> <span class=\"o\">=</span> <span class=\"n\">ScheduledMessage</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n                        <span class=\"n\">scheduled_timestamp__lte</span><span class=\"o\">=</span><span class=\"n\">timezone_now</span><span class=\"p\">(),</span> <span class=\"n\">delivered</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n                    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select_for_update</span><span class=\"p\">()</span>\n</code></pre></div>",
  "<p>I think we just lost track of actually adding this to <a href=\"http://chat.zulip.org\">chat.zulip.org</a>; <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> can you rebase <a href=\"https://github.com/zulip/zulip/pull/16381\">https://github.com/zulip/zulip/pull/16381</a> just to make sure it's ready to try deploying again?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"5140\">@Aman (amanagr)</span> a transaction sounds correct, and I think if the scheduled message is sent during a request to modify its state, it should just return an error indicating it was already sent.</p>",
  "<p>I think this may be a somewhat involved decision; I'm not sure what the right answer is. But I think as a first step here, we can probably just preserve the existing logic (only in the case where what's requested is <code>INHERIT</code>) and come to back to this possibly after integrating the new API endpoint -- I don't think what we decide here will have any impact on the API endpoint really -- it's just whether some background task will be responsible for ensuring you never have a visibility policy in a stream that you're no longer subscribed to, or not.</p>",
  "<p>I think we have enough chained things (including UI work for both web and mobile!) that can't really be started until we've gotten the main \"unmute topic\" API endpoint being implemented that we should probably try to get that into a mergeable checkpoint soon.</p>",
  "<p>Yup, rebased</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> <a href=\"#narrow/stream/3-backend/topic/Scheduled.20message.20races/near/1539789\">said</a>:</p>\n<blockquote>\n<p>Should just using <code>transaction.atomic</code> would be enough since it locks the row for us and changing <code>delivered=true</code> would fail if we are trying to send the message in parallel? </p>\n</blockquote>\n<p>Locking the rows won't cause \"changing <code>delivered=true</code> [to] fail\" -- the lock just means that the changes are serialized.</p>\n<blockquote>\n<p>There is a possibility of a scheduled message being sent between us locking the row and the user sending the patch request</p>\n</blockquote>\n<p>I'm a little confused by this.  We shouldn't be (and can't, really) hold a lock across HTTP requests -- so the edit button can't take a row-level lock.  When we get the PATCH request, we should take a lock, check that <code>delivered=False</code>, and if that fails tell the user that the message was already sent.  Since sending it should also take a lock, we know that if <code>delivered=False</code> that the mesasge truly hasn't been sent yet and we can modify it as we wish.</p>\n<p>We should, probably as a follow-up, do something to the edit UI if the frontend gets an event via longpoll which says that the message was sent.  But I think that it makes sense that the scheduled send time takes precedence even if the edit box is open -- I don't think we want something to appear to fail to send if someone accidentally left the edit box open.  I think it's more understandable that it \"timed out\" and sent as the user originally asked.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/UserPresence.20system.20rewrite/near/1510828\">said</a>:</p>\n<blockquote>\n<p>I have a couple pending notes on <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a>, and wanted do to a quick stress test on it (ref <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/populate_db.20users.20performance\">#backend &gt; populate_db users performance</a>) as well.  Let me submit the former and bump the latter back to the top of my stack.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> do you want to do the <a href=\"http://chat.zulip.org\">chat.zulip.org</a> deployment of this? I seem to recall you had some <code>EXPLAIN ANALYZE</code> plans for this, and I also wasn't sure whether these pending comments are resolved.</p>",
  "<p>Yeah, I think those are all addressed.  I can do a test deploy of it again.</p>",
  "<p>Oh hmm, <a href=\"https://github.com/zulip/zulip/pull/16381/commits/135d46f2c78c1679bb46ccbab0f58df295073ca1#r1101923300\">https://github.com/zulip/zulip/pull/16381/commits/135d46f2c78c1679bb46ccbab0f58df295073ca1#r1101923300</a> seems not to have been resolved; it's still <code>settings.OFFLINE_THRESHOLD_SECS - 10</code>; is that expected <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span>?</p>",
  "<p>Yeah, that sounds right to me, thanks for writing it out.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> Yeah, I think I hadn't seen that comment - tweaked that constant now and tried to add a comment to explain the arithmetic a bit (<a href=\"https://github.com/zulip/zulip/pull/16381#discussion_r1156369165\">https://github.com/zulip/zulip/pull/16381#discussion_r1156369165</a>)</p>",
  "<p>Did we resolve <a href=\"https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r716084830\">https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r716084830</a> ?</p>",
  "<p><a href=\"https://docs.djangoproject.com/en/4.2/releases/4.2/\">https://docs.djangoproject.com/en/4.2/releases/4.2/</a></p>",
  "<p>Since this is an LTS release and 4.1 isn't, we probably should try to take the upgrade for Zulip 7.0. Looking at their release notes, the main thing that sounds like we'll have to manage is dropping postgres 11 support.</p>",
  "<p><code>django_cte</code> and our <code>queries_captured</code> context manager seem broken in Django 4.2. Will investigate.</p>",
  "<p>A few notes from the changelog:</p>\n<blockquote>\n<p>Django now supports psycopg version 3.1.8 or higher. To update your code, install the psycopg library, you don\u2019t need to change the ENGINE as django.db.backends.postgresql supports both libraries.</p>\n</blockquote>\n<p>This may or may not be related to the context manager being broken.</p>\n<blockquote>\n<p>The default iteration count for the PBKDF2 password hasher is increased from 390,000 to 600,000.</p>\n</blockquote>\n<p>I can't remember if we have our own value here, but we should look at bumping it if so.</p>\n<blockquote>\n<p>CharField.max_length is no longer required to be set on PostgreSQL, which supports unlimited VARCHAR columns.</p>\n</blockquote>\n<p>I'm not sure if this is useful for us, but figured I'd flag it since I think we've been using <code>TextField</code> for variable length strings.</p>\n<blockquote>\n<p>index_together option is deprecated in favor of indexes</p>\n</blockquote>\n<p>We're using that, so we should do the little sweep that this requires.</p>\n<blockquote>\n<p>django.contrib.postgres.fields.CITextField is deprecated in favor of TextField(db_collation=\"\u2026\") with a case-insensitive non-deterministic collation.</p>\n</blockquote>\n<p>We weren't using this, which I suppose is a good thing, but at some point we can look at using <code>db_collation</code> for case-insensitive fields like stream and topic names. I don't think it's urgent.</p>",
  "<p>Hmm, I don't think so.</p>",
  "<p>We\u2019re not using psycopg 3\u2014we have to get to SQLAlchemy 2 first.</p>",
  "<p>I note that the dostring here at least suggests it may not be correct to use the same rule?</p>\n<div class=\"codehilite\"><pre><span></span><code>def format_legacy_presence_dict(presence: UserPresence) -&gt; Dict[str, Any]:\n    &quot;&quot;&quot;\n    This function assumes it&#39;s being called right after the presence object was updated,\n    and is not meant to be used on old presence data.\n    &quot;&quot;&quot;\n    if (\n        presence.last_active_time\n        + datetime.timedelta(seconds=settings.PRESENCE_LEGACY_EVENT_OFFSET_FOR_ACTIVITY_SECONDS)\n        &gt;= presence.last_connected_time\n    ):\n        status = UserPresence.LEGACY_STATUS_ACTIVE\n        timestamp = datetime_to_timestamp(presence.last_active_time)\n    else:\n        status = UserPresence.LEGACY_STATUS_IDLE\n        timestamp = datetime_to_timestamp(presence.last_connected_time)\n\n    return dict(client=&quot;website&quot;, status=status, timestamp=timestamp, pushable=False)\n</code></pre></div>",
  "<p>We\u2019re using <code>Argon2PasswordHasher</code> with <code>PBKDF2PasswordHasher</code> only listed for compatibility; we don\u2019t customize the iteration count.</p>",
  "<p>While thinking about that question, I ended up with the digression of wondering if we need to allow these fields to be <code>None</code> in the database: <a href=\"https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r1156593651\">https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r1156593651</a></p>\n<p>I think we need that state for users created via the API who have never logged in.</p>",
  "<p>Posted <a href=\"https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r1156600949\">https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r1156600949</a> on one of the other details we need to resolve.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/UserPresence.20system.20rewrite/near/1540386\">said</a>:</p>\n<blockquote>\n<p>Did we resolve <a href=\"https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r716084830\">https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r716084830</a> ?</p>\n</blockquote>\n<p>OK and I posted <a href=\"https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r1156607288\">https://github.com/zulip/zulip/pull/16381/files/92d99648b1f13997e36e696760c11c5830d3582c#r1156607288</a> with what I think is an accurate examination of that issue as well.</p>",
  "<p>Thanks for flagging that!</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/Django.204.2E2.20released/near/1540631\">said</a>:</p>\n<blockquote>\n<p>We\u2019re not using psycopg 3\u2014we have to get to SQLAlchemy 2 first.</p>\n</blockquote>\n<p>Ahh, right, it's not forcing us to upgrade, it's just now possible to upgrade.</p>",
  "<p>Update: </p>\n<ul>\n<li><a href=\"https://github.com/zulip/zulip/pull/24943\">#24943</a> is merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><blockquote>\n<p>API endpoint for the \"UNMUTE topic\" feature is now implemented.</p>\n</blockquote>\n</li>\n</ul>",
  "<p>Follow-ups: (these are not blockers)</p>\n<ul>\n<li>Verify if events are sent properly, end-to-end, in <code>MutedTopicsTestsDeprecated</code>. <a href=\"https://github.com/zulip/zulip/pull/24943#discussion_r1155491534\">(comment)</a></li>\n<li>How to merge UserTopic states <a href=\"https://github.com/zulip/zulip/pull/24742#discussion_r1149849166\">(comment)</a></li>\n<li>Add an enum class to the <strong>python-zulip-api</strong> API bindings project. <a href=\"https://github.com/zulip/zulip/pull/24943#discussion_r1156555321\">(comment)</a></li>\n<li>Use <code>tornado_redirected_to_list</code> pattern in <code>test_message_edit</code>. <a href=\"https://github.com/zulip/zulip/pull/24943#discussion_r1155491534\">(comment)</a></li>\n<li><a href=\"#narrow/stream/3-backend/topic/Unmute.20Topics/near/1539950\">Discussion</a></li>\n</ul>",
  "<p>It was <a href=\"https://github.com/zulip/zulip/pull/24943#discussion_r1155147008\">proposed</a> by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> to rename <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/test_classes.py#L1695\"><code>tornado_redirected_to_list</code></a> to <code>capture_send_event_calls</code>.</p>\n<p>Thoughts?</p>",
  "<p>I might quibble that it should be <code>captured_send_event_calls</code> (with a <code>d</code>) since it should ideally sound natural when used as a contextmanager:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">with</span> <span class=\"n\">captured_send_event_calls</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">,</span> <span class=\"n\">expected_num_events</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">})</span>\n</code></pre></div>\n<p>Though it's a little odd that the contextmanager doesn't return the list -- this seems like it'd be more pythonic:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">captured_send_event_calls</span><span class=\"p\">(</span><span class=\"n\">expected_events</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">events</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">})</span>\n</code></pre></div>",
  "<p>While trying to set up a remote development environment with the application server running behind an SSL-certified domain according to the instructions at <a href=\"https://zulip.readthedocs.io/en/latest/development/remote.html#using-an-nginx-reverse-proxy\">https://zulip.readthedocs.io/en/latest/development/remote.html#using-an-nginx-reverse-proxy</a>, I encountered an issue in which any backend/JSON requests were returning a 403/CSRF error.</p>\n<p>Since Django 4.0 it seems that if running the server behind a reverse-proxy such as Nginx, then we require the CSRF_TRUSTED_ORIGINS setting containing the exact value for scheme + hostname.</p>\n<p>I've created a PR to address this issue here: <a href=\"https://github.com/zulip/zulip/pull/24730\">https://github.com/zulip/zulip/pull/24730</a></p>",
  "<p>In production deployments, we handle this by configuring the proxy to forward the <code>Host</code> header unchanged from its incoming request (e.g. <a href=\"https://zulip.readthedocs.io/en/latest/production/deployment.html#nginx-configuration\">for <code>nginx</code></a>).  That seems like it might be a simpler fix here?</p>",
  "<p>I think also we should start working on basic web UI to create these, so that one can play around with the feature and find work on other aspects of it without having to use the management shell or API to make one.</p>",
  "<p>And perhaps we should also start a discussion, say in <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/unmuting.20in.20muted.20streams\">#design &gt; unmuting in muted streams</a>, on what we want to do with the \"muted topics\" settings UI, if we've not done that already.</p>",
  "<p>With the <code>as events</code> syntax, does is <code>events</code> accessible outside the <code>with</code> block? I think that'd be my main concern with that syntax.</p>\n<p>(I'm pretty sure it isn't, because when you do <code>with open() as f</code> to open a file, the file gets closed at the end of the context manager).</p>",
  "<p>Does using a config more like prod remove the need for the <code>CSRF_TRUSTED_ORIGINS</code> change?</p>\n<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git tools/droplets/zulipdev tools/droplets/zulipdev</span>\n<span class=\"gh\">index 0c37e0e80f..59b49a0091 100644</span>\n<span class=\"gd\">--- tools/droplets/zulipdev</span>\n<span class=\"gi\">+++ tools/droplets/zulipdev</span>\n<span class=\"gu\">@@ -12,16 +12,12 @@ server {</span>\n<span class=\"w\"> </span>    ssl_certificate_key /etc/ssl/private/zulip.key;\n\n<span class=\"w\"> </span>    location / {\n<span class=\"gd\">-        proxy_set_header Connection \"\";</span>\n<span class=\"gd\">-        proxy_set_header Host $host;</span>\n<span class=\"gd\">-        proxy_set_header X-Real-IP $remote_addr;</span>\n<span class=\"gd\">-        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span>\n<span class=\"gd\">-        proxy_set_header X-Forwarded-Proto $scheme;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        proxy_pass          http://127.0.0.1:9991;</span>\n<span class=\"gd\">-        proxy_read_timeout  1200;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        proxy_redirect off;</span>\n<span class=\"gd\">-        proxy_next_upstream off;</span>\n<span class=\"gi\">+        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span>\n<span class=\"gi\">+        proxy_set_header   X-Forwarded-Proto $scheme;</span>\n<span class=\"gi\">+        proxy_set_header   Host $http_host;</span>\n<span class=\"gi\">+        proxy_http_version 1.1;</span>\n<span class=\"gi\">+        proxy_buffering    off;</span>\n<span class=\"gi\">+        proxy_read_timeout 20m;</span>\n<span class=\"gi\">+        proxy_pass         http://127.0.0.1:9991;</span>\n<span class=\"w\"> </span>    }\n<span class=\"w\"> </span>}\n</code></pre></div>",
  "<p>I think adding a trailing <code>d</code> in the context manager doesn't seem to fit Python conventions; here's a bunch of examples of existing <code>with</code> blocks we have for third-party context manager names:</p>\n<ul>\n<li><code>with open(fixture_file) as f:</code></li>\n<li><code>with self.settings(FREE_TRIAL_DAYS=60):</code></li>\n<li><code>with transaction.atomic():</code></li>\n</ul>",
  "<p>Yup, <code>with</code> variables are accessible outside of their blocks.</p>",
  "<p>The file gets closed but is still accessible as a variable.</p>",
  "<p>Ahh OK, that makes sense.</p>",
  "<p>Yeah then I propose the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>with capture_send_event_calls(expected_events=5) as events:\n     do_something()\n     ...\nself.assertEqual(events[0], {...})\n</code></pre></div>",
  "<p>Or we could consider something like <code>capture_send_event</code> or perhaps something that hints you get a list, but I kinda feel like the variable name <code>events</code> mostly does that for you?</p>",
  "<p>I feel like that's clear enough.  The type signature will also help.</p>",
  "<p>Also, please take a look at the recent messages in <a class=\"stream-topic\" data-stream-id=\"6\" href=\"/#narrow/stream/6-frontend/topic/Unmute.20Topic.20UI.20.2324244.20.26.20.2324243\">#frontend &gt; Unmute Topic UI #24244 &amp; #24243</a></p>",
  "<p>Given the question of possibly using <code>None</code>, should I hold off on test-deploying it here?  It might make the migrations more complicated of we decide to change those columns to be nullable and we've deployed a non-nullable version.</p>",
  "<p>tried updating the Nginx config as you suggested but would still get the same error (reloaded the nginx config and everything).</p>\n<p>Note that an alternative option to get past the error, instead of setting <code>CSRF_TRUSTED_ORIGINS</code> in <code>dev_settings.py</code>, would be to set:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">SECURE_PROXY_SSL_HEADER</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"HTTP_X_FORWARDED_PROTO\"</span><span class=\"p\">,</span> <span class=\"s2\">\"https\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Yeah I think so.</p>",
  "<p>Ah fair enough, I was thinking that it might be better to deploy the current state and add nullability of those columns as an iteration on this that adds a bit more complexity - but not making a mess with migrations is a good reason to hold off indeed I think</p>",
  "<p>I think our goal here is to be able to just deploy this to <a href=\"http://chat.zulip.org\">chat.zulip.org</a> and then if it seems not broken merge it to <code>main</code>; it's not something we want to have to back out and adjust further.</p>",
  "<p>Here's the PR: <a href=\"https://github.com/zulip/zulip/pull/24998\">#24998</a></p>",
  "<p>I would like to re-confirm if using <code>expected_events</code> replacing <code>expected_num_events</code>is intentional or a typo.</p>\n<p>To me, <code>expected_num_events</code> sounds better as it represents the <strong>number of events</strong> and <strong>not the expected events</strong></p>",
  "<p>I think the type makes clear that it's a count, but I don't care strongly about it.</p>",
  "<p>The type makes it clear, but you want it to be clear what it does when reading code that calls it without having checked the definition, so I think having \"num\" in the name is helpful.</p>",
  "<p>Or maybe <code>expected_count</code> would be better?</p>",
  "<p>Might not be a strong reason; but on reading</p>\n<blockquote>\n<p>with capture_send_event_calls(expected_count=5) as events: </p>\n</blockquote>\n<p>the question which pops up in my mind is: <strong>expected count of what?</strong></p>\n<p><strong>expected_num_events</strong> or <strong>expected_events_count</strong> answers that.</p>\n<p>but still, <strong>expected_count</strong> also looks good to me.</p>",
  "<p><code>expected_num_events</code> seems really clear, happy to go with that.</p>",
  "<p>The main thing that comes to mind when fiddling with this <code>None</code> change is <br>\nhow should the support for <code>None</code> presence timestamps be handled in the current API? Since<br>\nwe have two types of building presence info dicts (legacy vs slim) for our API responses:</p>\n<div class=\"codehilite\"><pre><span></span><code>    if slim_presence:\n        # Stringify user_id here, since it&#39;s gonna be turned\n        # into a string anyway by JSON, and it keeps mypy happy.\n        get_user_key = lambda row: str(row[&quot;user_profile_id&quot;])\n        get_user_presence_info = get_modern_user_presence_info\n    else:\n        get_user_key = lambda row: row[&quot;user_profile__email&quot;]\n        get_user_presence_info = get_legacy_user_presence_info\n</code></pre></div>\n<p>Both of these send a timestamp - what should this be if the actual <code>UserPresence</code> object,<br>\ndue to the new design has <code>None</code> values? Should we just set these to an ancient timestamp like<br>\n\"1 year ago\" for backwards compatibility? And what should be our transition plan to support <code>None</code>s<br>\nin API responses?</p>",
  "<p>Are we going to have to end up with a third type of presence info dicts that can be returned for clients, that supports some kind of <code>\"never\"</code> values?</p>",
  "<p>Pushed an update to <a href=\"https://github.com/zulip/zulip/pull/22949\">#22949</a> which should not result in a supervisor restart for most installs.</p>",
  "<p>Oh cool, thanks for cleaning that up!</p>",
  "<p>I think we can use <code>UserProfile.date_joined</code> for the legacy API in this case; hopefully that doesn't take too much extra database work?</p>",
  "<p>Opened <a href=\"https://code.djangoproject.com/ticket/34466\">https://code.djangoproject.com/ticket/34466</a> and <a href=\"https://github.com/django/django/pull/16736\">https://github.com/django/django/pull/16736</a> for the root cause of the <code>queries_captured</code> breakage.</p>",
  "<p>Awesome!</p>",
  "<p>Opened <a href=\"https://github.com/dimagi/django-cte/issues/66\">https://github.com/dimagi/django-cte/issues/66</a> for the django-cte problem.</p>",
  "<p>Attempting workarounds: <a href=\"https://github.com/zulip/zulip/pull/25019\">#25019</a>.</p>",
  "<p>How valuable is the logging from our <code>TimeTrackingCursor</code> hack? Could it be replaced with some more standard tool like <a href=\"https://www.postgresql.org/docs/current/pgstatstatements.html\"><code>pg_stat_statements</code></a>?</p>",
  "<p><code>TimeTrackingCursor</code> is useful in that it's a per-request summary so it can give information in the logfiles.  It looks like <code>pg_stat_statements</code> doesn't have a way to limit to queries within the boundaries of the specific request?</p>",
  "<p>Yeah it\u2019s more a question about whether we actually use that information.</p>",
  "<p>I absolutely have.</p>",
  "<p>Yeah I consider that information super useful as well.</p>",
  "<p>Merged! Thanks <span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> for doing this cleanup.</p>\n<p>I was reflecting a bit on the fact that we named this test helper function about 10 years ago, in <a href=\"https://github.com/zulip/zulip/commit/b02770440ac8d9082730c7a0557269a9d8fab837\">b02770440ac8d9082730c7a0557269a9d8fab837</a>, and despite it being useful enough that we're using it in over 100 places, somehow it's taken this long for me to notice that its name and interface should be improved. Not that it was terrible, and certainly at the time we named it, we were always just talking about \"tornado\" to refer to the real-time sync system, since we were just getting it working well. But the fact that names are so sticky is part of what motivates me to make so many review suggestions about what to call things -- if you're not watchful about these things, the codebase just slowly gets harder and harder to read.</p>\n<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> FYI as I thought you might enjoy this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> and <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>  I definitely enjoyed this change!  When I looked at the particular case of fixing <code>test_example.py</code> I wondered whether we should also change the name of the test.  I think there are arguments in both directions.  The test is still named <code>test_tornado_redirects</code> if I am reading the diff correctly.  It can be helpful at times to still concretely talk about Tornado as the underlying mechanism, but I think I would lean in this particular case to a more abstract name.</p>",
  "<p>Yeah, I think now that <code>send_event</code> is one of our important, documented interfaces that we call in 50+ places, that's the right word to use when referring to it, but certainly back in 2013 we might not have known how things were going to settle.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/UserPresence.20system.20rewrite/near/1542504\">said</a>:</p>\n<blockquote>\n<p>I think we can use <code>UserProfile.date_joined</code> for the legacy API in this case; hopefully that doesn't take too much extra database work?</p>\n</blockquote>\n<p>Yeah, I pushed an attempt to implement this reasonably to the PR. No extra database work was needed, because we were already JOINing with UserProfile to fetch some values in those queries</p>",
  "<p>And posted a comment with a couple of unrelated notes I bumped into in <a href=\"https://github.com/zulip/zulip/pull/16381#issuecomment-1500966936\">https://github.com/zulip/zulip/pull/16381#issuecomment-1500966936</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> cool, replied to all the questions there.</p>",
  "<p>This looks good to me at a skim.  Assuming <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> doesn't see anything objectionable, I'll plan to test-deploy that here tomorrow.</p>",
  "<p>Yeah it lgtm aside from one minor detail about an <code>assert</code> statement that shouldn't affect test-deployment.</p>",
  "<p>so Zulip is using SQLA2?</p>",
  "<p>We only use SQLAlchemy in one portion of the codebase, and we're still on SQLAlchemy 1.x.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/404s.20for.20deleted.20files.20.2323739/near/1520743\">said</a>:</p>\n<blockquote>\n<p>Oh, part of the confusion is probably the thumbnail endpoint -- which is only turned on in development, since it doesn't do anything anymore.  Which is why your code looks to work right now.</p>\n<p>If you set <code>THUMBNAIL_IMAGES = False</code> in <code>zproject/dev_settings.py</code> and upload a new image, delete it, and reload the page, you'll see a broken image link.</p>\n</blockquote>\n<p>Hmm, is there any reason for why <code>THUMBNAIL_IMAGES</code> is set to true in the dev env? If there isn't and it doesn't match how the prod deploys work, shouldn't we push a commit to quickly fix this?</p>",
  "<p>It was previously set to True so folks could test the shiny new thumbnail functionality.</p>\n<p>When that functionality failed to be stable enough to remain in the codebase, it was left enabled accidentally.</p>\n<p>I'd totally merge a PR that fixed that.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/25173\">#25173</a> for that.</p>",
  "<p>I just want to refer the feedback on <a href=\"https://github.com/zulip/zulip/pull/25173\">#25173</a> back to here:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">THUMBNAIL_IMAGES</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</code></pre></div>\n<blockquote>\n<p>We should potentially just drop this line entirely, since it's the default?</p>\n</blockquote>\n<p>If we drop that line entirely in <code>zproject/dev_settings.py</code>, should we do the same to <code>zproject/default_settings.py</code>?</p>",
  "<p>The reason you can drop it from <code>dev_settings</code> is <em>because</em> it\u2019s in <code>default_settings</code>. You can\u2019t drop it from both.</p>",
  "<p>Ahh, right that makes sense.</p>",
  "<p>Alright, I've updated <a href=\"https://github.com/zulip/zulip/pull/25173\">#25173</a>, to remove THUMBNAIL_IMAGES from <code>dev_settings</code> and <code>test_extra_settings</code>. I've also added a note in the PR description on how I resolved the coverage issue. I'm not sure if that's the correct approach but I'm open to feedbacks on fixing it.</p>",
  "<p>I think we don't need these settings overrides anymore, either:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rg<span class=\"w\"> </span>THUMBNAIL_IMAGES<span class=\"w\"> </span>zerver/tests/\n<span class=\"go\">zerver/tests/test_markdown.py</span>\n<span class=\"go\">596:        with self.settings(THUMBNAIL_IMAGES=False):</span>\n<span class=\"go\">634:    @override_settings(THUMBNAIL_IMAGES=False, EXTERNAL_URI_SCHEME=\"https://\")</span>\n<span class=\"go\">642:    @override_settings(THUMBNAIL_IMAGES=False, EXTERNAL_URI_SCHEME=\"https://\")</span>\n<span class=\"go\">650:    @override_settings(THUMBNAIL_IMAGES=False, EXTERNAL_URI_SCHEME=\"https://\")</span>\n<span class=\"go\">656:    @override_settings(THUMBNAIL_IMAGES=False, EXTERNAL_URI_SCHEME=\"https://\")</span>\n</code></pre></div>",
  "<p>I would argue that it might be worth leaving those if we think those tests are intended to be the \"test with this specific value\" tests and we might enable the setting in the future, but I haven't looked at those specific tests and it'll be easy to change what we like later if needed.</p>",
  "<p>Should we stop sending plain-text variants of our outgoing emails? Or alternatively, should we convert to them being automatically generated from the HTML version, rather than being a parallel thing?</p>",
  "<p>OK, I'm prepping to deploy this here on CZO.  While deploying it \"straight\" would work, I'd like to test the deployment plan in the first commit:</p>\n<blockquote>\n<p>The way to deploy is to start the backfill migration with the server<br>\ndown and then start the server <em>without</em> the user_presence queue worker,<br>\nto let the migration finish without having new data interfering with it.<br>\nOnce the migration is done, the queue worker can be started, leading to<br>\nthe presence data catching up to the current state as the queue worker<br>\ngoes over the queued up events and updating the UserPresence table.</p>\n</blockquote>\n<p>I believe this we can do this by:</p>\n<ol>\n<li><code>upgrade-server-from-git [...] --skip-restart</code> which will abort due to the migrations.</li>\n<li><code>cd ~zulip/deployments/next</code> and adjust <code>scripts/start-server</code> to skip the <code>user_presence</code> worker</li>\n<li>Then:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>./manage.py fill_memcached_caches --skip-checks\n./scripts/stop-server --skip-checks\n./manage.py migrate zerver 0443 --skip-checks\n./scripts/start-server --skip-checks\n./manage.py migrate zerver 0444 --skip-checks\nsupervisorctl start zulip-workers:zulip_events_user_presence\n</code></pre></div>\n<p>This should leave the old table in place (since it doesn't run 0445, which is the drop), the user_presence worker only started after the backfill is done (0444), and django started ASAP after the schema is in place (0443).</p>\n<p><span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> / <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>: Any thoughts on those steps?</p>",
  "<p>That process looks roughly correct. I think ideally we'd do a version of <code>stop-server</code> that doesn't shut down Tornado though; I'm not sure whether we have an option to do that though.</p>",
  "<p>But that would substantially reduce the visible downtime experience.</p>",
  "<p>I guess also would this be a restart? The <code>start-server</code> will have already started the worker: </p>\n<p><code>supervisorctl start zulip-workers:zulip_events_user_presence</code></p>\n<p>Maybe that's a bad thing though -- we might actually want to just prevent that worker from starting before the 0444 migration is complete.</p>",
  "<p>At least that migration doesn't look like it's written to deal with one being there:</p>\n<div class=\"codehilite\"><pre><span></span><code>+    UserPresence.objects.bulk_create(\n+        [\n+            UserPresence(\n+                user_profile_id=presence_row[1],\n+                realm_id=presence_row[0],\n+                last_connected_time=presence_row[2],\n+                last_active_time=presence_row[2],\n+            )\n+            for presence_row in latest_presence_per_user\n+        ],\n+        # Limit the size of individual network requests for very large\n+        # servers.\n+        batch_size=10000,\n+    )\n</code></pre></div>",
  "<p>I expect that migration to run in only a few seconds regardless, but we cannot be certain that 0 rows will get written in the meantime, because Django calls <code>do_update_user_presence</code> directly when a user's <code>presence_enabled</code> setting.</p>",
  "<p>Do we need an <code>ON CONFLICT IGNORE</code> or something in that migration?</p>",
  "<p>I think adding <code>ignore_conflicts=True</code> is all we'd need, under the theory that if we raced with an active client the latter data will always be more current?</p>",
  "<p>I guess <code>update_conflicts</code> would be the other option. <a href=\"https://docs.djangoproject.com/en/4.2/ref/models/querysets/#bulk-create\">https://docs.djangoproject.com/en/4.2/ref/models/querysets/#bulk-create</a> for reference.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/UserPresence.20system.20rewrite/near/1554377\">said</a>:</p>\n<blockquote>\n<p>I guess also would this be a restart? The <code>start-server</code> will have already started the worker: </p>\n<p><code>supervisorctl start zulip-workers:zulip_events_user_presence</code></p>\n</blockquote>\n<p>No -- see step (2) in my list:</p>\n<blockquote>\n<ol start=\"2\">\n<li><code>cd ~zulip/deployments/next</code> and adjust <code>scripts/start-server</code> to skip the <code>user_presence</code> worker</li>\n</ol>\n</blockquote>",
  "<p>Because yes, it is important that the worker not be started until after 0444.</p>",
  "<p>We don't have a \"start all but\" flag to start-server, but we could add one.  I was just going to:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/scripts/restart-server b/scripts/restart-server</span>\n<span class=\"gh\">index e10f49d1b2..db52071c14 100755</span>\n<span class=\"gd\">--- a/scripts/restart-server</span>\n<span class=\"gi\">+++ b/scripts/restart-server</span>\n<span class=\"gu\">@@ -69,14 +69,8 @@ if has_application_server():</span>\n<span class=\"w\"> </span>    # all-at-once, minimizes the downtime of each, and reduces startup\n<span class=\"w\"> </span>    # contention.\n<span class=\"w\"> </span>    #\n<span class=\"gd\">-    # For \"start\" or less-graceful circumstances, we don't need to</span>\n<span class=\"gd\">-    # iterate; we'll stop all of them at once, and start them all later.</span>\n<span class=\"gd\">-    # In those cases, using the glob form is faster -- but if we do need</span>\n<span class=\"gd\">-    # to iterate, we need to expand the glob.</span>\n<span class=\"gd\">-    if action == \"start\" or args.less_graceful:</span>\n<span class=\"gd\">-        workers.append(\"zulip-workers:*\")</span>\n<span class=\"gd\">-    else:</span>\n<span class=\"gd\">-        workers.extend(list_supervisor_processes([\"zulip-workers:*\"]))</span>\n<span class=\"gi\">+    # Temporary hack: skip the user-presence worker</span>\n<span class=\"gi\">+    workers.extend([w for w in list_supervisor_processes([\"zulip-workers:*\"]) if w != \"zulip-workers:zulip_events_user_presence\"])</span>\n\n<span class=\"w\"> </span>    if has_application_server(once=True):\n<span class=\"w\"> </span>        # These used to be included in \"zulip-workers:*\"; since we may\n</code></pre></div>",
  "<p>Oops, sorry I somehow forgot about (2). That sounds reasonable to me aside from possibly adjusting the migration related to the <code>ignore_conflicts</code> detail.</p>",
  "<p>I think it's very unlikely that <code>ignore_conflicts</code> detail will actually come up in the <a href=\"http://chat.zulip.org\">chat.zulip.org</a> deployment, so probably not a blocker for deploying, now that I think about it.</p>",
  "<p>(I imagine it's a setting toggle that probably happens &lt; 10x/week on average on this server that would need to happen within a &lt;10 second window)</p>",
  "<p>So I still have some work to do before pushing to <a href=\"https://github.com/zulip/zulip/pull/18899\">#18899</a> but I'm pretty sure the <code>__iter__</code> thing is because of a bit of accidentally quadratic code that tries to diff the list of subscribers for the old stream with those for the new stream in a way that really should use a <code>Set</code>. It'll be fixed in my revision to <a href=\"https://github.com/zulip/zulip/pull/18899\">#18899</a>, as well as a few other things that impact performance.</p>",
  "<p>Yeah, that makes sense.</p>\n<p>OK, I'm going to forge ahead with this shortly.</p>",
  "<p>Gah, I apparently broke git upgrades in <code>main</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>root@chat-production:/home/zulip/deployments/current# /home/zulip/deployments/current/scripts/upgrade-zulip-from-git chat.zulip.org\nTraceback (most recent call last):\n  File &quot;/home/zulip/deployments/current/scripts/lib/upgrade-zulip-from-git&quot;, line 136, in &lt;module&gt;\n    subprocess.check_call([&quot;./scripts/lib/update-git-upstream&quot;], preexec_fn=su_to_zulip)\n  File &quot;/usr/lib/python3.8/subprocess.py&quot;, line 359, in check_call\n    retcode = call(*popenargs, **kwargs)\n  File &quot;/usr/lib/python3.8/subprocess.py&quot;, line 340, in call\n    with Popen(*popenargs, **kwargs) as p:\n  File &quot;/usr/lib/python3.8/subprocess.py&quot;, line 858, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File &quot;/usr/lib/python3.8/subprocess.py&quot;, line 1704, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: &#39;./scripts/lib/update-git-upstream&#39;\n</code></pre></div>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>: <a href=\"https://github.com/zulip/zulip/pull/25265\">#25265</a></p>",
  "<p>I need to step away right now, but I'll try to get back to this test deploy tonight or first thing tomorrow.</p>",
  "<p>OK, starting on this deploy!</p>",
  "<p>Done.</p>",
  "<p>We're on the downswing of the reload load spike (~everyone has done the reload of <code>/</code>), and things look fine.</p>\n<p><code>/json/users/me/presence</code> has the same latency, since that's just a rabbitmq insert.  rabbitmq worker has the same memory and CPU characteristics, and isn't lagging in handling events at all.  Database load looks unchanged.  No errors or warnings in the logs.</p>\n<p>If there are different performance characteristics, CZO isn't big enough to hit them.</p>",
  "<p><code>/json/users/me/presence</code> might be a couple ms faster?</p>",
  "<p>p50 might be down a tiny bit, but we'll see how stable that difference is.</p>\n<p>Here's p50 and p75 of a 5-minute window of 200 OK responses to <code>/json/users/me/presence</code> + <code>/api/v1/users/me/presence</code><br>\n<a href=\"/user_uploads/2/d5/FgV3xqs_CIIc83Kybf1j-mRk/Screenshot-2023-04-25-at-10.52.06-AM.png\">Screenshot-2023-04-25-at-10.52.06-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/d5/FgV3xqs_CIIc83Kybf1j-mRk/Screenshot-2023-04-25-at-10.52.06-AM.png\" title=\"Screenshot-2023-04-25-at-10.52.06-AM.png\"><img src=\"/user_uploads/2/d5/FgV3xqs_CIIc83Kybf1j-mRk/Screenshot-2023-04-25-at-10.52.06-AM.png\"></a></div>",
  "<p>Migration 0445 (which drops the old table) has not been applied, but this experiment looks like a success to me.  <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
  "<p>I suspect a lot of the time in those 200 responses is Python dictionary manipulations; we can try profiling it but my guess is it'll be way better once we start offering a better API that involves a lot less of such fiddling.</p>",
  "<p>Still, even the 5% or so improvement in this very heavily called endpoint is probably significant.</p>",
  "<p>So should we update <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a> to drop the last commit and add <code>ignore_conflicts=true</code>?</p>",
  "<p>I did that update since I'm pretty sure that's what we want to do. I intend to merge <a href=\"https://github.com/zulip/zulip/pull/16381\">#16381</a> tomorrow assuming we don't discover any weird problems with it.</p>",
  "<p>(I've confirmed I have consistent presence data on the mobile apps as on the web app)</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/25284\">#25284</a></p>",
  "<p>Merged!</p>",
  "<p>OK, marked this to merge once CI passes; I added a bonus commit for API documentation; the API format isn't changing but it seemed worth noting that we started hardcoding the \"client\" keys at this feature level.</p>",
  "<p>We currently have some of our development-only tools filed under the <code>zilencer</code> app.  Except those tools, the <code>zilencer</code> app is meant to be used as the \"push bouncer\" which we run in Zulip Cloud -- the management commands are only there because the commands are somewhat dangerous, and we don't want them enabled for production deployments.  These commands include:</p>\n<div class=\"codehilite\"><pre><span></span><code>add_mock_conversation\ncompare_messages\nmark_all_messages_unread\npopulate_db\nprint_initial_password\nprofile_request\nqueue_rate\nrender_messages\nrundjangoserver\nsync_api_key\n</code></pre></div>\n<p>There are also a couple in <code>analytics</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>clear_analytics_tables\nclear_single_stat\npopulate_analytics_db\n</code></pre></div>\n<p>It would be great to split these management commands out into a dedicated Django app which is enabled in development but not production.</p>\n<p>The first step may be naming -- is <code>development</code> the right name for such an app?  It's going to show up as as top-level directory in the repo, which might be mildly confusing if it's named <code>development</code>?</p>",
  "<p>There are some views that could also live within that app too: <code>zerver/views/development/</code></p>",
  "<p>Which are principally referenced by <code>zproject/dev_urls.py</code>.</p>",
  "<p>So after picking a name, I might as a first step initialize the Django \"app\" by moving the views there, since I expect that to be a pretty clean, and then work through moving all the management commands into it.</p>",
  "<p>There's a couple in that list that are not exactly devtools:</p>\n<ul>\n<li><code>zilencer/management/commands/compare_messages.py</code> and <code>render_messages</code> are intended to only to be run in production; it's a 2-part tool to determine the impact of changing the Markdown processor by running old/new versions on large samples of messages and reporting the number of messages whose rendering would change.</li>\n<li><code>zilencer/management/commands/profile_request.py</code> is something I've used in production more often than in development.</li>\n</ul>\n<p>It might be most reasonable for both to go into this devtools place and be used via <code>scp</code> when one wants them in production, though; they're pretty finicky and very rarely used.</p>",
  "<p>I'm not sure what to call it. <code>development</code> is probably clearest in the context of \"name for a Django app\" but might not be ideal for a top-level directory. It might still be clear enough -- its contents will look something like this, and I think probably that make it not feel like it's something similar to <code>tools</code>?:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ls analytics | cat\n__init__.py\nlib\nmanagement\nmigrations\nmodels.py\n__pycache__\ntests\nurls.py\nviews\n</code></pre></div>",
  "<p>Yeah, I think anyone who is a tiny bit familiar with Django will se those contents and go \"ah, OK, this is aDjango app directory\"</p>",
  "<p><code>development</code> sounds good to me but yeah it could be confusing for some. What do you think about names like <code>devtools</code> ?</p>",
  "<p>I think that might sound <em>more</em> like <code>tools/</code></p>",
  "<p>Yeah agreed they do sound similar.</p>",
  "<p>I guess that does sort of beg the question what the difference is between <code>tools/</code> and <code>development/management/commands/</code> is?</p>\n<p>My feel is that the difference is that none of the former import Django, but that's not exactly 100% accurate right now.</p>",
  "<p><code>dev_server</code>?</p>",
  "<p>I asked gpt for suggestions just to see what it would suggest here's what it gave me lol:<br>\n<a href=\"/user_uploads/2/d6/1QFQ-LD_WGSySYj0f_J9s4yU/IMG_20230428_010412.jpg\">IMG_20230428_010412.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/d6/1QFQ-LD_WGSySYj0f_J9s4yU/IMG_20230428_010412.jpg\" title=\"IMG_20230428_010412.jpg\"><img src=\"/user_uploads/2/d6/1QFQ-LD_WGSySYj0f_J9s4yU/IMG_20230428_010412.jpg\"></a></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/splitting.20out.20a.20development.20app/near/1557243\">said</a>:</p>\n<blockquote>\n<p>I guess that does sort of beg the question what the difference is between <code>tools/</code> and <code>development/management/commands/</code> is?</p>\n</blockquote>\n<p>I think the divide is that development management commands are the small subset of tools that need to use the database or other services enabled by Django.</p>",
  "<p>One thing we might need to be careful about BTW is that a few of our management commands, probably include <code>runserver.py</code>, override a Django built-in management command with the same name... we'll want to make sure that moving that out of <code>zerver</code> doesn't somehow cause the Django built-in command to become available in production.</p>",
  "<p><code>tools/setup/generate_integration_bots_avatars.py</code> should probably be a management command, by that logic.  Which seems probably-fine.</p>",
  "<p>I think I'd prefer the token \"django\" over \"server\", since that feels more precise. I suppose we could do something like <code>development_django</code>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/splitting.20out.20a.20development.20app/near/1557256\">said</a>:</p>\n<blockquote>\n<p><code>tools/setup/generate_integration_bots_avatars.py</code> should probably be a management command, by that logic.  Which seems probably-fine.</p>\n</blockquote>\n<p>I think if you're just importing Django to get access to <code>settings</code> variables, and nothing else, that doesn't need to be a management command in my mind. (I think that's the case for that one)</p>",
  "<p>I'm thinking more of things like the database, caches, queues, etc., as services -- not just the app's configuration from <code>settings.py</code>. One way to think about it is that in a world where we replace <code>settings.py</code> with a configuration file in TOML format or whatever, those scripts will just read the configuration file and stop importing Django.</p>",
  "<p>A consideration in naming these top-level packages that we\u2019ve completely ignored up to now is that they become part of the global Python package namespace. Generic names like <code>analytics</code>, <code>confirmation</code>, <code>corporate</code>, <code>pgroonga</code>, <code>scripts</code>, <code>tools</code> could conflict with real packages, and we shouldn\u2019t add more of these.</p>",
  "<p>Could we readily do <code>zerver/development</code> as the location for this? I'm not sure whether nesting code for a Django app inside a directory used for another app can cause problems, but structurally that'd feel pretty reasonable for how to organize the code.</p>",
  "<p>I don\u2019t know of any reason we couldn\u2019t.</p>",
  "<p><code>django.contrib.auth</code> is an app, for example.</p>",
  "<p>Should we do any work towards support of Debian Bookworm over the next week or two? It's due to release in June, so we'll probably want to backport support for it, and apparently it's already fairly late in the freeze cycle, so it seems unlikely they'll change much that would affect Zulip after now.</p>\n<p>(My main source is an email I just got but <a href=\"https://wiki.debian.org/DebianBookworm\">https://wiki.debian.org/DebianBookworm</a> has incomplete dates in the past)</p>",
  "<p>Yeah, OK, I propose we make it <code>zerver/development</code>, then.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/25325\">https://github.com/zulip/zulip/pull/25325</a> fixes the accidentally quadratic nature, but not the rest of <a href=\"https://github.com/zulip/zulip/pull/18899\">#18899</a>; just wanted to get that easy win in today before doing the more complex refactoring I need for the rest of <a href=\"https://github.com/zulip/zulip/pull/18899\">#18899</a>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span> changed the description for this stream.</p>\n<ul>\n<li><strong>Old description:</strong></li>\n</ul>\n<blockquote>\n<p>The Zulip server backend.</p>\n</blockquote>\n<ul>\n<li><strong>New description:</strong></li>\n</ul>\n<blockquote>\n<p>Zulip server development discussions. <a href=\"https://github.com/zulip/zulip/tree/main/zerver\">zerver directory</a> in <a href=\"https://github.com/zulip/zulip#readme\">zulip/zulip</a></p>\n</blockquote>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/25318\">#25318</a>, when we added the events / register response field for scheduled messages, the objects returned for scheduled stream messages and direct messages were different, so two <code>TypedDict</code> were added in <code>models.py</code> (see code block below).</p>",
  "<p>There was <a href=\"https://github.com/zulip/zulip/pull/25318#discussion_r1180705325\">a question on the PR</a> about whether the naming of these two classes could be improved or clarified.</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">StreamScheduledMessageAPI</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n    <span class=\"n\">scheduled_message_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">rendered_content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">topic</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">scheduled_delivery_timestamp</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DirectScheduledMessageAPI</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n    <span class=\"n\">scheduled_message_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>\n    <span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">rendered_content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">scheduled_delivery_timestamp</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n</code></pre></div>",
  "<p>Yeah so the existing names we have for something similar are <code>APIStreamDict``APISubscriptionDict</code>.</p>",
  "<p>If we wanted to follow that naming scheme, perhaps <code>APIScheduledStreamMessage</code> and <code>APIScheduledDirectMessage</code> would be pretty reasonable.</p>",
  "<p>I opened <a href=\"https://github.com/zulip/zulip/pull/25440\">#25440</a> to rework the core scheduled messages worker code path to be more robust and also fix an important bug; <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> I'd appreciate your reviewing and potentially extending this for anything else that comes to mind in the space of logging and reliability engineering.</p>",
  "<p>One particular detail that I'm not sure about is how we should handle the case that <code>do_send_messages</code> throw an exception -- for this initial version, I just have it log the exception and drop it (in a way where one could theoretically get it to retry manually by setting <code>delivered</code> back to <code>False</code>, but seems pretty clearly the wrong model), because failing to \"constantly send a message\" is something I can't rule out otherwise, and seems dangerous.</p>",
  "<p>That seems more consistent to me.</p>",
  "<p>Does adding <code>Dict</code> to the end feel long and less clear?<br>\n<code>APIScheduledDirectMessageDict</code> -&gt; <code>APIScheduledDirectMessage</code><br>\n<code>APIScheduledStreamMessageDict</code> -&gt; <code>APIScheduledStreamMessage</code></p>",
  "<p>It looks like we missed that <a href=\"https://docs.djangoproject.com/en/4.2/releases/4.2/#dropped-support-for-postgresql-11\">Django 4.2 dropped support for PostgreSQL 11</a>.  Which means we need to drop that support.</p>",
  "<p>Tacked onto <a href=\"https://github.com/zulip/zulip/pull/25442\">#25442</a>.</p>",
  "<p>Oh right. Also we should add 15.</p>",
  "<p>I think we have yet to test 15?</p>",
  "<p>Yeah, but adding it is the main way to test it.</p>",
  "<p>I think given that we have a pretty complete backend test suite, we can probably include support for that in 7.0 if we don't discover difficult to manage transitions?</p>",
  "<p>Either seems fine to me, I think I probably prefer <code>Dict</code> at the end slightly just to be clear, but probably all the things with the <code>API</code> naming convention are dictionaries...</p>",
  "<p>I expect to have this branch ready sometime tomorrow, though I may need some help with testing and other polishing work.</p>",
  "<p>Should we send a remove scheduled message event to the client when we send a scheduled message? Otherwise, there is no way for the client to know whether a scheduled message was sent without asking the server.</p>\n<p>Or, is the client expected to remove the scheduled message if the current time is greater than the scheduled time?</p>",
  "<p>Maybe a new <code>sent</code> event makes more sense?</p>",
  "<p>Did you see <a href=\"https://github.com/zulip/zulip/pull/25440/commits/7acc63b8a230f7a108769a3e83f970f1902609de\">https://github.com/zulip/zulip/pull/25440/commits/7acc63b8a230f7a108769a3e83f970f1902609de</a> ?</p>",
  "<p>Or are you more asking if we whould separate out a <code>sent</code> op from a <code>remove</code> op?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/scheduled.20message.20remove.20event.20on.20being.20sent/near/1563519\">said</a>:</p>\n<blockquote>\n<p>Did you see <a href=\"https://github.com/zulip/zulip/pull/25440/commits/7acc63b8a230f7a108769a3e83f970f1902609de\">https://github.com/zulip/zulip/pull/25440/commits/7acc63b8a230f7a108769a3e83f970f1902609de</a> ?</p>\n</blockquote>\n<p>I haven't had a chance yet, looking now.</p>",
  "<p>This discussion come up since I need such an event for <a href=\"https://github.com/zulip/zulip/pull/25441\">#25441</a>.</p>",
  "<p>I'll put up a PR with that change soon unless anyone else has any feedback or thoughts...</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/25475\">#25475</a> to test Pg 15.</p>",
  "<p>Cool, seems to have worked aside from the small issue in <a class=\"stream-topic\" data-stream-id=\"43\" href=\"/#narrow/stream/43-automated-testing/topic/upgrade.20production.20failing\">#automated testing &gt; upgrade production failing</a> preventing CI from running for one of our tests.</p>",
  "<p>Sounds good to me.</p>",
  "<p>Yeah my hope is to merge that as part of <a href=\"https://github.com/zulip/zulip/pull/25440\">#25440</a>, ideally later today.</p>",
  "<p>The event as currently planned won't tell you whether it was deleted or sent, but I think you don't need that information for <a href=\"https://github.com/zulip/zulip/pull/25441\">#25441</a> anyway. Though maybe I should include that just in case it's useful.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/scheduled.20message.20remove.20event.20on.20being.20sent/near/1563836\">said</a>:</p>\n<blockquote>\n<p>Yeah my hope is to merge that as part of <a href=\"https://github.com/zulip/zulip/pull/25440\">#25440</a>, ideally later today.</p>\n</blockquote>\n<p>Do we need any extra tests for this? I am not sure there are any changes that require it.</p>",
  "<p>This is the overall technical design I planned for implementing the <strong>notification aspect</strong> of the \"Follow Topics\" feature:</p>\n<ol>\n<li>We plan to make notifications configurable for each topic.</li>\n</ol>\n<p>So, notifications are sent for messages sent in a topic or not is determined by:<br>\n<a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/notification_data.py#L177\"><code>user_allows_notifications_in_StreamTopic</code></a></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>def user_allows_notifications_in_StreamTopic(\n<span class=\"w\"> </span>   stream_is_muted: bool,\n<span class=\"w\"> </span>   visibility_policy: int,\n<span class=\"w\"> </span>   stream_specific_setting: Optional[bool],\n<span class=\"gi\">+   topic_specific_setting: Optional[bool],</span>\n<span class=\"w\"> </span>   global_setting: bool,\n) -&gt; bool:\n<span class=\"w\"> </span>   \"\"\"\n<span class=\"w\"> </span>   Captures the hierarchy of notification settings, where visibility policy is considered first,\n<span class=\"w\"> </span>   followed by stream-specific settings, and the global setting in the UserProfile is the fallback.\n<span class=\"w\"> </span>   \"\"\"\n<span class=\"gi\">+   if visibility_policy == UserTopic.VisibilityPolicy.FOLLOWED:</span>\n<span class=\"gi\">+      return topic_specific_setting</span>\n\n<span class=\"w\"> </span>   if stream_is_muted and visibility_policy != UserTopic.VisibilityPolicy.UNMUTED:\n<span class=\"w\"> </span>       return False\n\n<span class=\"w\"> </span>   if visibility_policy == UserTopic.VisibilityPolicy.MUTED:\n<span class=\"w\"> </span>       return False\n\n<span class=\"w\"> </span>   if stream_specific_setting is not None:\n<span class=\"w\"> </span>       return stream_specific_setting\n\n<span class=\"w\"> </span>   return global_setting\n</code></pre></div>",
  "<p>a. We need to add the following boolean fields to the <a href=\"https://github.com/zulip/zulip/blob/main/zerver/models.py#L2696\"><code>UserTopic</code></a> model (this is in parallel with <a href=\"https://github.com/zulip/zulip/blob/main/zerver/models.py#L3769\"><code>Subscription</code></a> model which contains <code>stream_specific</code> notifications settings`</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">desktop_notifications</span>\n    <span class=\"n\">audible_notifications</span>\n    <span class=\"n\">push_notifications</span>\n    <span class=\"n\">email_notifications</span>\n    <span class=\"n\">wildcard_mentions_notify</span>\n</code></pre></div>\n<p>These will be the <code>topic_specific_settings</code>.</p>",
  "<p>b. Next, add a function in the <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/stream_topic.py#L6\"><code>StreamTopicTarget</code></a> class, named:</p>\n<p><code>user_id_to_notification_settings_dict</code> that returns a dict: {topic_push/email_notifications: boolean}</p>",
  "<p>c. use the above function in <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/message_send.py#L243\"><code>get_recipient_info</code></a> code path as:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>    user_id_to_visibility_policy = stream_topic.user_id_to_visibility_policy_dict()\n<span class=\"gi\">+    user_id_to_notification_settings = stream_topic.user_id_to_notification_settings_dict()</span>\n\n<span class=\"w\"> </span>   def notification_recipients(setting: str) -&gt; Set[int]:\n<span class=\"w\"> </span>       return {\n<span class=\"w\"> </span>           row[\"user_profile_id\"]\n<span class=\"w\"> </span>           for row in subscription_rows\n<span class=\"w\"> </span>           if user_allows_notifications_in_StreamTopic(\n<span class=\"w\"> </span>               row[\"is_muted\"],\n<span class=\"w\"> </span>               user_id_to_visibility_policy.get(\n<span class=\"w\"> </span>                   row[\"user_profile_id\"], UserTopic.VisibilityPolicy.INHERIT\n<span class=\"w\"> </span>               ),\n<span class=\"gi\">+               user_id_to_notification_settings.get(row[\"user_profile_id\"])[\"topic_\" + setting], # topic_specific_setting</span>\n<span class=\"w\"> </span>               row[setting], #stream_specific_setting\n<span class=\"w\"> </span>               row[\"user_profile_\" + setting],\n<span class=\"w\"> </span>           )\n<span class=\"w\"> </span>       }\n\n<span class=\"w\"> </span>   stream_push_user_ids = notification_recipients(\"push_notifications\")\n<span class=\"w\"> </span>   stream_email_user_ids = notification_recipients(\"email_notifications\")\n</code></pre></div>",
  "<p>d. So we use, </p>\n<p>i. <strong>topic_specific_settings</strong><br>\nii. <strong>stream_specific_settings</strong><br>\niii. <strong>user_default_settings</strong><br>\niv. <strong>visibility_policy and is_muted</strong></p>\n<p>to determine whether a notification push/email should be sent or not.</p>\n<p>The logic lies in the function <code>user_allows_notifications_in_StreamTopic</code>.<br>\n(Defined in the earlier message)</p>",
  "<ol start=\"2\">\n<li>Next, we need to add \"topic settings\" in parallel with \"stream settings\" in the sidebar dropdown menu, for each topic.</li>\n</ol>\n<p>Using this UI, a user can configure notification settings for that topic. (topic-specific)</p>",
  "<ol start=\"3\">\n<li>A row in the \"notification settings\" table for \"topics I follow\" -- so you'd be able to set a potentially different notifications policy for them -- or not, at your discretion</li>\n</ol>",
  "<p>Initial thoughts on this? -- I'll branch out things into smaller pieces (like updating the settings panel, sidebar dropdown, etc) from here for separate discussions.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"22341\">Prakhar Pratyush</span> <a href=\"#narrow/stream/3-backend/topic/Follow.20Topics/near/1564074\">said</a>:</p>\n<blockquote>\n<p>a. We need to add the following boolean fields to the <a href=\"https://github.com/zulip/zulip/blob/main/zerver/models.py#L2696\"><code>UserTopic</code></a> model (this is in parallel with <a href=\"https://github.com/zulip/zulip/blob/main/zerver/models.py#L3769\"><code>Subscription</code></a> model which contains <code>stream_specific</code> notifications settings`</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">desktop_notifications</span>\n    <span class=\"n\">audible_notifications</span>\n    <span class=\"n\">push_notifications</span>\n    <span class=\"n\">email_notifications</span>\n    <span class=\"n\">wildcard_mentions_notify</span>\n</code></pre></div>\n<p>These will be the <code>topic_specific_settings</code>.</p>\n</blockquote>\n<p>I think for this bit, what I'd had in mind is that we'd have a global set of settings for \"notification policy for topics I follow\", rather than that being a <code>UserTopic</code> field. It would be useful to discuss the product question in <a class=\"stream\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design\">#design</a>, but my thinking is that it'd be excessive complexity to have you feel like you need to do 5 settings for each individual followed topic, and that a single policy for \"followed topics\", possibly with a per-stream one added in the future, would achieve our goals.</p>",
  "<p>So \"followed topics\" would just be an additional row in the main \"Notification settings\" grid.</p>",
  "<p>Possibly not for that part; I'm going to work on it next.</p>",
  "<p>OK I'm ready to hand off <a href=\"https://github.com/zulip/zulip/pull/25440\">#25440</a>; <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> <span class=\"user-mention\" data-user-id=\"5140\">@Aman (amanagr)</span> does either of you have time to complete it by adding tests for the next logic / error conditions?</p>",
  "<p>Sure, I can.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/25489\">#25489</a> is up with that small update.</p>",
  "<p>Apparently when we split <code>zerver/lib/actions.py</code> up, we neglected to mark that directory as expecting full test coverage. Just changed that, and we've got like 10 lines across 5 files without tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>ERROR: zerver/actions/create_realm.py no longer has complete backend test coverage\n  Lines missing coverage: [167, 194]\n\nERROR: zerver/actions/message_delete.py no longer has complete backend test coverage\n  Lines missing coverage: [27]\n\nERROR: zerver/actions/message_edit.py no longer has complete backend test coverage\n  Lines missing coverage: [925, 1098, 1166]\n\nERROR: zerver/actions/presence.py no longer has complete backend test coverage\n  Lines missing coverage: [119]\n\nERROR: zerver/actions/scheduled_messages.py no longer has complete backend test coverage\n  Lines missing coverage: [101]\n</code></pre></div>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/25491\">https://github.com/zulip/zulip/pull/25491</a> to fix the enforcement, and <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/scheduled.20message.20remove.20event.20on.20being.20sent\">#backend &gt; scheduled message remove event on being sent</a> should end up fixing the <code>scheduled_messages.py</code> gaps which is how I noticed this, but the rest would be great for folks to pick up. E.g. the <code>message_delete.py</code> one is just \"what happens if you ask to delete 0 messages\".</p>",
  "<p>I can take up <code>create_realm.py</code> and <code>message_edit.py</code> changes as I have worked on the related code recently.</p>",
  "<p>Got <a href=\"https://github.com/zulip/zulip/pull/25494\">#25494</a> up for <code>message_delete.py</code>.</p>",
  "<p>OK <a href=\"https://github.com/zulip/zulip/pull/25440\">#25440</a> is merging; once that's in the <code>scheduled_messages</code> file should be ready to work on; it's possible it'll already be at 100% after that PR, but I've not checked.</p>",
  "<p>OK this is merging, so we should be all set on this issue. Thanks to <span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> for finishing the tests on this for me.</p>",
  "<p>I left one comment, but it's the sort of thing that's reasonable to forward-fix.</p>",
  "<p>Yeah I think I'll bundle that into the release goal of \"How do we report failures to users?\".</p>",
  "<p>We should set <code>target_fully_covered</code> to something dead simple like <code>[\"analytics/**.py\", \"confirmation/**.py\", \"corporate/**.py\", \"zerver/**.py\", \"zproject/**.py\"]</code> (with <code>glob.glob(recursive=True)</code>) and use <code>not_yet_fully_covered</code> for exemptions.</p>",
  "<p>Yeah, agreed; I was planning to do that after this was cleaned up, but probably someone can do that work in parallel with fixing the things we've flagged.</p>",
  "<p>The only extra exceptions would be</p>\n<div class=\"codehilite\"><pre><span></span><code>corporate/models.py\nzproject/computed_settings.py\nzproject/config.py\nzproject/configured_settings.py\nzproject/default_settings.py\nzproject/dev_settings.py\nzproject/dev_urls.py\nzproject/sentry.py\nzproject/settings.py\nzproject/test_extra_settings.py\nzproject/test_settings.py\nzproject/urls.py\nzproject/wsgi.py\n</code></pre></div>",
  "<p>Yeah let's just do that.</p>",
  "<p>Hi everyone, I followed the instruction given in the dev_tools to connect local PostgreSql database using pgadmin<br>\n<a href=\"/user_uploads/2/75/GEVKmDU8R_7fPxRUgI5Un57s/image.png\">image.png</a><br>\nBut I am not able getting the  following error while connecting. Can anyone suggest what is wrong here?<br>\n<a href=\"/user_uploads/2/0/cmUlcmSrTFbhdKKJfoF57IUI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/75/GEVKmDU8R_7fPxRUgI5Un57s/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/75/GEVKmDU8R_7fPxRUgI5Un57s/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/0/cmUlcmSrTFbhdKKJfoF57IUI/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/0/cmUlcmSrTFbhdKKJfoF57IUI/image.png\"></a></div>",
  "<p>I would check if that is the correct port and the server is running.</p>",
  "<p>What remaining validation do we want to do for <a href=\"https://github.com/zulip/zulip/pull/25475\">https://github.com/zulip/zulip/pull/25475</a> before merging?</p>",
  "<p>I'm trying to figure out whether we get to merge it for <code>7.0-beta2</code> today.</p>",
  "<p>I don't think there's much to test there.  Documentation about \"if you want to customize things\" is still the same as before -- put it in the <code>conf.d</code> directory.</p>",
  "<p>I've marked it as ready to review.  I think I was just marking it as draft when I really wasn't sure how many pieces it would explode into.</p>",
  "<p>Just a bump on this question; it could be nice to do Zulip support for it in its mostly frozen state now, so that we won't need to do something special around June 10 when it does come out.</p>",
  "<p>Hmm, Python 3.11 by default might have some exciting fallout. I\u2019ll take a look.</p>",
  "<p>First problem: no PGroonga repository.</p>",
  "<p>Second problem: <a href=\"https://github.com/PyYoshi/cChardet/issues/81\">cchardet doesn\u2019t build</a> and the maintainer is absent.</p>",
  "<p>Third problem: PGroonga (built from source) throws errors like this.</p>\n<div class=\"codehilite\" data-code-language=\"Python Traceback\"><pre><span></span><code><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">\"/srv/zulip-py3-venv/lib/python3.11/site-packages/django/db/backends/utils.py\"</span>, line <span class=\"m\">89</span>, in <span class=\"n\">_execute</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">\"/__w/zulip/zulip/zerver/lib/db.py\"</span>, line <span class=\"m\">47</span>, in <span class=\"n\">execute</span>\n<span class=\"w\">    </span><span class=\"n\">wrapper_execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"p\">)</span>\n  File <span class=\"nb\">\"/__w/zulip/zulip/zerver/lib/db.py\"</span>, line <span class=\"m\">32</span>, in <span class=\"n\">wrapper_execute</span>\n<span class=\"w\">    </span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"gr\">psycopg2.errors.InvalidParameterValue</span>: <span class=\"n\">pgroonga: object isn't found: &lt;Sources20182&gt;</span>\n</code></pre></div>",
  "<p>Fourth problem: Puppet is discombobulated.</p>\n<div class=\"codehilite\"><pre><span></span><code>Error: Facter: Permission denied @ rb_sysopen - /proc/1/environ\nError: Facter: Permission denied @ rb_sysopen - /proc/1/environ\nError: Facter: Permission denied @ rb_sysopen - /proc/1/environ\n\u2026\nError: Facter: Permission denied @ rb_sysopen - /proc/1/environ\nError: Evaluation Error: Error while evaluating a Function Call, The code loaded from /root/zulip-latest/puppet/zulip/lib/puppet/parser/functions/zulipconf.rb produced mis-matched name, expected &#39;function_zulipconf&#39;, got &#39;function_zulipconf_nagios_hosts&#39; (file: /root/zulip-latest/puppet/zulip/manifests/timesync.pp, line: 3, column: 15) on node 662f44e9c645.10vc1fp43w4ejfym3u1nh0imhc.jx.internal.cloudapp.net\n</code></pre></div>",
  "<p>What version of puppet is it?</p>",
  "<p>7.23.0</p>",
  "<p>The requirement for the function name to match the filename doesn\u2019t seem to be new, at least <a href=\"https://www.puppet.com/docs/puppet/5.5/functions_ruby_overview.html#location\">in theory</a>.</p>",
  "<p>Maybe something changed with how <a href=\"https://www.puppet.com/docs/puppet/6/functions_refactor_legacy.html\">legacy 3.x functions</a> are loaded.</p>",
  "<p>For PGroonga, upstream often fixes problems with platform support within a day when we file issues with them.</p>",
  "<p>IIRC there are pretty big changes from Puppet 5.5 to thereafter, so I'm not surprised something broke.</p>",
  "<p>After migrating the Ruby functions to the current API,</p>\n<div class=\"codehilite\"><pre><span></span><code>Notice: /Stage[main]/Zulip::Profile::Postgresql/Exec[pg_ctlcluster 15 main restart]/returns: Error: invalid line 2 in /etc/postgresql/15/main/conf.d/zulip.conf: listen_addresses =\nError: /Stage[main]/Zulip::Profile::Postgresql/Exec[pg_ctlcluster 15 main restart]: Failed to call refresh: &#39;pg_ctlcluster 15 main restart&#39; returned 1 instead of one of [0]\nError: /Stage[main]/Zulip::Profile::Postgresql/Exec[pg_ctlcluster 15 main restart]: &#39;pg_ctlcluster 15 main restart&#39; returned 1 instead of one of [0]\n</code></pre></div>",
  "<p>Could be some bug in my <code>zulipconf</code> migration.</p>",
  "<p>Hmm, it seems the legacy function API had some bug that converted <code>nil</code> to <code>''</code> that we were relying on.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/20860\">#20860</a> deleted the definition of the <code>uwsgi_rolling_restart</code> Puppet variable without deleting the reference in <code>puppet/zulip/templates/uwsgi.ini.template.erb</code>.</p>",
  "<p>Fifth problem:</p>\n<div class=\"codehilite\"><pre><span></span><code>++ dirname /home/zulip/deployments/current/scripts/setup/create-database\n+ cd /\n+ su postgres -c &#39;psql -v ON_ERROR_STOP=1 -v dbname=zulip -v dbuser=zulip -e&#39;\nSELECT CASE WHEN &#39;zulip&#39; = &#39;:dbuser&#39; THEN &#39;zulip&#39; ELSE &#39;zulip&#39; END AS dbuser\nSELECT CASE WHEN &#39;zulip&#39; = &#39;:dbname&#39; THEN &#39;zulip&#39; ELSE &#39;zulip&#39; END AS dbname\nYou are now connected to database &quot;postgres&quot; as user &quot;postgres&quot;.\nDROP DATABASE IF EXISTS &quot;zulip&quot;;\nERROR:  cannot execute DROP DATABASE in a read-only transaction\n\nZulip installation failed (exit code 3)!\n</code></pre></div>",
  "<p>Hmm that's kinda interesting.</p>",
  "<p>Oh that happens on all distros now, I must have broken something.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/Debian.20bookworm/near/1566695\">said</a>:</p>\n<blockquote>\n<p>Hmm, it seems the legacy function API had some bug that converted <code>nil</code> to <code>''</code> that we were relying on.</p>\n</blockquote>\n<p>Classic.</p>",
  "<p><del>Okay I think it\u2019s working now.</del> <a href=\"https://github.com/zulip/zulip/pull/25522\">#25522</a>. Nope, third problem is still there.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/actions.20files.20test.20coverage/near/1565078\">said</a>:</p>\n<blockquote>\n<p>OK <a href=\"https://github.com/zulip/zulip/pull/25440\">#25440</a> is merging; once that's in the <code>scheduled_messages</code> file should be ready to work on; it's possible it'll already be at 100% after that PR, but I've not checked.</p>\n</blockquote>\n<p>That PR didn't end up fixing the coverage, so I took care of it while I was working on scheduled message tasks, <a href=\"https://github.com/zulip/zulip/pull/25544\">#25544</a>.</p>",
  "<p>Thanks! Is someone up for doing the change suggested <a href=\"#narrow/stream/3-backend/topic/actions.20files.20test.20coverage/near/1565207\">here</a>?</p>",
  "<p>Well I'm glad we started working on this!</p>",
  "<p>Mmm, dropping that config wasn't intentional.  I'll bring it back (though it still <a href=\"https://github.com/python-greenlet/greenlet/issues/330\">causes coredumps</a>, which we think to be mostly benign)</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/25562\">#25562</a>.</p>",
  "<p>Oho, and there's movement on the coredump issue from someone!  Their PR doesn't pass tests, but I'm glad someone has at least dug into it more than I did.</p>",
  "<p>Hi!</p>\n<p>I found this bug that's able to bypass the 1k license limit and trigger a django error on the support panel.</p>\n<p>Steps:</p>\n<ol>\n<li>On a test realm inside a dev server with Stripe set up, go to the billing page and upgrade to the standard plan by invoice.</li>\n<li>Navigate to the server's support panel (/activity/support) and bring up the upgraded realm</li>\n<li>Change the billing method from <code>Pay by invoice</code> to <code>Charge automatically</code></li>\n<li>Go back to the billing settings from the realm owner's POV and, in the <code>Settings</code> page under the <code>Number of licenses in the current billing period</code> tab, input and confirm a high number. I tested it using 50000</li>\n<li>Go back to the realm's view in the cloud support panel, in the <code>Modify plan</code> section, select and confirm the <code>Upgrade to Plus</code> option.</li>\n<li>The server should now return an error from Stripe, indicating an amount superior to $999,999 may not be created.</li>\n</ol>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Error log</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Environment:</p>\n<p>Request Method: POST<br>\nRequest URL: <a href=\"http://localhost:9991/activity/support?q=analyticz\">http://localhost:9991/activity/support?q=analyticz</a></p>\n<p>Django Version: 4.2<br>\nPython Version: 3.8.10<br>\nInstalled Applications:<br>\n['django.contrib.auth',<br>\n 'django.contrib.contenttypes',<br>\n 'django.contrib.sessions',<br>\n 'django.contrib.staticfiles',<br>\n 'confirmation',<br>\n 'zerver',<br>\n 'social_django',<br>\n 'django_scim',<br>\n 'django_otp',<br>\n 'django_otp.plugins.otp_static',<br>\n 'django_otp.plugins.otp_totp',<br>\n 'two_factor',<br>\n 'two_factor.plugins.phonenumber',<br>\n 'pgroonga',<br>\n 'zilencer',<br>\n 'analytics',<br>\n 'corporate']<br>\nInstalled Middleware:<br>\n('zerver.middleware.TagRequests',<br>\n 'zerver.middleware.SetRemoteAddrFromRealIpHeader',<br>\n 'zerver.middleware.RequestContext',<br>\n 'django.contrib.sessions.middleware.SessionMiddleware',<br>\n 'django.contrib.auth.middleware.AuthenticationMiddleware',<br>\n 'zerver.middleware.LogRequests',<br>\n 'zerver.middleware.JsonErrorHandler',<br>\n 'zerver.middleware.RateLimitMiddleware',<br>\n 'zerver.middleware.FlushDisplayRecipientCache',<br>\n 'django.middleware.common.CommonMiddleware',<br>\n 'zerver.middleware.LocaleMiddleware',<br>\n 'zerver.middleware.HostDomainMiddleware',<br>\n 'django.middleware.csrf.CsrfViewMiddleware',<br>\n 'django_otp.middleware.OTPMiddleware',<br>\n 'two_factor.middleware.threadlocals.ThreadLocals',<br>\n 'zerver.middleware.FinalizeOpenGraphDescription')</p>\n<p>Traceback (most recent call last):<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 55, in inner<br>\n    response = get_response(request)<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/handlers/base.py\", line 197, in _get_response<br>\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)<br>\n  File \"/srv/zulip/zerver/decorator.py\", line 429, in _wrapped_view<br>\n    return view_func(request, *args, **kwargs)<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/django/contrib/auth/decorators.py\", line 23, in _wrapper_view<br>\n    return view_func(request, *args, **kwargs)<br>\n  File \"/srv/zulip/zerver/decorator.py\", line 492, in _wrapped_view_func<br>\n    return view_func(request, *args, **kwargs)<br>\n  File \"/srv/zulip/zerver/decorator.py\", line 588, in _wrapped_view_func<br>\n    return add_logging_data(view_func)(request, *args, **kwargs)<br>\n  File \"/srv/zulip/zerver/decorator.py\", line 492, in _wrapped_view_func<br>\n    return view_func(request, *args, **kwargs)<br>\n  File \"/srv/zulip/zerver/lib/request.py\", line 459, in _wrapped_req_func<br>\n    return_value = req_func(request, *args, **kwargs)<br>\n  File \"/srv/zulip/analytics/views/support.py\", line 274, in support<br>\n    switch_realm_from_standard_to_plus_plan(realm)<br>\n  File \"/srv/zulip/corporate/lib/stripe.py\", line 1230, in switch_realm_from_standard_to_plus_plan<br>\n    invoice_plan(plus_plan, plan_switch_time)<br>\n  File \"/srv/zulip/corporate/lib/stripe.py\", line 903, in invoice_plan<br>\n    stripe.InvoiceItem.create(<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/stripe/api_resources/abstract/createable_api_resource.py\", line 16, in create<br>\n    return cls._static_request(<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/stripe/api_resources/abstract/api_resource.py\", line 139, in _static_request<br>\n    response, api_key = requestor.request(method_, url_, params, headers)<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/stripe/api_requestor.py\", line 122, in request<br>\n    resp = self.interpret_response(rbody, rcode, rheaders)<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/stripe/api_requestor.py\", line 399, in interpret_response<br>\n    self.handle_error_response(rbody, rcode, <a href=\"http://resp.data\">resp.data</a>, rheaders)<br>\n  File \"/srv/zulip-py3-venv/lib/python3.8/site-packages/stripe/api_requestor.py\", line 159, in handle_error_response<br>\n    raise err</p>\n<p>Exception Type: InvalidRequestError at /activity/support<br>\nException Value: Request req_Ny0OSKKomLsSqa: Amount must be no more than $999,999.99</p>\n</div></div>",
  "<p>I extracted <a href=\"https://github.com/zulip/zulip/pull/25563\">#25563</a> and <a href=\"https://github.com/zulip/zulip/pull/25564\">#25564</a> as preparation commits that we might as well merge sooner.</p>",
  "<p>I merged the Python one for 7.0-beta1; I think the other one I'd like to give time for <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> to review, and also for us to test applying puppet to all of Zulip Cloud before we ship it to self-hosters, since that'll likely find a large portion of possible bugs.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"26960\">@CONIGUERO</span> thanks for a report! Do you want to put in a PR to fix it?</p>",
  "<p>The /activity/support page is an internal URL not generally available to users who don't also administer the Zulip server, so it's probably not important, but I'd be happy to see this fixed.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Can't.20upgrde.20to.20plus.20when.20.22charge.20automatically.22.20is.20set/near/1567687\">said</a>:</p>\n<blockquote>\n<p>The /activity/support page is an internal URL not generally available to users who don't also administer the Zulip server, so it's probably not important, but I'd be happy to see this fixed.</p>\n</blockquote>\n<p>Yeah I know it's just for Zulip cloud staff, but it's worthy nontheless.</p>\n<p>I'm not sure exactly how a fix could be implemented here. In step 4 to prevent the licenses from racking up charges for $1M+? Switching the billing method to <code>Pay by invoice</code> automatically as soon as the million-dollar threshold is reached when adding licenses?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/Debian.20bookworm/near/1566503\">said</a>:</p>\n<blockquote>\n<p>Third problem: PGroonga (built from source) throws errors like this.</p>\n<p><div class=\"codehilite\" data-code-language=\"Python Traceback\"><pre><span></span><code><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">\"/srv/zulip-py3-venv/lib/python3.11/site-packages/django/db/backends/utils.py\"</span>, line <span class=\"m\">89</span>, in <span class=\"n\">_execute</span>\n<span class=\"w\">    </span><span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">\"/__w/zulip/zulip/zerver/lib/db.py\"</span>, line <span class=\"m\">47</span>, in <span class=\"n\">execute</span>\n<span class=\"w\">    </span><span class=\"n\">wrapper_execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"p\">)</span>\n  File <span class=\"nb\">\"/__w/zulip/zulip/zerver/lib/db.py\"</span>, line <span class=\"m\">32</span>, in <span class=\"n\">wrapper_execute</span>\n<span class=\"w\">    </span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"gr\">psycopg2.errors.InvalidParameterValue</span>: <span class=\"n\">pgroonga: object isn't found: &lt;Sources20182&gt;</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This also happens on Ubuntu 22.04 with <code>postgresql-15</code> from <a href=\"http://apt.postgresql.org\">apt.postgresql.org</a> and <code>postgresql-15-pgdg-pgroonga</code> from <a href=\"http://packages.groonga.org\">packages.groonga.org</a>. So this must be a PostgreSQL 15 problem, not a Debian 12 problem.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> <a href=\"#narrow/stream/3-backend/topic/Unable.20to.20connect.20local.20PostgreSQL.20database.20using.20pgAdmin/near/1565700\">said</a>:</p>\n<blockquote>\n<p>I would check if that is the correct port and the server is running.</p>\n</blockquote>\n<p>I got the port number by using this command<br>\n<a href=\"/user_uploads/2/f1/wEc3gQTQMAVxKNCzvlM6guvb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/f1/wEc3gQTQMAVxKNCzvlM6guvb/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/f1/wEc3gQTQMAVxKNCzvlM6guvb/image.png\"></a></div>",
  "<p>Are you using vagrant? If so, the postgres port isn't exported to your host computer.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Unable.20to.20connect.20local.20PostgreSQL.20database.20using.20pgAdmin/near/1567760\">said</a>:</p>\n<blockquote>\n<p>Are you using vagrant? If so, the postgres port isn't exported to your host computer.</p>\n</blockquote>\n<p>Ohh okay got it. Is there any other way I can connect to pgadmin when I am using vagrant?</p>",
  "<p>You can try to figure out how to export that port and open a PR.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> <a href=\"#narrow/stream/3-backend/topic/Unable.20to.20connect.20local.20PostgreSQL.20database.20using.20pgAdmin/near/1567782\">said</a>:</p>\n<blockquote>\n<p>You can try to figure out how to export that port and open a PR.</p>\n</blockquote>\n<p>Sure</p>",
  "<p>You can run <code>vagrant ssh -- -L 5432:localhost:5432</code>, and the port will be forwarded for as long as you have that open.</p>",
  "<p>Minimized a test case from a 2.5 MB PostgreSQL log, and reported <a href=\"https://github.com/pgroonga/pgroonga/issues/335\">https://github.com/pgroonga/pgroonga/issues/335</a>. Fortunately, it probably only affects the development environment since <code>CREATE DATABASE \u2026 TEMPLATE</code> seems to be needed to trigger it.</p>",
  "<p>I suppose we don\u2019t <em>need</em> to use Debian\u2019s default PostgreSQL version since we\u2019re not getting it from Debian anymore.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"26910\">@Saurabh Machhindra Purkar</span> can you verify that it works and open a PR to document it in <code>dev_tools.html</code>.</p>",
  "<p>Yes it worked Thanks <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> , Sure <span class=\"user-mention\" data-user-id=\"5140\">@Aman (amanagr)</span>  will raise a PR to document this.</p>",
  "<p>Yeah we could switch the development environment to use the same upstream postgres packages we use in production.</p>",
  "<p>That wouldn\u2019t help, since we\u2019re now using PostgreSQL 15 in new production installations.</p>",
  "<p>Anyway upstream responded that we need to turn on the <a href=\"https://pgroonga.github.io/reference/parameters/enable-wal.html\"><code>pgroonga.enable_wal</code> option</a> to support the new default <code>WAL_LOG</code> strategy for <code>CREATE DATABASE \u2026 TEMPLATE</code>. That does work, though it\u2019s a bit inconvenient to find a good place for <code>provision</code> to write a PostgreSQL configuration file.</p>",
  "<p>Hi <span class=\"user-mention\" data-user-id=\"5140\">@Aman (amanagr)</span>   Against which issue should I raise a PR, do I have to create a new issue?</p>",
  "<p>No, you can create a pull request.</p>",
  "<p>Related discussion at <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/notifications.20of.20Followed.20Topics\">#design &gt; notifications of Followed Topics</a></p>",
  "<p>Bumping this up as we have resumed work on it.</p>",
  "<p>I'd prefer <code>enable_followed_topic_email_notifications</code> for the reason <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> mentioned above.</p>",
  "<p>I like that proposal! Reads better than the \"topic_follow\" variants I'd been thinking about above.</p>",
  "<p>It looks like a SQL command that we just run when setting up the database for pgroonga, not a configuration file thing.</p>",
  "<p><code>SET pgroonga.enable_wal = on;</code></p>",
  "<p>No, it\u2019s not sufficient to run that once during setup; I tried. It needs to go in <code>postgresql.conf</code> (or a <code>conf.d</code> equivalent).</p>",
  "<p><code>SET</code> <a href=\"https://www.postgresql.org/docs/15/sql-set.html\">only affects the value used by the current session</a>, and if it\u2019s not in effect for <em>both</em> the <code>CREATE INDEX</code> <em>and</em> the <code>INSERT</code> in my test case, it fails.</p>",
  "<p>Also, I think <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/message_send.py#L258\"><code>stream_email_user_ids</code></a> and <code>stream_push_user_ids</code> should be renamed.</p>\n<p><strong>Reason:</strong><br>\nWhether notification is sent or not is now <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/notification_data.py#L177\">determined by</a> both <code>topic_specific_settings</code>(global)  and <code>stream_specific_settings</code> (global or per stream); not only <code>stream_specific_settings</code> (global or per stream).</p>\n<p><code>topic_specific_setting</code> will take precedence as <a href=\"#narrow/stream/3-backend/topic/Follow.20Topics/near/1564073\">discussed here</a>.</p>\n<p><strong>Proposal:</strong></p>\n<ul>\n<li><code>stream_or_followed_topic_email_user_ids</code></li>\n<li><code>stream_or_followed_topic_push_user_ids</code></li>\n</ul>",
  "<p>Annoying, ok. We could consider suggesting PGroonga upstream whether they want to turn it on by default, and have the option to be turning it off...</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> I think we might actually just want a new <code>followed_topic_email_user_ids</code> parallel field in those objects, because I'm guessing we do need to plumb which of those possibilities was the case all the way through the system, so that the little text at the bottom of notification emails can say \"You're receiving this email because you follow this topic.\"</p>\n<p>Specifically this block in <code>templates/zerver/emails/missed_message.html</code></p>\n<div class=\"codehilite\"><pre><span></span><code>{% block manage_preferences %}\n&lt;div class=&quot;email-preferences&quot;&gt;\n    &amp;mdash;&lt;br /&gt;\n    {% if personal_mentioned %}\n    {% trans %}You are receiving this because you were personally mentioned.{% endtrans %}&lt;br /&gt;\n    {% elif mentioned_user_group_name %}\n    {% trans %}You are receiving this because @{{ mentioned_user_group_name }} was mentioned.{% endtrans %}&lt;br /&gt;\n    {% elif wildcard_mentioned %}\n    {% trans %}You are receiving this because everyone was mentioned in #{{ stream_name }}.{% endtrans %}&lt;br /&gt;\n    {% elif stream_email_notify %}\n    {% trans %}You are receiving this because you have email notifications enabled for #{{ stream_name }}.{% endtrans %}&lt;br /&gt;\n    {% endif %}\n</code></pre></div>",
  "<p>As an update, moving a single-message topic between streams on this server just had this as the log line:</p>\n<ul>\n<li><code>6.9s (mem: 11ms/13) (md: 7ms/1) (db: 1.6s/46q)</code></li>\n</ul>\n<p>I still need to finish my branch, which should improve this considerably further, but just wanted to note the data point that this is down from the 25s sample in <a href=\"#narrow/stream/3-backend/topic/topic.20move.20performance/near/1498052\">https://chat.zulip.org/#narrow/stream/3-backend/topic/topic.20move.20performance/near/1498052</a> (though it wasn't noted how many messages were moved there).</p>",
  "<p>This makes sense.</p>",
  "<p>However, with regards to the UNMUTE feature we have already implemented, it feels like the last text here (<code>You are receiving this because you have email notifications enabled for #{{ stream_name }}.</code>) would be incorrect if someone received a notification from an UNMUTED topic in a muted stream?<br>\nThat person has specifically _disabled_ notifications for that stream, but we're saying they have _enabled_ notifications for that stream just because one topic in that stream is UNMUTED.<br>\nShould we also add fields like <code>unmuted_topic_email_user_ids</code> to correct this?</p>",
  "<p>Sixth problem: <code>TimeoutTestCase.test_timeout_warn</code> fails with coverage enabled.</p>\n<div class=\"codehilite\" data-code-language=\"Python Traceback\"><pre><span></span><code><span class=\"x\">======================================================================</span>\n<span class=\"x\">FAIL: test_timeout_warn (zerver.tests.test_timeout.TimeoutTestCase.test_timeout_warn)</span>\n<span class=\"x\">----------------------------------------------------------------------</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">\"/srv/zulip/zerver/tests/test_timeout.py\"</span>, line <span class=\"m\">47</span>, in <span class=\"n\">test_timeout_warn</span>\n<span class=\"w\">    </span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sleep_x_seconds_y_times</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  File <span class=\"nb\">\"/srv/zulip/zerver/lib/timeout.py\"</span>, line <span class=\"m\">82</span>, in <span class=\"n\">timeout</span>\n<span class=\"w\">    </span><span class=\"k\">raise</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">with_traceback</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n  File <span class=\"nb\">\"/srv/zulip/zerver/lib/timeout.py\"</span>, line <span class=\"m\">54</span>, in <span class=\"n\">run</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">()</span>\n<span class=\"w\">                  </span><span class=\"pm\">^^^^^^</span>\n  File <span class=\"nb\">\"/srv/zulip/zerver/tests/test_timeout.py\"</span>, line <span class=\"m\">47</span>, in <span class=\"n\">&lt;lambda&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sleep_x_seconds_y_times</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">                       </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">\"/srv/zulip/zerver/tests/test_timeout.py\"</span>, line <span class=\"m\">17</span>, in <span class=\"n\">sleep_x_seconds_y_times</span>\n<span class=\"w\">    </span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"gr\">zerver.lib.timeout.TimeoutExpiredError</span>: <span class=\"n\">Function call timed out.</span>\n\n<span class=\"gt\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">\"/srv/zulip/zerver/tests/test_timeout.py\"</span>, line <span class=\"m\">51</span>, in <span class=\"n\">test_timeout_warn</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertNotIn</span><span class=\"p\">(</span><span class=\"s2\">\"in sleep_x_seconds_y_times\"</span><span class=\"p\">,</span> <span class=\"n\">tb</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gr\">AssertionError</span>: <span class=\"n\">'in sleep_x_seconds_y_times' unexpectedly found in '  File \"/srv/zulip/zerver/tests/test_timeout.py\", line 17, in sleep_x_seconds_y_times\\n    time.sleep(x)\\n'</span>\n</code></pre></div>",
  "<p>Huh, so in Python 3.11, it's possible to interrupt a sleep.  <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
  "<p><a href=\"https://docs.python.org/3/whatsnew/3.11.html#time\">https://docs.python.org/3/whatsnew/3.11.html#time</a></p>\n<blockquote>\n<p>On Unix, time.sleep() now uses the clock_nanosleep() or nanosleep() function, if available, which has a resolution of 1 nanosecond (10-9 seconds), rather than using select() which has a resolution of 1 microsecond (10-6 seconds).</p>\n</blockquote>",
  "<p>It's trying to show that it can't interrupt a syscall, though, and there are non-sleep ones which are still issues</p>",
  "<p>Yeah that seems right to me, though I think in most cases they'll only be getting an email because of a mention, it does seem possible to get a notification not due to that if you have email notifications enabled by default in streams.</p>",
  "<p>Great observation. But does it explain why the test only fails with coverage enabled?</p>",
  "<p>Nope!</p>",
  "<p>Switching <code>time.sleep(x)</code> to <code>select.select([], [], [], x)</code> makes it go back to the <code>pselect6</code> syscall, but doesn\u2019t change the behavior.</p>",
  "<p>Huh, yeah, that entirely dashes that theory.</p>",
  "<p>Reduced test case:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">daemon</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">pythonapi</span><span class=\"o\">.</span><span class=\"n\">PyThreadState_SetAsyncExc</span><span class=\"p\">(</span>\n    <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_ulong</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">ident</span><span class=\"p\">),</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">py_object</span><span class=\"p\">(</span><span class=\"ne\">TimeoutError</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Under Python 3.10, 3.10 with coverage, or 3.11, <code>thread.is_alive()</code> immediately returns <code>True</code>. Under 3.11 with coverage, the first <code>thread.is_alive()</code> blocks for the thread\u2019s <code>sleep</code> to finish and the second one returns <code>False</code>.</p>",
  "<p>Based on <code>git bisect</code> of cpython.git, it starts failing with <a href=\"https://github.com/python/cpython/pull/30633\">https://github.com/python/cpython/pull/30633</a>.</p>",
  "<p>Possibly related to <a href=\"https://github.com/nedbat/coveragepy/issues/1367#issuecomment-1114717176\">https://github.com/nedbat/coveragepy/issues/1367#issuecomment-1114717176</a> ?</p>",
  "<p>And also <a href=\"https://coverage.readthedocs.io/en/7.2.5/changes.html#version-6-3-3-2022-05-12\">https://coverage.readthedocs.io/en/7.2.5/changes.html#version-6-3-3-2022-05-12</a></p>",
  "<p>I\u2019m testing with the latest <code>coverage==7.2.5</code> though, even though Zulip is still stuck on <code>coverage==6.4.2</code>.</p>",
  "<p>Opened <a href=\"https://github.com/nedbat/coveragepy/issues/1626\">https://github.com/nedbat/coveragepy/issues/1626</a>.</p>",
  "<p>Sure, but the 6.3.3 changelog notes changes in generator coverage, and the cpython bisect is a change in generators.</p>",
  "<p>But I'm mostly taking stabs in the dark.</p>",
  "<p>Given we think the bug is likely a test coverage issue, should we use <code>@skip</code> to disable the test (I can't remember if it's easy to do that just for Python 3.11)?</p>",
  "<p>We can <code>@skipIf</code> it, but we\u2019ll probably need more <code># nocoverage</code> as a result.</p>",
  "<blockquote>\n<p>even though Zulip is still stuck on <code>coverage==6.4.2</code>.</p>\n</blockquote>\n<p>Looks like we can fix this now: <a href=\"https://github.com/zulip/zulip/pull/25634\">#25634</a>.</p>",
  "<p>Seventh problem: <a href=\"https://github.com/zulip/zulip/pull/25522\">#25522</a> didn\u2019t run the Ubuntu 22.04 job. This might be similar to the weird <code>matrix</code> issue we solved with <a href=\"https://github.com/zulip/zulip/commit/4a9424b207ab5f412154187963cccf31618eaf0d\">4a9424b207ab5f412154187963cccf31618eaf0d</a>.</p>",
  "<p>Isn't <a href=\"https://github.com/zulip/zulip/actions/runs/4998005651/jobs/8953100117?pr=25522\">https://github.com/zulip/zulip/actions/runs/4998005651/jobs/8953100117?pr=25522</a> the 22.04?</p>",
  "<p>The problem this time is the CI tests, not the production tests.</p>",
  "<p>Ah, got it.  Yeah, I think it needs to be:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">jobs</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nt\">tests</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">strategy</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">fail-fast</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"w\">      </span><span class=\"nt\">matrix</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nt\">include</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"c1\"># Base images are built using `tools/ci/Dockerfile.prod.template`.</span>\n<span class=\"w\">          </span><span class=\"c1\"># The comments at the top explain how to build and upload these images.</span>\n<span class=\"w\">          </span><span class=\"c1\"># Ubuntu 20.04 ships with Python 3.8.10.</span>\n<span class=\"w\">          </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">docker_image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">zulip/ci:focal</span>\n<span class=\"w\">            </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ubuntu 20.04 (Python 3.8, backend + frontend)</span>\n<span class=\"w\">            </span><span class=\"nt\">os</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">focal</span>\n<span class=\"w\">            </span><span class=\"nt\">include_frontend_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n<span class=\"w\">            </span><span class=\"nt\">include_documentation_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"w\">          </span><span class=\"c1\"># Debian 11 ships with Python 3.9.2.</span>\n<span class=\"w\">          </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">docker_image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">zulip/ci:bullseye</span>\n<span class=\"w\">            </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Debian 11 (Python 3.9, backend + documentation)</span>\n<span class=\"w\">            </span><span class=\"nt\">os</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">bullseye</span>\n<span class=\"w\">            </span><span class=\"nt\">include_frontend_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"w\">            </span><span class=\"nt\">include_documentation_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n<span class=\"w\">          </span><span class=\"c1\"># Ubuntu 22.04 ships with Python 3.10.4.</span>\n<span class=\"w\">          </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">docker_image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">zulip/ci:jammy</span>\n<span class=\"w\">            </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ubuntu 22.04 (Python 3.10, backend)</span>\n<span class=\"w\">            </span><span class=\"nt\">os</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">jammy</span>\n<span class=\"w\">            </span><span class=\"nt\">include_frontend_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"w\">            </span><span class=\"nt\">include_documentation_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"w\">          </span><span class=\"c1\"># Debian 12 ships with Python 3.11.2.</span>\n<span class=\"w\">          </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">docker_image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">zulip/ci:bookworm</span>\n<span class=\"w\">            </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Debian 12 (Python 3.11, backend)</span>\n<span class=\"w\">            </span><span class=\"nt\">os</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">bookworm</span>\n<span class=\"w\">            </span><span class=\"nt\">include_frontend_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"w\">            </span><span class=\"nt\">include_documentation_tests</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n</code></pre></div>",
  "<p>I opened a draft PR <a href=\"https://github.com/zulip/zulip/pull/25640\">#25640</a> -- (not yet ready to review)</p>\n<p>A small question regarding: \"How should we structure commits here\":</p>\n<ol>\n<li>Each commit should implement one setting end-to-end (email/push/wildcard/...) and have its own documented API changes.</li>\n<li>The way <a href=\"https://github.com/zulip/zulip/pull/14555\">#14555</a> implements; UI and API changes in the last commit (However, I think this is not possible now because of the nice <code>property_types</code> framework we have; if we don't add a field in the <code>property_types</code> set in earlier commits, we will miss the tests)</li>\n</ol>\n<p>So, does the first approach look good ?; we have to merge all the commits at once to avoid multiple different feature-level mentions  (possibly) in the docs for various types of notification settings.</p>",
  "<p>I still don\u2019t understand the semantics of <code>matrix</code> that lead to silently discarding jobs, but this is passing now.</p>",
  "<p>I think it would be more manageable to implement this in two PRs (or 2 sets of commits in a single PR).</p>\n<ul>\n<li>The first in which we implement all the notification logic for followed topics based on the <em>default values</em> of the user settings which we plan to implement (the default values will probably be <code>true</code> for all of the <code>followed_topic_email/push_notifications</code> style user settings?). This, along with the API changes required to allow FOLLOWing a topic.</li>\n<li>In the next set of commits, we actually implement the user settings themselves. This will basically be the API changes for the settings, and some <code>if</code> conditionals to check the setting value and enqueue the notifications if required.</li>\n</ul>\n<p>With that, we're adding one feature (\"topics I follow\") and then another after that (\"configurable notifications for followed topics\"), thus cleanly separating our code. This will result in 2 API feature level bumps, but I think that is OK because we're separating out the two features clearly.</p>",
  "<p>In the first feature level, would it be impossible to actually follow a topic without using the API directly, such that the code is essentially there for testing but has no user-facing impact? In general, when splitting up a large change, it's often easiest to incrementally integrate if we don't need to think about intermediate versions with impacts like \"Now everyone gets push  notifications in topics they've participated in\" without any way to control it.</p>",
  "<p>I did a quick read through that PR, posting some minor comments. I think there's a product question to decide of whether we need all 5 things in the grid; the wildcard mentions setting in particular seems potentially excessive.</p>",
  "<p>But my read on the best commit structure is that I like the commit we have as written, end-to-end implementing the email notifications setting at the backend/API layer, and I think a good first PR would do that and ideally a similar commit for push notifications, since those are going to be extremely parallel code. And then if we've settled the product question for which others we want, we can potentially do (much smaller) commits for the desktop/audible settings as well.</p>\n<p>I'd probably prefer to avoid doing the desktop/audible/wildcard mention implementations.</p>",
  "<p>I think the other thing we probably will want to do is decide what we want the default values for these settings to likely be in a <a class=\"stream\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design\">#design</a> conversation, and just set that default in these initial migrations.</p>",
  "<p>Yeah I don't understand that either, but I'm probably content to just spell things out in our <code>matrix</code> sections in the future rather than trying to be clever.</p>",
  "<p>Is there any further testing we want to do for this? If we haven't done it yet, it'd be nice to do a by-hand upgrade sequence, say of a freshly installed Debian 10 server first to <code>main</code> and then to <code>bookworm</code>, or at least make CI do that for us once.</p>",
  "<blockquote>\n<p>In the first feature level, would it be impossible to actually follow a topic without using the API directly, such that the code is essentially there for testing but has no user-facing impact?</p>\n</blockquote>\n<p>I think we can take the same approach as we took while working on the \"Unmute Topics\" project, i.e.</p>\n<p>To use <a href=\"https://github.com/zulip/zulip/blob/b312a86adabf04efee4f7d3a12e6fc0150f35728/zerver/actions/user_topics.py#L63\"><code>do_set_user_topic_visibility_policy</code></a> in our tests to <code>Follow a topic</code>, and later we can add the option to Follow Topics via UI.</p>",
  "<p>[Quoting\u2026]</p>\n<p>I had in mind a complete split (meaning, yes, also implement UI for following a topic along with the first feature level bump). But first implementing email notifications and then push notifications also makes sense <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
  "<blockquote>\n<p>I'd probably prefer to avoid doing the desktop/audible/wildcard mention implementations.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/101-design/topic/notifications.20of.20Followed.20Topics/near/1572606\">Further discussion on this.</a> </p>\n<p>(Mentioning it to avoid confusion for future readers)</p>",
  "<p>We should probably look into this as an alternative to <code>fakeldap</code>, which we maintain mainly because it had been abandoned and we needed to functionality:</p>\n<p><a href=\"https://python-ldap-faker.readthedocs.io/en/latest/\">https://python-ldap-faker.readthedocs.io/en/latest/</a></p>\n<p>I learned about it from <a href=\"https://github.com/zulip/fakeldap/pull/22#issuecomment-1450875266\">https://github.com/zulip/fakeldap/pull/22#issuecomment-1450875266</a>.</p>\n<p>I have no reason to believe one or the other is better, and we could engage with the author on that question.</p>",
  "<p>So in <a href=\"https://github.com/zulip/zulip/pull/25713\">#25713</a>, there's interest in having Zulip support per-user settings for direct message conversations of various sorts.</p>\n<p>The challenge for doing this in Zulip is that while we could very easily hang data off the <code>Subscription</code> table for group direct message conversations just like we do for users' subscriptions to Streams, this is not possible for 1:1 private message conversations, because the internal database representation for those involves a single <code>Recipient</code> object for the user who the direct message was sent to, and the conversation is determined by the pair of that user's ID and the user ID of the sender.</p>",
  "<p>I think the most straightforward way to solve that problem would be to just change how we store 1:1 direct messages to have a group direct message conversation object (<code>Huddle</code> in the database right now, though we're definitely going to rename that eventually) for every direct message conversation, rather than having this weird special case of 1:1 direct messages in how the database stores things.</p>",
  "<p>I am not sure there would be any major downsides to such a refactor of our direct message conversation storage internals, other than the transition costs. I think the main one would be that we'd increase the size of the <code>Huddle</code> table by some substantial multiplicative factor like 5-10; it's not exactly a large table and is rarely accessed.</p>",
  "<p>And I think it might come with significant benefits in terms of removing the need to have special case logic like this:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># If the private message is just between the sender and</span>\n<span class=\"c1\"># another person, force it to be a personal internally</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recipient_profiles_map</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">in</span> <span class=\"n\">recipient_profiles_map</span><span class=\"p\">:</span>\n    <span class=\"k\">del</span> <span class=\"n\">recipient_profiles_map</span><span class=\"p\">[</span><span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">recipient_profiles_map</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recipient_profiles_map</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"p\">[</span><span class=\"n\">user_profile</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">recipient_profiles_map</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">Recipient</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"o\">.</span><span class=\"n\">recipient_id</span><span class=\"p\">,</span>\n        <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">Recipient</span><span class=\"o\">.</span><span class=\"n\">PERSONAL</span><span class=\"p\">,</span>\n        <span class=\"n\">type_id</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\"># Otherwise, we need a huddle.  Make sure the sender is included in huddle messages</span>\n<span class=\"n\">recipient_profiles_map</span><span class=\"p\">[</span><span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sender</span>\n\n<span class=\"n\">user_ids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">recipient_profiles_map</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">get_huddle_recipient</span><span class=\"p\">(</span><span class=\"n\">user_ids</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>I agree that there would be some transition costs here, but this feels like a really good idea to me.  Insofar as you always have to think about <code>Huddle</code> logic in the backend, you might as well make it support the 1:1 case and eliminate a lot of code.</p>",
  "<p>I have some nostalgic fondness for the \"Huddle\" name, but I also agree that it's probably overdue for a rename, haha. <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
  "<p>There has always been a ton of fiddly code on the JS side as well related to this general problem.  (Which possibly means you should be a little careful about transition costs, but I think the long-term changes would be good.)</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/25640\">#25640</a> currently implements the email aspect of this feature completely, but the migration file adds all the user settings at once. Would it be better to have multiple migrations for the different settings (each of the once we implement that notification type completely)?</p>",
  "<p>IMO multiple migrations should not be a problem?</p>",
  "<p>The other option is to add only the fields for email/push notification settings now (since we're sure we want to implement them) and add the other fields based on whatever we decide in <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/notifications.20of.20Followed.20Topics\">#design &gt; notifications of Followed Topics</a></p>",
  "<p>I think, it was decided to add all those fields, as <a href=\"#narrow/stream/101-design/topic/notifications.20of.20Followed.20Topics/near/1572606\">mentioned here</a>.</p>",
  "<p>Yeah, structurally migrations that add fields to the UserProfile model are slightly disruptive to deploy (effectively there's a window between when the database migration is applied and the server is restarted into the new version where user creation will throw an exception), and if we're going to do all 5 and feel confident in their names, it's better to just do them all up front to only pay that (small) cost once.</p>",
  "<p>Thoughts on what we should rename it to? <code>DirectMessageGroup</code> is the most natural option in my mind.</p>",
  "<p>I'd appreciate feedback on my proposal to move Django <code>logging</code> output to use <code>stdout</code> rather than the default of <code>stderr</code>, see <a href=\"https://github.com/zulip/zulip/pull/25750\">#25750</a> / <a href=\"https://github.com/zulip/zulip/pull/23937\">#23937</a>. I think we're using <code>redirect_stderr=true</code> in all our supervisor jobs already, so this mostly affects manually running things on the command line and maybe cron jobs.</p>",
  "<p>Looking at the original motivation:</p>\n<blockquote>\n<p>otherwise it's hard to determine if anything is wrong with backup/export</p>\n</blockquote>\n<p>That\u2019s what exit codes are for, no?</p>",
  "<p>My main concern is that this could have weird side effects on commands like <code>manage.py showmigrations</code> where <code>upgrade-zulip-stage-2</code> is parsing its stdout.</p>",
  "<p>Yeah, probably that's the right thing to audit for.</p>",
  "<p>I am more motivated by the console logging output that we've ourselves written for management commands being primarily written/intended to be informative output, not error output, and thus conceptually something belonging in <code>stdout</code>. </p>\n<p>I was unable to find any useful references on why Django picked that default, but the <code>showmigrations</code> case, or deprecation warnings that Django issues itself might be the sort of thing that motivates it.</p>",
  "<p>I suppose the more conservative option for us would be to define a <code>console_stdout</code> separate output location, and configure the specific loggers that we control there.</p>",
  "<p>The logging system is not really intended for stuff that belongs in stdout in the first place. That\u2019s what <code>print()</code> is for.</p>",
  "<p>We use the Django/Python logging system in a number of places to ensure that changes get logged to the log file for that subsystem, in addition for being printed, and that's definitely an expected use case for it. What I'm not sure about is whether it's worth the effort to make our configuration match our intention here; I mostly decided to work on this because it looked simple.</p>",
  "<p>The only drawback is that it seems like it'd be very easy to accidentally have more than one 1:1 DM for a pair of users.</p>",
  "<blockquote>\n<p>Effectively there's a window between when the database migration is applied and the server is restarted into the new version where user creation will throw an exception</p>\n</blockquote>\n<p>Hmm, ideally, how are such cases dealt with in a system where 1000s of users register per second?</p>\n<ul>\n<li>One way I can think of is that I have noticed StackOverflow announcing a maintenance period for their website, during which the website is read-only.</li>\n<li>But again, I haven't heard such things about Facebook, etc.</li>\n</ul>\n<p>(Not related to the feature; asking out of curiosity.)</p>\n<p>Also, what is the general window size (time duration) in the case of Zulip?</p>",
  "<p>When you call <code>client.get_messages</code> the narrow filter is modern:</p>\n<div class=\"codehilite\"><pre><span></span><code>narrow = [dict(operator=&quot;streams&quot;, operand=&quot;public&quot;)]\n</code></pre></div>",
  "<p>When you call <code>client.call_on_each_event(handle_event, event_types=[\"message\"], ...)</code> you have to use old style tuple narrows:</p>\n<div class=\"codehilite\"><pre><span></span><code>narrow = [[&quot;streams&quot;, &quot;public&quot;]]\n</code></pre></div>",
  "<p>That is obviously somewhat inconvenient, because it is fairly natural when developing an API program to start by testing with <code>get_messages</code> and then, once you have that working, switch over to <code>call_on_each_event</code>.  In fact, you may possibly want to support both at the same time.</p>",
  "<p>The evil thing, however, is that if you mistakenly call <code>call_on_each_event</code> with a new-style narrow, the API sends it off to the server with no warning that you are on the wrong schema.  And then the register event seems to happily accept the narrow, but when it actually processes the event, it interprets the narrow as always-return-false.</p>",
  "<p>I am still investigating, but there are two possible fixes here:</p>\n<ul>\n<li>Just solve it in the API client by either doing a basic type check to fail hard or just auto-downgrade the modern format</li>\n<li>Solve it on the server side.</li>\n</ul>\n<p>The latter seems smarter to me for a couple reasons.</p>",
  "<p>Apart from some mypy yuckiness, it seems like we could trivially upgrade this code to the modern format while staying backward compatible:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code> <span class=\"mi\">135</span> <span class=\"k\">def</span> <span class=\"nf\">build_narrow_filter</span><span class=\"p\">(</span><span class=\"n\">narrow</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">bool</span><span class=\"p\">]:</span>\n <span class=\"mi\">136</span>     <span class=\"s2\">\"\"\"Changes to this function should come with corresponding changes to</span>\n<span class=\"s2\"> 137     NarrowLibraryTest.\"\"\"</span>\n <span class=\"mi\">138</span>     <span class=\"n\">check_supported_events_narrow_filter</span><span class=\"p\">(</span><span class=\"n\">narrow</span><span class=\"p\">)</span>\n <span class=\"mi\">139</span>\n <span class=\"mi\">140</span>     <span class=\"k\">def</span> <span class=\"nf\">narrow_filter</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n <span class=\"mi\">141</span>         <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"message\"</span><span class=\"p\">]</span>\n <span class=\"mi\">142</span>         <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"flags\"</span><span class=\"p\">]</span>\n <span class=\"mi\">143</span>         <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">narrow</span><span class=\"p\">:</span>\n <span class=\"mi\">144</span>             <span class=\"n\">operator</span> <span class=\"o\">=</span> <span class=\"n\">element</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n <span class=\"mi\">145</span>             <span class=\"n\">operand</span> <span class=\"o\">=</span> <span class=\"n\">element</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div>",
  "<p>Apart from tests, though, it only has one caller, which is <code>ClientDescriptor</code>, although that method is supposed to be a pretty dumb bucket of parameters, so that might not be the right place either.</p>",
  "<p>Hrm, <code>events_register_backend</code> claims to be validating that the narrow is a tuple:</p>\n<div class=\"codehilite\"><pre><span></span><code> 76     narrow: NarrowT = REQ(\n 77         json_validator=check_list(check_list(check_string, length=2)), default=[]\n 78     ),\n</code></pre></div>",
  "<p>Well, the server is at least legitimately complaining to the client (insofar as the server is too inflexible to support the modern format):</p>\n<div class=\"codehilite\"><pre><span></span><code>{&#39;result&#39;: &#39;error&#39;, &#39;msg&#39;: &#39;narrow[0] is not a list&#39;, &#39;code&#39;: &#39;BAD_REQUEST&#39;}\n</code></pre></div>",
  "<p>So <code>do_api_query</code> has a retry loop, and it's called by <code>do_register</code>, which has its own retry loop.</p>",
  "<p>Ok, this is the same problem as <a class=\"stream-topic\" data-stream-id=\"137\" href=\"/#narrow/stream/137-feedback/topic/api.20client.20silent.20failure\">#feedback &gt; api client silent failure</a>, except that here it's ignoring validation of parameters, while there it is ignoring validation of API keys.</p>",
  "<p>Let's mostly talk over there about the API side of things.</p>",
  "<p>On the server side, fixing <code>build_narrow_filter</code> won't help anything, because the view layer at the edge of the server won't even let the modern format in.  So you basically have to fix <code>events_register_backend</code> to accept both flavors.</p>",
  "<p>Then the quick fix is that <code>e_r_b</code> just downgrades the modern version to tuples for its callees.</p>",
  "<p>The only slightly longer fix would be that it upgrades the ancient versions to dictionaries for its callees, and then we tweak all the callees.</p>",
  "<p>I saw about five tests that would have to be touched.</p>",
  "<p>I think we should check whether we can just move everything to the modern format; it's a lot less confusing with fewer backwards compatibility bits.</p>",
  "<p>For self-hosted systems, we do migrations with the server down, since it's generally pretty easy for an individual organization to take a minute of downtime, and usually all migrations finish in less than that on a single-organization system.</p>",
  "<p>I don't have time to write up how Zulip Cloud manages things in detail, but if someone who knows what they're doing is managing it, it's possible to make the window between the migration being applied and the relevant part of the server being restarted be a few seconds, and the downtime impact of a few seconds of downtime of any form is pretty minimal, but especially when it's a thing that each user does once per account.</p>",
  "<p>For migrations on tables like <code>Message</code>, where a brief downtime would affect every user, not just the users joining that moment, we usually do a series of migrations that each can be done without downtime, where you first add a nullable column, and then fill it, and then make it not nullable anymore.</p>",
  "<p>This is probably an interesting example of a complex such migration:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ls zerver/migrations/*bigint*\nzerver/migrations/0238_usermessage_bigint_id.py\nzerver/migrations/0239_usermessage_copy_id_to_bigint_id.py\nzerver/migrations/0240_usermessage_migrate_bigint_id_into_id.py\nzerver/migrations/0241_usermessage_bigint_id_migration_finalize.py\n</code></pre></div>",
  "<p>I think that's what <code>huddle_hash</code> is for -- we have a <code>UNIQUE</code> index on a hash of the pair of user IDs. (With modern databases, probably there's a fancier thing we could do that skips the hash).</p>",
  "<p>(And we already would have that problem for groups of 3 users anyway, if we didn't have a way to prevent it).</p>",
  "<p>PostgreSQL has had array fields <a href=\"https://www.ucolick.org/~de/PG/OldManual/advanced.html#arrays\">forever</a>, and Django has supported them <a href=\"https://docs.djangoproject.com/en/1.8/releases/1.8/#new-postgresql-specific-functionality\">since 1.8</a>.</p>",
  "<p>Yeah, we've not touched the Huddle model since 2013; I think I remember being annoyed that Django didn't support it.</p>\n<p>The main work would be just making sure we get the indexes right, which despite <a href=\"https://docs.djangoproject.com/en/4.2/ref/contrib/postgres/fields/#indexing-these-fields\">https://docs.djangoproject.com/en/4.2/ref/contrib/postgres/fields/#indexing-these-fields</a> is probably easy for our use case, since the only query we have a reaason to do on that table is \"Given this exact list of user IDs, find me the object that corresponds to that\".</p>",
  "<p>Yeah the default B-tree index should do what we need there. (A hash index would be better except those <a href=\"https://www.postgresql.org/docs/current/indexes-unique.html\">can\u2019t be declared unique</a> for some reason.)</p>",
  "<p>I would like to work on fixing this.  I currently don't have a dev environment for Zulip.  What is the latest status of dev droplets?  I did some pretty cursory searches, and it appears there has at least been some progress in late 2022 on this?</p>\n<p>I am also available to do remote pairing with somebody on this (assuming, of course, that they have a working dev environment).  I am pretty experienced with this type of change, and it's not rocket science, but it seems like this will be at least a couple hours of work.</p>",
  "<p>(experienced but rusty)</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/25824\">#25824</a></p>",
  "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"137\" href=\"/#narrow/stream/137-feedback/topic/droplet.20setup\">#feedback &gt; droplet setup</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>As a data-point here, ZT currently uses tuple narrows, for historical reasons. It's possible that this started with one of these methods Steve mentioned and then generalized to everything we have now, with the narrow format still being supported in the general calls.</p>",
  "<p>Yay, thank you.</p>",
  "<ul>\n<li><a href=\"https://code.djangoproject.com/ticket/34603\">https://code.djangoproject.com/ticket/34603</a> <code>~Q()</code> incorrectly interpreted as full rather than empty</li>\n<li><a href=\"https://code.djangoproject.com/ticket/34604\">https://code.djangoproject.com/ticket/34604</a>  On databases lacking <code>XOR</code>, <code>Q(\u2026) ^ Q(\u2026) ^ Q(\u2026)</code> wrongly interpreted as exactly-one rather than parity</li>\n</ul>",
  "<p>Interesting. I'm kinda surprised postgres is one of the databases without a built in XOR.</p>",
  "<p>Just because usually when there's a feature that only some databases supported by Django have, usually postgres is one of the ones that supports it.</p>",
  "<p>Hey everyone, we have resumed work on the \"@topic mention\" feature. (<a href=\"https://github.com/zulip/zulip/pull/22829\">#22829</a>)</p>\n<p>PR: <a href=\"https://github.com/zulip/zulip/pull/25828\">#25828</a></p>\n<p>We have a <a href=\"https://github.com/zulip/zulip/pull/25828#discussion_r1210158168\">naming question</a>:</p>\n<p>Currently, we have:<br>\n<code>wildcards = frozenset([\"all\", \"everyone\", \"stream\"])</code></p>\n<p>The PR adds:<br>\n<code>topic_wildcards = frozenset([\"topic\"])</code></p>\n<p><span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> suggested renaming <code>wildcards</code> to <code>stream_wildcards</code>, which also makes sense to me.<br>\n<code>stream_wildcards</code>:  alias to mention everyone in the stream.<br>\n<code>topic_wildcards</code>:  aliases to mention everyone in the topic.</p>\n<p>Also, we aren't planning to add a separate flag for <code>topic_mentioned</code> to <code>UserMessage</code>.<br>\nSo, We will have <code>topic_wildcards</code> and <code>stream_wildcards</code> internally which will set the standard <a href=\"https://github.com/zulip/zulip/blob/3c60e538f9f788f5fe2d731466725d7ccd77c13f/zerver/models.py#L3305\"><code>wildcard_mentioned</code> flag</a> of <code>UserMessage</code>.</p>\n<p>Thoughts?</p>",
  "<p>So currently in CI, <code>test-backend</code> takes over 8 minutes to run: <code>Ran 4445 tests in 492.886s</code> (See, for example, <a href=\"https://github.com/zulip/zulip/actions/runs/5134615701/jobs/9238870150?pr=25849\">https://github.com/zulip/zulip/actions/runs/5134615701/jobs/9238870150?pr=25849</a>)</p>",
  "<p>Now, everything is slower with <code>--coverage</code>, but I still feel like that timing has regressed more than I would expect over the last few years, which makes me think it might be a good idea to profile it and see if there's something unexpectedly expensive that we're doing.</p>",
  "<p>We have <code>./tools/test-backend --profile</code>, so the work is mostly running that and checking the results.</p>",
  "<p>I may eventually move this topic to <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a>, but I am staying here for now.  I have started to do work on making the backend support the more modern format for specifying narrows, in which you use a dictionary instead of a tuple.</p>",
  "<p>I have started my work kind of from the inside out.  In other words, I am not yet broadening the set of acceptable types that the server accepts at the edge; instead, I am just making the internal code, particularly <code>build_narrow_filter</code>, more consistent with other server-side code.  I want <code>build_narrow_filter</code> to work with dictionaries instead of tuples.  Even though that's not a technically necessary thing to do to satisfy the customer's request (the customer being me, haha), I think it makes a ton of sense internally.</p>",
  "<p>The code to handle narrow filters for event registration/propagation is actually independent from the code to fetch messages.  The former just filters messages in Python, whereas the latter constructs smarter queries to the database itself.</p>",
  "<p>So the code-quality considerations are more about consistency than pure code reuse.</p>",
  "<p>It turns out that the existing code for both narrow codepaths is kind of sloppy in terms of mypy types, so we either specify a list of tuples or a list of <code>[str, Any]</code> dictionaries in most places.</p>",
  "<p>So that got me to thinking about whether the internal code should use <code>dataclass</code>.  My inclination here is definitely yes.  There are some nuisances, though.  The Python test code, for example, tests the method using a JSON fixture.  This is a pretty reasonable decision, I think, but it might not be completely intentional.</p>",
  "<p>If I decide to switch over to a <code>dataclass</code> approach, I am gonna have to change from the JSON fixture to pure Python.  I <strong>believe</strong> that will be an improvement, but I am not entirely sure.</p>",
  "<p>I am sort of thinking aloud here to get any initial reactions.  I need to double-check that the JSON fixture doesn't have some strange ancillary benefit that I am not aware of (such as being used for schema checks or something).</p>",
  "<p>And it's not like passing dictionaries around is terrible.  Dictionaries are a clear improvement over tuples, and all the fetching code still uses dictionaries, and I am not quite ready to sign up to converting all that code over to dataclasses.</p>",
  "<p>Probably the moderate approach is here is to use dictionaries internally, and then just make the mypy types a little more precise (i.e. avoid <code>Any</code> in a few places).</p>",
  "<p>In the event-handling codepath, the dictionaries currently only need to have <code>operator</code> and <code>operand</code> as keys.  Eventually I think we want to support <code>negated</code> fields as well, as that's a fairly easy change to make, and then our event-side features would be on par with the fetch-side features.</p>",
  "<p>BTW I am still interested in pairing with somebody on this effort.  I can now be either the driver or the passenger.  My new Zulip droplet is fine for me to do some coding on my side, but I can also screen-share with somebody else.  I can push up the changes I have made so far, which are mostly editing the aforementioned JSON fixture.</p>",
  "<p>I would actually prefer the passenger/navigator role on this FWIW.  I think the changes here are mostly straightforward, and I can just help folks track down relevant code and maybe steer them away from major pitfalls.</p>",
  "<p>Taking the \"Follow Topics\" project into consideration, we will have the variable names, like:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">stream_wildcard_mention_user_ids</span>\n<span class=\"n\">topic_wildcard_mention_user_ids</span>\n<span class=\"n\">followed_topic_wildcard_mention_user_ids</span>\n</code></pre></div>",
  "<p>I'm going to use this topic for backend discussions for Tus<br>\nI went through some libraries, and none of them were maintained and fully fit for our project, So I'm going with our own implementation.<br>\nAnother reason we are not using django-tus because it send it's own type of response and headers. we can create our own fork and maintain that but the codebase is not that large, So I'm choosing to go with implementation in our current server, taking reference from Django-tus. </p>\n<p>Currently we are having two file upload backends, LocalUploadBackend and S3UploadBackend, here we have option is creating third one for chunk upload support, continuing support for current API. </p>\n<p>Before that, I thought it would work if we send first batch of data in post request itself and create file using that, than we send patch request if there is additional data, this way we will be not deprecating our current API. But this comes with its own complications at Uppy side, because Tus plugin sends only meta data in post request and there is no method to send first batch of data in this request.</p>\n<p>Or or we have option to make changes in our LocalUploadBackend, deprecating our current API.<br>\nIs it okay to depreciate the current API ?</p>",
  "<p>Those names all sound good to me.</p>",
  "<p>I'm reviving <a href=\"https://github.com/zulip/zulip/pull/23116\">#23116</a> so that we can complete the migration from hacking random stringified Python objects into <code>TextField</code> to storing just <code>dict</code>s with <code>JSONField</code>.</p>",
  "<p>Just incorporated the recent change in <a href=\"https://github.com/zulip/zulip/pull/25625\">#25625</a>. Most of the migration aren't that stale, so no major updates are needed.</p>",
  "<p>I just need to go through the commits again to make sure that everything else is still up-to-date.</p>",
  "<p>Those file upload backends are for how files are stored, not how they're uploaded. We want to support both here. So I think we perhaps want to rename those classes to be clearer, but certainly it doesn't make sense for this to be a third class like those.</p>",
  "<p>I have went through the commits and made some changes organizing them. The plan is to organize them into four PRs of incremental changes.</p>\n<ol>\n<li><a href=\"https://github.com/zulip/zulip/pull/25877\">#25877</a>: Prepare zilencer for a API change that adds compatibility support for <code>extra_data</code> being either <code>str | None</code> or <code>dict</code>.</li>\n<li><a href=\"https://github.com/zulip/zulip/pull/25878\">#25878</a> : Add <code>extra_data_json</code>, a transitional field that will replace the original <code>extra_data</code>. This implements a double-write mechanism such that the newer entries of audit log models will always have it populated. As long as the older entries get backfilled, <code>extra_data_json</code> will be consistent with <code>extra_data</code> for all audit logs.</li>\n<li><a href=\"https://github.com/zulip/zulip/pull/25879\">#25879</a>: A backfilling migration that processes all existing audit log entries in chunks and updates their <code>extra_data_json</code> by looking at <code>extra_data</code>. We expect that the server does not contain extra data converted to string using <code>str</code> to have <code>Decimal</code> values.</li>\n<li><a href=\"https://github.com/zulip/zulip/pull/23116\">#23116</a>: The final migration that renames <code>extra_data_json</code> to <code>extra_data</code>, safely dropping the old values. This also contains all the changes necessary so that the server interacts with <code>extra_data</code> being a <code>JSONField</code> instead of <code>TextField</code>.</li>\n</ol>",
  "<p>Okay, I'm almost done with a initial working prototype, will re-factor the code after that and will post the approach here. Currently I'm updating the LocalUploadBackend. Also from security side, I will list down the points after the prototype.<br>\nThank you!!</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"22333\">Brijmohan Siyag</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1583044\">said</a>:</p>\n<blockquote>\n<p>I went through some libraries, and none of them were maintained and fully fit for our project, So I'm going with our own implementation.</p>\n</blockquote>\n<p>I'm not wild about maintaining our own implementation of the protocol, which has a bunch of fiddly bits to it (e.g. <a href=\"https://tus.io/protocols/resumable-upload#concatenation\">concatenation</a>, which is required for parallel uploads).</p>\n<blockquote>\n<p>will re-factor the code after that and will post the approach here. Currently I'm updating the LocalUploadBackend.</p>\n</blockquote>\n<p>When using the S3 backend, the simplest implementation is to store the chunks locally and upload the complete file all at once, when we have all of the parts locally.  That has the nice property that the Backend implementation stays essentially unchanged -- give it all of the bytes in the file, and it will durably store them.  However, it means that there is now file upload state stored on the server, which would have to be copied over if someone were to transition the server over to another instance.  It also defers all of the data transfer into S3 until the very env, making the final upload take potentially a very long time.  We may need to extend the LocalUploadBackend and S3UploadBackend to be aware of chunked uploads, and use the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/mpuoverview.html\">S3 multipart upload</a> APIs.</p>\n<p>Keep in mind that we will need some way to garbage-collect partial file uploads.  The <a href=\"https://tus.io/faq#how-are-pauseresume-handled-when-should-i-delete-partial-uploads\">TUS FAQ suggests a week</a>.</p>",
  "<p>Okay, I just finished a working prototype of this, which currently do upload a file in chunks, of-course with patches.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1585585\">said</a>:</p>\n<blockquote>\n<p>I'm not wild about maintaining our own implementation of the protocol, which has a bunch of fiddly bits to it (e.g. <a href=\"https://tus.io/protocols/resumable-upload#concatenation\">concatenation</a>, which is required for parallel uploads).</p>\n</blockquote>\n<p>I went through it, and <del>I think I implemented it already</del> (It will require some further effort to get it done.), Will test it out and let you know. If we don't use our own implementation than we will have to subclass the library and do some patches obv, because if we look at django-tus, it sends its own response, generates names in own way and many more, which I think we will not want at all.</p>",
  "<p>Okay, Django-tus doesn't have concatenation implementation, I went through working of concatenation and some other server-side libraries(Java, Rust) which implements this. I was totally wrong that it is implemented already. Now, I believe that adding support for this will be a little complex, but we don't have any other options because there is no other library that could accomplish this for us.</p>",
  "<p>We could run <a href=\"https://github.com/tus/tusd\">tusd</a> (which is their reference implementation of the server side of the protocol) and proxy requests to in from nginx.</p>\n<p>That gets a little complicated in that we'd need to make those <code>internal</code> redirects from Django so we could auth them.</p>",
  "<p><a href=\"https://github.com/tus/tusd/blob/main/docs/faq.md#can-i-run-custom-verificationauthentication-checks-before-an-upload-begins\">https://github.com/tus/tusd/blob/main/docs/faq.md#can-i-run-custom-verificationauthentication-checks-before-an-upload-begins</a></p>",
  "<p>I'll go through it thoroughly tomorrow, while working on the current prototype.<br>\nThank you <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> !</p>",
  "<p>Okay I went through tusd, I should have asked before working on own implementation that are we open to a service apart.</p>\n<p>Tusd almost talks in headers, request body in patch request and no response at all, so no worries about response type (Also all requests will be handled by @uppy/tus)</p>\n<p>For authentication/authorization tusd provides blocking hooks (<code>pre-create</code> one we will be interested in), so that it will wait till the hook gets response from our application and than will begin creating file. There are also non-blocking hooks, which we can utilize, like <code>post-finish</code>, <code>post-create</code> to create Attachment and transferring file at right place. (Have to think about the problem discussed in <a class=\"stream-topic\" data-stream-id=\"2\" href=\"/#narrow/stream/2-general/topic/TUS\">#general &gt; TUS</a>) </p>\n<p>There are two major types of hook, HTTP(S) and File Hooks. I think HTTP(S) is what we will be using, as it will be easy to use because we already have request handling mech. </p>\n<p>I created a test server and used it, while in neutral state it was only using avg 10MB of memory.</p>",
  "<p>If we can get the option to define a custom path before creating the file, we won't have to transfer the file once the upload is complete. I looked around for this, but couldn't find one. Should I open a issue at tusd ?</p>",
  "<p>What would we be asking for -- some sort of parsing of the response to the pre-create hook which tells tusd where to store the file?</p>",
  "<p>Yes</p>",
  "<p>That seems like a not-unreasonable thing to request -- but I'm not entirely sure it's necessary.  In both S3 and the filesystem, renaming a file is relatively straightforward, and doesn't depend on the size of the file being renamed.</p>",
  "<p>Got it, Thanks. So should I drop current own implementation and go with tusd ?</p>",
  "<p>I think it's worth doing some exploration of using tusd.  I don't think we have all that many requirements that would force us towards maintaining our own implementation of the protocol.</p>",
  "<p>After reviewing <a href=\"https://github.com/zulip/zulip/issues/25906\">https://github.com/zulip/zulip/issues/25906</a>, I'm thinking it might be worth doing some more little configuration tweaks to reduce Zulip's memory requirements for low-memory systems. Each <code>zulip</code> process seems to be about 140MB on that system. I see two opportunities for optimization:</p>\n<ul>\n<li>One idea is to reduce <code>uwsgi_processes</code> from the default of 4 (for systems under 4GiB of total memory) from 4 to some lower number; maybe 2 or 3. I'm not sure this is a great idea; cutting the parallelism too much will result in latency issues.</li>\n<li>A possibly easier idea would be trying to combine/reduce the two <code>delivery_scheduled_*</code> workers, which currently are each independent processes from the multi-threaded <code>process_queue</code> bundle. </li>\n<li>Doing some memory profiling to see if there's any large third-party dependencies that we're hardly using that we should switch to a conditional/deferred import. E.g. maybe <code>talon</code> is huge and we should only be importing it in the email gateway process.</li>\n</ul>",
  "<p>I think the last option is likely to be the most fruitful if there are good tools for doing it; I've not investigated that topic.</p>",
  "<p>I have been working on <a href=\"https://github.com/zulip/zulip/pull/23634\">#23634</a> to generate audit entries for <code>UserGroup</code>-related database operations. Currently, there are 8 events:</p>\n<div class=\"codehilite\"><pre><span></span><code>USER_GROUP_CREATED = 701\nUSER_GROUP_DELETED = 702\nUSER_GROUP_USER_MEMBERSHIP_ADDED = 703\nUSER_GROUP_USER_MEMBERSHIP_REMOVED = 704\nUSER_GROUP_SUBGROUP_MEMBERSHIP_ADDED = 705\nUSER_GROUP_SUBGROUP_MEMBERSHIP_REMOVED = 706\nUSER_GROUP_NAME_CHANGED = 707\nUSER_GROUP_DESCRIPTION_CHANGED = 708\n</code></pre></div>",
  "<p>In particular, I'm seeking some feedback on how we should track the subgroup changes.<br>\nThe current approach is to populate audit log entries for subgroups only, not supergroups.</p>",
  "<p>This is sufficient to keep track of the <code>GroupGroupMembership</code> changes, but could it be helpful if we generate audit log entries bidirectionally, so that <code>modified_user_group</code> also has audit log entries about its supergroup changes?</p>",
  "<p>You mean some sort of <code>USER_GROUP_PARENT_GROUP_CHANGED</code>  event?</p>",
  "<p>Right</p>",
  "<p>Yeah, that seems useful to track as an audit log entry.</p>",
  "<p>A slight concern is that it can be redundant because such audit log entries should always appear with a <code>USER_GROUP_SUBGROUP_MEMBERSHIP_*</code> event, and we have to maintain this invariant.</p>",
  "<p>It will probably make querying parent group changes of a specific user group easier, but I'm not sure. Can we achieve the same thing with <code>JSONField</code> without this additional event type?</p>",
  "<p>Are we planning to do the join-throughs to generate <code>USER_GROUP_MEMBERSHIP_ADDED</code> events to every parent group?</p>\n<p>e.g. if there's a <code>Tall People</code> group with a <code>Very Tall People</code> subgroup, and <span class=\"user-mention silent\" data-user-id=\"5402\">LeBron</span> is added to <code>Very Tall People</code>, does that generate one <code>USER_GROUP_MEMBERSHIP_ADDED</code> or two?</p>",
  "<p>We are only tracking direct membership changes right now</p>",
  "<p>OK, so already we have the property that searching for <code>modified_user_group</code> isn't enough to know how membership changed.  But at least from that query, it is well-indexed such that one can iterate <em>down</em> into the subgroups that pop up via <code>SUBGROUP_MEMERSHIP_*</code>.</p>\n<p>We need <code>PARENT_GROUP_CHANGED</code> because otherwise we don't have any indexed way to look <em>up</em> and find out when we were moved to another subgroup -- we have to limit by <code>realm</code> and <code>SUBGROUP_MEMBERSHIP_*</code> and check every <code>extra_data</code> to find out if it applies to the subgroup we care about.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span> <a href=\"#narrow/stream/3-backend/topic/Audit.20log.20for.20UserGroup/near/1586702\">said</a>:</p>\n<blockquote>\n<p>A slight concern is that it can be redundant because such audit log entries should always appear with a <code>USER_GROUP_SUBGROUP_MEMBERSHIP_*</code> event, and we have to maintain this invariant.</p>\n</blockquote>\n<p>I mean, that's what transactions are for. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Got it, that makes sense. Then there is the question that if we want to recursively generate audit log entries for indirect membership changes to a user group.</p>",
  "<p>I assume that our user groups should be a DAG in terms of their dependencies. So we <em>can</em> generate audit logs for indirectly related users.</p>",
  "<p>I'm not so sure about the quantity of data we are talking about, and its impact on the efficiency of calls that change the subgroup membership.</p>",
  "<p>I mean, we currently only prevent you from adding groups as subgroups if they're already direct subgroups:<br>\n<a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/user_groups.py#L232-L239\">https://github.com/zulip/zulip/blob/main/zerver/views/user_groups.py#L232-L239</a></p>\n<p>...so nothing enforces this is a DAG.</p>",
  "<p>AFAICT you're allowed to have:</p>\n<div class=\"codehilite\"><pre><span></span><code>A -&gt; B\nA -&gt; C\nB -&gt; C\n</code></pre></div>\n<p>...as well as:</p>\n<div class=\"codehilite\"><pre><span></span><code>A -&gt; B\nB -&gt; A\n</code></pre></div>\n<p>soooooo that's not great, particularly the latter.</p>",
  "<p>Hmm yeah, that's what I was thinking about. We can have loops then.</p>",
  "<p>A safe decision that we can make right now is to call these events <code>USER_GROUP_DIRECT_{USER,SUBGROUP,SUPERGROUP}_MEMBERSHIP_ADDED</code>, and decide later if doing this recursively is what we want.</p>",
  "<p>I mean, we <em>shouldn't</em> allow loops.  That's going to make things all kinds of bad.  It <em>should</em> be a DAG.</p>",
  "<p>AFAICT this API is live now, though?  So we have to potentially untangle those?</p>",
  "<p>Is it possible that we have deployments out there that are running and have cycles in their user groups? Will the application still work? We should probably add a check upon membership changes, and verify if the existing user groups satisfy the DAG invariant.</p>",
  "<p>Okay, I agree with you since adding support for all of the features TusD has (most of which are useful) would be incredibly costly\u00a0to implement\u00a0and maintain. <br>\nI just implemented working prototype of\u00a0TusD in a dev environment (without hooks), working fine at first. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1586577\">said</a>:</p>\n<blockquote>\n<p>I think it's worth doing some exploration of using tusd.</p>\n</blockquote>\n<p>Sure, I've already went through docs, will go through discourse of TusD. If you have any specific points\u00a0in mind to explore, please let me know.</p>",
  "<p>There's going to be some complexity to how to reconfigure it when folks switch from file to s3 backends.  We currently don't require a puppet application for that change, but I suspect we'll have to do one if we are using tusd.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/25913\">#25913</a> to track this. <del>We can also move the cycle-related discussions to another topic.</del></p>",
  "<p>10 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/Audit.20log.20for.20UserGroup\">#backend &gt; Audit log for UserGroup</a> by <span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span>.</p>",
  "<p>10 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/UserGroup.20cycles\">#backend &gt; UserGroup cycles</a> by <span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"4181\">@Guido BDFL</span> I asked the following question here, but I didn't get any answers.  Maybe you can provide some wisdom:</p>\n<blockquote>\n<p>So that got me to thinking about whether the internal code should use <code>dataclass</code>.  My inclination here is definitely yes.  There are some nuisances, though.  The Python test code, for example, tests the method using a JSON fixture.  This is a pretty reasonable decision, I think, but it might not be completely intentional.</p>\n</blockquote>\n<p>I kinda still lean toward using a dataclass (a couple days later), but it kinda pains me to rewrite the JSON fixtures into Python.  Not true pain, just something to mull over.</p>",
  "<p>In this case I would say that it's always good to use the best tool for the job, and if dataclass is the appropriate tool here then it's probably best to use it. JSON fixtures can be useful, but they can be a bit of a pain to maintain if you need to make a lot of changes. If you can rewrite the fixtures into Python code and use a dataclass, it will be much more maintainable.</p>",
  "<p>Folks, should I just do what the Guido bot advises me to do?  I was kind of leaning that way anyway.</p>",
  "<p>I don't think it's likely any subgroups actually exist other than the ones between system groups; we haven't documented this as a thing you can use anywhere. But I really thought we were using <code>get_recursive_subgroups</code> in this code path to ensure the DAG state; <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> certainly spent time on implementing that with enforcing a DAG in mind.</p>",
  "<p>Let's fix this promptly and backport the change to 7.x, but we should be able to audit whether any non-system group subgroups exist at all for Zulip Cloud; I'm expecting there to not be any.</p>",
  "<p>Yeah I don't think we want to do anything recursive with generating audit log entries -- we just want the audit log to cover the direct changes to group membership we made.</p>",
  "<p>Hi All, I am new to open source, but have some beginner level experience with developing web apps with Django. I recently claimed this issue. Would love if I could get some guidance on how to get started. Thanks!</p>",
  "<p>I tried creating a hook handler endpoint, Now the problem is TusD sets Host header on its own overriding the received one from client, and doesn't pass same even when Host is passed in <code>-hooks-http-forward-headers</code>(This accepts the list of headers to pass from request). </p>\n<p>In development we can set <code>X-Forwarded-Host</code> which will work fine, but we don't use this by default in production. And if we do use than we have to tell django by middleware to use <code>X-Forwarded-Host</code> if it is there, because TusD will send <code>Host</code> header always. <br>\nI have opened a issue regarding this in TusD.</p>\n<p>I have some queries - </p>\n<ul>\n<li>In production are we going to use proxy in-between hook request to django? or direct request to django server.</li>\n<li>Can we exempt csrf on hook request ? What will be security concern if we do so ?</li>\n<li>What about rate-limiting PATCH request ? Rate-limiters will work as expected, TusD provides <code>-behind-proxy</code> to pass all <code>X-Forwarded</code> headers.</li>\n</ul>",
  "<p>(it's helpful to link to issues and such when you mention having made them, so others don't have to go search to learn more -- here, <a href=\"https://github.com/tus/tusd/issues/959\">https://github.com/tus/tusd/issues/959</a>)</p>",
  "<p>Can we not read the original Host header our of the <code>HTTPRequest.Header.Host</code> of the JSON?<br>\n<a href=\"https://github.com/tus/tusd/blob/main/docs/hooks.md#the-hooks-environment\">https://github.com/tus/tusd/blob/main/docs/hooks.md#the-hooks-environment</a></p>",
  "<p>But django verifies csrf before we receive this in a view (Where it is not of any use ), Can we make django use this for verification ?<br>\nI'm curious why we have disabled <code>X-Forwarded-Host</code> in production? We can make nginx copy <del>this to Host</del> <code>Host</code> headers value to <code>X-Forwarded-Host</code> and use in django.</p>",
  "<p>You mean why we stopped setting <code>USE_X_FORWARDED_HOST = True</code> in <a href=\"https://github.com/zulip/zulip/commit/68bc9750661316e9705292ce59a24eecc119afb3\">68bc9750661316e9705292ce59a24eecc119afb3</a>?</p>\n<p>It complicates reasoning about the headers, and isn't generally necessary.  I'm also confused what you mean by \"We can make nginx copy this to Host and use in django\" -- we don't want to <em>lose</em> information by over-writing the <code>Host</code> header in general.  We can, if we need to, and just for requests we're proxying to <code>tusd</code>, have nginx add a <code>X-Forwarded-For</code> header from the Host header if it doesn't exist.</p>",
  "<p>Sorry, I made a mistake, I meant we can copy value of <code>Host</code> header to <code>X-Forwarded-Host</code>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1588703\">said</a>:</p>\n<blockquote>\n<p>You mean why we stopped setting <code>USE_X_FORWARDED_HOST = True</code> in <a href=\"https://github.com/zulip/zulip/commit/68bc9750661316e9705292ce59a24eecc119afb3\">68bc9750661316e9705292ce59a24eecc119afb3</a>?</p>\n<p>It complicates reasoning about the headers, and isn't generally necessary.  I'm also confused what you mean by \"We can make nginx copy this to Host and use in django\" -- we don't want to <em>lose</em> information by over-writing the <code>Host</code> header in general.  We can, if we need to, and just for requests we're proxying to <code>tusd</code>, have nginx add a <code>X-Forwarded-For</code> header from the Host header if it doesn't exist.</p>\n</blockquote>\n<p>And than tell django to use <code>X-Forwarded-For</code> header for CSRF verification ( Atleast for chunk upload endpoint ) ?</p>",
  "<p>We can disable CSRF verification for the internal hook endpoint.</p>",
  "<p>If it's not accessible from the outside world, there's no point in doing that verification.</p>",
  "<p>Is it okay\u00a0if we skip the csrf verification for the chunk upload endpoint? TusD does not do anything like this, and our primary file upload endpoint will be free of csrf verification.</p>",
  "<p>I've used <a href=\"https://github.com/DavidAnson/markdownlint\">https://github.com/DavidAnson/markdownlint</a> to clean up dangling and broken internal link references.  A bunch of the other things it checks are somewhat duplicative with prettier, but at very least the consistency checking seems useful to enable.</p>\n<p>Any objection to adding it as a linter for <code>.md</code> files?</p>",
  "<p>There's an <a href=\"https://github.com/paweldrozd/eslint-plugin-markdownlint\">eslint plugin</a> for it -- should we be using that, or the <a href=\"https://github.com/igorshubovych/markdownlint-cli\">cli tool</a>?</p>",
  "<p>Regardless of how it's integrated, here's its list of rules: <a href=\"https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md\">https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md</a></p>",
  "<p>It looks like they have a mode that <a href=\"https://github.com/DavidAnson/markdownlint/blob/main/doc/Prettier.md\">disables things that overlap with prettier</a>.</p>",
  "<p>Also we will not be able to send <code>X-Ratelimit-Limit </code> or any other headers in response.</p>",
  "<p>Some of its suggestions conflict with the nonstandard Markdown implementation we use in <code>api_docs/</code>, <code>help/</code>, <code>templates/</code>, and <code>zerver/webhooks/</code>.</p>",
  "<p>Is it easy to turn off just those rules?</p>",
  "<p>This is a great strategy, and it's been very helpful to be able to merge chucks of this.</p>",
  "<p>It\u2019s not so much a rule-by-rule problem; it\u2019s parsing the document as a different tree.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"5593\">@Vaibhav Rabber</span> , what is your thought on this?</p>",
  "<p>(deleted)</p>",
  "<p>How much RAM etc does tusd take by default?</p>",
  "<p>10-20 MB, I noticed of main process.</p>",
  "<p>OK, that's pretty small, great.</p>",
  "<p>OK. I encourage you do get a draft PR up using <code>tusd</code>, with liberal use of GitHub PR comments to note details like rate limiting that need attention -- I think that approach sounds promising and it'll be easier for us to decide details with that available to look at.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> I like the idea of a dataclass for passing data around internally; I've been happy with the result every time we've switched to one.</p>",
  "<p>Sounds good!</p>",
  "<p>I have opened <a href=\"https://github.com/zulip/zulip/pull/25987\">#25987</a> for this, but am not sure what should be the error message. Any ideas on the error message would be helpful.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/UserGroup.20cycles/near/1586734\">said</a>:</p>\n<blockquote>\n<p>AFAICT you're allowed to have:</p>\n<div class=\"codehilite\"><pre><span></span><code>A -&gt; B\nA -&gt; C\nB -&gt; C\n</code></pre></div>\n<p>...as well as:</p>\n<div class=\"codehilite\"><pre><span></span><code>A -&gt; B\nB -&gt; A\n</code></pre></div>\n<p>soooooo that's not great, particularly the latter.</p>\n</blockquote>\n<p>And just to confirm, are fine with the first case here? It satisfies the DAG constraints so we should be.</p>",
  "<p>The latter is a clear correctness issue, the former is more of a product / UI issue.</p>",
  "<p>I think we just want to enforce a DAG.</p>",
  "<p>So yes that first case is fine, and I expect someone to use it once this is running at scale.</p>",
  "<p>So I think <a href=\"https://github.com/zulip/zulip/pull/25932\">#25932</a> (replaces <a href=\"https://github.com/zulip/zulip/pull/25879\">#25879</a> which got auto-closed by GitHub being silly) is getting close to where we should look at integrating it.</p>",
  "<p>This is the big backfill migration to translate the existing <code>extra_data</code> to <code>extra_data_json</code>, and involves all the messy handling of cases where the old <code>extra_data</code> wasn't actually in the intended JSON-like format.</p>",
  "<p>Currently, the implementation basically logs anomalies that it finds, which is probably what we want for testing the migration against Zulip Cloud (i.e. planning to run it again once we've addressed all the bugs).</p>",
  "<p>But I guess I'm not sure if that's what we will want for self-hosting systems -- it's not clear what the remedy will be for a logged anomaly while a self-hosted is upgrading.</p>",
  "<p>One idea I had is that we could, in addition to logging, store a legacy <code>extra_data_string_invalidjson</code> on the JSON object in cases where it doesn't convert to JSON correctly in addition to any logging -- that would at least create the opportunity for a future migration to correct anything that got messed up after we debug it.</p>",
  "<p>I think in many cases I'd say that extra step isn't necessary -- except this is the audit log, which we really should try hard to not lose any data from.</p>",
  "<p>OK <span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> FYI -- is that an easy change to make?</p>",
  "<p>(If it's a ton of work, we might want to first test the migration with CZO and Zulip Cloud data to see if we actually expect there to be a material number of anomalies).</p>",
  "<blockquote>\n<p>store a legacy extra_data_string_invalidjson on the JSON object in cases where it doesn't convert to JSON correctly in addition to any logging </p>\n</blockquote>\n<p>Yeah, I think we can do that. It should only require some slight modifications to the backfill query.</p>",
  "<p>The PR is updated. Took a bit longer than I expected. Support for verifying console output in the test cases regardless of <code>--ban-console-output</code> flag was added, so that we can have it in the migration test case.</p>",
  "<p>I also made the migration store the overwritten data in <code>extra_data_json</code> as <code>inconsistent_old_extra_data</code> and <code>inconsistent_old_extra_data_json</code>. One thing I'm not sure about is that if there are existing entries that already have <code>inconsistent_old_extra_data</code>/<code>inconsistent_old_extra_data_json</code>, the migration will mark them as inconsistent as well if it gets run the second time.</p>",
  "<p>Also, we are doing <code>model.objects.get</code> calls for each inconsistent entry when updating. We do that to get <code>extra_data_json</code> back into a Python dict adding the new keys (assuming that the <code>JSONField</code> contains a <code>dict</code>). Perhaps there is a better way to write the query, but I'm not sure if there are many anomalies to justify such optimization.</p>",
  "<p>Update: added a check so that we do not backfill previously backfilled entries through previous runs of the migration.</p>",
  "<p>FTR the PR for this rename is <a href=\"https://github.com/zulip/zulip/pull/25978\">#25978</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> raised a question <a href=\"https://github.com/zulip/zulip/pull/23634#discussion_r1228932952\">here</a> on whether we should store all subgroup modifies in a single audit log object with <code>subgroup_ids</code> in the <code>extra_data</code>. The current implementation works by populating one audit log per usergroup-usergroup membership change, so each subgroup added/removed will have one audit log correspond to it.</p>",
  "<p>I think the proposal is great, because storing a single subgroup id for <code>USER_GROUP_DIRECT_SUBGROUP_MEMBERSHIP_ADDED</code> events might be unnecessary because we can retrieve the same information from <code>USER_GROUP_DIRECT_SUPERGROUP_MEMBERSHIP_ADDED</code> by looking at <code>modified_user_group</code>. Also, in case we want to know what user groups are changed in one transaction, having a list of ids might be more useful.</p>",
  "<p>If the only differences between the rows is in the <code>extra_data</code> field which isn't indexed, then I think we should combine the changes into a single row, yes -- if we're inserting one subgroup per row, there's ~never going to be a query which gets one of those rows but not the rest.</p>",
  "<p>(I'm somewhat intentionally ignoring the ability to index on data in <code>jsonb</code> columns, since I don't think that's generally a good idea)</p>",
  "<p>Okay, I have created a draft PR <a href=\"https://github.com/zulip/zulip/pull/26004\">#26004</a> (Not ready for review.), this implements the working prototype in development setup. I have <a href=\"https://github.com/tus/tusd/issues/388#issuecomment-1587974794\">talked</a> to TusD maintainer and they are trying to do release v2 of TusD in next two months. That release will solve almost all the problems we are facing currently, Which includes <code>X-RateLimit-Limit</code> header sending and sending the final URL to the client using pre-finish hook. I have used v1 for now, but they have pushed the <a href=\"https://github.com/tus/tusd/tree/v2\">v2 code</a> (Which have what we needs) to a branch which we can use for development.<br>\nSo I want to know that is it okay if we use that branch for development ?</p>",
  "<p>They <a href=\"https://github.com/tus/tusd/issues/388#issuecomment-1588994095\">wrote</a>:</p>\n<blockquote>\n<p>There is no clear release date but we hope to finish v2 in the next two months.</p>\n</blockquote>\n<p>That phrasing makes me a little wary of relying on this release date.  Also that the <a href=\"https://github.com/tus/tusd/pull/672#commits-pushed-8fd1836\">first commits on the <code>v2</code> branch are from two years ago</a>, and there are still quite a few <a href=\"https://github.com/tus/tusd/pull/672\">remaining items on their checklist</a>.  That makes me a little wary of using it before its official release, or blocking merging this feature on them releasing 2.0.</p>\n<p>Can you explicitly list the challenges we have with using v1, and their impact?</p>",
  "<p>Okay,</p>\n<ul>\n<li>\n<p>The major one is we are not able to send the final upload URL to client, currently in the PR I have calculated that in client side by sending the realm_id, and the file_id which tusd sends. That is '{realm_id}/{file_id}/{file_name}', now problem is we have to duplicate the code of sanitizing the file_name to sync with server. Also we have to store files in realm_id folder itselft, instead of what we have currently storing inside 256 subdirectories to avoid a big directory. This will also change our directory structure if we merge the PR before v2. </p>\n</li>\n<li>\n<p>Sending the rate limit headers, but for patch request it will not be possible even in v2. Before this the question is will we be rate-limiting patch requests?</p>\n</li>\n</ul>\n<p>Your concern makes sense and these are not big problems to handle. So I think we can stick to the v1. We can watch for the release of v2 and later migrate to that. One good thing in v1 is that it sends the django 4xx/5xx response as it is to the client.</p>",
  "<p>For 256 directories, we can use file_id's first two letters to make a subdirectory and client can also do this to generate the URL. In this sub-directories will be more than 256, but I think this shouldn't be a problem.</p>",
  "<p>When adding a subgroup B to a user group A, we do a <a href=\"https://github.com/zulip/zulip/commit/ea1357be668112b3e96d82776c6bbc71f60d76f2\">check</a> to see if the B already recursively contains subgroup A. Let's say this is transaction T1.</p>",
  "<p>I think this is fine in a world where the transactions are all serializable. But it appears that we potentially have a race condition when the recursive query that gets all the subgroups finishes before another insertion is complete.</p>",
  "<p>Suppose that in transaction T2, A is being added to user group C, and that C is a subgroup of B;<br>\nit occurs that A gets added to C after the recursive check in T1. We proceed to add B to A.</p>",
  "<p>In the default <a href=\"https://www.postgresql.org/docs/current/transaction-iso.html#XACT-READ-COMMITTED\">read committed isolation level</a>, even if we put the queries inside a single <code>atomic.transaction</code> block, it is still subject to <em>phantom reads</em>. <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"https://github.com/zulip/zulip/pull/23634#discussion_r1230325201\">suggested</a> a similar issue in the backfilling migration for audit log entries of user group membership changes.</p>",
  "<p>We could create <code>SERIALIZABLE</code> transactions with <a href=\"https://django-pgtransaction.readthedocs.io\">django-pgtransaction</a>.</p>",
  "<p>A <a href=\"https://www.postgresql.org/docs/current/transaction-iso.html#XACT-SERIALIZABLE\">comparison</a> between <em>Serializable</em> transactions and <em>Read Committed</em>/<em>Repeatable Read</em> transactions:</p>\n<blockquote>\n<p>The monitoring of read/write dependencies has a cost, as does the restart of transactions which are terminated with a serialization failure, but balanced against the cost and blocking involved in use of explicit locks and SELECT FOR UPDATE or SELECT FOR SHARE, Serializable transactions are the best performance choice for some environments.</p>\n</blockquote>\n<p>Because <code>SERIALIZABLE</code> transactions can fail:</p>\n<blockquote>\n<p>It is important that an environment which uses this technique have a generalized way of handling serialization failures (which always return with an SQLSTATE value of '40001'), because it will be very hard to predict exactly which transactions might contribute to the read/write dependencies and need to be rolled back to prevent serialization anomalies.</p>\n</blockquote>\n<p>we need to have a standard way to deal with serialization failures. Depending on how often this happens, would multiple retries and fallback to a JsonableError suffice?</p>\n<p>We also need to use the isolation level consistently. This should result in some refactorings with all the writes related to user groups.</p>",
  "<p>There are ways to write this with the default <em>read committed</em> isolation level (e.g. taking \"SELECT FOR UPDATE\" locks whenever you are recursively checking a group's contents, to prevent edits to the set of things in them) but these also admit the possibility of deadlock -- if group A is added into group B in T1, and group B is added into group A in T2, postgres will detect a deadlock and abort one of them.  I suspect that any solution to this sort of problem may have some possibility of deadlock or serialization error.</p>\n<p>We do have deadlock possibilities elsewhere in the codebase, and when PostgreSQL fails, we just 500.  This is probably fine at the scale we're at -- as long as we expose some sort of error message to the user, they're free to retry.  That sort of behaviour is probably totally ifne here as well.  I am very wary of hiding retry loops in the middle of code like this -- you have to be careful to include every database ACL and consistency check inside the transaction, or the retry will happily put you into invalid state based on some properties which were passed into the transaction by way of Python variables whose values are now out of date.</p>",
  "<p>I think <code>SELECT FOR UPDATE</code> takes a lock on the rows it returns, but does not take a lock on the nonexistence of the rows it doesn\u2019t return\u2014those predicate locks are only used under <code>SERIALIZABLE</code> isolation.</p>",
  "<p>Agree, and that's what can result in phantom reads.  But if A has-many-B, selecting for update the B's provides no guarantee -- but selecting A <code>FOR UPDATE</code>, if you're consistent about doing that before updating B's membership in A, can provide that guarantee.</p>",
  "<p>I don\u2019t follow. Consider two empty groups being added to each other simultaneously. Both processes do <code>SELECT FOR UPDATE</code>, they both return zero rows and take zero locks, they both decide to go ahead, both transactions commit, and now you have a cycle.</p>",
  "<p>Oh okay I see. You want to lock the group rows themselves, not the membership rows.</p>",
  "<p>So before adding group foo to group bar, either (a) we lock foo, bar, and all recursive supergroups of bar, or (b) we lock foo, bar, and all recursive subgroups of foo?</p>",
  "<p>Yeah, locking the group rows -- sorry for being unclear.  And if we're adding <em>to</em> group bar, I think (a) makes more sense.  But I think either would work.</p>",
  "<p>We\u2019d need to be careful to lock the recursive {super,sub} groups with the same CTE query that finds them, rather than as a separate step.</p>",
  "<p>Yup.  And ordering in there is fraught -- I think we want to lock bottom-to-top, but that may be hard to arrange.</p>",
  "<p>I feel that (b) is more natural, and it is more consistent with the predominant use of subgroups in the codebase at the time. This can change though.</p>",
  "<p>/me created a pull request for the initial implementation: <a href=\"https://github.com/zulip/zulip/pull/26048\">#26048</a></p>",
  "<p>Haven't tested this yet. I'm not sure if we have a way to set up race conditions and test for that concurrently with the existing testing infrastructure.</p>",
  "<p>Evidently the pyright team is paying closer attention to the mypy issue tracker than the mypy team is.<br>\n<a href=\"https://github.com/python/mypy/issues/15459\">https://github.com/python/mypy/issues/15459</a></p>",
  "<p>pyright is very actively maintained by <a href=\"https://github.com/microsoft/pyright/graphs/contributors\">Traut et al.</a> That's some truly impressive work.</p>",
  "<p>Currently TusD doesn't support sending custom headers but we need to send the URL of uploaded file to the client. <br>\nSince v2 might get delayed, I think we can use workaround for now, here are 2 options and I need feedback which is better - </p>\n<ul>\n<li>\n<p>First one is to take realm_id which will be passed into page_parmas, file_id from TusD in upload_success call back and than construct the URL as <code>{realm_id}/{first_two_letters_from_file_id(for subdirectories}/{file_id}/{sanitized_file_name}</code>. Here the downside is we have to maintain duplicate code for frontend and backend and keep in mind this when doing any changes at one side.</p>\n</li>\n<li>\n<p>Second is we can add an extra <code>null=True</code> field <code>id</code> or <code>file_id</code> to the Attachment table and implement a endpoint to get the path from file id. </p>\n</li>\n</ul>\n<p>I had a discussion with <span class=\"user-mention\" data-user-id=\"5593\">@Vaibhav Rabber</span> about this but couldn't decide to choose a solution, so I'm tagging <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> who can help decide on a better solution.</p>",
  "<p>To reduce the review overhead, I opened <a href=\"https://github.com/zulip/zulip/pull/26065\">#26065</a> extracting some of the reviewed changes from the main migration PR <a href=\"https://github.com/zulip/zulip/pull/23634\">#23634</a>. Skipping user group deletion and the backfilling migration because they are blocked by <a href=\"https://github.com/zulip/zulip/pull/26048\">#26048</a>.</p>",
  "<blockquote>\n<p>Second is we can add an extra null=True field id or file_id to the Attachment table and implement a endpoint to get the path from file id.</p>\n</blockquote>\n<p>I am in favour of this. Any discrepancies in getting the correct URL might leave dangling attachments which is a bigger issue.</p>",
  "<p>Dependency installation test on <a href=\"https://github.com/zulip/zulip/pull/26004\">#26004</a> failing, err is </p>\n<div class=\"codehilite\"><pre><span></span><code>tusd: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32&#39; not found (required by tusd)\ntusd: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34&#39; not found (required by tusd)\n</code></pre></div>\n<p>Its working fine on my local machine. I'm not getting which version of glibc we are using, because searching through code there is nothing much related to it.</p>",
  "<p>glibc is provided by the OS (Debian or Ubuntu). Typically, Linux binaries compiled on newer OS releases don\u2019t run on older OS releases for that reason.</p>",
  "<p>Okay, than what options we are left with ? I don't have much idea about this. Could you suggest how should I tackle this ?</p>",
  "<p>Testing race conditions is unfortunately notoriously hard. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
  "<p>I got it, TusD compiles binary using Ubuntu22.04 or we say ubuntu-latest in there actions, that is causing the problem.<br>\nI <a href=\"https://github.com/tus/tusd/issues/964\">talked</a>(They are very quick to reply) with maintainer but I don't think they can do much about it. <br>\nSo I did a fork of TusD and released a <a href=\"https://github.com/brijsiyag/tusd/releases/tag/v1.11.1\">fork release</a> adding a commit(Changes the release workflow file) on top of the v1.11.0(Latest stable) commit.  The release is on my fork currently but later we can shift it to Zulip org.</p>\n<p>Now all the tests are passing on <a href=\"https://github.com/zulip/zulip/pull/26004\">#26004</a>. Currently the PR contains the backend part of the feature only. Yet to decide which approach to use for getting the URL at client side. Thinking of going with second one which adds extra field to the table and extra endpoint.</p>",
  "<p>Is that forked version going to work on the other platforms like Debian that Zulip supports?</p>",
  "<p>The fact that they're responsive to queries is definitely a good sign.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1597803\">said</a>:</p>\n<blockquote>\n<p>Is that forked version going to work on the other platforms like Debian that Zulip supports?</p>\n</blockquote>\n<p>Yeah, that version is working with all zulip's supported operating systems.</p>",
  "<p>Great.</p>",
  "<p>I'd also like to see your posting a bit of a demo and commentary on the corner cases around how it works -- like can you actually upload a 500MB file to your Zulip development environment with it? Does the progress bar stuff work nicely? How does it interact with the S3 integration -- do we end up needing a big buffer on the server to store large files before they are uploaded?</p>",
  "<p>First I uploaded 1GB file and than waited for some time and than a 2GB file, using 25MB chunk size. Used <a href=\"https://github.com/pythonprofilers/memory_profiler\">memory_profiler</a> to plot a pressure graph and here is the result. <br>\n<a href=\"/user_uploads/2/6e/UMPxN_Zw_zbir0tvGQ9pNTi2/Screenshot-2023-06-24-at-3.33.07-AM.png\">Screenshot-2023-06-24-at-3.33.07-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/6e/UMPxN_Zw_zbir0tvGQ9pNTi2/Screenshot-2023-06-24-at-3.33.07-AM.png\" title=\"Screenshot-2023-06-24-at-3.33.07-AM.png\"><img src=\"/user_uploads/2/6e/UMPxN_Zw_zbir0tvGQ9pNTi2/Screenshot-2023-06-24-at-3.33.07-AM.png\"></a></div><p>In an another try I stopped 1GB file in between and than uploaded again, that started from the stopping point, resumed!</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1597812\">said</a>:</p>\n<blockquote>\n<p>How does it interact with the S3 integration</p>\n</blockquote>\n<p>TusD uses S3's multipart upload functionality to upload files to S3, so there is no need of file sized buffer. But here is another problem(Or not a problem, because S3 console itself uses this method), TusD doesn't take path_id to create a file, it just creates the file using an UUID and than give us that ID. In local we can move that file but on S3 there is no support of moving(Or we say renaming the key) so we have to make a copy with new key and delete old copy to get it done. In v2 of TusD they are going to support take path_id in pre-create hook. </p>\n<p>BTW they are <a href=\"https://github.com/tus/tusd/issues/964#issuecomment-1604966661\">using v2</a> at <a href=\"https://transloadit.com/\">Transloadit</a> already.</p>",
  "<p>Currently S3_REGION is an optional setting, but TusD requires this. I don't know if it should be optional or not but we have to force it now. Is it okay to do so?</p>",
  "<p>Maybe.  wal-g backups already also need a region, and we default it via checking <code>ec2metadata --availability-zone</code>: <a href=\"https://github.com/zulip/zulip/blob/main/puppet/zulip/files/postgresql/env-wal-g#L7-L14\">https://github.com/zulip/zulip/blob/main/puppet/zulip/files/postgresql/env-wal-g#L7-L14</a></p>",
  "<p>So it may make sense to pull in the equivalent defaulting into computed_settings.</p>",
  "<p>We need to make sure that any such defaulting doesn't cause problems if the host is not in EC2, of course.</p>",
  "<p>Hm, I assumed that <code>settings.py</code>s <code>S3_REGION</code> pulled its default from <code>zulip-secrets.conf</code>s <code>s3_region</code>, but apparently not.  It's also a bit weird that it's in <code>zulip-secrets.conf</code> and not <code>zulip.conf</code>, but I suspect it was done that way to keep the settings all adjacent (<code>s3_backups_key</code> and <code>s3_backups_bucket</code> are technically not secrets, either)</p>",
  "<p>Okay, I will do this in separate commit.</p>",
  "<blockquote>\n<p>If you are integrating tusd from scratch, I would recommend you to go with v2. Even though it is a pre-release, we use it in production without issues. There are no problems with stability, but documentation is still lacking and we might make some minor breaking changes. This is why the release is not yet complete. But building on v1 now does not make a lot of sense because v2 is be released in the next weeks and then we cannot develop v1 any further. So you would likely want to switch in the near future anyways.</p>\n</blockquote>\n<p><a href=\"https://github.com/tus/tusd/issues#issuecomment-1609224366\">Link to discussion</a><br>\nBTW I have already implemented v1.11.0 in <a href=\"https://github.com/zulip/zulip/pull/26004\">#26004</a>, but we can make a decision to migrate to v2 before PR get merged. Because there are patches to handle feature lacking of v1 and we don't want them to get merged if there is simpler and optimal solution present. </p>\n<p>Documentation's lack will not get us stuck because there aren't much we will be using from v2(we can ask them or I can go through some GO code of TusD if needed.)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"2187\">@Greg Price</span> or anybody with admin power, can you please do me a favor?  I'd like to move this topic to either <a class=\"stream\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design\">#api design</a> or <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a>.  For now, the topic mostly pertains to internal backend changes, although the end goal is to extend the API.  I think I would prefer <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a> if it makes no difference to anybody else.</p>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"137\" href=\"/#narrow/stream/137-feedback/topic/api.20narrow.20failure\">#feedback &gt; api narrow failure</a> by <span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span>.</p>",
  "<p>Another quick data point to gather here would be to find the current impact of running webhook tests vs. non-webhook tests.  At the top of this topic,  we have the result from 2019 that 25% of the time was spent on webhook tests.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> mentioned this topic in <strong><a href=\"#narrow/stream/9-issues/topic/year%20breaks/near/1599344\">#issues &gt; year breaks</a></strong>.</p>",
  "<p>^^^ See the above thread in <a class=\"stream\" data-stream-id=\"9\" href=\"/#narrow/stream/9-issues\">#issues</a>  for details on how this topic doesn't clearly show a four year gap between messages.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"https://github.com/zulip/zulip/pull/11055\">#11055</a> is still open from 2018.  I suspect that most of it is still relevant today, but it might be worth taking a second pass at it in case you recall any fixes from the last five years that address any of your todo items.</p>",
  "<p><code>time ./tools/test-backend --include-webhooks</code>takes 4m6 on my droplet on a fresh run.</p>",
  "<p>2m54 on the second run, which seems like a big difference</p>",
  "<p>2m57 on the third run, so priming seems to make a difference</p>",
  "<p>Without webhooks:</p>\n<ul>\n<li>2m45</li>\n<li>2m46</li>\n</ul>\n<p>So it appears that webhooks tests now only introduce about 5% extra time to the run, which I assume is due to some improvement to the webhooks tests.  (Of course, it's also plausible that the other tests have gotten slower, but 10s overhead is smaller than I remember.)</p>",
  "<p>Profile results:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>SortKey.TIME</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Tue Jun 27 12:55:48 2023    results\n\n         20183632 function calls (20119090 primitive calls) in 240.115 seconds\n\n   Ordered by: internal time\n   List reduced from 11913 to 20 due to restriction &lt;20&gt;\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    10222  230.157    0.023  230.157    0.023 {method &#39;acquire&#39; of &#39;_thread.lock&#39; objects}\n      326    2.003    0.006    5.860    0.018 test_helpers.py:474(find_pattern)\n 10468942    1.347    0.000    1.347    0.000 {method &#39;startswith&#39; of &#39;str&#39; objects}\n  1501986    1.032    0.000    1.801    0.000 test_helpers.py:463(cleanup_url)\n  1393484    0.456    0.000    1.289    0.000 resolvers.py:424(resolve)\n  1355829    0.413    0.000    0.770    0.000 resolvers.py:306(match)\n       18    0.384    0.021    0.384    0.021 {function TimeTrackingCursor.execute at 0x7fe650dfe280}\n  1357583    0.359    0.000    0.359    0.000 {method &#39;search&#39; of &#39;re.Pattern&#39; objects}\n     2265    0.323    0.000    0.323    0.000 {built-in method marshal.loads}\n6354/6031    0.237    0.000    0.950    0.000 {built-in method builtins.__build_class__}\n     1142    0.158    0.000    0.162    0.000 mock.py:1634(patch)\n     3398    0.151    0.000    0.151    0.000 {method &#39;write&#39; of &#39;_io.TextIOWrapper&#39; objects}\n1504140/1496552    0.131    0.000    0.149    0.000 {built-in method builtins.len}\n     2384    0.124    0.000    0.312    0.000 &lt;frozen importlib._bootstrap&gt;:890(_find_spec)\n       13    0.077    0.006    0.077    0.006 {built-in method posix.waitpid}\n      414    0.075    0.000    0.081    0.000 {built-in method builtins.sorted}\n    16060    0.074    0.000    0.074    0.000 {built-in method posix.stat}\n 4899/810    0.062    0.000    0.167    0.000 sre_parse.py:493(_parse)\n      741    0.059    0.000    0.059    0.000 {built-in method builtins.dir}\n        1    0.055    0.055  230.601  230.601 runner.py:493(run)\n\n~~~\n</code></pre></div>\n</div></div>",
  "<p>I have to run for now, but I think all the <code>acquire</code> calls might indicate that I need to run single-threaded when profiling?  Other than that there don't seem to be any smoking guns.  If anybody wants to kibitz here, feel free to at-mention me, as I can poke around later today.</p>",
  "<p>When you run single-threaded, it's all the usual suspects.  Most of the time is spent in the Django ORM and the database, along with a little bit of markdown overhead.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>SINGLE THREADED (SortKey.TIME)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>         804227539 function calls (783702791 primitive calls) in 848.041 seconds\n\n   Ordered by: internal time\n   List reduced from 33062 to 20 due to restriction &lt;20&gt;\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n   283132  147.570    0.001  152.566    0.001 {function TimeTrackingCursor.execute at 0x7f389a11d280}\n61800839/60833976   14.915    0.000   28.373    0.000 {built-in method builtins.getattr}\n 12873798   12.673    0.000   19.797    0.000 compiler.py:519(quote_name_unless_alias)\n189408/189299   10.481    0.000   85.405    0.000 compiler.py:229(get_select)\n58973332/58837955    9.333    0.000   12.014    0.000 {built-in method builtins.isinstance}\n   154308    8.364    0.000   18.105    0.000 compiler.py:950(get_default_columns)\n  4551018    7.985    0.000    7.985    0.000 {method &#39;match&#39; of &#39;re.Pattern&#39; objects}\n8951091/8099941    7.973    0.000  126.485    0.000 {method &#39;join&#39; of &#39;str&#39; objects}\n7101490/6293154    7.742    0.000   73.145    0.000 compiler.py:541(compile)\n    12060    7.637    0.001    7.638    0.001 decoder.py:343(raw_decode)\n    20923    7.364    0.000    7.364    0.000 {method &#39;acquire&#39; of &#39;_thread.lock&#39; objects}\n  6184924    7.241    0.000   32.432    0.000 expressions.py:1130(as_sql)\n28584986/28553208    6.893    0.000    7.484    0.000 {built-in method builtins.hasattr}\n3375413/2516796    6.725    0.000   14.534    0.000 treeprocessors.py:241(__applyPattern)\n381135/339194    6.118    0.000   48.291    0.000 query.py:1350(build_filter)\n413550/413536    6.083    0.000   13.231    0.000 base.py:460(__init__)\n 46689683    6.026    0.000    6.026    0.000 {method &#39;append&#39; of &#39;list&#39; objects}\n  6786125    5.934    0.000    8.717    0.000 __init__.py:615(__eq__)\n  5796614    5.524    0.000   16.449    0.000 expressions.py:1146(get_db_converters)\n  1059504    5.453    0.000    7.095    0.000 query.py:1641(names_to_path)\n~~~\n\n~~~\n</code></pre></div>\n</div></div>",
  "<p>FWIW it would have saved me a little bit of time if the <code>--profile</code> option either automatically ran single-threaded or forced me to specify how many threads I wanted to run. I don't think you get much value from profiling across multiple threads, since the thread blocking obscures which functions really cost the most here.</p>",
  "<p>Given that DB-related activity seems to be the clear bottleneck here, I think the next step would be to try to track down the following:</p>\n<ul>\n<li>Are any single queries particularly slow?</li>\n<li>Do any single tests run a whole bunch of queries?</li>\n</ul>\n<p>For the latter, I could see us having some kind of test-runner tweak where we disallow any single test from running more than N queries, unless at some point they call <code>assert_database_query_count</code>.  This would ensure us that most O(N)-queries bugs either get caught or get explicitly called out by the tests.</p>",
  "<p>I doubt there are any egregious performance bugs within <code>zerver</code> itself:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 foo.py | grep zerver | head -8\n      457    2.975    0.007    2.992    0.007 /home/zulipdev/zulip/zerver/lib/db.py:47(__init__)\n      326    2.489    0.008    6.105    0.019 /home/zulipdev/zulip/zerver/lib/test_helpers.py:474(find_pattern)\n   281136    2.303    0.000  155.524    0.001 /home/zulipdev/zulip/zerver/lib/db.py:15(wrapper_execute)\n     1275    1.030    0.001   96.566    0.076 /home/zulipdev/zulip/zerver/lib/events.py:104(fetch_initial_state_data)\n  1501986    0.993    0.000    1.754    0.000 /home/zulipdev/zulip/zerver/lib/test_helpers.py:463(cleanup_url)\n     1845    0.807    0.000    1.726    0.001 /home/zulipdev/zulip/zerver/lib/markdown/__init__.py:377(walk_tree_with_family)\n   286672    0.663    0.000    0.663    0.000 /home/zulipdev/zulip/zerver/lib/markdown/__init__.py:372(__init__)\n    84845    0.535    0.000    8.325    0.000 /home/zulipdev/zulip/zerver/openapi/openapi.py:83(check_reload)\n</code></pre></div>",
  "<p>To summarize:</p>\n<ul>\n<li>webhook tests are now low overhead</li>\n<li>first-time runs of the tests add an extra minute of overhead</li>\n<li>the DB is the bottleneck</li>\n<li>I haven't tried to hunt down slow queries yet</li>\n<li>we may want to modify test runner to more aggressively find O(N) query counts</li>\n<li>we may want to make --profile just run single-threaded</li>\n<li>the code in <code>zerver</code> seems fine</li>\n</ul>\n<p>I'll wait for feedback on possible next steps.  If anybody wants to replicate my results with profiling, it's pretty easy to do (and just go brew some tea while you wait).</p>",
  "<p>Using cumulative times, the api doc tests are probably the best thing to look at holistically:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 foo.py | grep zerver | grep &#39;(test_&#39; | head -8\n        1    0.001    0.001   94.169   94.169 /home/zulipdev/zulip/zerver/tests/test_docs.py:124(test_api_doc_endpoints)\n        1    0.001    0.001   19.835   19.835 /home/zulipdev/zulip/zerver/tests/test_events.py:2854(test_change_realm_property)\n        1    0.000    0.000   19.166   19.166 /home/zulipdev/zulip/zerver/tests/test_events.py:2927(test_change_realm_user_default_setting)\n        1    0.018    0.018   15.893   15.893 /home/zulipdev/zulip/zerver/tests/test_events.py:1934(test_change_notification_settings)\n        1    0.000    0.000   14.606   14.606 /home/zulipdev/zulip/zerver/tests/test_events.py:3003(test_change_user_settings)\n        1    0.000    0.000   14.224   14.224 /home/zulipdev/zulip/zerver/tests/test_urls.py:36(test_public_urls)\n        1    0.001    0.001   11.488   11.488 /home/zulipdev/zulip/zerver/tests/test_docs.py:232(test_integration_doc_endpoints)\n        1    0.000    0.000    6.651    6.651 /home/zulipdev/zulip/zerver/tests/test_signup.py:4296(test_two_factor_login)\n</code></pre></div>",
  "<p>I think you mean <a href=\"https://github.com/tus/tusd/issues/964#issuecomment-1609224366\">https://github.com/tus/tusd/issues/964#issuecomment-1609224366</a> for your <a href=\"https://github.com/tus/tusd/issues/964#issuecomment-1609224366\">link to discussion</a>.</p>",
  "<p>But they do seem fairly convinced that they're going to successfully kick 2.0 out the door soon.  Hm.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1599485\">said</a>:</p>\n<blockquote>\n<p>I think you mean <a href=\"https://github.com/tus/tusd/issues/964#issuecomment-1609224366\">https://github.com/tus/tusd/issues/964#issuecomment-1609224366</a> for your <a href=\"https://github.com/tus/tusd/issues/964#issuecomment-1609224366\">link to discussion</a>.</p>\n</blockquote>\n<p>Yes, I copied from Github and pasted here, don't know how it got changed in between.</p>",
  "<p>Yeah, weird.  Probably some SPA shenanigans.</p>",
  "<p>For <code>./tools/test-backend --profile --parallel 1 zerver.tests.test_docs.DocPageTest.test_api_doc_endpoints</code> I see a lot of markdown processing:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Ordered by: internal time\n   List reduced from 15124 to 8 due to restriction &lt;8&gt;\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n  3327170    6.648    0.000    6.648    0.000 {method &#39;match&#39; of &#39;re.Pattern&#39; objects}\n2885399/2122589    5.308    0.000   11.757    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/markdown/treeprocessors.py:241(__applyPattern)\n26260234/26237135    3.262    0.000    3.476    0.000 {built-in method builtins.getattr}\n   273126    2.919    0.000    6.009    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/importlib_metadata/__init__.py:362(&lt;setcomp&gt;)\n  3967024    2.789    0.000    2.789    0.000 {method &#39;search&#39; of &#39;re.Pattern&#39; objects}\n  2980093    2.113    0.000    3.135    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/markdown/util.py:285(__getitem__)\n   351714    1.967    0.000    5.135    0.000 {built-in method io.open}\n186401/117107    1.955    0.000   15.522    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/markdown/treeprocessors.py:110(__handleInline)\n</code></pre></div>",
  "<p>351714 calls to <code>io.open</code> seems odd, but I have never done a deep dive on the api documentation system or its tests.</p>",
  "<p>If we could eliminate the zephyr checks, that would be an easy speedup.</p>",
  "<p>I think it will probably be easier if we utilize the testing infrastructure for <code>test-api</code>.</p>",
  "<p>So that we hit the server via actual HTTP requests, instead of spawning threads to use Django test clients concurrently. The latter doesn't sound like its intended use case.</p>",
  "<p>Did some testing by utilizing the <code>test-api</code> infrastructure. I came to the realization that probably there is nothing stopping me from sharing the test client across threads, so that's worth trying.</p>",
  "<p>Some discoveries so far:</p>\n<ol>\n<li>It is probably best to do <code>SELECT FOR UPDATE NOWAIT</code> with the recursive query. When the lock cannot be initially acquired, it is possible that after the lock becomes available, more rows that ought to be locked get committed. So there is no point waiting on the lock.</li>\n<li>Django's <code>TestCase</code> wraps the test case into a transaction. It silences the error raised when <code>select_for_update</code> is not in a transaction as it expects it to be.</li>\n<li>Knowing the exact points where deadlocks and database error due to <code>nowait</code>, a possible way to implement error handling is to raise a <code>JsonableError</code> on <code>DeadlockDetected</code> or <code>LockNotAvailable</code>. This aborts the transaction managed by the helper context manager where we restrict the scope of the row locks to.</li>\n</ol>",
  "<blockquote>\n<p><code>followed_topic_wildcard_mention_user_ids</code></p>\n</blockquote>\n<p>I think we could rearrange this name a bit. Instead of making this <code>followed_topic_stream_wildcard_mention_user_ids</code> after the rename, we could go with <code>stream_wildcard_mention_in_followed_topic_user_ids</code>, which would have two advantages:</p>\n<ol>\n<li>Makes it very distinct (visually) from the earlier name (ie, from <code>followed_topic_wildcard_mention_user_ids</code>, which we still need to use in the code base in some places)</li>\n<li>Avoids the other counterpart, ie, <code>followed_topic_topic_wildcard_mention_user_ids</code>, which is a bit weird.</li>\n</ol>",
  "<p>We'll have:</p>\n<ul>\n<li>stream_wildcard_mention_user_ids</li>\n<li>topic_wildcard_mention_user_ids</li>\n<li>stream_wildcard_mention_in_followed_topic_user_ids</li>\n<li>topic_wildcard_mention_in_followed_topic_user_ids</li>\n</ul>",
  "<p>Yes, that's what I had in mind.</p>",
  "<p><code>followed_topic_wildcard_mentions_notify_user_ids</code> which is calculated like so:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>                <span class=\"n\">followed_topic_wildcard_mentions_notify_user_ids</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">followed_topic_notification_recipients</span><span class=\"p\">(</span><span class=\"s2\">\"wildcard_mentions_notify\"</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n</code></pre></div>\n<p>should probably remain the same, since it is calculated based on only user settings and user topics, and doesn't care about if the mention is a stream wildcard or a topic wildcard.</p>",
  "<p>Thoughts?</p>",
  "<p>We have a function called <code>build_narrow_filter</code> that doesn't actually return a \"filter\" in terms of filtering a list.  It instead returns a boolean function.  On the JS side we call similar functions \"predicate\", but I am not super happy with that name.  I am thinking <code>build_narrow_checker</code>.  I could also call it <code>build_narrow_predicate</code> for now, and we can eventually sweep the many, many instances of \"predicate\" in our codebase.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26146\">#26146</a> is the first step toward cleaning up <code>build_narrow_filter</code>.</p>",
  "<blockquote>\n<p>When the lock cannot be initially acquired, it is possible that after the lock becomes available, more rows that ought to be locked get committed. So there is no point waiting on the lock.</p>\n</blockquote>\n<p>Doesn't that defeat the point of doing the locking entirely?</p>",
  "<p>Tests being run in a transaction is a big headache when working with transactions.  It makes sense from a test performance point of view, but it makes it real hard to test rollbacks and post-commit hooks.</p>",
  "<p>The PR is ready to review, and it basically just removes the annoying test fixtures.  I started work today on using dataclasses internally for <code>build_narrow_filter</code>, but it gets a bit messy due to the way we serialize stuff in <code>request_event_queue</code>.  I'll take a fresh look tomorrow.</p>",
  "<p>I think <code>nowait</code> should only apply to the recursive query. We can wait on the second lock as usual.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> <span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> I like that proposal!</p>",
  "<p>Here is the demo with 1GB size of file.<br>\n<a href=\"/user_uploads/2/16/XElAMeaKlI6nX2-8gTGAssHF/Screen-Recording-2023-06-29-at-3.19.07-AM.mp4\">Screen-Recording-2023-06-29-at-3.19.07-AM.mp4</a><br>\n<a href=\"https://github.com/zulip/zulip/pull/26004\">#26004</a> passing all the tests and ready for review.</p>",
  "<p>How do I get to the \"root\" user in Ubuntu 20.04? I can't su to it. :/</p>",
  "<p>I need to su in in order to upgrade my zulip installation. i don't think i've ever done it before. :P</p>",
  "<p>Ha haaaa figured it out:</p>\n<p><code># sudo su zulip</code></p>",
  "<p>Hey all -</p>",
  "<p>(never mind, didn't realize that one was a bash script :P)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"23083\">Tom Spettigue</span> has marked this topic as resolved.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"23083\">Tom Spettigue</span> has marked this topic as unresolved.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"23083\">Tom Spettigue</span> has marked this topic as resolved.</p>",
  "<p>Incidentally, the solution (for anyone who might be looking) was to RTFM and:</p>\n<p><code>sudo bash /home/zulip/deployments/current/scripts/upgrade-zulip zulip-server-latest.tar.gz</code> as my sudoer user on my Ubuntu 20.04 box. Just FYI. :3</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"23083\">Tom Spettigue</span> has marked this topic as unresolved.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"23083\">Tom Spettigue</span> has marked this topic as resolved.</p>",
  "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/test-backend.20performance\">#backend &gt; test-backend performance</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/api.20doc.20tests.20performance\">#backend &gt; api doc tests performance</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>I humbly ask that <a href=\"https://github.com/zulip/zulip/pull/26150\">#26150</a> gets a fairly prioritized review.  It's a very low-risk change to tests only, and for me, on a pretty decent sized box, it reduces the cost of <code>test_api_doc_endpoints</code> by ~20s.  It technically reduces the amount of coverage we get on zephyr-specific logic for API endpoints, but it covers the same lines of code, and we still hit the zephyr test logic from a bunch of places.</p>",
  "<p>We could do further things here to avoid redundant tests.  For example, we have code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"mi\">240</span>     <span class=\"k\">def</span> <span class=\"nf\">test_corporate_portico_endpoints</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"mi\">241</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_test</span><span class=\"p\">(</span><span class=\"s2\">\"/team/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"industry veterans\"</span><span class=\"p\">)</span>\n<span class=\"mi\">242</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_test</span><span class=\"p\">(</span><span class=\"s2\">\"/apps/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Apps for every platform.\"</span><span class=\"p\">)</span>\n<span class=\"mi\">243</span>\n<span class=\"mi\">244</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_test</span><span class=\"p\">(</span><span class=\"s2\">\"/history/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Zulip released as open source!\"</span><span class=\"p\">)</span>\n<span class=\"mi\">245</span>         <span class=\"c1\"># Test the i18n version of one of these pages.</span>\n<span class=\"mi\">246</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_test</span><span class=\"p\">(</span><span class=\"s2\">\"/en/history/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Zulip released as open source!\"</span><span class=\"p\">)</span>\n<span class=\"mi\">247</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_test</span><span class=\"p\">(</span><span class=\"s2\">\"/values/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"designed our company\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Instead of splitting out separate tests to specifically hunt down content snippets, we could just have a dictionary mapping endpoints to expected content, and then just have our test helpers look at the dictionary.</p>",
  "<p>I can probably work on that idea once the current PR gets merged, but I am busy with other stuff until this afternoon.</p>",
  "<p>The portico endpoints may be a bad example, since I don't think they are covered in the big test, but there are other places we can look.</p>",
  "<p>Another reason I am hoping the PR can get a fairly timely review is that it is somewhat prone to test failures if it gets stale. I now check for the precise number of API endpoints in the big test.</p>",
  "<p>We have 110 api doc endpoints now, and until my change, each was causing at least 4 test calls to fetch and render the associated document.</p>",
  "<p>In 2019 <span class=\"user-mention\" data-user-id=\"5914\">@Puneeth Chaganti</span> proposed to mitigate that by improving upon a commit that basically memoized rendering for similar calls:</p>\n<p><a href=\"https://github.com/zulip/zulip/issues/11055#issuecomment-481366552\">https://github.com/zulip/zulip/issues/11055#issuecomment-481366552</a></p>\n<p>I am a little skeptical of that approach insofar as we can simply reduce the number of times we render documents, but it's worth another look, as it would probably save an additional 10s if we were comfortable with the downsides.</p>",
  "<p>The proposed strategy might even improve our actual code if I am reading it correctly.  I will try to look in more detail later.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"26369\">Karl Stolley</span> has marked this topic as resolved.</p>",
  "<p>Looks reasonable on quick skim, but looks to be failing tests?</p>",
  "<p>Should be fixed on the next build. (I had to change a length count from 109 to 110 since I was rebased on a slightly stale copy of main.)</p>",
  "<p>Build is green now. Thanks for the heads up, Alex! <a href=\"https://github.com/zulip/zulip/pull/26150\">#26150</a></p>",
  "<p>If I decide to change how we serialize narrows in client descriptors from being lists-of-tuples to lists-of-dictionaries, do I need to be concerned about server restarts?  I assume I <strong>don't</strong> need to worry, since presumably the clients have to re-register with the server after the server gets bounced (whether for an upgrade or other reason).  If I am being overly optimistic, then we're gonna have some ugly code related to backward compatibility.  (The current PR is not blocked on this decision, but further work is.)</p>",
  "<p>Assuming I don't need backward compatibility in the format of the event queues, then my next question related to dataclasses is how best to serialize them.  The naive approach is simply to convert dataclasses to dictionaries (and vice versa) at the edges.  <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> Is there a more kosher approach?  For reference, this is the dataclass that eventually gets serialized to send over the wire in <code>request_event_queue</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>  <span class=\"mi\">89</span> <span class=\"nd\">@dataclass</span>\n  <span class=\"mi\">90</span> <span class=\"k\">class</span> <span class=\"nc\">NarrowTerm</span><span class=\"p\">:</span>\n  <span class=\"mi\">91</span>     <span class=\"c1\"># In our current use case we don't yet handle negated narrow terms.</span>\n  <span class=\"mi\">92</span>     <span class=\"n\">operator</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n  <span class=\"mi\">93</span>     <span class=\"n\">operand</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</code></pre></div>\n<p>It's actually a list of <code>NarrowTerm</code> thingies that I intend to serialize.</p>",
  "<p>Sounds very promising, thanks for digging into this!</p>",
  "<p>(Haven't read the PR yet).</p>",
  "<p>Oh, I see <code>asdict</code> for the one direction, and then I suppose <code>NarrowTerm(**whatever_I_get_from_json)</code> in the other direction.  And then a one-liner like <code>raw_narrow = [nt.asdict() for nt in narrow]</code> right before I put it on the wire?</p>",
  "<p>I think <a href=\"https://catt.rs/en/stable/\">cattrs</a> is the most promising approach we\u2019ve found for dataclass serialization.</p>",
  "<p>Just to be clear, that's not yet in the codebase?</p>",
  "<p>Now is as good a time as any to start using it.</p>",
  "<p>I don't really feel comfortable introducing a dependency for my PR, as it only saves me 2 lines of code and introduces a moving part.  I can add a comment that it's a likely candidate for a future cattrs sweep.</p>",
  "<p>Am I correct that even after this PR, we're testing every API documentation page with both values of <code>ROOT_DOMAIN_LANDING_PAGE</code>?</p>\n<p>If so, I think we can probably turn that factor of 2 off for /help/, /api/, /integrations pages -- those are not expected to be conditional on that setting, and are most of the total files to test.</p>\n<p>(Oh, looks like no; those probably don't have <code>landing_page=True</code>).</p>",
  "<p>The other thing I notice is that <code>test_urls.py</code> is one of our more expensive tests; I've for a long time thought it might make sense to merge that with <code>test_docs.py</code> because I'm not at all convinced they don't have weird overlap and they're both expensive.</p>",
  "<p>There is a <code>landing_page</code> flag that, if set to false, early-exits before the second half of the function, but it might not have the correct values in the situations you describe.  I really hate having default booleans in <strong>any</strong> code, but particularly in test code.</p>",
  "<p>The <code>landing_page</code> boolean defaults to <code>True</code>.</p>",
  "<p>Yeah, looks like that's wrong for these.</p>",
  "<p>Gonna fiddle for a few minutes with printing that value out:</p>\n<div class=\"codehilite\"><pre><span></span><code>Jun 29 12:12:25 /api/ True\nJun 29 12:12:25 /api/add-alert-words True\nJun 29 12:12:25 /api/add-code-playground True\nJun 29 12:12:25 /api/add-default-stream True\nJun 29 12:12:25 /api/add-linkifier True\nJun 29 12:12:25 /api/add-reaction True\nJun 29 12:12:26 /api/api-keys True\nJun 29 12:12:26 /api/archive-stream True\nJun 29 12:12:26 /api/changelog True\nJun 29 12:12:26 /api/check-messages-match-narrow True\nJun 29 12:12:27 /api/client-libraries True\nJun 29 12:12:27 /api/configuring-python-bindings True\nJun 29 12:12:27 /api/construct-narrow True\n</code></pre></div>",
  "<p>BTW I re-pushed to <a href=\"https://github.com/zulip/zulip/pull/26150\">#26150</a> to address some feedback and to avoid some more redundancy.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> can you repush? I think your raced with my pushing a rebase.</p>",
  "<p>done</p>",
  "<p>If there is a simple way to identify from the url that something is a landing page, then it might make sense to just have <code>_test_*</code> figure it out from the url, rather than the callers.</p>",
  "<p>One thing I note being expensive is that we test <code>/api/get-events</code> in both the base test and in:<br>\n<code>zerver.tests.test_docs.DocPageTest.test_specific_api_endpoints_for_content</code></p>\n<p>Since that page is ultra expensive to render, we probably want to not do that.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/api.20doc.20tests.20performance/near/1601250\">said</a>:</p>\n<blockquote>\n<p>One thing I note being expensive is that we test <code>/api/get-events</code> in both the base test and in:<br>\n<code>zerver.tests.test_docs.DocPageTest.test_specific_api_endpoints_for_content</code></p>\n<p>Since that page is ultra expensive to render, we probably want to not do that.</p>\n</blockquote>\n<p>Haha, look at the penultimate commit in my latest push. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>I think that commit addresses your concern.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/api.20doc.20tests.20performance/near/1601249\">said</a>:</p>\n<blockquote>\n<p>If there is a simple way to identify from the url that something is a landing page, then it might make sense to just have <code>_test_*</code> figure it out from the url, rather than the callers.</p>\n</blockquote>\n<p>Yeah, that's a good idea -- I think we could have the default just changed to \"if it doesn't start with /help/, /api/, or /integrations\" for now, and revise later; that rule would get 90% of the potential performance benefit.</p>",
  "<p>I think <a href=\"https://github.com/zulip/zulip/pull/26150\">#26150</a> looks like a good checkpoint; gonna mark it merge once CI passes after running it on my machine one more time.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/api.20doc.20tests.20performance/near/1601249\">said</a>:</p>\n<blockquote>\n<p>If there is a simple way to identify from the url that something is a landing page, then it might make sense to just have <code>_test_*</code> figure it out from the url, rather than the callers.</p>\n</blockquote>\n<p>So is this the only outstanding item for now assuming the current PR gets pushed?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/api.20doc.20tests.20performance/near/1601231\">said</a>:</p>\n<blockquote>\n<p>The other thing I notice is that <code>test_urls.py</code> is one of our more expensive tests; I've for a long time thought it might make sense to merge that with <code>test_docs.py</code> because I'm not at all convinced they don't have weird overlap and they're both expensive.</p>\n</blockquote>\n<p>Yeah, probably.  Do you want me to dig into that now, or do you just want to get the observation out there?</p>",
  "<p>With that PR, it's 47s with <code>test-backend test_docs</code>; before it was 87s, so that's about 40s of the serial runtime just with this PR.</p>",
  "<p>I'm out of time for fiddling with this myself today and have a couple other PRs if yours to try to merge, but I think your continuing to dig into this would likely be very fruitful.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/api.20doc.20tests.20performance/near/1601265\">said</a>:</p>\n<blockquote>\n<p>I'm out of time for fiddling with this myself today and have a couple other PRs if yours to try to merge, but I think your continuing to dig into this would likely be very fruitful.</p>\n</blockquote>\n<p>I'm kind of feeling the same way.  I have this starred to come back to later.  I have some more questions about how best to test the zephyr stuff, but those can wait.  Remaining things to think about:</p>\n<ul>\n<li>landing_page flag</li>\n<li>test_urls.py redundancy</li>\n<li>zephyr</li>\n</ul>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/api.20narrow.20failure/near/1601083\">said</a>:</p>\n<blockquote>\n<p>If I decide to change how we serialize narrows in client descriptors from being lists-of-tuples to lists-of-dictionaries, do I need to be concerned about server restarts?  I assume I <strong>don't</strong> need to worry, since presumably the clients have to re-register with the server after the server gets bounced (whether for an upgrade or other reason).  If I am being overly optimistic, then we're gonna have some ugly code related to backward compatibility.  (The current PR is not blocked on this decision, but further work is.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> This is relevant to <a href=\"https://github.com/zulip/zulip/pull/26146#discussion_r1247026111\">https://github.com/zulip/zulip/pull/26146#discussion_r1247026111</a>.  I'd prefer to discuss it here if possible, rather than GH.</p>",
  "<p>OK, reviewed <a href=\"https://github.com/zulip/zulip/pull/26146\">#26146</a>, and I think it's OK; <span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> did you happen to do any testing where one actually gets an event stuck in a queue for Tornado and then has it restored from a dictionary? </p>\n<p>The logic looks corrects to me and I'm tempted to merge regardless, but figured it'd be nice to know whether or not it's a tested risk.</p>",
  "<p>I am pretty sure <span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> has done that sort of testing in the last week, so perhaps it makes sense for him to do a quick test of that detail post-merge for this PR.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/api.20narrow.20failure/near/1601276\">said</a>:</p>\n<blockquote>\n<p>OK, reviewed <a href=\"https://github.com/zulip/zulip/pull/26146\">#26146</a>, and I think it's OK; <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> did you happen to do any testing where one actually gets an event stuck in a queue for Tornado and then has it restored from a dictionary? </p>\n<p>The logic looks corrects to me and I'm tempted to merge regardless, but figured it'd be nice to know whether or not it's a tested risk.</p>\n</blockquote>\n<p>I haven't tested that, but the current PR is touching stuff that's pretty low in the stack.  The next round of changes is where stuff gets hairy.</p>",
  "<p>I think for Zephyr, we haven't made any changes to the actual Zephyr infrastructure in a long time, but the logic seems to be mainly about <code>robots.txt</code> logic that we probably want to turn into an organization setting.</p>",
  "<p>(scroll up a bit, as you may have missed my message that I sent just as two of yours arrived)</p>",
  "<p>My concern isn't so much about converting dataclasses to dictionaries for over-the-wire stuff.  It's more about moving from tuples to dictionaries.</p>",
  "<p>Yeah, here's a fine place to answer that. We definitely do need to think about server restarts -- we preserve and continue using event queues for up to 30 minutes after a server restart in order to avoid forcing clients to reload immediately after a server restart.</p>",
  "<p>There's a pretty well-practiced approach for handling this, which is basically just that we make the functions like <code>from_dict</code> handle both the old format and the new format, since we only need the new server to support dealing with old queues, not the other way around.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/api.20narrow.20failure/near/1601286\">said</a>:</p>\n<blockquote>\n<p>There's a pretty well-practiced approach for handling this, which is basically just that we make the functions like <code>from_dict</code> handle both the old format and the new format, since we only need the new server to support dealing with old events sitting in a queue, not the other way around.</p>\n</blockquote>\n<p>Yeah, as long as it's just in one direction, that seems manageable enough.</p>",
  "<p>Here's some examples; you can probably find the full commits for them:</p>\n<div class=\"codehilite\"><pre><span></span><code>    @classmethod\n    def from_dict(cls, d: MutableMapping[str, Any]) -&gt; &quot;ClientDescriptor&quot;:\n        if &quot;client_type&quot; in d:\n            # Temporary migration for the rename of client_type to client_type_name\n            d[&quot;client_type_name&quot;] = d[&quot;client_type&quot;]\n        if &quot;client_gravatar&quot; not in d:\n            # Temporary migration for the addition of the client_gravatar field\n            d[&quot;client_gravatar&quot;] = False\n\n        if &quot;slim_presence&quot; not in d:\n            d[&quot;slim_presence&quot;] = False\n</code></pre></div>",
  "<p>Cool, that's super helpful. (And I probably wrote the client_gravatar code, so it's somewhere way in the back of my brain, haha.)</p>",
  "<p>And <a href=\"https://github.com/zulip/zulip/pull/25978\">#25978</a> is the PR by <span class=\"user-mention silent\" data-user-id=\"22341\">Prakhar Pratyush</span> that has an example of this sort of thing from the last week.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/test-backend.20performance/near/1599465\">said</a>:</p>\n<blockquote>\n<p>FWIW it would have saved me a little bit of time if the <code>--profile</code> option either automatically ran single-threaded or forced me to specify how many threads I wanted to run. I don't think you get much value from profiling across multiple threads, since the thread blocking obscures which functions really cost the most here.</p>\n</blockquote>\n<p>Yeah, agreed, I think the backstory here is just that <code>--profile</code> just predated <code>--parallel</code>. Would be a great little issue for someone to pick up; <span class=\"user-mention\" data-user-id=\"17026\">@Akshat</span> do you have time to change that? Read the code around <code>default_parallel</code> in <code>test-backend</code> for some existing examples.</p>",
  "<p>The thing that's really striking for me in reading those profiles is that <code>fetch_initial_state_data</code> is a huge portion of total runtime. I don't think that was the case looking at my notes from <a href=\"https://github.com/zulip/zulip/pull/11055\">#11055</a>. So we should look into where those calls are.</p>",
  "<p>One total guess theory would be that the addition of spectators support resulted in many more tests calling that function than previously in some unexpected fashion.</p>",
  "<p>I'll dig into the zephyr code a bit more deeply and see if I can reverse engineer a really simple test that just touches a couple representative urls for the robots.txt logic (and whatever else seems to be zephyr-specific).</p>",
  "<p><code>fetch_initial_state_data</code> is an <strong>expensive</strong> function -- basically fetching all the data in the app -- and I don't see a reason we'd have 1200+ calls to it unless there's some loop that it doing that a lot more than intended.</p>",
  "<p><code>git log -S</code> may be helpful, but it certainly looked like it was just about <code>robots.txt</code>.</p>",
  "<p>I like <code>build_narrow_predicate</code> -- we use \"predicate\" in the web app for the same purpose -- a check whether a message matches the narrow or not.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/test-backend.20performance/near/1601299\">said</a>:</p>\n<blockquote>\n<p><code>fetch_initial_state_data</code> is an <strong>expensive</strong> function -- basically fetching all the data in the app -- and I don't see a reason we'd have 1200+ calls to it unless there's some loop that it doing that a lot more than intended.</p>\n</blockquote>\n<p>I'm curious how many of those come from <code>test_events.py</code>.</p>",
  "<p>And I think for me at least it avoids the potential confusion with <code>filter</code> or <code>checker</code> as to whether the thing we're filtering is whether something is a valid narrow or whatever.</p>",
  "<p>yeah, I'd consider just adding a print statement at the top of that function and then running the test suite in serial mode.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/test-backend.20performance/near/1601293\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"17026\">Akshat</span> do you have time to change that?</p>\n</blockquote>\n<p>sure!</p>",
  "<p>Just did that experiment, since my checkout wasn't busy; I think the answer is they're basically all in <code>test_events.py</code>. I know we need to do a lot for before/after checks. So I think there's two prongs here; we should probably profile that function and see if there's ready optimizations for it, since it is an important part of Zulip performance. And then we can also look at passing more limited <code>event_types</code> lists in the places where we're say testing a bunch of settings in a loop.</p>",
  "<p>Update:</p>\n<ul>\n<li>I have updated <a href=\"https://github.com/zulip/zulip/pull/25828\">#25828</a> (and <a href=\"https://github.com/zulip/zulip/pull/25978\">#25978</a>) with the above discussed names.</li>\n<li>Blockers:<ul>\n<li><a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/notification.20emails\">#design &gt; notification emails</a> </li>\n<li>Should we introduce <code>topic_wildcard_mentioned</code> flag?</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/zulip/zulip/pull/25828\">#25828</a> currently enables Email and push notifications to the topic participants for the @topic wildcard mention.</p>",
  "<p>Should we introduce <code>topic_wildcard_mentioned</code> flag?</p>\n<p><strong>For implementing the desktop / audible notifications:</strong></p>\n<ul>\n<li>Should we introduce a new UserMessage flag named <code>topic_wildcard_mentioned</code> and rename the existing flag to <code>stream_wildcard_mentioned</code></li>\n<li>\n<p>Another way is to detect in the frontend itself: \"if the wildcard mention is a topic wildcard mention\" + \"notify only if the user is a topic_participant\" (We'd need to determine the topic participants in the frontend; I don't think this would be the correct way.)</p>\n<p>Note: topic participants -  Anyone who sent a message to a topic, or reacted to a message on the topic</p>\n</li>\n</ul>",
  "<p>This is in  <a href=\"https://github.com/zulip/zulip/pull/26156\">#26156</a> (along with the mypy fix).</p>",
  "<p>Would it suffice to send a new field in the message send/edit event like <code>is_topic_mention</code>?</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26162\">#26162</a> has six more commits that generally build up to isolating the Zephyr logic.  I also got some speedups by cleaning up the logic related to looking for strings within the doc pages.</p>",
  "<p>Oh, and I also addressed the landing page logic.  Most of the commits are pretty detailed, so I won't repeat myself too much here.</p>",
  "<p>I am not sure how deep I want to go on <code>test_urls.py</code>, but I am at least dipping my foot in the pool.  No major findings yet.</p>",
  "<p>We now make 346 calls to <code>get_doc</code> with no egregious examples of testing the same document.</p>",
  "<p>On my box it runs in about 20s (vs. 45s from before my round of changes).  Today's changes were more about code clarity than speed, but I did knock off about 5s today.</p>",
  "<p>It takes me 13s to run <code>test_urls.py</code>.</p>",
  "<p><code>test_public_urls</code> is the most expensive function (~8s), and it has no obvious overlap with <code>test_docs.py</code>.</p>",
  "<p>Ok, I have looked enough to be pretty confident that there is no significant overlap between <code>test_urls.py</code> and <code>test_docs.py</code> that we should worry about.  OTOH the latter is definitely much slower than what you would expect from looking at the relatively straightforward test code.  I will open a new topic and let Topic Bridge Bot cross-link back to here.</p>",
  "<p>As I mentioned in <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/api.20doc.20tests.20performance\">#backend &gt; api doc tests performance</a> it turns out <code>test_docs.py</code> is a bit slower than you'd expect from looking at the code.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> mentioned this topic in <strong><a href=\"#narrow/stream/3-backend/topic/test_docs.2Epy.20performance/near/1601905\">#backend &gt; test_docs.py performance</a></strong>.</p>",
  "<p>The biggest culprit is <code>test_public_urls</code>, which does a lot of work, but it doesn't seem like it should be ~8s of work.</p>",
  "<p>Then there's also <code>test_api_redirects</code>, which somehow takes over a second to test a very simple redirect from \"<a href=\"https://chat.zulip.org/api/delete-stream\">/api/delete-stream</a>\" to \"<a href=\"https://chat.zulip.org/api/archive-stream\">/api/archive-stream</a>\".  I think it's a testing artifact, because in production it seems pretty zippy.</p>",
  "<p>I am wondering if we do something funny like aggressively build out the API docs the first time somebody asks for them.  Maybe in our test code we keep doing this for every test?</p>",
  "<p>I am seeing 111 calls to /home/zulipdev/zulip/templates/zerver/documentation_main.html when I run <code>test_api_redirects</code>, and that is suspiciously close to the number of API endpoints we have (~110).</p>",
  "<p>oops, that should be \"test_urls.py performance\" (but the above link still works after I renamed the other topic)</p>",
  "<p>Oy vey, I think that \"documentation_main.html\" is just a recursive function.</p>",
  "<p>Ok, one mystery solved: using <strong>openapi</strong> has a 1-second startup cost.</p>\n<p>Fortunately, you only pay it once per thread.</p>",
  "<p>So there is no more mystery about <code>test_api_redirects</code>.  If it's not the first test to deal with <code>zulip.yaml</code> then it runs in 0.3s, which seems normal enough.</p>",
  "<p>It would be nice if we just pseudo-compiled the YAML file to JSON outside of launching servers and running tests.  We could do all the YAML loading and naively_merge_allOf_dict muckety-muck as part of provisioning.  We could add a little defensive check in runtime code to make sure the JSON is newer than the yaml.  And then, finally, test-all could make sure that the YAML and JSON agree (w/about 10 lines of code).</p>",
  "<p>I just serialized the spec to a Python module, and it takes 3.6ms to load on the second import.</p>",
  "<p>...whereas it takes 30ms to import YAML and run <code>yaml.load</code>.  (There's other post-processing of the YAML that accounts for the full second of overhead that I mention above.)</p>",
  "<div class=\"codehilite\"><pre><span></span><code>&gt;&gt;&gt; import time; t = time.time(); import foo; print(time.time() - t)\n0.00360107421875\n</code></pre></div>",
  "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-        import yaml</span>\n<span class=\"w\"> </span>        from jsonref import JsonRef\n\n<span class=\"w\"> </span>        with open(self.openapi_path) as f:\n<span class=\"gu\">@@ -100,8 +99,15 @@ class OpenAPISpec:</span>\n<span class=\"w\"> </span>            if self.mtime == mtime:\n<span class=\"w\"> </span>                return\n\n<span class=\"gi\">+            import time</span>\n<span class=\"gi\">+            t = time.time()</span>\n<span class=\"gi\">+            import yaml</span>\n<span class=\"w\"> </span>            openapi = yaml.load(f, Loader=yaml.CSafeLoader)\n<span class=\"gi\">+            print(time.time() - t)</span>\n\n<span class=\"gi\">+        open(\"foo.py\", \"w\").write(f\"openapi = {openapi}\\n\")</span>\n<span class=\"gi\">+        import foo</span>\n<span class=\"gi\">+        openapi = foo.openapi</span>\n</code></pre></div>",
  "<p>Ok I pushed the code for that instrumentation to <a href=\"https://github.com/zulip/zulip/pull/26164\">#26164</a>.</p>",
  "<p>(slightly modified from above)</p>",
  "<p>Going back to the api doc tests, it takes roughly 80ms per page to test a page, which still seems a little high.  Some of that is a one-time hit to open zulip.yaml, and there's some other overhead too.</p>",
  "<p>Going back to <code>test_public_urls</code>, it's just processing a lot of help pages.</p>",
  "<p>I am splitting out the 191 help pages, which take about 31ms each to process.  The test is a dead simple <code>client_get</code> sanity check.</p>",
  "<p>I just pushed that change to <a href=\"https://github.com/zulip/zulip/pull/26162\">#26162</a></p>",
  "<p>So 63% of the meaningful time for <code>test_help_pages</code> is spent in the <code>alter_content</code> middleware for <code>FinalizeOpenGraphDescription</code>.  It then (indirectly) invokes <code>html_to_text</code> with <code>BeautifulSoup</code>.</p>",
  "<p><code>html_to_text</code> basically finds the first significant paragraph that's not a warning or code section, and then <code>alter_content</code> plops it into the HTML head section in a description tag by doing search/replace on a placeholder.  So the journey for that paragraph is:</p>\n<ul>\n<li>parse by markdown into HTML</li>\n<li>parse by Beautiful soup into text</li>\n<li>insert into HTML by alter_content via search/replace on a placeholder</li>\n</ul>",
  "<p>And just to be clear, <code>html_to_text</code> is the real culprit here in terms of time.  It's 8.085 out of alter_content's 8.149.  It actually does look ripe for optimization insofar as the BS parser is lazy.</p>",
  "<p><strong>CODE LINK</strong>: <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/html_to_text.py\">https://github.com/zulip/zulip/blob/main/zerver/lib/html_to_text.py</a> (small)</p>",
  "<p>Quick sanity check: Removing <code>alter_content</code> reduces the test time from ~7s to ~3s, so I am not misreading the profiler output.</p>",
  "<p>(And this particular test don't verify anything about the side effects of <code>alter_content</code>, so it does succeed without it.)</p>",
  "<p>The bulk of the time comes from <code>bs = BeautifulSoup(content, features=\"lxml\")</code>, so even if we were a bit smarter about traversing the DOM, it appears that <code>BeautifulSoup</code> does a lot of work up front.</p>",
  "<p>Part of the problem here is that each individual help page has a massive left sidebar with ~190 help links.  So even if we tried to write a quick-and-dirty parser just to find the first large chunk of text, we'd be wading through all that.</p>",
  "<p>Added the fix: <a href=\"https://github.com/zulip/zulip/pull/26165\">https://github.com/zulip/zulip/pull/26165</a>.</p>",
  "<p>Hrm, it might not be insane to try to extract the OG description from the raw markdown files.  It might even be more reliable.</p>",
  "<p>It appears that <code>alter_content</code> only affects documentation pages, so I doubt we should be concerned about actual systems performance here, and we just want to think tactically about making the tests faster.  Insofar as my test doesn't meaningfully check the OG stuff, I could just mock out either <code>alter_content</code> or <code>html_to_text</code> for a nice speed-up.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>  Is there a reason that <code>/attribution/</code> never allows robots?  Its being an exception to the rule kinda forces us to either:</p>\n<ul>\n<li>pass a bunch of flags around in the test code to handle one oddball case</li>\n<li>handle it in a test helper somewhat away from its natural place</li>\n<li>write a custom test for it</li>\n</ul>\n<p>I understand your comment in <a href=\"https://github.com/zulip/zulip/pull/26162#discussion_r1248181714\">https://github.com/zulip/zulip/pull/26162#discussion_r1248181714</a>, but I feel like I made the right tradeoff here.  There's no perfect solution, but I'd rather have 2 lines of code here than like 6 lines of code.</p>",
  "<p><a href=\"https://zulip.com/attribution/\">https://zulip.com/attribution/</a> for reference</p>",
  "<p>BTW I re-pushed <a href=\"https://github.com/zulip/zulip/pull/26162\">#26162</a> with a small tweak to the \"/attribution/\"-related code.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/api.20doc.20tests.20performance/near/1602083\">said</a>:</p>\n<blockquote>\n<p>Going back to the api doc tests, it takes roughly 80ms per page to test a page, which still seems a little high.  Some of that is a one-time hit to open zulip.yaml, and there's some other overhead too.</p>\n</blockquote>\n<p>So some of this is coming from <code>html_to_text</code>, which I can address with mocking, similar to what I just pushed for <code>test_urls.py</code>.</p>",
  "<p>^^^ Ok, that's now on <a href=\"https://github.com/zulip/zulip/pull/26162\">#26162</a> as well (and it did speed up the big test by a couple seconds).</p>",
  "<p><strong>Executive summary</strong>:</p>\n<ul>\n<li>for the alter_content slowness, I just went with the mocking approach to address it in the tests</li>\n<li>for the openapi slowness, I don't have any actionable suggestions, just musing</li>\n<li>there's no other low-hanging fruit in <code>test_urls.py</code> that I see</li>\n</ul>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/api.20narrow.20failure/near/1601277\">said</a>:</p>\n<blockquote>\n<p>I am pretty sure <span class=\"user-mention silent\" data-user-id=\"22341\">Prakhar Pratyush</span> has done that sort of testing in the last week, so perhaps it makes sense for him to do a quick test of that detail post-merge for this PR.</p>\n</blockquote>\n<p>I went through <a href=\"https://github.com/zulip/zulip/pull/26146\">#26146</a>; All the changes look internal to me and don't make any changes to the event we enqueue.<br>\nSo, I think we don't need any compatibility code here.</p>",
  "<p><code>wildcard_mentioned</code> flag is set for either <code>@stream</code> or <code>@topic</code> wildcard mention.</p>\n<p>Introduce two new fields <code>is_stream_wildcard_mention</code> and <code>is_topic_wildcard_mention</code> in the message send/edit event. </p>\n<p><span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> right?</p>",
  "<p>All my changes from late last week are merged now, and I feel like that was all pretty low hanging fruit.  The next frontier is to dig into <code>test_events.py</code>, and I probably won't get to that for a few days.  I remember spending a little time on this a couple years ago, and there were some challenges.  I don't recall anything being insurmountable.  For some reason I embarked on a pretty serious refactoring of the<code> fetch_initial_state_data</code> code, and I think it was at least partly related to test performance.  It was like a two-day spike that I abandoned after a little bit of code review pushback, but I don't think there were any serious hindrances to completing it other than competing priorities.  So it will be fun to attack it again with a fresh perspective.  If anybody wants to dig into this code, I would be happy to pair or kibitz.</p>",
  "<p>I think the essential problem is that <code>fetch_initial_state_data</code> basically assume you are registering for all events, and it's one long function (along with its sibling function to apply events).  Most of the events are actually pretty independent from each other, but not in a completely trivial way.</p>",
  "<p>Yeah most are independent but there are those that aren't and we care a lot about testing the cases where there is or might in the future be entanglement.</p>",
  "<p>I think probably I'd start by figuring out whether there's a part of the fetching work that is like 50% of the time that we could skip fetching in most test cases? </p>\n<p>That would be easier to reason about the risks of doing than it would be to think about moving to only requesting a few event types in each test.</p>",
  "<p>Why do we need the frontend to know whether a mention is a topic wildcard mention?</p>",
  "<p>I guess is it for the text in desktop notifications?</p>",
  "<p>I would expect the frontend to just look at the <code>.wildcard_mentioned</code> flag on the message object to decide whether to treat the message as a mention, and that would be all we need for frontend logic as I understand it.</p>",
  "<p>(We don't have a special flag distinguishing group mentions, even, today)</p>",
  "<p>Yeah, I think <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> ended up doing a version of that which just avoided making a change to the event format instead.</p>",
  "<p>Thanks for doing all the digging into this!</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26162\">#26162</a> is now merged. Hopefully the total impact here is significant for folks running the full backend tests! It certainly is meaningful in CI.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Chunk.20file.20upload/near/1598879\">said</a>:</p>\n<blockquote>\n<p>So it may make sense to pull in the equivalent defaulting into computed_settings.</p>\n</blockquote>\n<p>We also need to be careful about increasing the time to start a Zulip process; if the <code>ec2metadata</code> command is slow, that could have a significant cost. I suppose one option would be to do something in <code>puppet</code>.</p>",
  "<p>But given that for the moment chunked file upload support might be an optional setting anyway, it seems reasonable to just document that you need to set the S3 region setting if you're going to use it?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> is <a href=\"https://github.com/zulip/zulip/pull/26065\">#26065</a> ready for review? CI is failing and I'm not sure if there's further work to be done before trying to integrate it.</p>",
  "<p>Oh, let me fix it right now.</p>",
  "<p>I'm quickly going over it to see if the recent merge of can_mention_user_group interferes with this.</p>",
  "<p>The PR is ready for review. We can follow up with populating audit logs for <code>can_mention_user_group</code> separately.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/26178\">#26178</a> for implementing a Zulip variant of <code>TransactionTestCase</code>.</p>",
  "<p>This is related to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/UserGroup.20race.20conditions\">#backend &gt; UserGroup race conditions</a> where we wanted to test some transaction-specific behaviors with Django.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span> mentioned this topic in <strong><a href=\"#narrow/stream/3-backend/topic/TransactionTestCase/near/1603434\">#backend &gt; TransactionTestCase</a></strong>.</p>",
  "<p>The idea is that we can refactor <code>ZulipTestCase</code> into <code>ZulipTestCaseMixin</code>, which is a subclass of Django's <code>SimpleTestCase</code>. And then make use of mro so that we can combine <code>ZulipTestCaseMixin</code> with either <code>TransactionTestCase</code> or <code>TestCase</code>.</p>",
  "<p>By default, <code>TransactionTestCase</code> truncate the database by using the <code>flush</code> command. It effectively clears the test database of the current worker during the <code>tearDown</code> stage. Because our test runner is set up to only initialize the database once, this behavior is not viable.</p>",
  "<p>So I decided to turn it into no-op, at the cost of losing isolation between tests. This can be problematic because <code>TransactionTestCase</code> does not wrap tests into atomic transactions, so running tests <em>does</em> cause changes to be committed, leaving side effects that can interfere with other test cases.</p>",
  "<p>There are some possible ways to go around this:</p>\n<ul>\n<li>Isolate transaction test cases from regular test cases with a separate worker, and write test cases being aware of possible side effects</li>\n<li>Use the <a href=\"https://docs.djangoproject.com/en/4.2/topics/testing/tools/#transactiontestcase:~:text=you%20can%20set%20serialized_rollback%20%3D%20True%20inside%20the%20TestCase%20body.\"><code>serialized_rollback</code></a> feature. It serializes the database before each test and loads it back afterward. I couldn't get it working for some reason. It is also known to be very slow.</li>\n<li>(Current implementation) Make transaction tests separate so they only get run when the <code>--include-transaction-tests</code> argument. Manually restrict side effects when writing transaction test cases and leave transaction tests to the last for the test runner minimizing the impact.</li>\n</ul>",
  "<p>Scenarios where transaction test cases are needed are rare. And committing transactions is not always necessary for these test cases. So it is probably unlikely to have side effects that make backend tests flakey.</p>",
  "<p>A test based on <code>TransactionTestsCase</code> for this is added in <a href=\"https://github.com/zulip/zulip/pull/26048\">#26048</a>.</p>",
  "<p>An advantage of using a Django-based test case is that this works for backend coverage out of the box. The previous <code>test-api</code> approach is not so ideal in this aspect. <code>TransactionTestCase</code> combined with a <code>Barrier</code> for reproducing race conditions is also considerably faster.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/api.20narrow.20failure/near/1603407\">said</a>:</p>\n<blockquote>\n<p>Yeah, I think <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> ended up doing a version of that which just avoided making a change to the event format instead.</p>\n</blockquote>\n<p>That's partially true.  So far I have only changed internal stuff, but I do intend to eventually change how we serialize things, because the current format isn't flexible enough to deal with negated queries.  I won't be touching that code for a couple days, though. (just due to getting some personal things done)</p>",
  "<blockquote>\n<p>I guess is it for the text in desktop notifications?</p>\n</blockquote>\n<p>Yes, I was thinking of it similarly as we have different texts for email/push. But it looks like it's not required.<br>\nSo, we are good to go.</p>",
  "<p>The loss of isolation is mildly problematic, since it means that running the whole testsuite a second time may fail, when it passed the first time.  That's a recipe for frustration.</p>\n<p>I wonder if we could have the tearDown assert what changes are allowed to have happened to the database, so if someone writes a bad TransactionTestCase, that the test will fail rather than pollute the database state.</p>",
  "<p>Well, I guess it'd fail <em>and</em> pollute the database test state.  But at least it'd only affect the person writing the test, who is going to be more amenable to re-provisioning to a clean test db.</p>",
  "<p>Yup, makes sense.  Hopefully we can find something that's at least 20% of the cost, because even eliminating that would be a huge win.  My fear, though, is that it's just spread out over so many queries.  But it's been a couple years since I profiled this, so I'll try again.</p>",
  "<p>Looks like Django already runs <code>TestCase</code> before <code>TransactionTestCase</code>: <a href=\"https://docs.djangoproject.com/en/4.2/topics/testing/overview/#order-of-tests\">https://docs.djangoproject.com/en/4.2/topics/testing/overview/#order-of-tests</a></p>",
  "<p>This is good because <code>TransactionTestCase</code> won't pollute regular tests in this way. For detecting database changes, I'm not sure if there is a good way. Maybe we can use an <code>on_commit</code> hook on all transactions?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span> <a href=\"#narrow/stream/3-backend/topic/TransactionTestCase/near/1604286\">said</a>:</p>\n<blockquote>\n<p>This is good because <code>TransactionTestCase</code> won't pollute regular tests in this way.</p>\n</blockquote>\n<p>It can still pollute the database for the <em>next</em> run of the <code>TestCase</code> runs.</p>",
  "<p>I think we want to assert that there are no new rows in the database -- so maybe fingerprint the set of ids in every table, and compare post-test?</p>",
  "<p>(obviously, edits to rows could also cause problems, but inserts or deletions are much easier to test)</p>",
  "<blockquote>\n<p>for the <em>next</em> run of the TestCase runs.</p>\n</blockquote>\n<p>Oh, I see the point. We <a href=\"https://github.com/zulip/zulip/blob/086d6be8e255c868db8cb5d58a4506d7970da5d7/zerver/lib/test_runner.py#L208\">clone the test database per worker</a> every time we run the tests, so at least we have isolation between runs.</p>",
  "<p>Ah, great, so we can't drift there.</p>",
  "<p>ISTR (back when I was last working on test performance for a different project) that in PostgreSQL 9 cloning from a template DB was <em>really</em> slow.  I guess we only do it once per worker, so I guess they haven't improved perf of that too much.</p>",
  "<p>Yeah, we clone once per worker. I think assertions would be doable without compromising much performance. The alternatives such as cloning the database per transaction test/testcase will be a lot slower.</p>",
  "<p>I'm running into some trouble when using <code>select_for_update</code> within the <code>WITH</code> part of the recursive CTE.<br>\nThe error: <code>FOR UPDATE is not allowed with UNION/INTERSECT/EXCEPT</code>.<br>\nThis is a <a href=\"https://www.postgresql.org/docs/current/sql-select.html#:~:text=Currently%2C%20FOR%20NO%20KEY%20UPDATE%2C%20FOR%20UPDATE%2C%20FOR%20SHARE%20and%20FOR%20KEY%20SHARE%20cannot%20be%20specified%20either%20for%20a%20UNION%20result%20or%20for%20any%20input%20of%20a%20UNION.\">documented behavior</a><br>\nI also found a relevant response <a href=\"https://www.postgresql.org/message-id/27164.1551987517%40sss.pgh.pa.us\">here</a>, where it's explained that they are incompatible because of the ambiguity introduced.</p>",
  "<p>Is there a way to rewrite the CTE such that <code>UNION</code> is avoided?</p>",
  "<p>That may not be possible, because a group could be a subgroup via more than one path.</p>",
  "<p>I see. We can still acquire the lock on the full set of recursive descendants. This is less ideal than progressively acquiring the lock as we descent with the CTE.</p>\n<p>However, assuming we don't have too deep of a hiearchy, the window for race conditions during the recursive query is pretty narrow. The adversary has to complete a full request to add an subgroup in midst of the query in order to abuse this.</p>",
  "<p>I have updated <code>ZulipTransactionTestCase</code> to have checks for all tables for insertion/deletion, so one writing test cases would be responsible for restraining leakage.</p>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/TransactionTestCase\">#backend &gt; TransactionTestCase</a> by <span class=\"user-mention silent\" data-user-id=\"27334\">Vihaan M</span>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/TransactionTestCase/near/1604329\">said</a>:</p>\n<blockquote>\n<p>ISTR (back when I was last working on test performance for a different project) that in PostgreSQL 9 cloning from a template DB was <em>really</em> slow.  I guess we only do it once per worker, so I guess they haven't improved perf of that too much.</p>\n</blockquote>\n<p>Yeah, it takes like a few hundred milliseconds, which is fine as a one per worker thing, but not a thing we want to do in general.</p>",
  "<p>I imagine most of these hierarchies will be relatively simple.</p>",
  "<p>But we do need to be careful here to avoid intentional DoS nonsense.</p>",
  "<p>I am splitting this out from some more general discussion in <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/test-backend.20performance\">#backend &gt; test-backend performance</a> about backend tests.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> mentioned this topic in <strong><a href=\"#narrow/stream/3-backend/topic/test_events.2Epy.20performance/near/1606455\">#backend &gt; test_events.py performance</a></strong>.</p>",
  "<p>One of the most expensive tests in <code>tests_events.py</code> is <code>SubscribeActionTest.test_subscribe_events</code>, which takes about 4+ seconds on my droplet and about 8s when profiling.  Nearly half the time is spent in <code>validate_against_openapi_schema</code>, so I definitely want to come back to that.  I know that about 1s of the 3s is startup time to read <code>zulip.yaml</code>, and that's amortized for long test runs, but even so, it's clear that we have some opportunity there.  But for now I am gonna comment it out and look for other culprits.</p>",
  "<p>Once you remove that, it's pretty clear that about 70% of the time is indeed in <code>fetch_initial_state_data</code>, as we suspected in earlier conversations.  And then it's also clear that most of the time is in the database.  (A quick aside on this test is that we know it loops over 16 calls to <code>verify_action</code> for <strong>good</strong> reasons, and that leads to 32 calls for `fetch_initial_state_data.)</p>",
  "<p>It appears that only one function accounts for more than 10% of our fetching time when you profile the entire <code>tests_events.py</code> module.</p>\n<div class=\"codehilite\"><pre><span></span><code>calls cumtime\n1188  139.422  lib/events.py:105(fetch_initial_state_data)\n1186   23.313  actions/default_streams.py:179(get_default_streams_for_realm)\n1182   13.474  lib/message.py:1030(get_raw_unread_data)\n1192   12.813  lib/subscription_info.py:393(gather_subscriptions_helper)\n1168    6.675  lib/streams.py:826(do_get_streams)\n2358    6.435  lib/user_topics.py:17(get_user_topics)\n1176    5.777  lib/users.py:586(get_raw_user_data)\n1178    5.523  actions/users.py:491(get_owned_bot_dicts)\n1182    5.263  lib/message.py:1071(extract_unread_data_from_um_rows)\n1176    5.118  lib/user_status.py:52(get_user_status_dict)\n1178    4.683  lib/message.py:1499(get_recent_private_conversations)\n</code></pre></div>",
  "<p>There's an obvious thing to fix with <code>get_default_streams_for_realm</code>.  It uses <code>select_related</code> in what is probably a pretty unnecessary way.</p>",
  "<p>I think I recall one of our customers reporting really slow page loads due to them having an unusually large number of default streams.</p>",
  "<p>Ugh, and we have some really egregious examples where we get a list of super-fat stream objects where all we need is a set of default stream_ids to check against.</p>",
  "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>SQL you want to avoid at page load</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>SELECT \"zerver_defaultstream\".\"id\", \"zerver_defaultstream\".\"realm_id\", \"zerver_defaultstream\".\"stream_id\", \"zerver_realm\".\"id\", \"zerver_realm\".\"name\", \"zerver_realm\".\"description\", \"zerver_realm\".\"string_id\", \"zerver_realm\".\"date_created\", \"zerver_realm\".\"demo_organization_scheduled_deletion_date\", \"zerver_realm\".\"deactivated\", \"zerver_realm\".\"deactivated_redirect\", \"zerver_realm\".\"emails_restricted_to_domains\", \"zerver_realm\".\"invite_required\", \"zerver_realm\".\"max_invites\", \"zerver_realm\".\"disallow_disposable_email_addresses\", \"zerver_realm\".\"enable_spectator_access\", \"zerver_realm\".\"want_advertise_in_communities_directory\", \"zerver_realm\".\"inline_image_preview\", \"zerver_realm\".\"inline_url_embed_preview\", \"zerver_realm\".\"digest_emails_enabled\", \"zerver_realm\".\"digest_weekday\", \"zerver_realm\".\"send_welcome_emails\", \"zerver_realm\".\"message_content_allowed_in_email_notifications\", \"zerver_realm\".\"mandatory_topics\", \"zerver_realm\".\"name_changes_disabled\", \"zerver_realm\".\"email_changes_disabled\", \"zerver_realm\".\"avatar_changes_disabled\", \"zerver_realm\".\"move_messages_within_stream_limit_seconds\", \"zerver_realm\".\"move_messages_between_streams_limit_seconds\", \"zerver_realm\".\"add_custom_emoji_policy\", \"zerver_realm\".\"create_public_stream_policy\", \"zerver_realm\".\"create_private_stream_policy\", \"zerver_realm\".\"create_web_public_stream_policy\", \"zerver_realm\".\"delete_own_message_policy\", \"zerver_realm\".\"edit_topic_policy\", \"zerver_realm\".\"invite_to_realm_policy\", \"zerver_realm\".\"invite_to_stream_policy\", \"zerver_realm\".\"move_messages_between_streams_policy\", \"zerver_realm\".\"user_group_edit_policy\", \"zerver_realm\".\"private_message_policy\", \"zerver_realm\".\"wildcard_mention_policy\", \"zerver_realm\".\"waiting_period_threshold\", \"zerver_realm\".\"message_content_delete_limit_seconds\", \"zerver_realm\".\"allow_message_editing\", \"zerver_realm\".\"message_content_edit_limit_seconds\", \"zerver_realm\".\"allow_edit_history\", \"zerver_realm\".\"default_language\", \"zerver_realm\".\"notifications_stream_id\", \"zerver_realm\".\"signup_notifications_stream_id\", \"zerver_realm\".\"message_retention_days\", \"zerver_realm\".\"message_visibility_limit\", \"zerver_realm\".\"first_visible_message_id\", \"zerver_realm\".\"org_type\", \"zerver_realm\".\"plan_type\", \"zerver_realm\".\"bot_creation_policy\", \"zerver_realm\".\"upload_quota_gb\", \"zerver_realm\".\"video_chat_provider\", \"zerver_realm\".\"giphy_rating\", \"zerver_realm\".\"default_code_block_language\", \"zerver_realm\".\"enable_read_receipts\", \"zerver_realm\".\"icon_source\", \"zerver_realm\".\"icon_version\", \"zerver_realm\".\"logo_source\", \"zerver_realm\".\"logo_version\", \"zerver_realm\".\"night_logo_source\", \"zerver_realm\".\"night_logo_version\", \"zerver_stream\".\"id\", \"zerver_stream\".\"name\", \"zerver_stream\".\"realm_id\", \"zerver_stream\".\"date_created\", \"zerver_stream\".\"deactivated\", \"zerver_stream\".\"description\", \"zerver_stream\".\"rendered_description\", \"zerver_stream\".\"recipient_id\", \"zerver_stream\".\"invite_only\", \"zerver_stream\".\"history_public_to_subscribers\", \"zerver_stream\".\"is_web_public\", \"zerver_stream\".\"stream_post_policy\", \"zerver_stream\".\"is_in_zephyr_realm\", \"zerver_stream\".\"email_token\", \"zerver_stream\".\"message_retention_days\", \"zerver_stream\".\"can_remove_subscribers_group_id\", \"zerver_stream\".\"first_message_id\", T4.\"id\", T4.\"name\", T4.\"description\", T4.\"string_id\", T4.\"date_created\", T4.\"demo_organization_scheduled_deletion_date\", T4.\"deactivated\", T4.\"deactivated_redirect\", T4.\"emails_restricted_to_domains\", T4.\"invite_required\", T4.\"max_invites\", T4.\"disallow_disposable_email_addresses\", T4.\"enable_spectator_access\", T4.\"want_advertise_in_communities_directory\", T4.\"inline_image_preview\", T4.\"inline_url_embed_preview\", T4.\"digest_emails_enabled\", T4.\"digest_weekday\", T4.\"send_welcome_emails\", T4.\"message_content_allowed_in_email_notifications\", T4.\"mandatory_topics\", T4.\"name_changes_disabled\", T4.\"email_changes_disabled\", T4.\"avatar_changes_disabled\", T4.\"move_messages_within_stream_limit_seconds\", T4.\"move_messages_between_streams_limit_seconds\", T4.\"add_custom_emoji_policy\", T4.\"create_public_stream_policy\", T4.\"create_private_stream_policy\", T4.\"create_web_public_stream_policy\", T4.\"delete_own_message_policy\", T4.\"edit_topic_policy\", T4.\"invite_to_realm_policy\", T4.\"invite_to_stream_policy\", T4.\"move_messages_between_streams_policy\", T4.\"user_group_edit_policy\", T4.\"private_message_policy\", T4.\"wildcard_mention_policy\", T4.\"waiting_period_threshold\", T4.\"message_content_delete_limit_seconds\", T4.\"allow_message_editing\", T4.\"message_content_edit_limit_seconds\", T4.\"allow_edit_history\", T4.\"default_language\", T4.\"notifications_stream_id\", T4.\"signup_notifications_stream_id\", T4.\"message_retention_days\", T4.\"message_visibility_limit\", T4.\"first_visible_message_id\", T4.\"org_type\", T4.\"plan_type\", T4.\"bot_creation_policy\", T4.\"upload_quota_gb\", T4.\"video_chat_provider\", T4.\"giphy_rating\", T4.\"default_code_block_language\", T4.\"enable_read_receipts\", T4.\"icon_source\", T4.\"icon_version\", T4.\"logo_source\", T4.\"logo_version\", T4.\"night_logo_source\", T4.\"night_logo_version\", \"zerver_usergroup\".\"id\", \"zerver_usergroup\".\"name\", \"zerver_usergroup\".\"realm_id\", \"zerver_usergroup\".\"description\", \"zerver_usergroup\".\"is_system_group\", \"zerver_usergroup\".\"can_mention_group_id\", T6.\"id\", T6.\"name\", T6.\"description\", T6.\"string_id\", T6.\"date_created\", T6.\"demo_organization_scheduled_deletion_date\", T6.\"deactivated\", T6.\"deactivated_redirect\", T6.\"emails_restricted_to_domains\", T6.\"invite_required\", T6.\"max_invites\", T6.\"disallow_disposable_email_addresses\", T6.\"enable_spectator_access\", T6.\"want_advertise_in_communities_directory\", T6.\"inline_image_preview\", T6.\"inline_url_embed_preview\", T6.\"digest_emails_enabled\", T6.\"digest_weekday\", T6.\"send_welcome_emails\", T6.\"message_content_allowed_in_email_notifications\", T6.\"mandatory_topics\", T6.\"name_changes_disabled\", T6.\"email_changes_disabled\", T6.\"avatar_changes_disabled\", T6.\"move_messages_within_stream_limit_seconds\", T6.\"move_messages_between_streams_limit_seconds\", T6.\"add_custom_emoji_policy\", T6.\"create_public_stream_policy\", T6.\"create_private_stream_policy\", T6.\"create_web_public_stream_policy\", T6.\"delete_own_message_policy\", T6.\"edit_topic_policy\", T6.\"invite_to_realm_policy\", T6.\"invite_to_stream_policy\", T6.\"move_messages_between_streams_policy\", T6.\"user_group_edit_policy\", T6.\"private_message_policy\", T6.\"wildcard_mention_policy\", T6.\"waiting_period_threshold\", T6.\"message_content_delete_limit_seconds\", T6.\"allow_message_editing\", T6.\"message_content_edit_limit_seconds\", T6.\"allow_edit_history\", T6.\"default_language\", T6.\"notifications_stream_id\", T6.\"signup_notifications_stream_id\", T6.\"message_retention_days\", T6.\"message_visibility_limit\", T6.\"first_visible_message_id\", T6.\"org_type\", T6.\"plan_type\", T6.\"bot_creation_policy\", T6.\"upload_quota_gb\", T6.\"video_chat_provider\", T6.\"giphy_rating\", T6.\"default_code_block_language\", T6.\"enable_read_receipts\", T6.\"icon_source\", T6.\"icon_version\", T6.\"logo_source\", T6.\"logo_version\", T6.\"night_logo_source\", T6.\"night_logo_version\", T7.\"id\", T7.\"name\", T7.\"realm_id\", T7.\"description\", T7.\"is_system_group\", T7.\"can_mention_group_id\", T8.\"id\", T8.\"name\", T8.\"description\", T8.\"string_id\", T8.\"date_created\", T8.\"demo_organization_scheduled_deletion_date\", T8.\"deactivated\", T8.\"deactivated_redirect\", T8.\"emails_restricted_to_domains\", T8.\"invite_required\", T8.\"max_invites\", T8.\"disallow_disposable_email_addresses\", T8.\"enable_spectator_access\", T8.\"want_advertise_in_communities_directory\", T8.\"inline_image_preview\", T8.\"inline_url_embed_preview\", T8.\"digest_emails_enabled\", T8.\"digest_weekday\", T8.\"send_welcome_emails\", T8.\"message_content_allowed_in_email_notifications\", T8.\"mandatory_topics\", T8.\"name_changes_disabled\", T8.\"email_changes_disabled\", T8.\"avatar_changes_disabled\", T8.\"move_messages_within_stream_limit_seconds\", T8.\"move_messages_between_streams_limit_seconds\", T8.\"add_custom_emoji_policy\", T8.\"create_public_stream_policy\", T8.\"create_private_stream_policy\", T8.\"create_web_public_stream_policy\", T8.\"delete_own_message_policy\", T8.\"edit_topic_policy\", T8.\"invite_to_realm_policy\", T8.\"invite_to_stream_policy\", T8.\"move_messages_between_streams_policy\", T8.\"user_group_edit_policy\", T8.\"private_message_policy\", T8.\"wildcard_mention_policy\", T8.\"waiting_period_threshold\", T8.\"message_content_delete_limit_seconds\", T8.\"allow_message_editing\", T8.\"message_content_edit_limit_seconds\", T8.\"allow_edit_history\", T8.\"default_language\", T8.\"notifications_stream_id\", T8.\"signup_notifications_stream_id\", T8.\"message_retention_days\", T8.\"message_visibility_limit\", T8.\"first_visible_message_id\", T8.\"org_type\", T8.\"plan_type\", T8.\"bot_creation_policy\", T8.\"upload_quota_gb\", T8.\"video_chat_provider\", T8.\"giphy_rating\", T8.\"default_code_block_lan....</p>\n</div></div>\n<p>(too long to even include in a Zulip message)</p>",
  "<p><code>select_related</code> is just pure evil at times</p>\n<div class=\"codehilite\"><pre><span></span><code>        INNER JOIN &quot;zerver_realm&quot; ON (&quot;zerver_stream&quot;.&quot;realm_id&quot; = &quot;zerver_realm&quot;.&quot;id&quot;)\n        INNER JOIN &quot;zerver_usergroup&quot; ON (&quot;zerver_stream&quot;.&quot;can_remove_subscribers_group_id&quot; = &quot;zerver_usergroup&quot;.&quot;id&quot;)\n        INNER JOIN &quot;zerver_realm&quot; T4 ON (&quot;zerver_usergroup&quot;.&quot;realm_id&quot; = T4.&quot;id&quot;)\n        INNER JOIN &quot;zerver_usergroup&quot; T5 ON (&quot;zerver_usergroup&quot;.&quot;can_mention_group_id&quot; = T5.&quot;id&quot;)\n        INNER JOIN &quot;zerver_realm&quot; T6 ON (T5.&quot;realm_id&quot; = T6.&quot;id&quot;)\n        INNER JOIN &quot;zerver_usergroup&quot; T7 ON (T5.&quot;can_mention_group_id&quot; = T7.&quot;id&quot;)\n        INNER JOIN &quot;zerver_realm&quot; T8 ON (T7.&quot;realm_id&quot; = T8.&quot;id&quot;)\n        INNER JOIN &quot;zerver_usergroup&quot; T9 ON (T7.&quot;can_mention_group_id&quot; = T9.&quot;id&quot;)\n        INNER JOIN &quot;zerver_realm&quot; T10 ON (T9.&quot;realm_id&quot; = T10.&quot;id&quot;)\n        INNER JOIN &quot;zerver_usergroup&quot; T11 ON (T9.&quot;can_mention_group_id&quot; = T11.&quot;id&quot;)\n        WHERE &quot;zerver_stream&quot;.&quot;id&quot; IN (SELECT U0.&quot;stream_id&quot; FROM &quot;zerver_defaultstream&quot; U0 WHERE U0.&quot;realm_id&quot; = 2\n</code></pre></div>",
  "<p>You get the same evil join here, and that is much harder to fix:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"mi\">2852</span> <span class=\"nd\">@cache_with_key</span><span class=\"p\">(</span><span class=\"n\">get_stream_cache_key</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3600</span> <span class=\"o\">*</span> <span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"mi\">2853</span> <span class=\"k\">def</span> <span class=\"nf\">get_realm_stream</span><span class=\"p\">(</span><span class=\"n\">stream_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">realm_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">:</span>\n<span class=\"mi\">2854</span>     <span class=\"k\">return</span> <span class=\"n\">Stream</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name__iexact</span><span class=\"o\">=</span><span class=\"n\">stream_name</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(),</span> <span class=\"n\">realm_id</span><span class=\"o\">=</span><span class=\"n\">realm_id</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"2406\">Neil Pilgrim (neiljp)</span> mentioned this topic in <strong><a href=\"#narrow/stream/101-design/topic/Search.20results.20questions/near/1606495\">#design &gt; Search results questions</a></strong>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>  <a href=\"https://github.com/zulip/zulip/pull/26219\">#26219</a> addresses at least some of the problems around fat stream-related queries.  In particular, it fixes how we get default streams during page-load, and as a nice side effect, it speeds up <code>test_events.py</code> by about 10%.  Try to ping me online in the next few days to talk about some of the deeper problems related to fetching streams.</p>",
  "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/test_events.2Epy.20performance\">#backend &gt; test_events.py performance</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>7 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/default.20streams.20performance\">#backend &gt; default streams performance</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>The rest of the functions there seem either legitimately complex or completely sane.  I think all the ones in the 5 to 6 second range just reflect that doing DB work with Python/Django is a bit slow.</p>",
  "<blockquote>\n<p>Nearly half the time is spent in `validate_against_openapi_schema.</p>\n</blockquote>\n<p>It's more like 10% when you profile the entirety of <code>test_events.py</code>, and the bulk of the time is in the openapi library itself, so I am probably not gonna go down that rabbit hole for now.</p>",
  "<p>The <code>event_schema</code> checks appear to be completely negligible.</p>",
  "<p>In addition to looking at <code>tests_events.py</code> today, and making some progress there, I also just profiled the entire test suite. There were really no smoking guns there.  The database accounts for over 20% of the work being done.  Most of the zerver-related functions that show up high in the profile are things like <code>do_send_messages</code>, where we kinda know they have to do lots of things.</p>\n<p>So unless I get inspired later, I am probably done with this effort for now, apart from any follow up on the one pending PR.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26219\">#26219</a> now also improves performance when you are signing up users who weren't assigned streams by an admin (and thus get the default streams for the realm).</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/default.20streams.20performance/near/1606494\">said</a>:</p>\n<blockquote>\n<p>You get the same evil join here, and that is much harder to fix:</p>\n<p><div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"mi\">2852</span> <span class=\"nd\">@cache_with_key</span><span class=\"p\">(</span><span class=\"n\">get_stream_cache_key</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3600</span> <span class=\"o\">*</span> <span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"mi\">2853</span> <span class=\"k\">def</span> <span class=\"nf\">get_realm_stream</span><span class=\"p\">(</span><span class=\"n\">stream_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">realm_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">:</span>\n<span class=\"mi\">2854</span>     <span class=\"k\">return</span> <span class=\"n\">Stream</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name__iexact</span><span class=\"o\">=</span><span class=\"n\">stream_name</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(),</span> <span class=\"n\">realm_id</span><span class=\"o\">=</span><span class=\"n\">realm_id</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The above function is evil insofar as <code>select_related()</code> queries are pretty nasty when you have to hit the database, and even kind of yucky when you get the big fat objects out of memcached.  But on top of that, the stream cache is broken for <code>UserGroup</code>.</p>",
  "<p>Here is the failing test.  We don't want to cache values that have <code>select_related()</code> unless we intend to invalidate the cache for <strong>lots</strong> of different changes.  (The diff below actually passes, but only because I commented out the cache.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>get_stream() is broken</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-@cache_with_key(get_stream_cache_key, timeout=3600 * 24 * 7)</span>\n<span class=\"gi\">+# @cache_with_key(get_stream_cache_key, timeout=3600 * 24 * 7)</span>\n<span class=\"w\"> </span>def get_realm_stream(stream_name: str, realm_id: int) -&gt; Stream:\n<span class=\"w\"> </span>    return Stream.objects.select_related().get(name__iexact=stream_name.strip(), realm_id=realm_id)\n\n<span class=\"gh\">diff --git a/zerver/tests/test_subs.py b/zerver/tests/test_subs.py</span>\n<span class=\"gh\">index 0066d59e54..a221ea165c 100644</span>\n<span class=\"gd\">--- a/zerver/tests/test_subs.py</span>\n<span class=\"gi\">+++ b/zerver/tests/test_subs.py</span>\n<span class=\"gu\">@@ -469,6 +469,19 @@ class TestCreateStreams(ZulipTestCase):</span>\n<span class=\"w\"> </span>        # But it should be marked as read for Iago, the stream creator.\n<span class=\"w\"> </span>        self.assert_length(iago_unread_messages, 0)\n\n<span class=\"gi\">+    def test_user_group_save(self) -&gt; None:</span>\n<span class=\"gi\">+        realm = get_realm(\"zulip\")</span>\n<span class=\"gi\">+        stream = get_stream(\"Verona\", realm)</span>\n<span class=\"gi\">+        user_group = stream.can_remove_subscribers_group</span>\n<span class=\"gi\">+        assert stream.can_remove_subscribers_group.name == \"@role:administrators\"</span>\n<span class=\"gi\">+        user_group = UserGroup.objects.get(id=user_group.id)</span>\n<span class=\"gi\">+        user_group.name = \"fred\"</span>\n<span class=\"gi\">+        user_group.save()</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        stream = get_stream(\"Verona\", realm)</span>\n<span class=\"gi\">+        assert stream.can_remove_subscribers_group.name == \"fred\"</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n\n\n~~~\n</code></pre></div>\n</div></div>",
  "<p>So it was noted in <a class=\"stream-topic\" data-stream-id=\"137\" href=\"/#narrow/stream/137-feedback/topic/Using.20code.20blocks.20with.20.22Enter.20to.20send.22.20set.2C.20.2326085\">#feedback &gt; Using code blocks with \"Enter to send\" set, #26085</a>, that here in CZO the composebox typeahead header is being rendered even though a default syntax/language isn't set.</p>\n<p><a href=\"/user_uploads/2/5d/7lxrdBLkZ28ys2hDRRRHUwu-/Screenshot-from-2023-07-10-18-54-01.png\">Screenshot-from-2023-07-10-18-54-01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/5d/7lxrdBLkZ28ys2hDRRRHUwu-/Screenshot-from-2023-07-10-18-54-01.png\" title=\"Screenshot-from-2023-07-10-18-54-01.png\"><img src=\"/user_uploads/2/5d/7lxrdBLkZ28ys2hDRRRHUwu-/Screenshot-from-2023-07-10-18-54-01.png\"></a></div>",
  "<p>It looks like in commit <a href=\"https://github.com/zulip/zulip/commit/5c0a52585c1bd6d60227d5a52fcb327e0299cd38\">5c0a52585c1bd6d60227d5a52fcb327e0299cd38</a>, we changed the frontend code to check for <code>null</code> instead of an empty string. But I don't think that addressed the underlying issue, which is how this realm setting is updated when an organization sets and then unsets this setting.</p>",
  "<p>The field in the <code>Realm</code> class is: </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">default_code_block_language</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>So, it's <code>null</code> or <code>None</code> when an organization is created, but then if at any point the organization sets and unsets this realm setting, then it is saved as an empty string in the database, not <code>None</code>. I'm guessing this is what happened at some point in CZO since I can reproduce in the dev environment.</p>",
  "<p>There is <a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/realm.py#L324-L329\">this block</a> in <code>update_realm</code> in <code>zerver/views/realm.py</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"n\">default_code_block_language</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Migrate '', used in the API to encode the default/None behavior of this feature.</span>\n        <span class=\"k\">if</span> <span class=\"n\">default_code_block_language</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"default_code_block_language\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"default_code_block_language\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">default_code_block_language</span>\n</code></pre></div>",
  "<p>But that only updates the data in the success response for the realm setting change. The events sent to other users and what's returned as the realm setting moving forward is the empty string, because this is done via the normal <code>do_set_realm_property</code> loop earlier in that same function.</p>",
  "<p>Here's a screenshot of the documentation for this realm setting api/register-queue:<br>\n<a href=\"/user_uploads/2/50/fp72wi_Vmp7ovhV08RcZwE8p/Screenshot-from-2023-07-10-18-50-21.png\">Screenshot-from-2023-07-10-18-50-21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/50/fp72wi_Vmp7ovhV08RcZwE8p/Screenshot-from-2023-07-10-18-50-21.png\" title=\"Screenshot-from-2023-07-10-18-50-21.png\"><img src=\"/user_uploads/2/50/fp72wi_Vmp7ovhV08RcZwE8p/Screenshot-from-2023-07-10-18-50-21.png\"></a></div>",
  "<p>The realm description is the only other realm setting that's a text field and is in <code>Realm.property_types</code>. The realm description has a default value as an empty string, instead of <code>None</code>. So, I don't think there are other realm settings with this particular issue.</p>",
  "<p>I did some benchmarks today that demonstrate that <code>bulk_get_streams</code> is actually slower than just always hitting the database and bypassing the cache.  The code is <a href=\"https://github.com/zulip/zulip/blob/ec83c0da66ed238345418fdbf3f34fdce08eb9b7/zerver/tests/test_foo.py#L100\">here</a>, and I am hoping somebody can either try to reproduce it or debunk my methodology.</p>",
  "<p>Good sleuthing -- do we want to make the default just the empty string, and make the field non-nullable?  That seems potentially cleanest here.</p>",
  "<p>I ran this <strong>several</strong> times with basically the same result (i.e. hitting the database directly is usually about 3x as fast):</p>\n<div class=\"codehilite\"><pre><span></span><code>bulk cache\n[0.9146922011859715, 0.7690918510779738, 0.8060210207477212]\n\nbulk db\n[0.25763314170762897, 0.18703006021678448, 0.18225766392424703]\n\ncompute cache key\n[0.009723953902721405, 0.00922292796894908, 0.010012921877205372]\n</code></pre></div>",
  "<p>My original theory was that calling <code>make_safe_digest</code> in a loop to compute cache keys was slow, but the numbers above disprove that theory.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26226\">#26226</a> is the PR</p>",
  "<p>Have you checked if it\u2019s indeed hitting the cache? If it\u2019s not, the no-argument <code>select_related()</code> in <code>bulk_get_streams</code> would make the DB query more expensive than necessary (as you\u2019ve just discovered).</p>",
  "<p>In the PR I remove <code>select_related()</code>.</p>",
  "<p>Oh I see, yeah.</p>",
  "<p>Let me double-check the cache though.</p>",
  "<p>Hrm, I checked this pretty carefully at a smaller number of streams, but apparently I can only keep about 300 of these in cache, so it was going to the database.</p>",
  "<p>Same results once I use a smaller size:</p>\n<div class=\"codehilite\"><pre><span></span><code>bulk cache\n[0.4464667462743819, 0.3878071131184697, 0.4701911937445402]\n\nbulk db\n[0.14646461559459567, 0.1548163997940719, 0.13943102722987533]\n</code></pre></div>",
  "<p>I just pushed up some small fixes.</p>",
  "<p>One obvious theory here is that databases have high up-front costs, but then very low marginal costs for additional rows in a single round trip.  I was able to support that theory a bit with <code>test_db_overhead</code>, which shows about 20 microseconds per row when you fetch from the DB in bulk (vs. ~2 millisecond for round-tripping a really simple one-row query).</p>",
  "<p>(Or maybe the Django ORM has a lot of overhead per query, but not per row fetched, which also seems plausible to me.)</p>",
  "<p>I don't think the fact that I'm running these via the test runner is pertinent, because for single-row benchmarks, memcached slaughters the database/ORM combo.</p>",
  "<p>For me it's about 30 rows when the DB starts winning (despite its bigger up-front costs).</p>",
  "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Bulk fetch times</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>1\nbulk cache 0.002653959207236767\nbulk db    0.045924289152026176\n\n5\nbulk cache 0.010197363793849945\nbulk db    0.06652959296479821\n\n10\nbulk cache 0.02040436863899231\nbulk db    0.09338273340836167\n\n30\nbulk cache 0.05801175581291318\nbulk db    0.05306070111691952\n\n50\nbulk cache 0.10182088287547231\nbulk db    0.07007803302258253\n\n70\nbulk cache 0.1297012367285788\nbulk db    0.072620437014848\n</code></pre></div>\n</div></div>",
  "<p>I just pushed:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-            print(label)</span>\n<span class=\"gd\">-            print(timeit.repeat(f, number=30, repeat=3))</span>\n<span class=\"gd\">-            print()</span>\n<span class=\"gi\">+            print(label, min(timeit.repeat(f, number=30, repeat=3)))</span>\n\n<span class=\"w\"> </span>        print(\"Numbers are relative to each other\")\n<span class=\"w\"> </span>        print()\n\n<span class=\"gd\">-        test(\"bulk cache\", lambda: bulk_get_streams(realm, stream_names))</span>\n<span class=\"gd\">-        test(\"bulk db\", lambda: bulk_get_streams_db(realm, stream_names))</span>\n<span class=\"gi\">+        for n in [1, 5, 10, 30, 50, 70]:</span>\n<span class=\"gi\">+            print(n)</span>\n<span class=\"gi\">+            test(\"bulk cache\", lambda: bulk_get_streams(realm, stream_names[:n]))</span>\n<span class=\"gi\">+            test(\"bulk db   \", lambda: bulk_get_streams_db(realm, stream_names[:n]))</span>\n<span class=\"gi\">+            print()</span>\n</code></pre></div>",
  "<p>Yeah that solution seems fine.</p>",
  "<p>Hmm. I can't say I love the bulk database query runtimes; the bulk cache query times are even worse. I feel like there must be something wrong with how we're doing the cache queries -- <code>memcached</code> should be doing something very cheap here.</p>",
  "<p>One theory is that we're pickling complex objects to put them into the cache, and THAT is what is expensive. I suspect a few categories of things:</p>\n<ul>\n<li>Metadata objects hanging of <code>class Stream</code> or <code>class Realm</code> like <code>COMMON_POLICY_TYPES</code> that aren't actually part of the data object.</li>\n<li>The <code>select_related</code> chaining.</li>\n</ul>\n<p>I think the best fix here is probably to figure out how to limit the scope of the <code>select_related</code> calls here to just get the direct relations we care about -- mostly the direct properties on the <code>.realm</code> field, and not any of the <code>.foo_group</code> things, in that what we're doing is wrong for the DB there too, and then see where that leaves us with this cache question.</p>",
  "<p>If each <code>Stream</code> object in that cache ends up with several pickled copies of <code>Realm.ORG_TYPES</code>, that would bit a bit of a mess and might explain what you're seeing.</p>",
  "<p>(E.g. <code>stream.can_remove_subscribers_group.realm.ORG_TYPES</code>).</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> I made pretty sure in my benchmarks that we were testing simple ORM model objects.  The broad use of <code>select_related</code> is something we should address in the short term for streams, but it doesn't resolve the bigger problem here.  The glass-half-full of the world is that databases are just super fast after the initial startup cost, so maybe we just entrust the databases for any large queries.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1607138\">said</a>:</p>\n<blockquote>\n<p>In the PR I remove <code>select_related()</code>.</p>\n</blockquote>\n<p>This was a very important detail in how I performed benchmarks on the bulk queries.  I wanted to just fetch really simple Stream objects using name as the key, and the database performed better than <code>memcached</code>.  There is no inherent architectural reason why memcached couldn't just rip through a bulk set of keys, but it's apparently slower.  I just think databases like postgres are super fast at medium scale (i.e. 50 - 10000 rows).</p>",
  "<p>Just to be clear about my long term agenda, I really believe we can entrust the database with 100% of our needs, and we should strive to eliminate memcached.  You can create super-simple key-value tables in postgres, and then you have all the other tools in your toolbox such as stored procedures.</p>\n<p>But I also think there's a world in which we simply tweak <code>generic_bulk_cached_fetch</code> to be a little smarter.  If the number of keys that you send to it is more than some cutoff like 50 records, just send it to off the database.  You would be less likely to pollute your cache with objects from one rogue query.  And you save all the one-time costs that are inherent to any single DB round trip (including ORM stuff).</p>",
  "<p>Other than latency considerations, the main downside of going directly to the database for things is load on the database server. Going directly to the database will almost always be better for correctness, and I would generally be happy to do that for anything that doesn't contribute materially to total database load, which might very well be the case for <code>bulk_get_streams</code>.</p>",
  "<p>But I still don't understand how it's possible that the performance of memcached would be as bad as indicated in those experiments.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/default.20streams.20performance/near/1606657\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/zulip/zulip/pull/26219\">#26219</a> now also improves performance when you are signing up users who weren't assigned streams by an admin (and thus get the default streams for the realm).</p>\n</blockquote>\n<p>This is great, thanks!</p>",
  "<p>I think the principal issue with <code>get_stream</code> is that we never want to prefetch <code>can_foo_group</code> groups... but also it seems very possible that getting rid of the cache would be fine; I'm not aware of places we would be doing it at very high volume or in a loop such that a cache would add much.</p>",
  "<p>It might be the case that <code>validate_against_openapi_schema</code> could benefit from an in-process simple string cache; the pre-change <code>fetch_initiali_state_data</code> calls will often have repeats between different tests. Not sure if there's a coherent way to do that, but we might be able to buy a factor of 2 on that part without looking at the third-party library.</p>",
  "<p>I said this on one of the PRs, but yeah you can give arguments like <code>.select_related(\"stream\", ...)</code> to tell it which joins to do instead of all of them.</p>",
  "<p>(But it seems something else is going on.)</p>",
  "<p>How much burden can a simple key-value store take off of a sophisticated database?  The database knows how to do key/value lookups too.  It's not being defended by memcached, it's competing for resources.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1607340\">said</a>:</p>\n<blockquote>\n<p>I said this on one of the PRs, but yeah you can give arguments like <code>.select_related(\"stream\", ...)</code> to tell it which joins to do instead of all of them.</p>\n</blockquote>\n<p>I think <code>selected_related</code>, while important to some broader conversations, is a bit of a red herring in this particular conversation.</p>",
  "<p>I still want to get rid of at least one of memcached or Redis because there\u2019s no way it\u2019s helpful to have both.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/test_events.2Epy.20performance/near/1607338\">said</a>:</p>\n<blockquote>\n<p>It might be the case that <code>validate_against_openapi_schema</code> could benefit from an in-process simple string cache; the pre-change <code>fetch_initiali_state_data</code> calls will often have repeats between different tests. Not sure if there's a coherent way to do that, but we might be able to buy a factor of 2 on that part without looking at the third-party library.</p>\n</blockquote>\n<p>I am 99% sure we only check the schema once per cycle, even though we fetch twice.  But it's a good thought.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/default.20streams.20performance/near/1607337\">said</a>:</p>\n<blockquote>\n<p>I think the principal issue with <code>get_stream</code> is that we never want to prefetch <code>can_foo_group</code> groups... but also it seems very possible that getting rid of the cache would be fine; I'm not aware of places we would be doing it at very high volume or in a loop such that a cache would add much.</p>\n</blockquote>\n<p>Yeah, that's my thought too.  The stream cache is keyed by stream name, not stream id, which makes me think it's mostly ignored for stuff like page load where we already have a list of stream ids, and not stream names.  I could track this down as needed, but I think the conversation on <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/bulk_get_streams.20slowness\">#backend &gt; bulk_get_streams slowness</a> might cut to the chase even faster.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> mentioned this topic in <strong><a href=\"#narrow/stream/3-backend/topic/default.20streams.20performance/near/1607347\">#backend &gt; default streams performance</a></strong>.</p>",
  "<p>Currently, on the deletion of the related <code>modified_user</code> or <code>modified_stream</code>, the <code>RealmAuditLog</code> is deleted because we have <code>ON DELETE CASCADE</code> on both of them. In response to <a href=\"https://github.com/zulip/zulip/pull/26065/files/3ad0e770f0a6d58bf644effc1f5242086990e13f#r1259032571\">this comment</a> on the PR that adds <code>modified_user_group</code> to <code>RealmAuditLog</code>, we want to determine if <code>ON DELETE CASCADE</code> is appropriate for any of these <code>modified_*</code> fields.</p>",
  "<p>This also came up <a href=\"#narrow/stream/101-design/topic/Support.20user.20group.20deactivation/near/1594079\">here</a> when discussing deactivation vs. deletion. If we want to support a proper implementation of deletion, <code>CASCADE</code> almost certainly won't be an option.</p>",
  "<p>We might want to use <a href=\"https://docs.djangoproject.com/en/4.2/ref/models/fields/#django.db.models.PROTECT\"><code>PROTECT</code></a> instead for these fields. It is possible for us to prepare the audit logs that hold a reference to the to-be-deleted row, and remove that reference by nulling it or pointing it to a dummy row.</p>",
  "<p>A good cleanup project for somebody who understands the Django ORM pretty well is to do <code>git grep '[.]objects.select_related\\(\\)'</code> and find all the places where we call <code>select_related</code> with no arguments.  When you don't pass in specific tables to <code>select_related()</code>, Django tries to pre-fetch all the data that could conceivably be de-referenced from the main objects in the query, and this is usually more aggressive and expensive than we want.</p>",
  "<p>For context, I recently eliminated one such use of <code>select_related()</code> to make about a 10% speedup for one of our most expensive test modules.</p>",
  "<p>And then <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> suggested <a href=\"https://github.com/zulip/zulip/pull/26219#discussion_r1258891703\">here</a> to follow up on chat.</p>",
  "<p>If anybody's interested in working on this, I can provide help. It's the kind of project where you want to be pretty careful for the first couple places you touch, and build up some tooling, but then once you have that in place, you can probably produce a pretty long and useful PR.</p>",
  "<p>That makes sense to me. I'll work on making that update.</p>",
  "<p>Here's an interesting rule of thumb: A 400-row query is only 5x more expensive than a single-row query.</p>",
  "<div class=\"codehilite\"><pre><span></span><code>Running zerver.tests.test_foo.Whatever.test_db_tipping_point\n1 0.04204745404422283\n100 0.0816761557944119\n200 0.1359752006828785\n300 0.15301433391869068\n400 0.2041947217658162\n500 0.2809681878425181\n</code></pre></div>",
  "<p>Presumably that depends a bit on how wide the returned query is.</p>",
  "<p>Yeah, for sure.  I tested with Stream. See <a href=\"https://github.com/zulip/zulip/pull/26226\">#26226</a>  if you feel like fiddling.  The other caveat, of course, is that I'm running on my particular droplet.</p>",
  "<p>Stream has ~18 columns.  My test data has no large strings, so the rows are pretty narrow.</p>",
  "<p>I think the startup cost is probably proportional to the number of columns in a fairly similar way that the marginal cost is, but I would love to see an interesting counterexample.</p>",
  "<p>well, some of it, I guess</p>",
  "<p>I would love to know what dominates the startup cost:</p>\n<ul>\n<li>Django building queries</li>\n<li>establishing the connection</li>\n<li>DB parsing SQL</li>\n<li>query planning</li>\n<li>sending data over the wire</li>\n<li>Django building objects</li>\n<li>other?</li>\n</ul>",
  "<p>I <del>know</del> assume there are <del>pretty easy</del> viable ways to measure at least some of those factors.</p>",
  "<p>It would be interesting to graph postgres and memcached costs on the Y axis vs. number of rows on the X axis for some fairly representative Zulip database query.  I think I'm capable of it, but it's probably not gonna happen today.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26235\">#26235</a> would eliminate the moving part of memcached from our get-stream-by-name queries.  Reviews appreciated.  The last commit requires the most scrutiny.  It's deliciously pink.</p>",
  "<p>These ones are probably the simplest since they don't involve foreign keys at all:</p>\n<div class=\"codehilite\"><pre><span></span><code>zerver/lib/cache_helpers.py:        lambda: Client.objects.select_related().all(),\nzerver/lib/cache_helpers.py:        lambda: Huddle.objects.select_related().all(),\n</code></pre></div>",
  "<p>The call in <code>get_usermessage_by_message_id</code> might not be too hard to remove, since the only caller is <code>access_message</code>, which gets the full <code>Message</code> object separately anyway, so I'd be surprised if anything looks at the related fields.</p>",
  "<p>There's of course plenty of others where we're using it -- mainly I'd expect us to change things to do <code>select_related(\"realm\")</code>, for example on UserProfile, rather than <code>select_related()</code>, with the main benefit being to avoid grabbing <code>realm.can_foo_group</code> elements, which we don't need, and any cascading stuff we get from getting those.</p>",
  "<p>If somebody wants to tackle these, an interesting thing you can try is to get the test_runner to just measure the total number of queries.  You might not need to even get granular to the level of each test.  And then if you remove <code>select_related</code>, run the test suite and see if the number of queries increases.</p>",
  "<p>I think we might actually need to get rid of the <code>UserProfile</code>, <code>Stream</code>, and <code>Realm</code> bare <code>select_related()</code> calls as a timely priority; <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/bulk_get_streams.20slowness\">#backend &gt; bulk_get_streams slowness</a> is working on <code>Stream</code>. </p>\n<p>Some of the <code>.foo_group_id</code> fields are new in the last few weeks and haven't made it to production yet, and I'm now worried that the thing you've discovered here is a significant performance regression introduced by adding <code>.foo_group_id</code> fields. <span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> FYI.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> mentioned this topic in <strong><a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args/near/1607767\">#backend &gt; select_related() with no args</a></strong>.</p>",
  "<p>I think removing that cache is unlikely to be a thing we regret after a bit of auditing, thanks for thinking of that idea.</p>",
  "<p>(We just don't do that many stream name based lookup API calls anymore, and we have the exact index we need)</p>",
  "<p>I think it's possible that CASCADE is what we want in that there's nothing else to do if one hard-deletes an object, but we should consider this a motivation to change user groups to have a deactivation model.</p>",
  "<p>Yeah I'm pretty happy with the plan there.</p>",
  "<p>Do we think this is ready to attempt on <a href=\"http://chat.zulip.org\">chat.zulip.org</a> at this point?</p>",
  "<p>(I've not done a review pass since the last round a month ago)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> has marked this topic as resolved.</p>",
  "<p>I addressed the first round of feedback on <a href=\"https://github.com/zulip/zulip/pull/26235\">#26235</a>.  I am trying really hard to hold back my Iterable/Sequence/Collection rant.</p>",
  "<p>I'll give one little quick taste of the rant.  If you ever create a function that takes an Iterable and you immediately turn it into a list, then we should have a talk.  Make the caller turn into a concrete list.  The caller should know that whatever fancy thing they did to make a general iterable is gonna go to waste as soon as they call your function.  Call it a \"List\".  A rose is a rose is a rose, as Mark Twain so poignantly never said.</p>",
  "<p>I think this is reasonably ready, yes.</p>",
  "<p>Specifically, that'd be cherry-picking <a href=\"https://github.com/zulip/zulip/pull/25932\">#25932</a> onto <code>chat.zulip.org</code> and running the migrations.</p>",
  "<p>I have been wondering this a long time.  Why do we have all these annotations with Collection, Sequence, and Iterable, when Python has completely reasonable built-in types called Dict, List, and Set that are all completely interoperable and understandable and concrete?</p>",
  "<p>If we need to enforce immutability, why can't we just have ImmutableDict, ImmutableList, and ImmutableSet?</p>",
  "<p>What in the world does Collection mean?  It seems like the broadest type possible if you go to, um, the collections module reference page:</p>\n<p><a href=\"/user_uploads/2/96/aiwOD6UGs8pRTkwdFPomY-RW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/96/aiwOD6UGs8pRTkwdFPomY-RW/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/96/aiwOD6UGs8pRTkwdFPomY-RW/image.png\"></a></div>",
  "<p>Is a Sequence supposed to be an immutable list?</p>",
  "<p>I know at least 10 programming languages on a fairly fluent basis, and I have never come across a Sequence type.  Do I need to brush up on Haskell?</p>",
  "<p>Every time I see Collection, Sequence, or Iterable, I am just guessing.</p>",
  "<p>Surely I am not the only person confused by these annotations.</p>",
  "<p>Sounds good. Let me know when you are on it, so that I can get it updated when needed.</p>",
  "<p>Iterable is way too broad for most functions to accept.  If you want a List, ask for a List.</p>",
  "<p>Tuples are completely evil and we should phase them out, but if you want a tuple, ask for a Tuple.</p>",
  "<p>The current scheme just feels like a maze of complexity.  Am I overlooking some useful documentation of when to choose these?</p>",
  "<p>Why do we need AbstractSet?  A set is already an abstraction.</p>",
  "<p>Why do we need Mapping instead of Dict?</p>",
  "<p>It's like word soup trying to understand what's going on.</p>",
  "<p>I think a bunch of the differences are for if they're covariant, invariant, or contra-variant.  Most immutable types are covariant, and most mutable types are invariant.  Ref <a href=\"https://mypy.readthedocs.io/en/stable/generics.html#variance-of-generic-types\">relevant mypy docs</a>.</p>\n<p>I agree they're hard to keep straight.</p>",
  "<p>Insofar as most types are covariant or invariant, it would be nice if we used ImmutableDict for the covariant situations and Dict for the invariant situations, and then do the equivalent things for List and Set.  And then for contra-variant types, we could call them out however, and they would actually stand out as things to ponder a bit.</p>\n<p>I appreciate that you appreciate that they're hard to keep straight.</p>",
  "<p>The main thing that I expect from mypy is just to prevent silly errors from mis-placing parameters or too aggressively refactoring stuff.  I wish we had Dict, Set, and List in almost all places where functions are concretely dealing with dicts, sets, and lists.  Things like checking for immutability would be nice, but I feel like it should be better thought out in terms of programmer understanding.  The current situation feels chaotic.  I have definitely encountered situations where very similar functions seem to arbitrarily choose between Iterable, Sequence, Collection, and List, and I am pretty confident that the programmers in question did what I do sometimes and just cargo-cult it and pray that mypy doesn't complain.</p>",
  "<p><code>Collection</code> is particularly terrible in my opinion.  If you search within the doc that Alex linked, and believe me that I have seen that link before when trying my best to understand mypy, here is what you get:</p>\n<div class=\"codehilite\"><pre><span></span><code>The built-in collection classes are generic classes.\n</code></pre></div>",
  "<p>Shouldn't <code>Collection</code> be the broadest type ever?  It basically means you're not dealing with a str, bool, or int, if you understand English and programming languages like a normal person.</p>",
  "<p>Where are its semantics documented?</p>",
  "<p>It's a thing which is <code>Sized</code>, <code>Iterable</code>, and a <code>Container</code> -- see <a href=\"https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes\">collections.abc</a>.</p>\n<p>That is, it implements <code>__contains__</code>, <code>__len__</code>, and <code>__iter__</code>.</p>",
  "<p>Sounds a lot like a List to me.  Lists are extremely easy to create from anything that supports <code>__contains__, __len__, and __iter__</code>.</p>\n<p>(Sorry if I come across as snarky, Alex.  I know you're just answering my questions in good faith.)</p>",
  "<p>I appreciate the existence of <code>collections.abc</code> for people that are dealing with serious type-related issues.  But Zulip just slings arounds Dicts, Sets, and Lists that are mostly based off of an even simpler model of data that E.F. Codd made famous.  Our annotations should reflect that.</p>",
  "<p>If I write a function and test it out using dictionary inputs in some kind of unit test, then my annotation should just say <code>Dict</code>.  Because that's what my function works with.</p>",
  "<p>A virtualized database query also matches that, but might implement <code>__contains__</code> using <code>__iter__</code> over its paginated rows, and never holds the full resultset in memory.  I wouldn't want to force that into a <code>List</code> necessarily.</p>\n<p>I think the \"always use the most generic form\" isn't necessarily good advice, because we probably <em>do</em> assume that we can random-access many data structures, which means that we shouldn't declare them as <code>Collection</code>s or what-not.  I think in <em>most</em> cases <code>List</code> and <code>Dict</code> are going to be Just Fine and match our assumptions about them.  but sometimes we really <em>do</em> want the flexibility of declaring something to take and <code>Iterable</code>.  The extra types aren't just there to trip you up, I swear. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Same for <code>Set</code>.  Same for <code>Dict</code>.  And if I make a needless tuple, the code reviewer should suggest a dataclass if it's heterogeneous data or a list if it's homogeneous.</p>",
  "<p>You seem to be implying there's a push to stamp out all <code>Dict</code> and <code>List</code> annotations, which I don't think is accurate:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rg -t py &#39;Collection&#39; | wc -l\n66\n$ rg -t py &#39;Dict&#39; | wc -l\n2208\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607882\">said</a>:</p>\n<blockquote>\n<p>... sometimes we really <em>do</em> want the flexibility of declaring something to take and <code>Iterable</code>.  The extra types aren't just there to trip you up, I swear. :)</p>\n</blockquote>\n<p>I get it.  I've written generator functions before, and I've worked in big-data environments where you really do need to iterate over something akin to a stream rather than putting something into memory.</p>\n<p>But I challenge anybody to find an actual concrete case where Zulip actually needs an Iterable.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607884\">said</a>:</p>\n<blockquote>\n<p>You seem to be implying there's a push to stamp out all <code>Dict</code> and <code>List</code> annotations, which I don't think is accurate:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>$ rg -t py &#39;Collection&#39; | wc -l\n66\n$ rg -t py &#39;Dict&#39; | wc -l\n2208\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm not implying that at all.  66 is too high. 2208 is applaudable.  I contend that the 66 are a somewhat arbitrary subset of the 2274.</p>",
  "<blockquote>\n<p>But I challenge anybody to find an actual concrete case where Zulip actually needs an Iterable.</p>\n</blockquote>\n<p><code>do_soft_activate_users</code> literally takes an Iterable specifically because we don't want to load all of the rows into memory, the example I was just citing.</p>",
  "<p>I bet if you sampled five of those 66 uses of <code>Collection</code>, four of them could easily be converted to <code>List</code> without breaking the semantics.  By \"easily\" I am assuming the callers are sane.</p>",
  "<p>Sure, OK.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607838\">said</a>:</p>\n<blockquote>\n<p>I have been wondering this a long time.  Why do we have all these annotations with Collection, Sequence, and Iterable, when Python has completely reasonable built-in types called Dict, List, and Set that are all completely interoperable and understandable and concrete?</p>\n</blockquote>\n<p>To me, \"all these\" reads as a lot more than we actually have.  I agree that not all of the use cases of them are necessary, but I also don't find that reading <code>Collection</code> messes up my flow of understanding what the code does, so I don't have a problem with them.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607887\">said</a>:</p>\n<blockquote>\n<p><code>do_soft_activate_users</code> literally takes an Iterable specifically because we don't want to load all of the rows into memory, the example I was just citing.</p>\n</blockquote>\n<p>For no good reasons.  UserProfile records are tiny in the grand scheme of things.</p>",
  "<p>This is literally an example of having too broad a type.</p>",
  "<p>I have definitely fixed bugs where a caller returns a QuerySet (like <code>get_users_from_emails</code>) when you think it's returning a List.</p>",
  "<p>You should never have a function return a <code>QuerySet</code> unless you very intentionally intend (intentionally redundant) to compose queries from it.  99% of the time you just should just list-ify the results.</p>",
  "<p>This is terrible:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code> <span class=\"mi\">19</span> <span class=\"k\">def</span> <span class=\"nf\">get_users_from_emails</span><span class=\"p\">(</span>\n <span class=\"mi\">20</span>     <span class=\"n\">emails</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">filter_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Realm</span><span class=\"p\">]</span>\n <span class=\"mi\">21</span> <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">QuerySet</span><span class=\"p\">[</span><span class=\"n\">UserProfile</span><span class=\"p\">]:</span>\n</code></pre></div>",
  "<p>In a management command!</p>",
  "<p>These emails literally come from command-line arguments:</p>\n<div class=\"codehilite\"><pre><span></span><code> 53         parser.add_argument(\n 54             &quot;users&quot;,\n 55             metavar=&quot;&lt;users&gt;&quot;,\n 56             nargs=&quot;*&quot;,\n 57             help=&quot;A list of user emails to soft activate/deactivate.&quot;,\n 58         )\n</code></pre></div>",
  "<p>So, of course <code>get_user_from_emails</code> should just return a list, which would be enforced by mypy if <code>do_soft_activate_users</code> asked for a <code>List</code> instead of an <code>Iterable</code>.</p>",
  "<p>See <a href=\"https://github.com/zulip/zulip/pull/26240\">#26240</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1607693\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/zulip/zulip/pull/26235\">#26235</a> would eliminate the moving part of memcached from our get-stream-by-name queries.  Reviews appreciated.  The last commit requires the most scrutiny.  It's deliciously pink.</p>\n</blockquote>\n<p>It made my day to get this merged. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  Thanks <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span></p>",
  "<p>It would be good to audit functions that return <code>QuerySet</code> and make sure that they are being used to compose queries. I exaggerated a bit when I said that 99% of the time you should return a list.  We do have valid cases where we compose queries.  But sometimes we do it by accident. (Regarding the PR above, I just re-pushed it after removing an unnecessary import of QuerySet.)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> I assume you understand the concept that if two functions consume an iterator, then one of them loses, but if two functions consume a list, then they're both good.  I am aiming for mypy to ensure the latter situation whenever we're not completely constrained by memory.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26240\">#26240</a> just turned green</p>",
  "<p>Returning <code>QuerySet</code> is more flexible. For example, you can <code>.count()</code> or <code>.exists()</code> on it without the overhead of sending all the data from PostgreSQL to Python. Why do you feel it should be avoided?</p>",
  "<p>Yeah, we should prioritize doing this since we are already on track of adding a couple of more group settings to <code>Realm</code>.</p>",
  "<p>I can work on this to at least complete some part of this now. I can start with <code>select_related</code> calls in <code>UserProfile</code>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608011\">said</a>:</p>\n<blockquote>\n<p>Returning <code>QuerySet</code> is more flexible. For example, you can <code>.count()</code> or <code>.exists()</code> on it without the overhead of sending all the data from PostgreSQL to Python.</p>\n</blockquote>\n<p>As I said <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607897\">here</a> and <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607995\">here</a>, I agree with you that are valid cases to return <code>QuerySet</code> when you are intentionally trying to make composable queries.</p>\n<blockquote>\n<p>Why do you feel it should be avoided?</p>\n</blockquote>\n<p>I value predictability and readability over flexibility in certain situations.  If all we cared about was flexibility, we wouldn't have mypy nor TypeScript.  I like functions to constrain what they accept.  Especially in situations where the caller can easily adapt.  I alluded to this general idea at the top of the topic where I said that \"Dict, List, and Set that are all completely interoperable and understandable and concrete\".  If you can mostly work with the most common data structures from Python, it just makes the code easier for everybody to read and reason about.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1607344\">said</a>:</p>\n<blockquote>\n<p>I still want to get rid of at least one of memcached or Redis because there\u2019s no way it\u2019s helpful to have both.</p>\n</blockquote>\n<p>As I've said earlier, the ideal scenario for me would be to delete memcached entirely.  You would remove a bunch of code, you would prevent a bunch of potential bugs, and you would free up resources to devote to putting postgres on a bigger box.</p>\n<p>What benefit does memcached actually give us?  It's obviously not making a dent in page-load times.  It probably helps message-send to a tiny degree, but local echo makes that mostly imperceptible.  We have a caching solution that never shaves more than a couple milliseconds off of actions that generally are more on the scale of tens or hundreds or thousands of milliseconds.</p>\n<p>There are so many better ways to improve performance.</p>",
  "<p>The <code>UserProfile</code> objects has four foreign keys - <code>realm</code>, <code>recipient</code>, <code>bot_owner</code>, <code>default_sending_stream</code> and <code>default_events_register_stream</code>. <code>realm</code> is the most obvious one and is most used.</p>\n<p>The ones related to bots, i.e. <code>bot_owner</code>, <code>default_sending_stream</code> and <code>default_events_register_stream</code>, are used only for bot cases and there are functions, some of them in <code>models.py</code> which are used in multiple places involving both human users and bot users.</p>\n<p>When those functions use <code>select_related()</code> without any arguments, the bot related fields are not fetched as they are nullable. So, we can add bot related fields as args to <code>select_related</code> but that would result in a complex query and would affect performance for non-bot cases when those fields would actually not be used.</p>",
  "<p>That's a bold claim -- the caching solution is used for over a dozen different data structures, and this <code>get_streams</code> cache was mostly useless because we hardly do the lookup of streams by name anymore at all, having converted most of the codebase to work with stream IDs as a lookup key.</p>",
  "<p>On thinking more, I guess it should be fine for non-bot cases, since those fields would anyways be null.</p>",
  "<p>But it's probably worth experimenting with a bit more; a lot of the initial testing that motivated using <code>memcached</code> in some places was done with older versions of postgres, and may not be necessary.</p>",
  "<p>I stand by the bold claim.  I would wager that we could deploy a memcached-free payload to the cloud with no perceivable impact from users.  And operationally we would see very few changes, and some of them would be beneficial.</p>\n<p>I think it's useful to do a bold experiment here.  I can whip up a PR to just remove the whole system.  I guarantee that we could burn it in on czo for a couple days with almost no risk.  And then push it to the cloud.</p>",
  "<p>Yeah I think <code>realm</code> is the main one where I'd expect it to impact performance if we stopped prefetching related models.</p>",
  "<p>I would definitely be comfortable in having a few extra round trips related to bots.  Even the built-in bots are relatively quiet, and I think a little extra latency for them (we're talking milliseconds) won't be perceived by anybody.</p>",
  "<p>Almost any time a bot does anything, there's a call to <code>do_send_message</code> that's involved, and that's gonna drown out any small performance impact of touching the user cache.</p>",
  "<p>And, then, of course, you have the enormous payback (not per action, but aggregated) of not doing the join for everything that doesn't involve bots.</p>",
  "<p>Looking at <a href=\"https://github.com/zulip/zulip/pull/26240\">#26240</a> in particular, certainly that management command helper for parsing command-line parameters is not providing any real benefit from using QuerySet.</p>",
  "<p>That said, we definitely have had places in the data import/export code path where using an iterator was important to avoid OOM issues, and there are a bunch of places in the library code where we make use of composing <code>QuerySet</code> objects to start with a query that does something messy that we don't want to copy-paste, like case-insensitive matching (which BTW, <a href=\"https://github.com/zulip/zulip/pull/26240\">#26240</a> has a TODO comment noting that it doesn't do properly). </p>\n<p>Probably that function should be using <code>bulk_get_users</code> rather than a <code>UserProfile</code> query in the first place, and then it'd naturally return a  list.</p>",
  "<p>Yeah, I think there are two use cases for returning QuerySet:</p>\n<ul>\n<li>composable queries</li>\n<li>large results (but I'm not actually sure that Django yields results as an iterator; I suspect it just listifies the result as soon as you start asking for actual data)</li>\n</ul>",
  "<p>If you're right about the data import/export code, then that answers my question about my second bullet above. ^^^</p>",
  "<p>It definitely does support yielding as an iterator; <a href=\"https://code.djangoproject.com/ticket/27639\">https://code.djangoproject.com/ticket/27639</a> has some background.</p>",
  "<p><a href=\"https://docs.djangoproject.com/en/4.2/ref/models/querysets/#iterator\">https://docs.djangoproject.com/en/4.2/ref/models/querysets/#iterator</a> has the docs.</p>",
  "<p>We don't use that often because often we want to do our own backing so we can print progress, etc.</p>",
  "<p>My broader point is that we should always use <code>List</code> unless we have a very <strong>intentional</strong> reason not to.  Composing queries with good intention is a very valid reason.  Making import/export memory-resilient is a very valid reason.  Grabbing five emails from the command line and turning them into User objects is <strong>not</strong> a valid reason.  There's a cry-wolf aspect to this.  Make it clear when we are actually returning <code>QuerySet</code> for a valid reason and not just cargo-culting a mypy type.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26240/files#r1261270095\">https://github.com/zulip/zulip/pull/26240/files#r1261270095</a> is a perfect illustration of my point.  The fact that <code>len(...)</code> is called illustrates the the original author clearly thought of the query as being something that you just run.  Fix coming.</p>",
  "<p>Well, I think the modern upstream Python community worldview is the opposite: that you not randomly convert iterable things to lists without a good reason, because the code is just as easy to read/write with lists as with iterators, and the iterator version has these utility benefits around memory usage and deferring computation you may not do (E.g. if your loop over query results has a <code>break</code>, a bunch of work can be skipped).</p>\n<p>In the context of Django model objects, in addition to the feature I noted above which avoids asking the database for all the data at once, I'm pretty sure Django also will thoughtfully defer creating big ORM model objects for a large query all up front, which can save a multiplicative factor in Python memory usage in cases where you're fetching a bunch of data and are doing some processing that doesn't involve storing the whole thing, which is not uncommon in some of our larger data processing use cases.</p>",
  "<p>As a concrete example, I'm pretty happy that the <code>zerver/lib/stream_subscription</code> helpers return QuerySets by default without anyone having carefully analyzed which of those actually do further filtering:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">get_subscribed_stream_recipient_ids_for_user</span><span class=\"p\">(</span>\n    <span class=\"n\">user_profile</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ValuesQuerySet</span><span class=\"p\">[</span><span class=\"n\">Subscription</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Subscription</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n        <span class=\"n\">user_profile_id</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"p\">,</span>\n        <span class=\"n\">recipient__type</span><span class=\"o\">=</span><span class=\"n\">Recipient</span><span class=\"o\">.</span><span class=\"n\">STREAM</span><span class=\"p\">,</span>\n        <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">\"recipient_id\"</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Because there's like 7 of those base queries for different use cases, at least one of them does get composed, and it's just a better pattern for that sort of use case to have them all be.</p>",
  "<p>Interesting: <a href=\"https://github.com/zulip/zulip/commit/c61d3420e85b8c3292da301aeedc529361b4150c\">c61d3420e85b8c3292da301aeedc529361b4150c</a> was the original commit in question and it was with <code>List[UserProfile]</code>.  So we know the programmer's intentions.</p>",
  "<p>Yeah with bots we care about the cost in terms of total work they make the server do, not latency. That's still a potentially important reason to be careful; but again, the <code>default_*_stream</code> parameters are just used in one place, for a rare class of thing, and thus have very little CPU cost benefit to do any work related to.</p>\n<p>For <code>bot_owner</code>, I think we do end up accessing it in a number of places, and it might make sense to always prefetch if present, but I'd want that analyzed before doing it.</p>",
  "<p><code>get_subscribed_stream_recipient_ids_for_user</code> isn't a very interesting counterexample. It's used to make a composable query in <code>message_flags.py</code> (which we already agreed was a good reason to use <code>QuerySet</code>) and it's immediately turned into a set by <code>message.py</code> (which means we don't get memory-saving benefit).</p>",
  "<p>Yeah it was changed in a sweep for incorrectly typed functions once we had support for Django stubs that made <code>QuerySet[UserProfile]</code> a useful type, not just an <code>Any</code>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608356\">said</a>:</p>\n<blockquote>\n<p>Yeah it was changed in a sweep for incorrectly typed functions once we had support for Django stubs that made <code>QuerySet[UserProfile]</code> a useful type, not just an <code>Any</code>.</p>\n</blockquote>\n<p>Makes sense.</p>",
  "<p>The PR I would try is one where we just make the caching functions pretend the cache is empty; that's something that's a few lines of code we could cheaply test in development.</p>",
  "<p>I don't want to lose my broader point here.  I have zero problems with composable queries and efficient processing of result sets.  I more than condone those techniques, I applaud them.  I just want the <strong>intentions</strong> to be super clear, and when in doubt, go simple and return a <code>List</code> or <code>Dict</code> or <code>Set</code>.</p>",
  "<p>I just re-pushed  <a href=\"https://github.com/zulip/zulip/pull/26240\">#26240</a> and it passed the basic tests on my box (lint and tests).</p>",
  "<p>I am pretty sure that almost any reasonable query that we do in the application fits easily into memory.  Otherwise, how the heck do we send it over the wire?  If we're post-processing the query, then why are we are not letting the database do the work for us?</p>\n<p>And so then that leaves peripheral (but important) things like import/export.  I suspect the only tables we truly need to stream are Message and UserMessage, and we have extra strategies on top of that for dealing with them (particularly UserMessage, which is admittedly a beast and deserving of careful attention).</p>",
  "<p><a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608365\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args\">#backend &gt; select_related() with no args</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>I don't think I'm making any bold claims here.  I think normal programmers (and grizzled veterans like myself) just prefer to work mostly with <code>Dict</code>, <code>List</code>, and <code>Set</code>, and mypy types should reflect that.  It's fine to use <code>QuerySet</code> to compose queries, and it's fine to do a few tricky things for things like <code>UserMessage</code> import/export that deserve trickiness.  But we should have very, very few instances of <code>Iterable</code>, <code>Collection</code>, and <code>Sequence</code>.  Fewer than 66 instances of <code>Collection</code> would be a good start.</p>",
  "<p>Doesn't <code>Collection</code> accept both <code>List</code> and <code>Dict</code>?  What kind of reasonable function can deal with both of those types?  And if <code>Collection</code> doesn't accept <code>Dict</code>, why is it called <code>Collection</code>?</p>",
  "<p>I ranted about <code>AbstractSet</code>, and apparently it's now deprecated, so that's an easy change.</p>",
  "<p>The naming decisions from mypy and <a href=\"http://collections.abc\">collections.abc</a> are so perplexing.  Why call them <code>MutableSet and Set</code> instead of <code>Set and ImmutableSet</code> when Python's built-in set type is mutable?  Why call it <code>Sequence</code> instead of <code>ImmutableList</code>?</p>",
  "<p><a href=\"https://peps.python.org/pep-0416/\">https://peps.python.org/pep-0416/</a> apparently was an effort to get <code>frozendict</code> into Python.</p>",
  "<p><code>collections.abc</code> long predates <code>typing</code> and mypy. <code>typing</code> just reused the same names for the same concepts. (The <code>typing</code> ones are deprecated in Python 3.9, in which the <code>collection.abc</code> ones gain generic subscripting functionality like the <code>typing</code> ones; we can switch after we drop 3.8 support.)</p>\n<p>Your point about <code>Iterable</code> and consumption is important, and I\u2019ve made it before (<a href=\"https://github.com/zulip/zulip/pull/18315\">#18315</a>, <a href=\"https://zulip.readthedocs.io/en/latest/testing/mypy.html#read-only-types\">docs</a>): <code>Iterable</code> should only be used for values that are iterated once.</p>\n<p>The main reason to prefer <code>Sequence</code>/<code>Mapping</code>/<code>AbstractSet</code> over <code>List</code>/<code>Dict</code>/<code>Set</code> is that it lets mypy help you guard against accidental mutation. This is especially important for function parameters with mutable default values, and our linters <a href=\"https://github.com/astral-sh/ruff/issues/572\">require</a> the immutable types to be used for this case. But it\u2019s helpful in general to be able to trust that arguments won\u2019t be mutated without auditing lots of code.</p>\n<p>Another case that sometimes comes up is that if <code>B</code> is a subtype of <code>A</code>, then <code>Sequence[B]</code> can be coerced to <code>Sequence[A]</code>, while <code>List[B]</code> cannot be coerced to <code>List[A]</code>. (See <a href=\"https://mypy.readthedocs.io/en/stable/common_issues.html#invariance-vs-covariance\">invariance vs. covariance</a>.)</p>",
  "<p>I'm all in favor of <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607839\">preventing mutation</a>.  I just hate the names.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608419\">said</a>:</p>\n<blockquote>\n<p>Your point about <code>Iterable</code> and consumption is important, and I\u2019ve made it before (<a href=\"https://github.com/zulip/zulip/pull/18315\">#18315</a>, <a href=\"https://zulip.readthedocs.io/en/latest/testing/mypy.html#read-only-types\">docs</a>): <code>Iterable</code> should only be used for values that are iterated once.</p>\n</blockquote>\n<p>This is probably sweep-able for a person with a little patience and skill:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git grep Iterable | wc -l\n136\n</code></pre></div>",
  "<p>I mean that\u2019s what I did in <a href=\"https://github.com/zulip/zulip/pull/18315\">#18315</a>.</p>",
  "<p>Ah, nice.</p>",
  "<p>You\u2019re welcome to hate the names (I kind of hate the name \u201cdict\u201d), but I try not to concern myself with such surface-level details that I don\u2019t control.</p>",
  "<p><code>Collection[A]</code> does accept <code>Dict[A, B]</code>. This doesn\u2019t have too many use cases, but for a function that only does iteration and membership tests, a <code>Dict[A, B]</code> will work there the way a Python programmer who\u2019s gotten comfortable with <code>for key in my_dict</code> would expect, perhaps saving the runtime overhead of converting the dict to a list or a set. The <code>Collection[A]</code> type doesn\u2019t let you do anything that <em>wouldn\u2019t</em> work this way, so I don\u2019t see this causing problems.</p>",
  "<p>Hopefully you agree with me that there's no need to prematurely make a function accept Collection when it's only receiving List at the present time.  If somebody introduces a caller that wants to pass in a Dict for some reason, they can always change the callee to accept something more broad like Collection.  Or, better yet, just pass in the keys.  Or just think about what the call boundary should really be.</p>\n<p>It's not like constrained types really prevent any kind of flexibility.  You can always change the code.  I just want it to be intentional.  If types are too broad, then you defeat the whole purpose of static typing.</p>\n<p>Test are kinda the same way.  If you assert that a query count is 24 queries, it's not like nobody can introduce a change that leads to 26 queries.  You just force the future developer to make their decision intentional.</p>",
  "<p>(and in both cases it's literally a one-line change, so nothing too onerous in the grand scheme of things)</p>",
  "<p>The most common replacement for <code>List</code> is <code>Sequence</code>. I prefer it not because it gives additional flexibility to the caller, but because it provides additional guarantees to the reader (immutability).</p>",
  "<p>The <code>bot_owner</code> parameter is accessed from <code>UserProfile</code> objects in following cases -</p>\n<ul>\n<li>While updating it to get the old value of the setting for <code>RealmAuditLog</code> data and to send the new value.</li>\n<li>While sending the bot create event on reactivating a bot.</li>\n<li>While computing the users who will receive a bot-related event.</li>\n<li>To send notification to the owner for cases like rate-limiting or bot trying to send message to invalid stream or another such exceptions.</li>\n<li>Checking access to streams while sending message or while returning streams in the realm as response to some request.</li>\n<li>Checking access to modify a bot or subscribing a bot to stream.</li>\n</ul>",
  "<p>The <code>default_*_stream</code> parameters are obtained from <code>UserProfile</code> objects in following cases -</p>\n<ul>\n<li>While updating those to get the old value of the setting for <code>RealmAuditLog</code> data and to send the new value in response.</li>\n<li>While sending the bot create event on reactivating a bot. </li>\n<li>While computing the users who will receive a bot-related event.</li>\n</ul>\n<p>Apart from this <code>default_sending_stream</code> is needed in the message send code path if a bot tries to send message without specifying the stream.</p>",
  "<p>The main use of <code>default_*_stream</code> parameter is while computing the users who will receive the event. Rest I think are not common.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608438\">said</a>:</p>\n<blockquote>\n<p>The most common replacement for <code>List</code> is <code>Sequence</code>. I prefer it not because it gives additional flexibility to the caller, but because it provides additional guarantees to the reader (immutability).</p>\n</blockquote>\n<p>Part of what inspired this rant was me looking at a bunch of code where the decision to use <code>Sequence</code> vs. <code>Collection</code> appeared very haphazard, and my hypothesis is that the types confuse other developers just as much as they confuse me.</p>\n<p>I am <strong>100%</strong> in favor of preventing accidental mutations.</p>\n<p>I also hate to dwell too much on surface-level details of naming.  But we can actually control the names here.  Just because <code>Sequence</code> doesn't convey anything obvious about whether a type is mutable or not doesn't prevent us from fixing the decision.  <code>ImmutableList = Sequence</code> solves the problem immediately.  And if there is actually something nuanced about <code>Sequence</code> that makes it different from what people expect an <code>ImmutableList</code> to behave  like, then we can add comments.</p>",
  "<p>If you do that, it's probably gonna confuse <code>ruff</code> in some places, but the simple remedy is to use <code>if foo is None: foo = []</code> in the cases where you have a default parameter.  Or, better yet, just eliminate the default and put the burden on the callers to specify that they are passing in an empty list.</p>",
  "<p>Default parameters have their use cases, but they often defeat readability.  Especially with bools.</p>",
  "<p>There is value in adopting the vocabulary used by the rest of the ecosystem rather than trying to fight it. And the differences do mean that <code>Sequence</code> is a more accurate name than <code>ImmutableList</code>.</p>",
  "<p>What are the differences?</p>",
  "<p>For example, <code>Sequence[A]</code> accepts <code>Tuple[A, ...]</code>.</p>",
  "<p>Tuples are evil, though.  Stop accepting tuples in functions that expect homogeneous lists. Make the caller intentionally listify their tuple to express the intention that they have a list-like thing.  Or better yet have the caller just make a list.</p>",
  "<p>The <code>Sequence[A]</code> annotation is a promise/guarantee that you\u2019re not going to do something that fails in an evil way with tuples.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608453\">said</a>:</p>\n<blockquote>\n<p>There is value in adopting the vocabulary used by the rest of the ecosystem rather than trying to fight it. And the differences do mean that <code>Sequence</code> is a more accurate name than <code>ImmutableList</code>.</p>\n</blockquote>\n<p>I don't totally disagree with your point in the general sense, but when the community says <code>Set</code> from collections is immutable and <code>set</code> from Python is mutable, you kinda have to work around it.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608458\">said</a>:</p>\n<blockquote>\n<p>The <code>Sequence[A]</code> annotation is a promise/guarantee that you\u2019re not going to do something that fails in an evil way with tuples.</p>\n</blockquote>\n<p>That's fair, but why not be more restrictive?  Especially since the remedies are simple and make the code express clearer intent?</p>",
  "<p>It's crazy to me that Python doesn't have a builtin type for immutable lists.  I know that tuples are technically immutable lists in some sense, but you know what I mean.</p>",
  "<p>\u201cWhy\u201d seems just as compelling as \u201cwhy not\u201d here, but the main point is that we\u2019re writing in the language we have, not the language you might wish we had. We don\u2019t have a type that includes lists used immutably and excludes tuples.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608462\">said</a>:</p>\n<blockquote>\n<p>\u201cWhy\u201d seems just as compelling as \u201cwhy not\u201d here, but the main point is that we\u2019re writing in the language we have, not the language you might wish we had. We don\u2019t have a type that includes lists used immutably and excludes tuples.</p>\n</blockquote>\n<p>Sure, but you could at least express the intent.  Say <code>ImmutableList</code> with the caveat that it includes tuples for now because Python is poorly designed.</p>",
  "<p>Then you\u2019re forcing the reader to look up what our custom <code>ImmutableList</code> thing is and actually find those caveats.</p>",
  "<p>Someone familiar with JavaScript might assume it\u2019s a completely unrelated type, a la Immutable.js.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1607845\">said</a>:</p>\n<blockquote>\n<p>I know at least 10 programming languages on a fairly fluent basis, and I have never come across a Sequence type.  Do I need to brush up on Haskell?</p>\n</blockquote>\n<p>In reverse chronological order of using them: Python, JS, Elm, C, Ruby, C++, Java, Perl, Pascal, Basic</p>\n<p>Do any of these languages have a <code>Sequence</code> type?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608465\">said</a>:</p>\n<blockquote>\n<p>Then you\u2019re forcing the reader to look up what our custom <code>ImmutableList</code> thing is and actually find those caveats.</p>\n</blockquote>\n<p>Which is so much simpler than what we have now.  <code>from zerver.lib.mypy import ImmutableList</code>.  Boom, you get right to what you need to read.</p>",
  "<p><del>Where is <code>Sequence</code> documented?</del></p>",
  "<p>I am not arguing for the creation of <code>Sequence</code> as a fresh new type. It\u2019s what we have.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608474\">said</a>:</p>\n<blockquote>\n<p>I am not arguing for the creation of <code>Sequence</code> as a fresh new type. It\u2019s what we have.</p>\n</blockquote>\n<p>It just feels strange that we can't wrap it like we wrap a million other things.</p>",
  "<p>Our docs literally call out the absurdity of <code>Sequence</code> in the context of immutability:</p>\n<div class=\"codehilite\"><pre><span></span><code>The basic Python collections\n[`List`](https://docs.python.org/3/library/typing.html#typing.List),\n[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict),\nand [`Set`](https://docs.python.org/3/library/typing.html#typing.Set)\nare mutable, but it&#39;s confusing for a function to mutate a collection\nthat was passed to it as an argument, especially by accident. To\navoid this, prefer annotating function parameters with read-only\ntypes:\n\n[`Sequence`](https://docs.python.org/3/library/typing.html#typing.Sequence)\n instead of `List`\n</code></pre></div>\n<p>No mention of tuples.  The whole reason we need to document that <code>Sequence</code> is the idiom for immutable lists is that the name just isn't intuitive at all.</p>",
  "<p>There\u2019s no need to mention tuples. You don\u2019t have to use them, but if you use them, they\u2019re not going to break.</p>",
  "<p>If we made our own alias, we would still need to document it, and it would be harder to reference the existing Python documentation.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608477\">said</a>:</p>\n<blockquote>\n<p>There\u2019s no need to mention tuples. You don\u2019t have to use them, but if you use them, they\u2019re not going to break.</p>\n</blockquote>\n<p>What if you refactor <code>foo(a: List, b: Tuple)</code> to be <code>foo(b: Tuple, b: List)</code>?  Overly broad types lead to more errors.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608478\">said</a>:</p>\n<blockquote>\n<p>If we made our own alias, we would still need to document it, and it would be harder to reference the existing Python documentation.</p>\n</blockquote>\n<p>It's like a single comment in <code>mypy.py</code> and a one-line change to the docs that I literally just excerpted.</p>",
  "<p>Going back to the sets situation, instead of us saying \"Use AbstractSet\" (which is deprecated) or saying  \"Use collections.abc.Set\" (which is completely confusing given that both typing.Set and Python set are both mutable), we would just say use \"Use ImmutableSet from zerver/lib/mypy.py  and read comments for further context\".</p>",
  "<p>Try to do <code>s/from typing import Set/from collections.abc import Set</code> like I just did on my local branch.  You'll get a zillion mypy errors because the Python community made terrible naming decisions about one of the most fundamental types in programming.  Especially for a DB-based app like Zulip that slings around sets all over the place.</p>",
  "<p>But it's also totally fixable with literally one line of code and a few comments in the codebase and documentation.</p>",
  "<p>It is not worth forcing developers familiar with the Python ecosystem to go through this indirection over a little naming quibble. Once we drop Python 3.8 support, there will only be <code>set[A]</code> and <code>collections.abc.Set[A]</code>, and we\u2019ll get used to it.</p>",
  "<p>But there's really no extra indirection.</p>",
  "<p>You just go to a local file that explains the semantics of <code>ImmutableSet</code> instead of googling or reading the source code for <code>collections.abc</code>.</p>",
  "<p>Once you learn about <code>collections.abc.Set</code>, that knowledge applies to the entire Python ecosystem, not just our one project.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608495\">said</a>:</p>\n<blockquote>\n<p>It is not worth forcing developers familiar with the Python ecosystem to go through this indirection over a little naming quibble. Once we drop Python 3.8 support, there will only be <code>set[A]</code> and <code>collections.abc.Set[A]</code>, and we\u2019ll get used to it.</p>\n</blockquote>\n<p>I think you're greatly underestimating the churn here.  There are a whole bunch of places where you need to change <code>Set</code> to <code>MutableSet</code>.  Because we do mutate sets in our codebase.</p>",
  "<p>That will be my problem, and I have plenty of experience with that kind of task.</p>",
  "<p>(I don\u2019t think we\u2019re actually going to use <code>MutableSet[A]</code>, just <code>set[A]</code>. Details for later.)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608501\">said</a>:</p>\n<blockquote>\n<p>That will be my problem, and I have plenty of experience with that kind of task.</p>\n</blockquote>\n<p>I'm happy you're taking ownership of it.  They say \"The customer is always right\", but that's a myth.  I'm the customer here and I vented.  It's not the end of the world.  I think you've addressed all my points.  I'm not happy with all the responses, but such is life.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/mypy.20rant/near/1608502\">said</a>:</p>\n<blockquote>\n<p>(I don\u2019t think we\u2019re actually going to use <code>MutableSet[A]</code>, just <code>set[A]</code>. Details for later.)</p>\n</blockquote>\n<p>I think I get the gist.</p>",
  "<p>Okay. Thanks for your points, and I\u2019m glad we\u2019ve come to an understanding even if not agreement.</p>",
  "<p>When I get back to dealing with the changes that led to my initial frustration (trying to migrate from tuple narrows to dataclass-based narrows), I think I can provide a more coherent example of what I would like to see changed.  But I'm fine for now.  Thanks for the conversation. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Just a naming decision here for folks to weigh in on.  We say get_emoji to get more than one emoji.  I am about to do some refactoring to make Realm.get_emoji be instead get_realm_emoji.  I don't super care how you pluralize it, so I'll probably keep it as \"emoji\".</p>",
  "<p><a href=\"https://www.merriam-webster.com/dictionary/emoji\">Merriam-Webster</a> (yes, I'll be that guy) lists <em>emoji</em> as the first option for the plural, ahead of the anglicized <em>emojis</em>--so from a wedgie-worthy pedantic standpoint, <code>get_realm_emoji</code> works for any number of emoji.</p>",
  "<p>I appreciate the pedantry. :)  Ok, I'm not gonna change the pluralization of the current versions.  We do use \"emojis\" in some places, but I'll let somebody else make that sweep.</p>",
  "<p>Just an update here - I am currently carefully auditing the calls of function which use <code>select_related</code> to guess how often we would need the bot related fields and in what cases. Would probably open a PR along with the details by tommorrow.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Feel free to DM me or mention me on any of this work.  I'm gonna be kinda part-time over the next few days, but I will eventually respond to stuff.  I'm about to embark on a project that probably overlaps with what you're doing, so I may be cherry-picking some stuff from your PR.  Basically, I am trying to clean up some of the cache-related calls so that they just pass <code>realm_id</code> directly into the get-stuff layer vs.  <code>Realm</code>, since the cache calls are inherently tied to ids.</p>",
  "<p>Yeah sure. I was also thinking of proposing this change to pass <code>realm_id</code> directly instead of <code>Realm</code> that I noticed while working on this.</p>",
  "<p>I'll send you something tomorrow probably.  My friend is adopting a puppy, so in about four hours I am gonna be on puppy patrol. :)</p>",
  "<p>It's stuff like this that I intend to refactor, and I just don't want the callers to needlessly pass in Realm object when <code>realm_id</code> suffices:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code> <span class=\"mi\">840</span>     <span class=\"c1\"># `realm` instead of `self` here to make sure the parameters of the cache key</span>\n <span class=\"mi\">841</span>     <span class=\"c1\"># function matches the original method.</span>\n <span class=\"mi\">842</span>     <span class=\"nd\">@cache_with_key</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">realm</span><span class=\"p\">:</span> <span class=\"n\">get_realm_emoji_cache_key</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">),</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3600</span> <span class=\"o\">*</span> <span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n <span class=\"mi\">843</span>     <span class=\"k\">def</span> <span class=\"nf\">get_emoji</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">EmojiInfo</span><span class=\"p\">]:</span>  <span class=\"c1\"># noqa: N805</span>\n <span class=\"mi\">844</span>         <span class=\"k\">return</span> <span class=\"n\">get_realm_emoji_uncached</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>This is the puppy BTW.  She's already 22 pounds.</p>\n<p><a href=\"/user_uploads/2/d3/QBth1vMb6eNswkpe08hw6LWL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/d3/QBth1vMb6eNswkpe08hw6LWL/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/d3/QBth1vMb6eNswkpe08hw6LWL/image.png\"></a></div>",
  "<p>Maisy's a Great Dane.  Her father, appropriately named Tank, weighs 185 pounds.  Kari's other two dogs are little dogs that rule the roost. Should be an interesting night. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
  "<p>Looks like it ran to completion with no errors.</p>",
  "<p>Hm:</p>\n<div class=\"codehilite\"><pre><span></span><code>zulip=&gt; select count(*) from zerver_realmauditlog where backfilled and extra_data is not null;\n count\n-------\n     0\n(1 row)\n</code></pre></div>",
  "<p>Ah, we don't actually set <code>backfill</code> because the whole row isn't backfilled.</p>",
  "<p>Anyways, seems to pass the CZO test!  And we ran indeed run arbitrary queries on it:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">extra_data_json</span><span class=\"o\">-&gt;&gt;</span><span class=\"s1\">'2'</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_realmauditlog</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">extra_data_json</span><span class=\"o\">-&gt;&gt;</span><span class=\"s1\">'property'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'presence_enabled'</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">event_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">132</span><span class=\"w\"> </span><span class=\"k\">group</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">;</span>\n<span class=\"go\"> count | ?column?</span>\n<span class=\"go\">-------+----------</span>\n<span class=\"go\">   753 | false</span>\n<span class=\"go\">   620 | true</span>\n<span class=\"go\">(2 rows)</span>\n</code></pre></div>",
  "<p>(this is very much not a useful or interesting query, just showing that it works)</p>",
  "<p>Awesome! I can work on merging this.</p>",
  "<p>I think <code>emojis</code> is much less common in our codebase, but yeah I don't think we need to do a preemptive purge. We may want to add other qualifiers like <code>get_all_custom_emoji_for_realm</code> where it might improve clarity if we're fiddling with code like <code>get_realm_emoji</code> that is a bit ambigious as to whether you're getting a specific realm emoji or all the realm emoji for a given realm...</p>",
  "<p>Yeah arguably the core problem with the code in question is that those tuples in the API were a bad idea (one of our last bits of unpleasant legacy API nonsense from 2012-era prototyping) and getting rid of them to the extent possible will make us happy <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
  "<blockquote>\n<p>Seems like the key is that the app server now has to be explicit, in the unencrypted case, about what devices/tokens it wants to send to.</p>\n</blockquote>\n<p>So it looks like that we can still achieve this with a single request, right? Just with an extra <code>devices_to_notify</code> field to make it explicit.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span> <a href=\"#narrow/stream/3-backend/topic/end-to-end.20encryption/near/931345\">said</a>:</p>\n<blockquote>\n<p>Instead, there should be a new field, like <code>encrypted_payloads</code>. Which can just have both kinds in a single list -- the bouncer has the information to tell which is of what type anyway.</p>\n</blockquote>\n<p>Alternatively, maybe we can have a single <code>all_payloads</code> field <code>list[TypedDict[{\"device\": PushDeviceToken, \"payload\": bytes]]</code>. The bouncer doesn't care about the payloads being encrypted or not at all, and it multiplexes based on the kind of device. <code>gcm_options</code> is still needed, but <code>gcm_payload</code> and <code>apns_payload</code> can be disregarded.</p>",
  "<p>For backward compatibility, we can mark <code>gcm_payload</code> and <code>apns_payload</code> as deprecated for now. (Of course there should be a better name than <code>all_payloads</code>)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> See <a href=\"https://github.com/zulip/zulip/pull/26264\">#26264</a>.  You'll probably want to cherry-pick the first commit to your branch.</p>",
  "<p>I am currently working on just select_related calls for UserProfile objects, so I guess I will not need that commit for now.</p>",
  "<p><code>author</code> is a foreign key to <code>UserProfile</code> FWIW, but it sounds like we don't have any conflict yet</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"26369\">Karl Stolley</span> <a href=\"#narrow/stream/3-backend/topic/emoji.20or.20emojis/near/1609110\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.merriam-webster.com/dictionary/emoji\">Merriam-Webster</a> (yes, I'll be that guy) lists <em>emoji</em> as the first option for the plural, ahead of the anglicized <em>emojis</em>--so from a wedgie-worthy pedantic standpoint, <code>get_realm_emoji</code> works for any number of emoji.</p>\n</blockquote>\n<p>As a Japanese-English translator, I like this approach.</p>\n<p>Presumably as Japanese itself does not pluralize nouns (of course, a handful of exceptions exist), <br>\nmost Japanese loanword nouns do not take a plural suffix in English\u2014the literature has maintained this for decades.<br>\nThese trends may contribute to the inconsistency in pluralization of Japanese loanwords in English.</p>\n<p>I'll take the second wedgie lol.</p>",
  "<p>This should be workable.  Within the code we just need to prefer terms like <code>emoji_set</code>, <code>emoji_list</code>, and <code>emoji_dict</code> over <code>emojis</code>, and I've already made one such change in one of my pending PRs.  Thanks for the feedback!</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26264\">#26264</a> is ready for review again</p>",
  "<p>I'm getting CodeQL problems on my <a href=\"https://github.com/zulip/zulip/pull/26271/checks?check_run_id=15081414863\">build</a></p>",
  "<p>It feels unrelated to my changes.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26271\">#26271</a> is the PR.</p>",
  "<p>I have a question here regarding how to handle cache data.</p>\n<p>We use <code>select_related</code> in <a href=\"https://github.com/zulip/zulip/blob/1cd587d24be1d668fcf6d136172bfec69e35cb75/zerver/lib/cache_helpers.py#L84\"><code>get_users</code></a> function which is used to <a href=\"https://github.com/zulip/zulip/blob/1cd587d24be1d668fcf6d136172bfec69e35cb75/zerver/lib/cache_helpers.py#L116\">populate the cache</a> initially either during restarting the server or upgrading it.</p>\n<p>The user profile cache that are initially populated using this are the ones whose keys are defined in <code>user_profile_cache_key_id</code> and <code>user_profile_by_api_key_cache_key</code> and the corresponding functions in <code>models.py</code> that use these cache are <a href=\"https://github.com/zulip/zulip/blob/1cd587d24be1d668fcf6d136172bfec69e35cb75/zerver/models.py#L3907\"><code>get_user</code></a> and <a href=\"https://github.com/zulip/zulip/blob/1cd587d24be1d668fcf6d136172bfec69e35cb75/zerver/models.py#L3863\"><code>get_user_profile_by_api_key</code></a>. </p>\n<p>Now, as per my current undestanding, for <code>get_user_profile_by_api_key</code> we should also fetch <code>bot_owner</code> field in <code>get_user_profile_by_api_key</code> as it is used for webhook code and bot_owner field would be frequently used if bots are configured to send private messages and not in streams. And we do not include <code>bot_owner</code> in the <code>select_related</code> call in <code>get_user</code>.</p>",
  "<p>So, while populating cache initially as well we should include the bot_owner fields as well, but we do a single query to populate both the caches. Of course we can populate them separately but just wanted to discuss here first.</p>",
  "<p>(just deleted a few messages)</p>",
  "<p>In some of the conversations from a few days ago, I wasn't really considering how cheap it is to deal with <code>bot_owner</code>.   Since it's obviously null for all human users, I think it's find to always include <code>bot_owner</code> in the <code>select_related(...)</code> call.</p>",
  "<p>I guess it would be slightly annoying if you're fetching a <strong>bunch</strong> of users that are not yourself and you get a bunch of bot-related data that you don't care about.  But I think our performance-sensitive endpoints are already kind of smart about.  For example, when you are sending a message, and you need to hydrate the message with display recipient info, we have a dedicated cache for that.</p>",
  "<p>I am actually cleaning up that code in <a href=\"https://github.com/zulip/zulip/pull/26271\">#26271</a>.</p>",
  "<p>This flake actually <strong>does</strong> seem specific to that PR for some reason, as other PRs are passing the build.  But the symptoms that CodeQL are reporting seem clearly unrelated to my change.  Some of the caches make use of <code>make_safe_digest</code>, but my changes actually reduce the use of the cache.</p>",
  "<p><code>CodeQL</code> can give errors unrelated to the PR.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args/near/1610847\">said</a>:</p>\n<blockquote>\n<p>In some of the conversations from a few days ago, I wasn't really considering how cheap it is to deal with <code>bot_owner</code>.   Since it's obviously null for all human users, I think it's find to always include <code>bot_owner</code> in the <code>select_related(...)</code> call.</p>\n</blockquote>\n<p>Yes, I agree. Do we want to include it in absolutely all places or just these common functions which are used in multiple places? Like we can skip it in <code>get_user_profile_by_email</code> which is only present for manage.py shell work and <code>get_user</code> defined in <code>management.py</code> which is used in code for management commands. But yeah this will lead to inconsistency.</p>",
  "<p>Also, I noticed in some places we unnecessary use the object where only ID would be enough. Like in <a href=\"https://github.com/zulip/zulip/blob/1cd587d24be1d668fcf6d136172bfec69e35cb75/zerver/lib/addressee.py#L121\">the code</a> below, we only need ID of <code>default_sending_stream</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">def</span> <span class=\"nf\">legacy_build</span><span class=\"p\">(</span>\n        <span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span><span class=\"p\">,</span>\n        <span class=\"n\">recipient_type_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">message_to</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span>\n        <span class=\"n\">topic_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">realm</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Realm</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">\"Addressee\"</span><span class=\"p\">:</span>\n        <span class=\"c1\"># For legacy reason message_to used to be either a list of</span>\n        <span class=\"c1\"># emails or a list of streams.  We haven't fixed all of our</span>\n        <span class=\"c1\"># callers yet.</span>\n        <span class=\"k\">if</span> <span class=\"n\">realm</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">realm</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">recipient_type_name</span> <span class=\"o\">==</span> <span class=\"s2\">\"stream\"</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">message_to</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">JsonableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Cannot send to multiple streams\"</span><span class=\"p\">))</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">message_to</span><span class=\"p\">:</span>\n                <span class=\"n\">stream_name_or_id</span> <span class=\"o\">=</span> <span class=\"n\">message_to</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># This is a hack to deal with the fact that we still support</span>\n                <span class=\"c1\"># default streams (and the None will be converted later in the</span>\n                <span class=\"c1\"># call path).</span>\n                <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">default_sending_stream</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Use the user's default stream</span>\n                    <span class=\"n\">stream_name_or_id</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">default_sending_stream</span><span class=\"o\">.</span><span class=\"n\">id</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">JsonableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Missing stream\"</span><span class=\"p\">))</span>\n     <span class=\"o\">......</span>\n</code></pre></div>",
  "<p>There are a couple of places where we do the same and I think we can refactor it to instead use ID like <code>sender.default_sending_stream_id</code> here instead of <code>sender.default_sending_stream.id</code> and we would actually do not need to fetch the complete <code>default_sending_stream</code> object.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args/near/1610892\">said</a>:</p>\n<blockquote>\n<p>Also, I noticed in some places we unnecessary use the object where only ID would be enough.</p>\n</blockquote>\n<p>I am always in favor of those type of fixes. Even if we don't get immediate payoff on them, it can help future refactorings.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args/near/1610885\">said</a>:</p>\n<blockquote>\n<p>Yes, I agree. Do we want to include [bot owner] in absolutely all places or just these common functions which are used in multiple places? </p>\n</blockquote>\n<p>I don't think we need to be fanatical about consistency.  I would much rather us just be smart about getting the appropriate data for the task at hand.  Obviously if there are a couple places where what they need only differs by a field or two or places where the code clearly doesn't need to be hyper-optimized, then I would try to share code.   It's always gonna be a bit of a judgment call, I guess.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> <a href=\"#narrow/stream/3-backend/topic/codeql.20breaking.20builds/near/1610877\">said</a>:</p>\n<blockquote>\n<p><code>CodeQL</code> can give errors unrelated to the PR.</p>\n</blockquote>\n<p>Yeah, that's annoying.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args/near/1610894\">said</a>:</p>\n<blockquote>\n<p>There are a couple of places where we do the same and I think we can refactor it to instead use ID like <code>sender.default_sending_stream_id</code> here instead of <code>sender.default_sending_stream.id</code> and we would actually do not need to fetch the complete <code>default_sending_stream</code> object.</p>\n</blockquote>\n<p>Yeah, we should definitely do those -- I try to make that fix every time I noticed it's possible.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> try rebasing your PR onto <code>main</code>.</p>",
  "<p>What's likely happening here is that CodeQL is reporting when it sees \"issues\" present in the branch that are not present in <code>main</code>, which can be just because your PR is on top of a commit that has the issue and that issue was removed in <code>main</code>. Or it could be because your PR perturbs whatever CodeQL is using to identify that an error \"was already present\" and so it's not new a tall, but CodeQL thinks it is.</p>",
  "<p>Any news on whether Djot has addressed our bug reports, or the state of Rust implementations of Djot?</p>",
  "<p>I was rebased off of upstream/main when I pushed the PRs this weekend, but I just rebased off of the latest round of commits to main and re-pushed.  Maybe that will help, but I think this is more likely a \"perturb\" situation.</p>",
  "<p>No news. (I\u2019m subscribed to the relevant issues; I would have heard if something changed.)</p>",
  "<p>Hi there, is there a reason why messages_in_narrow_backend calls NarrowBuilder directly instead of calling add_narrow_conditions like fetch_messages does? Is this a bug, since add_narrow_conditions combines any search operands together whereas messages_in_narrow_backend doesn't, thus they might not agree about what messages are in that narrow?</p>",
  "<p>messages_in_narrow_backend calls NarrowBuilder here:<br>\n<a href=\"https://github.com/zulip/zulip/blob/ad10c77919eee5e7f40740185c70a601e59805ed/zerver/views/message_fetch.py#L266\">https://github.com/zulip/zulip/blob/ad10c77919eee5e7f40740185c70a601e59805ed/zerver/views/message_fetch.py#L266</a></p>\n<p>whereas get_messages_backend calls fetch_messages which calls add_narrow_conditions here:<br>\n<a href=\"https://github.com/zulip/zulip/blob/ad10c77919eee5e7f40740185c70a601e59805ed/zerver/views/message_fetch.py#L157\">https://github.com/zulip/zulip/blob/ad10c77919eee5e7f40740185c70a601e59805ed/zerver/views/message_fetch.py#L157</a><br>\n<a href=\"https://github.com/zulip/zulip/blob/ad10c77919eee5e7f40740185c70a601e59805ed/zerver/lib/narrow.py#L1279\">https://github.com/zulip/zulip/blob/ad10c77919eee5e7f40740185c70a601e59805ed/zerver/lib/narrow.py#L1279</a></p>",
  "<p>It's still having problems.</p>",
  "<p>I am starting to pretty strongly believe that I removed a \"threat\" that was never a threat in the first place (since we don't use make_safe_digest for any cryptographic reasons), and CodeQL must be being stupid about along the lines of what Tim proposed.</p>",
  "<p>It looks like CodeQL got smarter here; a new version detects an error that was not detected by the older version when it was run on <code>main</code>. In any case, we treat CodeQL as advisory; it doesn\u2019t need to pass on every PR. If a PR is merged with new CodeQL errors, future PRs will treat that as the new baseline and won\u2019t fail CodeQL again for them.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> Is there a way to get  <a href=\"https://github.com/zulip/zulip/pull/26271\">#26271</a> into your review queue when it's not being marked as passing the build?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/codeql.20breaking.20builds/near/1611500\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> Is there a way to get  <a href=\"https://github.com/zulip/zulip/pull/26271\">#26271</a> into your review queue when it's not being marked as passing the build?</p>\n</blockquote>\n<p>Adding \"integration review\" label should be fine.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Thanks for the tip.  I applied the label and linked back to this conversation in the PR.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> <a href=\"https://github.com/zulip/zulip/pull/26271\">#26271</a> may be worth a quick skim.  I don't do anything specifically related to <code>select_related</code>, but I am probably touching things in the neighborhood of what you're working on.  We basically had two redundant caches related to the subset of <code>UserProfile</code> fields that are needed for message hydration (i.e. display recipients), and I streamlined the bulk-fetching code to ignore one of the caches.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/26271\">#26271</a> I fix a problem where we have duplicate caches for user-based display recipients.  The first time anybody fetches messages that are sent to Alice as a DM, then we write basically identical cache entries that are keyed on user_id in one cache and then recipient_id in the other cache.  This is obviously a somewhat silly thing to do, so I fix it.  The long commit message for the last commit elaborates a bit on the implications, but the obvious benefit is that my change halves the number of cache entries, cache lookups, and cache writes related to message fetching.</p>",
  "<p>Just to be clear, the problem that I fix only pertains to personal DMs and huddle DMs.  In order to make the changes, however, I did split out the stream-related code, so it should now be easier to profile things and just read the code in general.  <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> I would greatly appreciate a review from you, as my commit in some sense builds on the work that you did in <a href=\"https://github.com/zulip/zulip/commit/c779bb19599f9e5e5a9923b63bfafd115283ddcb\">c779bb19599f9e5e5a9923b63bfafd115283ddcb</a>, in which you got the message-fetching code to properly do the \"hydration\" piece using the bulk helper.  I did a fairly substantial re-write of <code>bulk_fetch_display_recipients</code>, which you authored in full, and which has remained basically unmodified up until my changes.</p>",
  "<p>The PR here is passing all the regular builds, so it's ready for review, despite the problems that I talk about in <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/codeql.20breaking.20builds\">#backend &gt; codeql breaking builds</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> mentioned this topic in <strong><a href=\"#narrow/stream/3-backend/topic/message.20fetching.20.28duplicate.20caches.29/near/1611550\">#backend &gt; message fetching (duplicate caches)</a></strong>.</p>",
  "<p>The first two commits seems good. The second one improves the readability of code atleast for me.</p>\n<p>I am not so sure about the last one since I am not much familiar with the message hydration code.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"27407\">@Shawn Zivontsis</span> yeah, I think that sounds like a bug. Though thinking about this, I wonder if the behavior in <code>get_messages_backend</code> is actually the behavior we should change -- if I'm not mistaken, that logic makes it impossible to do searches with a set of multiple keyphrases.</p>",
  "<p>While the current web UI doesn't have good support for doing that sort of search, it'd clearly be an improvement to work towards supporting it. <span class=\"user-mention\" data-user-id=\"17026\">@Akshat</span> are you interested in looking at this?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> that looks great to me; posted a few comments but I don't see any impediments to integrating that soon.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> thanks for the context. the reason why I'm looking into this is because our org is experimenting with adding a semantic search feature to zulip and I wasn't sure if I could rely on the operand joining behaviour or not. given your answer here, I won't rely on it</p>",
  "<p>unrelated, but something else we're curious about is adding support for non-chronological sorting of search results (i.e. sorting by semantic similarity), do you happen to know if anyone's looked into that before?</p>",
  "<p>Ok, <a href=\"https://github.com/zulip/zulip/pull/26271\">#26271</a> is ready for review again.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Have you stumbled across <code>format_user_row</code> yet?  I am gonna have it take <code>realm_id</code> instead of <code>realm</code>.</p>",
  "<p>Not yet, but seems like a good change. I think the <code>realm</code> was needed before for checking the email access when <code>email_address_visibility</code> was realm based setting and now we have changed it to user-level setting.</p>",
  "<p>Ah, good to know!  Yeah, it feels like a super safe change now.</p>",
  "<p>BTW, I opened <a href=\"https://github.com/zulip/zulip/pull/26286\">#26286</a> to handle <code>select_related</code> calls for <code>UserProfile</code>.</p>",
  "<p>See <a href=\"https://github.com/zulip/zulip/pull/26286/files#r1267875825\">https://github.com/zulip/zulip/pull/26286/files#r1267875825</a>.  Generally we are good about having a cache-key helper that just takes <code>realm_id</code> instead of <code>realm</code>.</p>",
  "<p>Looks like you are making great progress, by the way! I am obviously excited about these changes. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args/near/1612223\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/zulip/zulip/pull/26286/files#r1267875825\">https://github.com/zulip/zulip/pull/26286/files#r1267875825</a>.  Generally we are good about having a cache-key helper that just takes <code>realm_id</code> instead of <code>realm</code>.</p>\n</blockquote>\n<p>Yeah, I also noticed that but thought would be good to do as a follow-up.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span>  My next PR is likely to conflict with that change.  I might have a couple things you want to look at actually.  Details to come.</p>",
  "<p>another reason why this might be considered a bug: \"negated=true\" is silently ignored on search operators</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26292\">#26292</a> is the latest PR</p>",
  "<p>Do we expect a <code>-</code> prefix to apply to text too? It applies for operators like <code>stream:</code>, but not text?<br>\neg. <a href=\"#narrow/search/cheese.20-swiss\">https://chat.zulip.org/#narrow/search/cheese.20-swiss</a> &lt;-- <code>cheese -swiss</code></p>",
  "<p>For now I am hoping we can try a slightly less bold experiment. <a href=\"https://github.com/zulip/zulip/pull/26297\">#26297</a> bypasses the cache whenever you have more than 20 rows that you want to fetch.</p>",
  "<p>It's basically a two-line change, but I took some time on the PR to really document the process and add a test.  It also has a quick doc cleanup commit at the front.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1608358\">said</a>:</p>\n<blockquote>\n<p>The PR I would try is one where we just make the caching functions pretend the cache is empty; that's something that's a few lines of code we could cheaply test in development.</p>\n</blockquote>\n<p><a href=\"https://github.com/zulip/zulip/pull/26298\">#26298</a> seems to do the trick for simple run-dev things.  I tested it with page load, All Messages, and changing Zoe's name.</p>",
  "<p><a href=\"#narrow/stream/3-backend/topic/no-cache.20experiment.20.28dev.29/near/1612466\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/bulk_get_streams.20slowness\">#backend &gt; bulk_get_streams slowness</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/no-cache.20experiment.20.28dev.29\">#backend &gt; no-cache experiment (dev)</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>I am hoping we can actually coordinate some kind of in-dev experiment.  Basically agree on a few things:</p>\n<ul>\n<li>come up with reasonable way to call populate_db with some kind of scale</li>\n<li>establish a few benchmarks on main for key endpoints</li>\n<li>run the no-cache PR on dev and see if anything feels wildly different</li>\n</ul>\n<p>Of course, there would also be benefit in somebody just playing devil's advocate and trying to find a smoking gun endpoint that just falls down completely without the cache.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/messages_in_narrow_backend.20calling.20NarrowBuilder.20directly/near/1611872\">said</a>:</p>\n<blockquote>\n<p>While the current web UI doesn't have good support for doing that sort of search, it'd clearly be an improvement to work towards supporting it. <span class=\"user-mention silent\" data-user-id=\"17026\">Akshat</span> are you interested in looking at this?</p>\n</blockquote>\n<p>Sure! I'm taking a look.</p>",
  "<p>One computed value that we cache is <code>Attachment.objects.filter(realm=realm).aggregate(Sum(\"size\"))[\"size__sum\"]</code>.  The problem there is that you have to invalidate the cache after every upload, so the cache is only useful insofar as we have something that reads the value often.   For that kind of thing I wonder if there's a better solution in postgres.  I could dig a little deeper on that and find the actual query that gets run, and we could measure how expensive it is on czo.</p>",
  "<p>I would start with using <code>populate_db</code> with 1K users, 1K streams, 10K messages, and we can iterate later.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/no-cache.20experiment.20.28dev.29/near/1612526\">said</a>:</p>\n<blockquote>\n<p>One computed value that we cache is <code>Attachment.objects.filter(realm=realm).aggregate(Sum(\"size\"))[\"size__sum\"]</code>.  </p>\n</blockquote>\n<p>I am pretty sure that is going to be a case where we're definitely going to be sad to compute it every time, at least with how we use that value (it's in the <code>/register</code> response, right?). The fix in postgres would be to just have the operations that change the total size of uploads, in the transaction that stores the upload, also update that total (E.g. add 100 at the right time). I'd be kinda surprised if there wasn't a good way to configure postgres to just maintain that for you.</p>",
  "<p>I feel like the actual mystery here is why <code>memcached</code> is having such poor performance for you; it's definitely the cache that a cache library like memcached/redis should not have those scaling properties.</p>",
  "<p>Here is example output from sending a message:</p>\n<div class=\"codehilite\"><pre><span></span><code>0.005762 intentional cache miss get_user_profile_by_id (7,)\n2023-07-19 19:20:59.166 INFO [zr:9993] 2601:980:c201:7df0:b90b:c611:ace0:83c9 GET     200  18ms (lp: 50.0s) (db: 4ms/2q) /json/events [dd8669d1-f43e-4dda-a4f6-b29b3278de3e/1/heartbeat] (7@zulip via Mozilla)\n0.004696 intentional cache miss get_user_profile_by_id (7,)\n0.019024 intentional cache miss get_user_profile_by_id (7,)\n0.001761 intentional cache miss get_muting_users (7,)\n0.001711 intentional cache miss alert_words_in_realm (&lt;Realm: zulip 2&gt;,)\n0.002002 intentional cache miss get_alert_word_automaton (&lt;Realm: zulip 2&gt;,)\n0.001494 intentional cache miss linkifiers_for_realm_remote_cache (2,)\n0.004784 intentional cache miss message_to_dict_json 0.000884 intentional cache miss get_display_recipient_remote_cache (33, 2, 12)\n(&lt;Message: support / cat5 / &lt;SimpleLazyObject: &lt;SimpleLazyObject: &lt;UserProfile: user7@zulipdev.com &lt;Realm: zulip 2&gt;&gt;&gt;&gt;&gt;, 2)\n0.000874 intentional cache miss (bulk) display_recipient_dict:33 1 items\n2023-07-19 19:20:59.911 INFO [zr] 2601:980:c201:7df0:b90b:c611:ace0:83c9 POST    200 135ms (db: 79ms/16q) /json/messages (7@zulip via Mozilla)\n0.005625 intentional cache miss get_user_profile_by_id (7,)\n2023-07-19 19:20:59.922 INFO [zr:9993] 2601:980:c201:7df0:b90b:c611:ace0:83c9 GET     200  17ms (lp: 700ms) (db: 4ms/2q) /json/events [dd8669d1-f43e-4dda-a4f6-b29b3278de3e/1/message] (7@zulip via Mozilla)\n0.005144 intentional cache miss get_user_profile_by_id (7,)\n</code></pre></div>",
  "<p>It's annoying that we're still calling get_user_profile_by_id so many times (even with a remote cache).</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1612597\">said</a>:</p>\n<blockquote>\n<p>I feel like the actual mystery here is why <code>memcached</code> is having such poor performance for you; it's definitely the cache that a cache library like memcached/redis should not have those scaling properties.</p>\n</blockquote>\n<p>I've invited folks to debunk my hypothesis by running <a href=\"https://github.com/zulip/zulip/pull/26226\">#26226</a>  on their machine.  It's a pretty simple PR to pull down, and then just run the tests in test_foo.py on your hardware of choice.</p>",
  "<p>It also wouldn't shock me if it's some kind of Django overhead in cache_many.</p>",
  "<p>Well are those even all in the same request? I could imagine some being in the events code path.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"2406\">Neil Pilgrim (neiljp)</span> <a href=\"#narrow/stream/3-backend/topic/messages_in_narrow_backend.20calling.20NarrowBuilder.20directly/near/1612333\">said</a>:</p>\n<blockquote>\n<p>Do we expect a <code>-</code> prefix to apply to text too? It applies for operators like <code>stream:</code>, but not text?<br>\neg. <a href=\"#narrow/search/cheese.20-swiss\">https://chat.zulip.org/#narrow/search/cheese.20-swiss</a> &lt;-- <code>cheese -swiss</code></p>\n</blockquote>\n<p>not sure what the intent is in that situation, but silently removing the hyphen and including the keywords anyway is probably the least intuitive behaviour versus for example erroring or excluding results with those keywords, and also consider you can explicitly specify -search: as an operator (and consider use cases where you are providing a narrow by API as well)</p>",
  "<p>All of the calls to <code>get_user_profile_by_id</code> seem to be coming from the Django middleware.  I assume there's something we can do here that's smarter, but I don't really know much about Django middleware and authentication.</p>",
  "<p>So I googled again for ways to make a Django model not allow doing lazy queries, and came across <a href=\"https://github.com/charettes/django-seal\">https://github.com/charettes/django-seal</a>. I've not looked at its implementation, but I wonder if it could be useful for this effort -- functions like <code>realm.get_active_users</code> could seal the <code>.realm</code> foreign key to indicate our intent that lazy evaluation never be done there. I'm not sure it really does what I have in mind.</p>",
  "<p>I think that's likely this:</p>\n<div class=\"codehilite\"><pre><span></span><code>class ZulipAuthMixin:\n    &quot;&quot;&quot;This common mixin is used to override Django&#39;s default behavior for\n    looking up a logged-in user by ID to use a version that fetches\n    from memcached before checking the database (avoiding a database\n    query in most cases).\n    &quot;&quot;&quot;\n\n    name = &quot;undefined&quot;\n    _logger: Optional[logging.Logger] = None\n\n    @property\n    def logger(self) -&gt; logging.Logger:\n        if self._logger is None:\n            self._logger = logging.getLogger(f&quot;zulip.auth.{self.name}&quot;)\n        return self._logger\n\n    def get_user(self, user_profile_id: int) -&gt; Optional[UserProfile]:\n        &quot;&quot;&quot;Override the Django method for getting a UserProfile object from\n        the user_profile_id,.&quot;&quot;&quot;\n        try:\n            return get_user_profile_by_id(user_profile_id)\n        except UserProfile.DoesNotExist:\n            return None\n</code></pre></div>",
  "<p>I took a brief look at the code, and it seems like a sane amount of code for what it's doing, and they clearly have thought about running these in a test suite.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> I just merged <a href=\"https://github.com/zulip/zulip/pull/26286\">#26286</a>, so you'll need to rebase.</p>",
  "<p>OK actually here's a theory -- if Django is pickling Django model objects, that could be the issue. Is it easy to just profile?</p>",
  "<p>Yeah, looking into it.</p>",
  "<p>The PR has gotten a bit stale unfortunately, since one of the outcomes of the PR was to remove one of our caches.</p>",
  "<p>Yeah, about half the time is spent pickling.</p>",
  "<p>The Django code that gets invoked doesn't seem to be doing anything bulk when talking to memcached, despite what it says in the comment:</p>\n<div class=\"codehilite\"><pre><span></span><code>192     def get_many(self, keys, version=None):\n193         &quot;&quot;&quot;\n194         Fetch a bunch of keys from the cache. For certain backends (memcached,\n195         pgsql) this can be *much* faster when fetching multiple values.\n196\n197         Return a dict mapping each key in keys to its value. If the given\n198         key is missing, it will be missing from the response dict.\n199         &quot;&quot;&quot;\n200         d = {}\n201         for k in keys:\n202             val = self.get(k, self._missing_key, version=version)\n203             if val is not self._missing_key:\n204                 d[k] = val\n205         return d\n</code></pre></div>",
  "<div class=\"codehilite\"><pre><span></span><code> 34     def get(self, key, default=None, version=None):\n 35         key = self.make_and_validate_key(key, version=version)\n 36         with self._lock:\n 37             if self._has_expired(key):\n 38                 self._delete(key)\n 39                 return default\n 40             pickled = self._cache[key]\n 41             self._cache.move_to_end(key, last=False)\n 42         return pickle.loads(pickled)\n</code></pre></div>",
  "<p><code>get_many</code> is an abstract method that can be overridden per-backend with a more efficient bulk version.</p>",
  "<p>Yeah, I'm just saying that the profile is clearly not using an overridden one.</p>",
  "<div class=\"codehilite\"><pre><span></span><code>   38       546    0.006    0.000    1.765    0.003 /home/zulipdev/zulip/zerver/lib/cache.py:226(cache_get_many)\n   39   514/140    0.002    0.000    1.719    0.012 {built-in method builtins.__import__}\n   40       546    0.014    0.000    1.603    0.003 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/cache/backends/base.py:192(get_many)\n   41     15307    0.036    0.000    1.602    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/cache/backends/locmem.py:34(get)\n   42 3806/2014    0.005    0.000    1.364    0.001 &lt;frozen importlib._bootstrap&gt;:1017(_handle_fromlist)\n   43 1605/1005    0.008    0.000    1.303    0.001 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/db/models/manager.py:85(manager_method)\n   44         1    0.000    0.000    1.230    1.230 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/test/utils.py:387(get_runner)\n   45         1    0.000    0.000    1.177    1.177 /home/zulipdev/zulip/zerver/lib/test_runner.py:1(&lt;module&gt;)\n   46         1    0.000    0.000    1.164    1.164 /home/zulipdev/zulip/zerver/lib/test_helpers.py:1(&lt;module&gt;)\n   47     15305    0.547    0.000    0.914    0.000 {built-in method _pickle.loads}\n</code></pre></div>",
  "<p>It looks like it\u2019s overridden for the Django built-in memcached backend but not our python-binary-memcached backend.</p>",
  "<p>Wait no. <code>django_bmemcached.memcached.BMemcached</code> subclasses <code>django.core.cache.backends.memcached.BaseMemcachedCache</code>, which has a <code>get_many</code> override.</p>",
  "<p>What you\u2019re seeing is the <code>LocMemCache</code> backend, which is <a href=\"https://github.com/zulip/zulip/blob/b285813beb104c051149a72cb4a3d4bba8685427/zproject/test_extra_settings.py#L114-L117\">used in tests only</a>, and doesn\u2019t use memcached at all.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1607167\">said</a>:</p>\n<blockquote>\n<p>I don't think the fact that I'm running these via the test runner is pertinent, because for single-row benchmarks, memcached slaughters the database/ORM combo.</p>\n</blockquote>\n<p>Well now I know why.</p>",
  "<p>Let me get all new numbers.  One number that I don't think was irrelevant from my initial benchmarking is that the database does have high up-front costs and low marginal costs (20 microseconds per row).</p>",
  "<p>I <strong>think</strong> if I comment out the lines of code that Anders linked to, I will be back to legitimate results.  Obviously on the DB side of things we're actually hitting postgres and not some sqlite-like thing.</p>",
  "<p>There are other differences in the test runner relevant to the database. The test runner <a href=\"https://docs.djangoproject.com/en/4.2/topics/testing/tools/#testcase\">wraps every test class and also every test</a> in a transaction, which it then aborts so that test cases remain isolated.</p>",
  "<p>Hopefully that doesn't cause much actual noise, since all the benchmarks are within a test, and if nothing else, that would skew the results against the database.  Having said that, I am happy to port these to a management command or something.</p>",
  "<p>Running without LocMemCache give a similar cutoff of about 30 rows, and I can see bmemcached in the profile.</p>",
  "<p>A lot of the cost is <code>bmemcached/protocol.py:374(deserialize)</code></p>",
  "<p>It seems pretty clear that this version is actually sending multiple keys to the server:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code> <span class=\"mi\">73</span>     <span class=\"k\">def</span> <span class=\"nf\">get_multi</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">get_cas</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n <span class=\"mi\">74</span>         <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\"> 75         Get multiple keys from server.</span>\n<span class=\"s2\"> 76</span>\n<span class=\"s2\"> 77         :param keys: A list of keys to from server.</span>\n<span class=\"s2\"> 78         :type keys: list</span>\n<span class=\"s2\"> 79         :param get_cas: If get_cas is true, each value is (data, cas), with each result's CAS value.</span>\n<span class=\"s2\"> 80         :type get_cas: boolean</span>\n<span class=\"s2\"> 81         :return: A dict with all requested keys.</span>\n<span class=\"s2\"> 82         :rtype: dict</span>\n<span class=\"s2\"> 83         \"\"\"</span>\n <span class=\"mi\">84</span>         <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n <span class=\"mi\">85</span>         <span class=\"k\">if</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n <span class=\"mi\">86</span>             <span class=\"k\">for</span> <span class=\"n\">server</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">servers</span><span class=\"p\">:</span>\n <span class=\"mi\">87</span>                 <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_multi</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n <span class=\"mi\">88</span>                 <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">get_cas</span><span class=\"p\">:</span>\n <span class=\"mi\">89</span>                     <span class=\"c1\"># Remove CAS data</span>\n <span class=\"mi\">90</span>                     <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">cas</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n <span class=\"mi\">91</span>                         <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n <span class=\"mi\">92</span>                 <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n <span class=\"mi\">93</span>                 <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span> <span class=\"k\">if</span> <span class=\"n\">_</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">]</span>\n <span class=\"mi\">94</span>                 <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n <span class=\"mi\">95</span>                     <span class=\"k\">break</span>\n <span class=\"mi\">96</span>         <span class=\"k\">return</span> <span class=\"n\">d</span>\n</code></pre></div>",
  "<p>Slightly noisy profile, but I am doing 1000 bulk fetches of 20 Stream rows:</p>\n<div class=\"codehilite\"><pre><span></span><code>   26      1000    0.005    0.000    3.474    0.003 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/cache/backends/memcached.py:92(get_many)\n   27      1000    0.010    0.000    2.609    0.003 /srv/zulip-py3-venv/lib/python3.8/site-packages/bmemcached/client/replicating.py:73(get_multi)\n   28      1000    0.212    0.000    2.595    0.003 /srv/zulip-py3-venv/lib/python3.8/site-packages/bmemcached/protocol.py:483(get_multi)\n   29   2188/69    0.011    0.000    2.198    0.032 &lt;frozen importlib._bootstrap&gt;:986(_find_and_load)\n   30   2155/45    0.009    0.000    2.196    0.049 &lt;frozen importlib._bootstrap&gt;:956(_find_and_load_unlocked)\n   31   2085/48    0.010    0.000    2.190    0.046 &lt;frozen importlib._bootstrap&gt;:650(_load_unlocked)\n   32   2042/48    0.005    0.000    2.188    0.046 &lt;frozen importlib._bootstrap_external&gt;:842(exec_module)\n   33   2606/47    0.002    0.000    2.129    0.045 &lt;frozen importlib._bootstrap&gt;:211(_call_with_frames_removed)\n   34   2573/48    0.043    0.000    2.125    0.044 {built-in method builtins.exec}\n   35     20019    0.061    0.000    1.847    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/bmemcached/protocol.py:374(deserialize)\n   36   517/141    0.002    0.000    1.686    0.012 {built-in method builtins.__import__}\n   37 3454/1662    0.004    0.000    1.327    0.001 &lt;frozen importlib._bootstrap&gt;:1017(_handle_fromlist)\n   38     20019    0.781    0.000    1.311    0.000 {method &#39;load&#39; of &#39;_pickle.Unpickler&#39; objects}\n   39         1    0.000    0.000    1.161    1.161 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/test/utils.py:387(get_runner)\n   40         1    0.000    0.000    1.107    1.107 /home/zulipdev/zulip/zerver/lib/test_runner.py:1(&lt;module&gt;)\n   41         1    0.000    0.000    1.096    1.096 /home/zulipdev/zulip/zerver/lib/test_helpers.py:1(&lt;module&gt;)\n   42      1000    0.012    0.000    0.853    0.001 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/cache/backends/memcached.py:93(&lt;dictcomp&gt;)\n   43     20083    0.015    0.000    0.848    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/cache/backends/base.py:119(make_and_validate_key)\n   44     20083    0.011    0.000    0.815    0.000 /srv/zulip-py3-venv/lib/python3.8/site-packages/django/core/cache/backends/memcached.py:139(validate_key)\n</code></pre></div>",
  "<p>It looks like the slowness is deserialization and validation.</p>",
  "<p>It's Python competing against one of the most optimized C programs the world has ever known.</p>",
  "<p>well, I guess there's still the question of why the Django ORM isn't slowing us down in a similar way</p>",
  "<p>Presumably Django is slow at building queries but really fast at slurping up DB results from the presumably C-based lower-level library's payload into ORM objects.</p>",
  "<p>So what are the next steps here?  I'm not in a hurry, but if folks think it's worthwhile to improve the benchmarks here, I should have time in the next few days.</p>",
  "<p>I just re-pushed <a href=\"https://github.com/zulip/zulip/pull/26226\">#26226</a>, but it's a bit of a pain to work with now.  It's stale and it fights re-provisions.  OTOH it should be super easy to crib off.</p>",
  "<p>To use it:</p>\n<ul>\n<li>fetch it</li>\n<li>read it</li>\n<li>don't rebase</li>\n<li>revert HEAD to provision</li>\n<li>unrevert</li>\n<li>run tests individually</li>\n</ul>",
  "<p>Congrats <span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span>! These changes are gonna be super helpful.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> I rebased <a href=\"https://github.com/zulip/zulip/pull/26292\">#26292</a> and re-pushed it.  The normal stuff passes on my local machine (lint + test coverage).</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/bulk_get_streams.20slowness/near/1607651\">said</a>:</p>\n<blockquote>\n<p>Here's an interesting rule of thumb: A 400-row query is only 5x more expensive than a single-row query.</p>\n</blockquote>\n<p>I think this is worth re-stating, particularly in the context of message fetching (with the caveat that my measurements were on Stream--I can fairly quickly find a similar number for Message).</p>\n<p>It's really important that our bulk-key caching strategy takes into account that what we're mostly trying to avoid is DB round trips. If we get a cache miss and still have to incur a round trip, then at least for that request, we probably wasted resources.</p>\n<p>What I didn't bring up before, and which is slightly off topic, is that I think we should consider this in our backfill strategy as well.  It's probably fine to be a little more aggressive about getting more DB rows per round trip.  I know there's some nuance here, since maybe rendering is the bottleneck, or whatever, but hopefully it's at least food for thought.</p>",
  "<p>For at least one use case (hydrating messages) the cache is effective. The meat of messages_for_ids (i.e. excluding some steps like dealing with message flags) always does better with memcached. The reason for this is that we do the smart thing there--we cache the finalized Python data structure as JSON. This means that when our cache is warm, we don't have to repeat steps such as sew_messages_and_reactions.</p>",
  "<p>My pending commit <a href=\"https://github.com/zulip/zulip/pull/26292/commits/a45794b2c12332406bd237cb5505b19a1c0964b0\">here</a> employs this strategy by way.</p>",
  "<p>(Instead of caching ORM objects for each cross-realm bot, I instead cache a single finalized dictionary of all the cross-realm bots.  So as soon as the cache is warm, there is very little re-work to do.)</p>",
  "<p>For <code>bulk_fetch_single_user_display_recipients</code> the cache stops helping at about 20 users, even though we are using <code>.values(...)</code> and not ORM objects.  I attribute this to the fact that we don't have to do any \"sewing\" or post-processing in Python.  But maybe we need to be smarter about serializing for the cache to help...</p>",
  "<p>Switching to orjson didn't help.  The database starts being 2x faster around n=100.</p>",
  "<p>For the user queries, the database is blazing fast, and of course the problem is the ORM.</p>",
  "<p>Ok, there's a pretty simple way to eliminate most of the ORM overhead in <code>bulk_fetch_single_user_display_recipients</code>, and then it's sub-millisecond for n &lt;= 10, and then for greater values it starts out-performing the cache (and still stays quick).  I should have a PR soon-ish on that.</p>",
  "<p>I closed <a href=\"https://github.com/zulip/zulip/pull/26297\">#26297</a>, because I think I can just mostly eliminate the use of <code>generic_bulk_cached_fetch</code> when it doesn't scale well.</p>",
  "<p>8 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/bulk_get_streams.20slowness\">#backend &gt; bulk_get_streams slowness</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>8 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/bulk.20caches\">#backend &gt; bulk caches</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26317\">#26317</a> is the new set of benchmarks that I made this morning.  I'll wait for California to come online to contextualize it a bit.</p>",
  "<p>Even though I am fairly convinced that <code>messages_for_ids</code> should continue to utilize the cache for now, I do intend to eventually profile it and consider other performance solutions.  The <code>sew_messages_and_reactions</code> code seems fairly sane, but if it turns out that's the bottleneck, then maybe we should just get everything back in a single query or something.  I am also fairly confident that we can avoid some ORM overhead without too much risk or complexity there.</p>",
  "<p>Basically, Django is really inefficient at constructing simple queries.</p>\n<p>Steve: Django, I just want to pull four columns from a couple rows of the UserProfile table with an id-based lookup? Can you construct a query to do that in maybe less than a millisecond?</p>\n<p>Django: No.</p>",
  "<p>Steve: Django, literally all I need you to do is <code>f\"SELECT {field_list} FROM {table} WHERE {id_field} in ({id_list})\"</code></p>\n<p>Django: Give me a millisecond.</p>",
  "<p>(To be fair, it's actually about 600 microseconds of overhead, but that's still way too much. The DB processes the SQL faster than Django builds it.)</p>",
  "<p><a href=\"https://github.com/edgedb/imdbench\">https://github.com/edgedb/imdbench</a> is obviously biased, but supports the conclusion that Django is easily the slowest of all the common Python and JavaScript ORMs.</p>",
  "<p>The whole architecture is broken.  First of all, it's preposterous that relational databases have been around for about a half century, and the canonical way to talk to them from <strong>programs</strong> is still SQL.  That makes no sense, but that's not Django's fault.  But it makes no sense to generate SQL at runtime.  We've had the technology for easily over half a century to build code at compile-time, and SQL is code.</p>",
  "<p>But even setting all that aside, why is Django so slow?  It's not even Python's fault.  The 600-microsecond overhead isn't Python vs. C.  It's everybody who has ever worked on Django's ORM vs. Steve writing a simple one-liner on some Friday in July.</p>",
  "<p>17 lines of the dumbest code ever:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code> <span class=\"mi\">41</span> <span class=\"k\">def</span> <span class=\"nf\">simple_query</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">id_field</span><span class=\"p\">,</span> <span class=\"n\">ids</span><span class=\"p\">):</span>\n <span class=\"mi\">42</span>     <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n <span class=\"mi\">43</span>         <span class=\"k\">return</span> <span class=\"p\">[]</span>\n <span class=\"mi\">44</span>     <span class=\"n\">field_list</span> <span class=\"o\">=</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">)</span>\n <span class=\"mi\">45</span>\n <span class=\"mi\">46</span>     <span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">ids</span><span class=\"p\">:</span>\n <span class=\"mi\">47</span>         <span class=\"k\">assert</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">int</span>\n <span class=\"mi\">48</span>\n <span class=\"mi\">49</span>     <span class=\"n\">id_list</span> <span class=\"o\">=</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">ids</span><span class=\"p\">)</span>\n <span class=\"mi\">50</span>\n <span class=\"mi\">51</span>     <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n <span class=\"mi\">52</span>     <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"SELECT </span><span class=\"si\">{</span><span class=\"n\">field_list</span><span class=\"si\">}</span><span class=\"s2\"> FROM </span><span class=\"si\">{</span><span class=\"n\">table</span><span class=\"si\">}</span><span class=\"s2\"> WHERE </span><span class=\"si\">{</span><span class=\"n\">id_field</span><span class=\"si\">}</span><span class=\"s2\"> in (</span><span class=\"si\">{</span><span class=\"n\">id_list</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n <span class=\"mi\">53</span>     <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n <span class=\"mi\">54</span>     <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">description</span>\n <span class=\"mi\">55</span>     <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">((</span><span class=\"n\">col</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">desc</span><span class=\"p\">),</span> <span class=\"n\">row</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()]</span>\n <span class=\"mi\">56</span>     <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n <span class=\"mi\">57</span>     <span class=\"k\">return</span> <span class=\"n\">rows</span>\n</code></pre></div>",
  "<p>That shaves 600 microseconds off of literally a one-row query with four columns.</p>",
  "<p>It basically is Python\u2019s fault. Your code is very specialized to a very specific kind of query, and Django is a very general abstraction that aims to provide a composable language for building any kind of query. General abstractions are great, but Python is just so slow that every extra layer of abstraction costs significant extra running time.</p>",
  "<div class=\"codehilite\"><pre><span></span><code>Testing with 1 user ids\noptimize 0.3676745109260082 (milliseconds per row)\nmemcache 0.1179582835175097 (milliseconds per row)\ndatabase 0.8624111698009074 (milliseconds per row)\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1613887\">said</a>:</p>\n<blockquote>\n<p>It basically is Python\u2019s fault. Your code is very specialized to a very specific kind of query, and Django is a very general abstraction that aims to provide a composable language for building any kind of query. General abstractions are great, but Python is just so slow that every extra layer of abstraction costs significant extra running time.</p>\n</blockquote>\n<p>I mean, yeah, I kind of agree, but the query I wrote wasn't exactly a \"very specific kind of query\".  It's a very natural type of query that generically gets fields from the database using the most natural lookup mechanism.</p>\n<p>I understand extra layers of abstraction, of course.</p>",
  "<p>This is what I handed to Django.  It's not Sanskrit.</p>\n<div class=\"codehilite\"><pre><span></span><code>UserProfile.objects.filter(id__in=ids).values(*display_recipient_fields)\n</code></pre></div>",
  "<p>In the general case, Django has to deal with questions like, what if I\u2019m joining two tables with conflicting column names, or even multiple copies of the same table. Or, what if some of the column names contain characters that need to be escaped. So Django can\u2019t make the kind of assumptions that would allow it to build queries with the kind of straightforward string joins that you wrote.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1613893\">said</a>:</p>\n<blockquote>\n<p>In the general case, Django has to deal with questions like, what if I\u2019m joining two tables [...].</p>\n</blockquote>\n<p>Yeah, but in this case I was clearly not asking for a join.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1613893\">said</a>:</p>\n<blockquote>\n<p>Or, what if some of the column names contain characters that need to be escaped</p>\n</blockquote>\n<p>A well-designed ORM would prohibit you from making troublesome column names.  It's not like Django has no control over how you define your models--it's quite the opposite.</p>",
  "<p>Well there I disagree. If you\u2019re writing a general abstraction, it\u2019s frustrating when it fails in special cases that should be possible to support (whether by failing with an explicit error or with mysterious incorrect behavior).</p>",
  "<p>That kind of incompleteness is often where security vulnerabilities lie.</p>",
  "<p>Is your concrete case of that that you should be able to make column names that are subject to injection attacks if the ORM isn't extra vigilant?</p>",
  "<p>Is it even syntactically possible to create a column name in SQL that is injection-unfriendly?</p>",
  "<p>My 17-line function is totally safe from injections if you just add <code>for field in fields: assert field in safe_fields</code>.  Why is Django not able to do that efficiently?</p>",
  "<p>It literally has a client-side copy of the database schema that it can validate against with an O(1) dictionary.</p>",
  "<p>In Django you can do stuff like <code>UserProfile.objects.annotate(**{\"!\": F(\"id\")}).values(\"!\")</code>.</p>",
  "<p>Sure, but all the tricky inefficiency for that should be in <code>annotate</code>.</p>",
  "<p><code>annotate</code> would add a flag to the query construction to say \"be extra paranoid\".  Until you add <code>annotate</code> to the query chain, Django should be able to generate SQL simply and fast.</p>",
  "<p><code>annotate</code> itself just builds a Python data structure that\u2019s walked later to build the SQL. It has to work that way, because it might need to pull information from calls that syntactically happen later to deal with stuff like, I dunno, <code>OuterRef</code>.</p>",
  "<p>Sure, and part of that Python data structure is a flag that says be-extra-careful-about-this-field.</p>",
  "<p>I don't really buy how any of this makes <code>UserProfile.objects.filter(id__in=ids).values(*display_recipient_fields)</code> difficult to work with.</p>",
  "<p>What you\u2019re basically suggesting is to add extra complexity to bypass the general logic in certain common simple cases. That makes the whole thing trickier to do right, and also everyone will have a different idea of which cases are common and simple enough to be worth these special optimizations.</p>",
  "<p>For example, I would argue that if you\u2019re doing lots of <code>id__in</code> queries, you\u2019re probably misusing the ORM by making extra round trips to the database where you should be making better use of joins and <code>select_related</code>.</p>",
  "<p>No, what I'm suggesting is to handle the simple cases in a simple way.</p>\n<div class=\"codehilite\"><pre><span></span><code>if no_complicated_fields:\n   field_list = &quot;, &quot;.join(fields)\n\nif num_tables == 1:\n   return simple_build_query(*stuff)\n</code></pre></div>",
  "<p>Are you <strong>really</strong> arguing that the reason that Django is slow is because it avoids complexity?</p>",
  "<p>I understand. Taking a complex system A, and adding checks B to see whether you can divert some of the logic to a simple system C, replaces your complex system A with a more complex system A + B + C.</p>",
  "<p>And then every time you add a new feature D, you need to make the B checks more complicated to check that D isn\u2019t being used if C wouldn\u2019t deal with D correctly.</p>",
  "<p>So you're defending Django taking longer to produce SQL from <code>UserProfile.objects.filter(id__in=ids).values(*display_recipient_fields)</code> than it takes the database to actually fetch the data.  In the name of simplicity.  I am glad that postgres doesn't make the same tradeoffs that Django does.  I assume when postgres gets a single-table query, it does <strong>all kinds</strong> of stuff to bypass complex logic to optimize for the simple, common case.  Maybe with <em>gasp</em> some extra code.</p>",
  "<p>I\u2019m not defending it at all. I\u2019m placing the blame on the disaster of a language the whole thing is written on, where every complex system is necessarily slow.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1613939\">said</a>:</p>\n<blockquote>\n<p>I\u2019m not defending it at all. I\u2019m placing the blame on the disaster of a language the whole thing is written on, where every complex system is necessarily slow.</p>\n</blockquote>\n<p>Yeah, we're on the same page there, basically.  I am probably not as anti-Python as you, but I definitely wish the database layer was in either in a statically compiled language or at least somewhat statically pre-processed.</p>",
  "<p>I wish Python ORMs code-generated super clean Python code, and then you could have tooling that runs offline to make sure the generated code actually conforms to the schema.</p>",
  "<p>All I did for basically four years of my career in the 90s was write database systems in C.  We just statically generated code to access the database, and we were heavy into stored procedures.  None of it was rocket science, and of course it was all super fast for the hardware of the time.</p>",
  "<p>I worked on Rails for a couple years and it has all the same problems as Django.  It's just a bad architecture.</p>",
  "<p>I really have no idea why SQL has squeezed out every other possible way to talk to a database.  If SQL is so great, why does every modern ORM completely obscure it?  Why can't the database <strong>server</strong> talk the ORM language?</p>",
  "<p>This is obviously a horrendously unfair comparison in lots of ways, but PostgreSQL is some 1,700,000 lines of code to <code>django.db</code>\u2019s 36,000. Optimizations have a development cost.</p>",
  "<p>PostgresQL: 1,700,000<br>\ndjango: 36,000<br>\nsimple_query:: 17</p>",
  "<p>Let's say that it's 200 lines of code to optimize for single-table lookups based on a key.  That's a 0.5% increase in Django's codebase that would have possibly prevented projects like Zulip from trying to cache single-table lookup queries that should be fast in the first place (and which <strong>are</strong> fast on the database side).</p>",
  "<p>We're paying the development cost for the <code>bulk_fetch_single_user_display_recipients</code> optimization because Django didn't solve a generic problem.  Optimizations have a development cost.</p>",
  "<p><code>bulk_fetch_stream_names</code> has very similar characteristics as the user function, but it's even more extreme.  Using a simple database query without ORM overhead outperforms the cache for 10-key queries, and it's 0.3ms for 10 rows.  It very <strong>clearly</strong> should be a direct database lookup.</p>",
  "<p>I re-pushed <a href=\"https://github.com/zulip/zulip/pull/26317\">#26317</a> if anybody cares to replicate or debunk any of my findings.  Summary:</p>\n<ul>\n<li>message cache is good (it uses finalized data from three different queries serialized as json)</li>\n<li>user cache is bad</li>\n<li>stream cache is bad</li>\n</ul>",
  "<p>I renamed my crafty optimization function to <code>get_column_values_from_single_table_using_id_lookup</code>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> I would appreciate it (if you have time) to take kind of an adversarial poke at it.  I think I avoided most of the mistakes of my last exercise, but I could clearly be making new mistakes.  This time you basically run <code>./tools/analyze.py</code>.</p>",
  "<p>Would a good summary be that caching Django model objects is bad but caching simpler Python objects that might be calculated from Django model objects is efficient?</p>\n<p>You know, one theory for what's happening here is that we've added a lot of non-data fields to our Django model classes over the years -- things like this stuff:</p>\n<div class=\"codehilite\"><pre><span></span><code>STREAM_POST_POLICY_EVERYONE = 1\nSTREAM_POST_POLICY_ADMINS = 2\nSTREAM_POST_POLICY_RESTRICT_NEW_MEMBERS = 3\nSTREAM_POST_POLICY_MODERATORS = 4\n# TODO: Implement policy to restrict posting to a user group or admins.\n\n# Who in the organization has permission to send messages to this stream.\nstream_post_policy = models.PositiveSmallIntegerField(default=STREAM_POST_POLICY_EVERYONE)\nPOST_POLICIES: Dict[int, StrPromise] = {\n    # These strings should match the strings in the\n    # stream_post_policy_values object in stream_data.js.\n    STREAM_POST_POLICY_EVERYONE: gettext_lazy(&quot;All stream members can post&quot;),\n    STREAM_POST_POLICY_ADMINS: gettext_lazy(&quot;Only organization administrators can post&quot;),\n    STREAM_POST_POLICY_MODERATORS: gettext_lazy(\n        &quot;Only organization administrators and moderators can post&quot;\n    ),\n    STREAM_POST_POLICY_RESTRICT_NEW_MEMBERS: gettext_lazy(\n        &quot;Only organization full members can post&quot;\n    ),\n}\nSTREAM_POST_POLICY_TYPES = list(POST_POLICIES.keys())\n</code></pre></div>\n<p>And I wonder whether that has an impact on how (in)efficient it is to pickle Django model objects.</p>",
  "<p>Class variables aren\u2019t pickled; you can verify with <code>pickletools.dis(pickle.dumps(Stream.objects.first()))</code>.</p>\n<p>However, related fields that have been fetched are: <code>pickletools.dis(pickle.dumps(Stream.objects.select_related().first()))</code>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1614024\">said</a>:</p>\n<blockquote>\n<p>Would a good summary be that caching Django model objects is bad but caching simpler Python objects that might be calculated from Django model objects is efficient?</p>\n</blockquote>\n<p>I wouldn't say it summarizes the whole thread, but it's a good rule.  Just to restate it for clarity:</p>\n<p><strong>Prefer to cache finalized, coarse, jsonable Python data structures over individual ORM objects.</strong></p>",
  "<p>(and I agree with Anders that class vars are a bit of a red herring...a non-pickled herring if you will)</p>",
  "<p>Can I get an \"Ugh\" for that pun?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1614040\">said</a>:</p>\n<blockquote>\n<p><strong>Prefer to cache finalized, coarse, jsonable Python data structures over individual ORM objects.</strong></p>\n</blockquote>\n<p>There's obviously some nuance to this rule.  If you cache on too coarse a level, you deprive yourself from being able to compose results from smaller cached objects.  But in general you want to cache operations that actually take significant time.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1614025\">said</a>:</p>\n<blockquote>\n<p>However, related fields that have been fetched are: <code>pickletools.dis(pickle.dumps(Stream.objects.select_related().first()))</code>.</p>\n</blockquote>\n<p>Yeah, OK, and we've added several foreign keys to that table recently that made that <code>select_related</code> grab a bunch of data that was never intended to be included -- so finishing <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args\">#backend &gt; select_related() with no args</a> will help with that problem considerably.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> mentioned this topic in <strong><a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1614110\">#backend &gt; bulk caches</a></strong>.</p>",
  "<p>Sure (but it\u2019s not just <code>select_related</code>, for example <code>stream = Stream.objects.first(); stream.realm; pickletools.dis(pickle.dumps(stream))</code> includes the <code>Realm</code> object).</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26328\">#26328</a> is ready for review.  The best way to achieve performance in a system is to remove moving parts.  I side-step the ORM's slowness and side-step the cache's complexity with a 20-line function that a high school student could write.  Just let postgres do its magic.  Those 1.7 million lines of code weren't written in vain.  It's a pretty good key-value store.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1613902\">said</a>:</p>\n<blockquote>\n<p>That kind of incompleteness is often where security vulnerabilities lie.</p>\n</blockquote>\n<p>It's completely preposterous that we still have to worry about security vulnerabilities related to database queries in 2023.  Why are we sending SQL over the wire?  It's a terrible, terrible, terrible format for machine-to-machine communication.  Just send JSON.  Send some form of an AST where some rogue column name doesn't bring down the system.  It's a totally solvable problem.</p>",
  "<p>It\u2019s preposterous but true, and I don\u2019t see that reality changing any time soon.</p>",
  "<p>Yeah, me neither, I was just sort of venting.  I guess it's about 45 years of inertia.</p>",
  "<p>The two trendy ORMs from the early century (Django and Rails) got so many things wrong.  Don't lazily fetch rows and cause O(N) issues.  Don't let programmers greedily grab data that they don't need with <code>select_related</code> and whatever the Rails equivalent is.  Don't encourage an impedance mismatch between objects and relational tables when the latter model is completely fine.  Don't generate SQL at runtime when it's perfectly feasible to have a static strategy (even with a dynamic language like Python and Ruby).</p>",
  "<p>The two ORMs also, with fairness to them because of their power, discouraged the use of stored procedures.  Stored procedures are an awesome technology, because you move code to the database.  Stored procedures also have a fairly natural way of preventing injection attacks, since they're fundamentally functions at the end of the day and not subject to strange syntax attacks.</p>",
  "<p>We had an entire decade (the 90s) of programming database applications with C and basic tools and relatively powerful databases, and it worked mostly fine on terrible hardware.  I don't know why my generation was so unsuccessful on pushing back on some of the dumber ideas of the following decade.</p>",
  "<p>There is still innovation going on in this problem domain\u2014see <a href=\"https://www.prisma.io/\">Prisma</a> for TypeScript and <a href=\"https://github.com/launchbadge/sqlx\">SQLx</a> for Rust. But we\u2019re never going to see that innovation as long as we\u2019re chained to Django and likely to Python at all, because people writing non-legacy backends are moving on to languages that are suited to the task.</p>",
  "<p>E2E encryption for push notifications would be a valuable addition for government agencies <a href=\"https://github.com/LibraryOfCongress/api.congress.gov/issues/124#issuecomment-1646886204\">https://github.com/LibraryOfCongress/api.congress.gov/issues/124#issuecomment-1646886204</a>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> yeah, we should keep pushing on E2E encryption for push notifications, it is pretty important.</p>",
  "<p>The really sad thing about the Django ORM is that its main failure mode, accidental fetches, seems like it'd be a pretty simple feature in Django to supporting disabling it compared to many of the nice features that Django has.</p>",
  "<p>I know you don\u2019t have much time to investigate the competition, but the \u201cnice features\u201d of 2013 are the table stakes of 2023.</p>",
  "<p>Prisma, for example, doesn\u2019t just give you runtime errors on accidental fetches\u2014it remembers what\u2019s been fetched <em>in the type system</em> and gives you TypeScript compile errors. And because its async support is built in foundationally and not a quarter-baked inefficient wrapper around synchronous threaded code, it can leverage it for other neat tricks; it automatically batches fetches of the same type that happen within the same asynchronous microtask even if you didn\u2019t write them that way.</p>\n<p>There are so many cool ideas out there that you wouldn\u2019t even think to look for if your entire world is Django.</p>",
  "<p>I'd looked at SQLx and didn't see much along those lines there, but it's not an ORM -- I guess they mention <code>ormx</code> as an alternative for that issue.</p>",
  "<p>Yeah SQLx has different cool ideas; it basically does static type checking of raw SQL queries at compile time.</p>",
  "<p>The main Rust ORM these days is <a href=\"https://diesel.rs/\">Diesel</a>, which has more of a standard ORM design, but of course is type-safe and hundreds of times faster than Django because it\u2019s Rust.</p>",
  "<p>Yeah I think we're probably going to eventually migrate from Django to probably something based on Rust when the benefits of doing so become more important than product iteration velocity.</p>\n<p>At the service level, that would probably start with Tornado and Presence, which are a huge fraction of our total runtime and hardly interact with the database beyond what is required to authenticate requests, and the exploration as part of those efforts will ideally be directed towards finding a model that we would feel good about moving other expensive subsystems towards using.</p>",
  "<p>A good directory of the Rust web ecosystem is <a href=\"https://www.arewewebyet.org\">https://www.arewewebyet.org</a>.</p>",
  "<p>Hi, I've been using Zulip since 2015, running two small self-hosted instances. The development state of encrypted mobile notifications feature is something I'm checking on regularly for years now, as for someone not willing to go unencrypted/redacted(very little value there), this is something that severely impacts the value of what Zulip can bring to discussions where both parties aren't necessarily online.</p>\n<p>One thing has been running through my mind lately though. When implementing a reliable encryption mechanism is not a trivial thing to do to an extent of not having this feature for many years now, is this <em>really</em> necessary to deliver the feature?</p>\n<p>I mean, delivering a non-encrypted signal 'hey, there is something new on the server for you' that doesn't carry any content at all and then using this as a trigger to have the client pull the actual content from the server (using the same security level that is configured for interactive use in the first place) seems to be way easier thing to implement.</p>\n<p>Is there something I'm missing why the issue shouldn't really be approached this way? From my point of view, separating the content flow from push notification service to the path server&lt;-&gt;client seems like a good idea.</p>",
  "<p>I suppose that approach would have a few architectural differences:</p>\n<ul>\n<li>The Zulip server would need to store the set of push notifications for collection by the client; this would involve some complexity since it'd likely require a new per-device-per-message database table. Using the vendor push notifications APIs sorta saves us from having to do interesting/stateful per-mobile-device storage in the server.</li>\n<li>It would reduce deliverability of notifications in limited network situations where the mobile app can receive push notifications via the Google systems but can't reliably make outgoing network connections directly to the Zulip server. I'm not sure how real a problem that might be -- but it would be an extra moving part for the system.</li>\n</ul>",
  "<p>I don't think the current plan we have for actually encrypting the notifications is a huge amount of implementation work, though it probably is a more complicated design.</p>",
  "<p>Regarding tracking - would it be necessary though? If the message ids (only message ids) in question would be part of the trigger, every client would know what to ask for as it would have worked as notifications work now, right?</p>\n<p>Also, when you mention the limited network situations - I don't know if the value of getting the contents through notification is really so great. In that case, it would be similar as getting redacted notifications - you would need server connection anyway.</p>\n<p>On the other hand, I would tend to see a value in <em>not</em> implementing cryptographic mechanism at all.</p>\n<p>Either way, I'm fine with whatever path chosen, just wanted to bring up the idea...</p>",
  "<p>I'm looking into <code>cattrs</code> to rework the validation system introducing an alternative to the current <code>REQ</code> design.<br>\nPrevious discussions: <a class=\"stream-topic\" data-stream-id=\"49\" href=\"/#narrow/stream/49-development-help/topic/overloaded.20REQ\">#development help &gt; overloaded REQ</a></p>",
  "<p>I did some study on FastAPI on how we might incorporate <code>cattrs</code> into our <code>has_request_variables</code> system.</p>",
  "<p>FastAPI used to rely on setting <a href=\"https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#alternative-old-query-as-the-default-value\"><code>Query</code></a> as the default value if you want to do additional validations:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/items/\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">read_items</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)):</span>\n  <span class=\"o\">...</span>\n</code></pre></div>\n<p>which is quite similar to <code>REQ</code>. It relies on setting the defaults of the parameters and inspecting them internally with the decorator too.</p>",
  "<p>In later versions, <code>Annotated</code> is preferred, with <code>Query</code> added as the metadata:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/items/\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">read_items</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</code></pre></div>",
  "<p>The latter use is advocated. I'm citing from their explanations of the benefits of <code>Annotated</code>:</p>",
  "<blockquote>\n<h2>Advantages of Annotated\u00b6</h2>\n<p>Using Annotated is recommended instead of the default value in function parameters, it is better for multiple reasons. <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span><br>\n The default value of the function parameter is the actual default value, that's more intuitive with Python in general. <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span></p>\n</blockquote>",
  "<p>Applicable. With <code>REQ</code> we are hacking the defaults by making REQ return <code>Any</code>. It can be less overhead if we just use type annotations and the defaults for the actual default values of the request parameters. <code>Annotated</code> does sound like an esoteric typing feature, but it is standard and more adapted.</p>",
  "<blockquote>\n<p>You could call that same function in other places without FastAPI, and it would work as expected. If there's a required parameter (without a default value), your editor will let you know with an error, Python will also complain if you run it without passing the required parameter.</p>\n</blockquote>\n<blockquote>\n<p>When you don't use Annotated and instead use the (old) default value style, if you call that function without FastAPI in other place, you have to remember to pass the arguments to the function for it to work correctly, otherwise the values will be different from what you expect (e.g. QueryInfo or something similar instead of str). And your editor won't complain, and Python won't complain running that function, only when the operations inside error out.</p>\n</blockquote>\n<blockquote>\n<p>Because Annotated can have more than one metadata annotation, you could now even use the same function with other tools, like Typer. <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>\n</blockquote>",
  "<p>Not quite applicable. I think we rarely call the view functions and prefer to run it through the middleware with a test client. Outside testing, we decouple reusable functions into <code>zerver.actions</code> or <code>zerver.lib</code>. It is more relatable to FastAPI probably because they have a more decorator-centric design hooking up the infrastructure.</p>",
  "<p>I think the main takeaway from this is that if gather enough information from the type annotation of the request parameters. hijacking the defaults will no longer be necessary. Even <code>REQ</code> itself and <code>Annotated</code> will no longer be not necessary for typical request parameters.</p>",
  "<p>We can switch to a <code>REQ</code>-less design, and only use <code>Annotated</code> when necessary.</p>",
  "<p>For example, instead of </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@has_request_variables</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_bot_backend</span><span class=\"p\">(</span>\n  <span class=\"o\">...</span>\n  <span class=\"n\">config_data</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">json_validator</span><span class=\"o\">=</span><span class=\"n\">check_dict</span><span class=\"p\">(</span><span class=\"n\">value_validator</span><span class=\"o\">=</span><span class=\"n\">check_string</span><span class=\"p\">))</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
  "<p>we can write</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@has_request_variables</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_bot_backend</span><span class=\"p\">(</span>\n  <span class=\"o\">...</span>\n  <span class=\"n\">config_data</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
  "<p>I would consider moving this discussion to <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a>.  I don't fully understand the details here, but I think I understand the overall theme here, which is that we should be striving to reduce some of the duplication between <code>REQ</code> helpers and mypy-driven annotations.</p>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/New.20has_request_variables.20API\">#design &gt; New has_request_variables API</a> by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>.</p>",
  "<p>I'm running through an experiment with mypy to see how frequently each overload is used.</p>",
  "<p>I have some minor pushback on starting with Tornado and Presence.  Both of those subsystems, while highly leveraged in terms of performance upside, have a lot of specific complexity.  Tornado has a very specific sort of architectural challenge, and Presence is just, um, tricky for sort of tactical reasons.</p>",
  "<p>I would love to see a prototype of some non-Django way just to deal with super-easy read-only database requests that are only slow because of Django and which aren't really difficult conceptually.  Examples would be things that happen at page-load and/or message fetching.  Maybe these wouldn't affect overall system performance much (since Tornado/Presence dominate that), but they might have more perceptible impact on users.</p>",
  "<p>By deleting each overload and running mypy <code>tools/run-mypy -d | grep \"error: No overload\"</code>, here are the statistics for the current overloads:</p>\n<div class=\"codehilite\"><pre><span></span><code>113 Overload 1: converter\n308 Overload 2: json_validator\n63 Overload 3: no converter/json_validator, default: str or unspecified, argument_type=None\n101 Overload 4: no converter/validator, default=None, argument_type=None\n5 Overload 5: argument_type=&quot;body&quot;\n</code></pre></div>",
  "<p>The following analysis helps us understand how the request parameters will be impacted if we switch to <code>Annotated</code> and eliminate <code>REQ</code> as defaults.</p>\n<p>If we carry the metadata with <code>Annotated</code>, it will likely be necessary for refactoring parameters that use overload #1, which is predominantly used for webhooks (76 occurrences) using the <code>to_wild_value</code> converter combined with <code>argument_type=\"body\"</code>.</p>",
  "<p>For reference, here is the implementation signature:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">REQ</span><span class=\"p\">(</span>\n    <span class=\"n\">whence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span>\n    <span class=\"n\">converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">ResultT</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">_REQ</span><span class=\"o\">.</span><span class=\"n\">_NotSpecified</span><span class=\"p\">,</span> <span class=\"n\">ResultT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_REQ</span><span class=\"o\">.</span><span class=\"n\">NotSpecified</span><span class=\"p\">,</span>\n    <span class=\"n\">json_validator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Validator</span><span class=\"p\">[</span><span class=\"n\">ResultT</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">str_validator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Validator</span><span class=\"p\">[</span><span class=\"n\">ResultT</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">argument_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">intentionally_undocumented</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">documentation_pending</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">aliases</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n    <span class=\"n\">path_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ResultT</span><span class=\"p\">:</span>\n</code></pre></div>",
  "<p><code>Annotated</code> will also be used when <code>whence</code> is needed.</p>",
  "<p>Metadata that is currently shared for all overloads, including <code>intentionally_undocumented</code>, <code>documentation_pending</code>, <code>aliases</code> (only used in <code>REQ_topic</code>), and <code>path_only</code> will need to be specified through <code>Annotated</code> too.</p>",
  "<p>For overloads #2, #3, #4 that do not make use of these metadata, <code>Annotated</code> is no longer needed.</p>",
  "<p>For overload #5, <code>Annotated</code> is required.</p>",
  "<p>The specific complexity in the Tornado subsystem poses no challenge at all in a language with a functioning async ecosystem.</p>",
  "<p>Regarding how we want to describe the metadata via <code>Annotated</code>, it's pretty flexible.</p>\n<p>We can keep using <code>REQ</code>, in the form of</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">some_request_var</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span>\n    <span class=\"n\">ResultT</span><span class=\"p\">,</span>\n    <span class=\"n\">REQ</span><span class=\"p\">(</span>\n        <span class=\"n\">intentionally_undocumented</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">path_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">argument_type</span><span class=\"o\">=</span><span class=\"s2\">\"body\"</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>and etc in the type annotation for the function parameter. A <code>dataclass</code> will probably be sufficient for our use cases.</p>",
  "<p>If <code>REQ</code> is no longer required for <code>has_request_variables</code> decorated functions, the decorator needs to determine which variables are request variables.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1615947\">said</a>:</p>\n<blockquote>\n<p>The specific complexity in the Tornado subsystem poses no challenge at all in a language with a functioning async ecosystem.</p>\n</blockquote>\n<p>Yeah, I 100% agree with that.  My main point is that the Tornado problem doesn't have much overlap with the make-DB-interactions-fast problem.  The one thing that they totally have in common is that they're both solved problems, but I'm not sure that they have much synergy in the Zulip context.</p>",
  "<p>In most cases, <code>request</code> and <code>user_profile</code>/<code>remote_server</code> are the only ones. We can probably allow specifying parameters to be skipped optionally by calling <code>has_request_variables</code> with arguments.</p>",
  "<p>I ran mypy again deleting overloads #1 and #5, as well as the other metadata parameters shared in the remaining overloads. There are 146 errors, which is an estimate of how many request variables will rely on <code>Annotated</code>.</p>",
  "<p>You\u2019re skipping some important subtle details. Consider, for example, the difference between <code>param: Optional[str] = REQ(default=None)</code> and <code>param: Optional[str] = REQ(json_validator=check_none_or(check_string))</code>, which have very incompatible input formats.</p>",
  "<p>Oh right, I forgot. I think we need to design a way to determine when <code>orjson.loads</code> is needed for a request variable.</p>",
  "<p>Some examples where we use nontrivial validation outside of structs:</p>\n<ul>\n<li><code>alert_words: List[str] = REQ(json_validator=check_list(check_capped_string(100)))</code></li>\n<li><code>narrow: NarrowT = REQ(json_validator=check_list(check_list(check_string, length=2)), default=[])</code></li>\n<li><code>service_payload_url: Optional[str] = REQ(json_validator=check_url, default=None)</code></li>\n</ul>",
  "<p>And lots of uses of <code>converter=to_non_negative_int</code>.</p>",
  "<p><code>str</code> or <code>Optional[str]</code> is ambiguous because they might either come from <code>request.POST</code> or <code>requet.GET</code> directly or after JSON is parsed. A potential solution to this is to default these types to skip JSON parsing. I did some quick grepping and <code>str</code>/<code>Optional[str]</code> combined with <code>json_validator</code> seem to be a rare use case.</p>",
  "<p>I think we want to use <code>Annotated</code> to store the additional validations needed after parsing them to the correct type.</p>",
  "<p>I don\u2019t like it using an implicit heuristic like that. Someone changing <code>str</code> to <code>Union[str, int]</code> would get an unexpected surprise, for example.</p>",
  "<p>I agree. A concern that I have is that we cannot type check the metadata on <code>Annotated</code> (or maybe there is a way to do so?) This is something that we don't want to lose from <code>REQ</code>.</p>",
  "<p>I think it's worth keeping around a decorator on all Zulip endpoints just from a readability standpoint.  I would consider renaming <code>has_request_variables</code> to something like <code>endpoint</code> or something.</p>\n<p>Having the decorator gives you tons of flexibility to make things better here.  I think it's very plausible that we can keep the decorator fairly lean when the app is actually running (while still validating the requests, of course) and then do a bunch of extra stuff at runtime in some kind of tooling environment to really introspect stuff beyond what mypy can do.</p>\n<p>I haven't really thought through the details here; I am just saying that my intuition is that we can improve our tooling here even with all the complications.</p>",
  "<p>I guess the idea here isn't necessarily to eliminate the decorator, but just eliminate the <code>REQ</code> stuff (at least in some places), correct?</p>",
  "<p>Eliminating <code>REQ</code> is a possible side-effect of this change depending on how the API is designed. The motivation is to strip away the existing validator system and replace it with a third party like <code>cattrs</code> that parses from request data to the expected type with type safety.</p>",
  "<p>Ideally, we should:</p>\n<ul>\n<li>have the third party handle validation for us;</li>\n<li>not lose type information;</li>\n<li>have a less verbose but still explicit API;</li>\n<li>have a simpler implementation to maintain.</li>\n</ul>",
  "<p>Because it's possibly going to be a lot of refactorings if we go down this path, the result should better be a net positive in long term.</p>",
  "<p>I don't necessarily agree with the goal of replacing Zulip's built-in validation with something third party.  But I certainly agree with some of the other goals.</p>\n<p>Ideally there's an 80/20 solution here.  For all the mostly trivial validations where <code>REQ</code> is doing the exact most simplest thing that you would infer from the type annotation, I am 100% in support of eliminating some of the verbosity and just have the decorator orchestrate the most obvious run-time validation.</p>\n<p>But this is certainly an ambitious project.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> Have you looked at the <code>test_events.py</code> code?  That's another place where we use all the Zulip validators.  For the record I'm the original author of those, so I probably have some bias toward continuing to use them.  But it's pretty straightforward code.  It's not super heavy either.</p>",
  "<p>Yeah, I did some experiments with event validation using <code>attrs</code> and <code>cattrs</code> in <a href=\"https://github.com/zulip/zulip/pull/23367\">#23367</a> before.</p>",
  "<p>All the validators basically just compose checks on primitive types and the major collection types, and then there's all the nuance of string-length checks that could become awkward if we try to use a third-party system.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/23367\">#23367</a> does seem like a nice idea at first skim.</p>",
  "<p>A drawback with the composed schema is that we don't have a reusable type.</p>",
  "<p>So if we are using <code>dataclass</code> or an <code>attrs</code> class, the schema validation might not be needed if we have a well-typed system.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span> <a href=\"#narrow/stream/3-backend/topic/New.20has_request_variables.20API/near/1616046\">said</a>:</p>\n<blockquote>\n<p>So if we are using <code>dataclass</code> or an <code>attrs</code> class, the schema validation might not be needed if we have a well-typed system.</p>\n</blockquote>\n<p>Yeah, that's fair, and I suppose that's something that you can introduce in a somewhat incremental fashion.  Basically you just want a way to dynamically generate a run-time validator based on a <code>dataclass</code> definition, and I suppose what you're arguing is that <code>cattrs</code> kind of does it for free?</p>",
  "<p>FWIW when I originally wrote the validation system I considered having the schema be more data-oriented, so back in 2013 it would have been some kind of JSON-ish thing.  But then I concluded it was easier to just do everything with code for added flexibility.  But that was before modern stuff like dataclasses and annotations even existed in Python, so it's certainly plausible that we're a bit overdue for a fresh look at this stuff.</p>",
  "<p>Also, all the <code>REQ</code> stuff pre-dated me, and my contribution was basically just to make it easier to write validators in a more generic way.</p>",
  "<p>Yes but at a holistic level, database interaction performance is largely not a major problem materially affecting scaling or user experience for Zulip as a whole; we have to do some annoying things to make our Python code fast enough to feel good, but it's also largely a small cost in the scheme of total development effort.</p>",
  "<p>This topic was moved to <a class=\"stream-topic\" data-stream-id=\"31\" href=\"/#narrow/stream/31-production-help/topic/setting.20up.20on.20AWS\">#production help &gt; setting up on AWS</a> by <span class=\"user-mention silent\" data-user-id=\"21836\">Lauryn Menard</span>.</p>",
  "<p>I wonder if there's an existing user-presence system that we could basically just modify. <a href=\"https://github.com/usecanvas/presence\">https://github.com/usecanvas/presence</a> was one link I found</p>",
  "<p>Ref: <a href=\"#narrow/stream/101-design/topic/Follow.20Topics.20UI/near/1616608\">https://chat.zulip.org/#narrow/stream/101-design/topic/Follow.20Topics.20UI/near/1616608</a></p>\n<p>We do not have any constraint like \"a topic can have visibility_policy=UNMUTED only if it belongs to a muted stream\". The discussion above makes me wonder if we should have such a constraint?</p>",
  "<p>Previous discussion on this:</p>\n<ul>\n<li><a href=\"https://github.com/zulip/zulip/pull/24742#issuecomment-1487971173\">https://github.com/zulip/zulip/pull/24742#issuecomment-1487971173</a></li>\n<li><a href=\"https://github.com/zulip/zulip/pull/24742#issuecomment-1488945917\">https://github.com/zulip/zulip/pull/24742#issuecomment-1488945917</a></li>\n</ul>",
  "<blockquote>\n<p>We do not have any constraint like \"a topic can have visibility_policy=UNMUTED only if it belongs to a muted stream\". The discussion above makes me wonder if we should have such a constraint?</p>\n</blockquote>\n<p>The thought here is to just put those constraints in the UI and the API (not in the database). So keep state from past UNMUTEs, but don't allow UNMUTing when the stream is not currently muted.</p>",
  "<p><a href=\"https://gist.github.com/PIG208/ae62adf85c392f5da5abd3c1e7d69896\">https://gist.github.com/PIG208/ae62adf85c392f5da5abd3c1e7d69896</a></p>",
  "<p>I was prototyping some possible designs for this API. The experimental implementations can be found in the gist posted above.</p>",
  "<p>This is what a view in the latest iteration looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"nd\">@attrs</span><span class=\"o\">.</span><span class=\"n\">define</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Dolor</span><span class=\"p\">:</span>\n        <span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">non_negative</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">narrow_validator</span><span class=\"p\">(</span>\n        <span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">lst</span> <span class=\"ow\">in</span> <span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">text</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">]:</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"Too long\"</span>\n\n    <span class=\"n\">last_narrow</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"c1\"># Reusable Annotated type</span>\n    <span class=\"n\">JSON</span><span class=\"p\">:</span> <span class=\"n\">TypeAlias</span> <span class=\"o\">=</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">from_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)]</span>\n\n    <span class=\"nd\">@view</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span>\n        <span class=\"n\">dolor</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span>\n            <span class=\"n\">Dolor</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">intentionally_undocumented</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">from_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Dolor</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n        <span class=\"n\">lorem</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">non_negative</span><span class=\"p\">),</span>\n        <span class=\"n\">lpsum</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">intentionally_undocumented</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span>\n            <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">non_negative</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">narrow</span><span class=\"p\">:</span> <span class=\"n\">JSON</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span>\n            <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">narrow_validator</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[[]]</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">other_param</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">nonlocal</span> <span class=\"n\">last_narrow</span>\n        <span class=\"n\">last_narrow</span> <span class=\"o\">=</span> <span class=\"n\">narrow</span>\n        <span class=\"k\">return</span> <span class=\"n\">lorem</span> <span class=\"o\">+</span> <span class=\"n\">lpsum</span> <span class=\"o\">+</span> <span class=\"n\">dolor</span><span class=\"o\">.</span><span class=\"n\">num</span>\n</code></pre></div>",
  "<p>To address the issues <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> raised, we combine the use of <code>REQ</code> as the default, and <code>Metadata</code> in <code>Annotated</code>.</p>",
  "<ul>\n<li>The annotated type is the indisputable source of parsing logic. The <code>cattrs</code> converter should <em>always</em> know how this type should be parsed, either through its built-in structuring functions or additional hooks we defined for our custom classes.</li>\n<li><code>Metadata</code> never carries information about the type of the parameter. It should only describe things like \"intentionally undocumented\", \"path only\" or \"this parameter should be parsed from JSON\". </li>\n<li><code>validator</code> is a required parameter for <code>REQ</code>, so we can discourage the use of it as much as possible. In this case, the original default is passed as an argument to <code>REQ</code>. <code>REQ</code> is only there for type-checking the validator. For reusability and error handling, the validator should match the format <code>attrs</code> uses.</li>\n</ul>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/New.20has_request_variables.20API/near/1615956\">said</a>:</p>\n<blockquote>\n<p>You\u2019re skipping some important subtle details. Consider, for example, the difference between <code>param: Optional[str] = REQ(default=None)</code> and <code>param: Optional[str] = REQ(json_validator=check_none_or(check_string))</code>, which have very incompatible input formats.</p>\n</blockquote>\n<p>So these two parameters will be distinguishable:<br>\n<code>param: Optional[str] = None</code><br>\n<code>param: Annotated[Optional[str], FromJSON()]</code> or, with a type alias, <code>param: JSON[Optional[str]]</code></p>",
  "<p>Note that nothing stops us from keep using composable validators, but dedicatedly written validators can take advantage of the type information given that we only run the validators after successfully parsing the value:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Before</span>\n<span class=\"n\">alert_words</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">json_validator</span><span class=\"o\">=</span><span class=\"n\">check_list</span><span class=\"p\">(</span><span class=\"n\">check_capped_string</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">#After</span>\n<span class=\"n\">alert_words</span><span class=\"p\">:</span> <span class=\"n\">JSON</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">check_list</span><span class=\"p\">(</span><span class=\"n\">check_capped_string</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)))</span>\n<span class=\"c1\"># or</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_alert_words</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">Attribute</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">validate</span> <span class=\"o\">=</span> <span class=\"n\">check_capped_string</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"c1\"># No need to check_list</span>\n    <span class=\"k\">for</span> <span class=\"n\">alert_word</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n        <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"n\">alert_word</span><span class=\"p\">)</span>\n<span class=\"n\">alert_words</span><span class=\"p\">:</span> <span class=\"n\">JSON</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">check_alert_words</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Before</span>\n<span class=\"n\">narrow</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">json_validator</span><span class=\"o\">=</span><span class=\"n\">check_list</span><span class=\"p\">(</span><span class=\"n\">check_list</span><span class=\"p\">(</span><span class=\"n\">check_string</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n\n<span class=\"c1\"># After</span>\n<span class=\"n\">narrow</span><span class=\"p\">:</span> <span class=\"n\">JSON</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">check_list</span><span class=\"p\">(</span><span class=\"n\">check_list</span><span class=\"p\">(</span><span class=\"n\">check_string</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n<span class=\"c1\"># or</span>\n<span class=\"k\">def</span> <span class=\"nf\">narrow_validator</span><span class=\"p\">(</span>\n        <span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">lst</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"Too long\"</span>\n<span class=\"n\">narrow</span><span class=\"p\">:</span> <span class=\"n\">JSON</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">narrow_validator</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Before</span>\n<span class=\"n\">service_payload_url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">json_validator</span><span class=\"o\">=</span><span class=\"n\">check_url</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># After</span>\n<span class=\"n\">service_payload_url</span><span class=\"p\">:</span> <span class=\"n\">JSON</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">REQ</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">check_url</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Note the main difference from the original validator system is that now the validators are only responsible for runtime checks. We don't get type information from them.</p>",
  "<p>Another thing to address here is that <code>cattrs</code> might coerce other types to <code>str</code> when they have already been handled by <code>orjson</code>.<br>\nFor example, {\"val\": 1} can be structured as </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@attrs</span><span class=\"o\">.</span><span class=\"n\">define</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span>\n    <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</code></pre></div>\n<p>The <a href=\"https://github.com/python-attrs/cattrs/issues/278#issue-1276829148\">solution</a> to this will be to register hooks overriding this behavior for primitive types.</p>",
  "<p>I have updated the <a href=\"https://github.com/zulip/zulip/pull/26004\">#26004</a> addressing all the reviews. I spent some time learning and reading the existing puppet code, but yet I will need some help in prod setup, like how to test these in development environment. And it would be very helpful if someone can link a PR containing prod configuration for any other service, I can get idea from that.<br>\nThank you !!</p>",
  "<p>Here is an alternative that doesn't require us to mix <code>REQ</code> with the regular defaults. For types that require validation, we define a <code>NewType</code> with a structuring hook registered.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"c1\"># View</span>\n    <span class=\"n\">NonNegInt</span> <span class=\"o\">=</span> <span class=\"n\">NewType</span><span class=\"p\">(</span><span class=\"s2\">\"NonNegInt\"</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">non_neg_int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">typ</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">NonNegInt</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"No negative int\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">v</span>\n\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">register_structure_hook</span><span class=\"p\">(</span><span class=\"n\">NonNegInt</span><span class=\"p\">,</span> <span class=\"n\">non_neg_int</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@view</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span>\n        <span class=\"n\">lorem</span><span class=\"p\">:</span> <span class=\"n\">NonNegInt</span><span class=\"p\">,</span>\n        <span class=\"n\">lpsum</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">NonNegInt</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"n\">other_param</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">lorem</span> <span class=\"o\">+</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">lpsum</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Testing</span>\n    <span class=\"k\">assert</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">Request</span><span class=\"p\">({</span><span class=\"s2\">\"lorem\"</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s2\">\"lpsum\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}))</span> <span class=\"o\">==</span> <span class=\"mi\">15</span>\n    <span class=\"k\">with</span> <span class=\"n\">assert_fail</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">,</span> <span class=\"n\">log_err</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">Request</span><span class=\"p\">({</span><span class=\"s2\">\"lorem\"</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s2\">\"lpsum\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">52</span><span class=\"p\">]}))</span>\n    <span class=\"n\">test_view</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>A side-effect of this is that for covariant generics like <code>list</code>, functions with types like <code>List[int]</code> which also accept the <code>NewType</code> variant need to have the type refined to things like <code>Sequence[int]</code> or so.</p>",
  "<p>Which is not necessarily negative because we are not compromising type safety here.</p>",
  "<p>Another thing to note is that we want to avoid constructing these new types manually, because that would violate the underlying validation rules associated with the hooks.</p>",
  "<p>There were some <a href=\"#narrow/stream/92-learning/topic/python3.2E6/near/866528\">brief discussions</a> on the possible readability benefits of <code>NewType</code>.</p>",
  "<p>One thing I like about the <code>NewType</code> direction is that it can deal with <code>Sequence[Sequence[NonNegInt]]</code> without making us build a validator that loops over the sequences.</p>",
  "<p>Yeah, exactly. When we reuse the type, we can also reuse the validator without extra work.</p>",
  "<p>An early prototype in the same direction was defining a <code>Box</code> <code>attrs</code> class containing a single field with the validator. <code>NewType</code> is good for getting rid of boxing while still conveying information about the validator with just a type.</p>",
  "<p>If <code>TypeAlias</code> supports runtime inspection, it might be superior.</p>",
  "<p>But I think being able to distinguish <code>URLStr</code> from <code>str</code> is good too.</p>",
  "<p>A <code>TypeAlias</code> is not visible at runtime; it\u2019s just a variable whose value is the same type object.</p>",
  "<p>OK, I'm working on a draft implementation right now.</p>",
  "<div class=\"codehilite\" data-code-language=\"Text output\"><pre><span></span><code><span class=\"go\">      1 Dict[str, object]</span>\n<span class=\"go\">      1 List[ProfileDataElementUpdateDict]</span>\n<span class=\"go\">      1 Mapping[str, str]</span>\n<span class=\"go\">      1 NarrowT</span>\n<span class=\"go\">      1 Optional[Client]</span>\n<span class=\"go\">      1 Optional[Decimal]</span>\n<span class=\"go\">      1 Optional[Dict[str, Any]]</span>\n<span class=\"go\">      1 Optional[Dict[str, bool]]</span>\n<span class=\"go\">      1 Optional[Dict[str, str]]</span>\n<span class=\"go\">      1 Optional[List[Dict[str, Any]]]</span>\n<span class=\"go\">      1 Optional[List[Dict[str, Optional[Union[int, ProfileDataElementValue]]]]]</span>\n<span class=\"go\">      1 Optional[Union[List[str], List[int]]]</span>\n<span class=\"go\">      1 Optional[float]</span>\n<span class=\"go\">      1 Sequence[Sequence[str]]</span>\n<span class=\"go\">      1 Union[Sequence[str], Sequence[int]]</span>\n<span class=\"go\">      1 Union[str, int]</span>\n<span class=\"go\">      2 Dict[str, Sequence[Dict[str, Any]]]</span>\n<span class=\"go\">      2 Mapping[str, Any]</span>\n<span class=\"go\">      2 Optional[datetime]</span>\n<span class=\"go\">      2 ProfileFieldData</span>\n<span class=\"go\">      2 Sequence[Mapping[str, str]]</span>\n<span class=\"go\">      2 Sequence[str]</span>\n<span class=\"go\">      3 Dict[str, str]</span>\n<span class=\"go\">      3 OptionalNarrowListT</span>\n<span class=\"go\">      3 Optional[Sequence[str]]</span>\n<span class=\"go\">      4 List[Dict[str, Any]]</span>\n<span class=\"go\">      4 List[str]</span>\n<span class=\"go\">      4 Optional[List[str]]</span>\n<span class=\"go\">      5 Dict[str, Any]</span>\n<span class=\"go\">      6 List[int]</span>\n<span class=\"go\">      6 Optional[Union[int, str]]</span>\n<span class=\"go\">      8 Sequence[int]</span>\n<span class=\"go\">     48 int</span>\n<span class=\"go\">     60 bool</span>\n<span class=\"go\">     65 Optional[int]</span>\n<span class=\"go\">     77 WildValue</span>\n<span class=\"go\">     97 Optional[bool]</span>\n<span class=\"go\">    107 Optional[str]</span>\n<span class=\"go\">    140 str</span>\n</code></pre></div>\n<p>Frequencies of the existing <code>REQ</code> types.</p>",
  "<p>Unlikely; we have a good deal of product requirements that are a bit subtle.</p>",
  "<p>That program seems to not consider the possibility of being idle, for example.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/26365\">#26365</a></p>",
  "<p>Currently the converters with <code>NewType</code> handling has been implemented.</p>",
  "<p>I think we should either forbid the repeated use <code>REQ</code>s on the same request, or at least make it more specific.</p>",
  "<p>Maybe it is as simple as adding a request notes attribute that tracks how many times <code>has_request_variables</code> have processed the request, and fail the call with the decorator, unless the view is expected to call <code>has_request_variables</code> again. So we can avoid returning <code>ignored_parameters_unsupported</code> when the request hasn't gone through all the nested layers.</p>",
  "<p>The main part of the decorator has been implemented.</p>",
  "<p>There still need to be some changes to support better error handling and nested use.</p>",
  "<p>Updated the PR to support error handling.</p>",
  "<p>I think this has been fully implemented and tested. <a href=\"https://github.com/zulip/zulip/pull/26365\">#26365</a> is ready for review now.</p>",
  "<p>Implementation notes from the commit messages:</p>\n<p>We define two converters: <code>zulip_converter</code> and <code>json_converter</code>.<br>\n<code>json_converter</code> is dedicated for structuring and unstructuring JSON<br>\nserialized/deserialized data with some additional hooks. For example,<br>\n<code>json_converter</code> does not attempt to convert an <code>int</code> into a <code>str</code>, while<br>\n<code>zulip_converter</code> may.</p>\n<p>This also introduces the <code>NewType</code> style structure functions to handle<br>\nprimitive types that require extra validation, like URLs. To use, define<br>\na type with <code>NewType</code>, and a validator function of the type Validator. The<br>\nfunction is expected to raise an error if the validation fails.<br>\nThe validator function needs to be decorated with <code>newtype_validator</code> to<br>\nbecome usable with the converters.</p>\n<p>For error handling, we define our own <code>format_exception</code> function to<br>\ncustomize how exceptions should be turned into error messages, making<br>\nsure that everything is properly translated. We re-raise exceptions that<br>\nare not explicitly handled to avoid silencing actual programming<br>\nerrors, and use very specific conditions to determine if the error is<br>\nactually a validation error.</p>\n<p>The goal of <code>endpoint</code> is to replicate most features supported by<br>\n<code>has_request_variables</code>, and improve on top of it. There are some<br>\nunresolved issues that we don't plan to work on currently. For example,<br>\n<code>endpoint</code> does not support <code>ignored_parameters_supported</code> for 400<br>\nresponses, and it does not run validators on path-only arguments.</p>\n<p>Unlike <code>has_request_variables</code>, <code>endpoint</code> supports error handling by aggregating<br>\nall the validation errors together by customizing cattrs' error<br>\nformater.</p>\n<p>Most features supported by <code>has_request_variables</code> are supported by<br>\nendpoint in various ways.<br>\nFor <code>REQ</code>:</p>\n<ul>\n<li><code>whence</code> is supported by using <code>Metadata(whence=\"whence\")</code></li>\n<li><code>default</code> can be just set by using the function parameter default</li>\n<li>\n<p><code>json_validator</code>/<code>str_validator</code> are now converters' responsibilities<br>\n  Any validation logic should be implemented as a structure hook on<br>\n<code>json_converter</code> or <code>zulip_converter</code>. <code>register_hook_for_converters</code>,<br>\n<code>newtype_validator</code>, <code>forbid_extra_keys</code>, and attrs classes are worth<br>\n  looking at when implementing validation.</p>\n</li>\n<li>\n<p><code>converter</code>s are superseded by cattrs.</p>\n</li>\n<li>\n<p><code>json_validator</code>'s JSON parsing can be enabled with<br>\n<code>Metadata(convert_from_json=True)</code>.</p>\n</li>\n<li>\n<p><code>argument_type</code> can be specified with <code>Metadata(argument_type_is_body=True)</code></p>\n</li>\n<li>\n<p><code>intentionally_undocumented</code>/<code>documentation_pending</code> can be specified with<br>\n<code>Metadata(documentation_status=DocumentationStatus.INTENTIONALL_UNDOCUMENTED)</code>,<br>\n  and etc.</p>\n</li>\n<li>\n<p><code>aliases</code> are not supported because it is not widely used</p>\n</li>\n<li><code>path_only</code> can be specified with <code>Metadata(path_only=True)</code></li>\n</ul>\n<p>To define a function, use a syntax like this with <code>Annotated</code> if there is<br>\nany metadata you want to associate with a parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@endpoint</span>\n<span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span>\n    <span class=\"n\">user_profile</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span><span class=\"p\">,</span>\n    <span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">path_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)],</span>\n    <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">convert_from_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)],</span>\n    <span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span>\n        <span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"n\">Metadata</span><span class=\"p\">(</span>\n            <span class=\"n\">whence</span><span class=\"o\">=</span><span class=\"s2\">\"lorem\"</span><span class=\"p\">,</span>\n            <span class=\"n\">convert_from_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">documentation_status</span><span class=\"o\">=</span><span class=\"n\">DocumentationStatus</span><span class=\"o\">.</span><span class=\"n\">INTENTIONALLY_UNDOCUMENTED</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">HttpResponse</span><span class=\"p\">:</span>\n    <span class=\"o\">....</span>\n</code></pre></div>\n<p>There are also some shorthands for the commonly used annotated types,<br>\nwhich are encouraged when applicable for better readability:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">JSON</span> <span class=\"o\">=</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">convert_from_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)]</span>\n<span class=\"n\">WebhookPayload</span> <span class=\"o\">=</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">convert_from_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">argument_type_is_body</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)]</span>\n<span class=\"n\">PathOnly</span> <span class=\"o\">=</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span><span class=\"p\">(</span><span class=\"n\">path_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>Then the view function above can be rewritten as:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@endpoint</span>\n<span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span>\n    <span class=\"n\">user_profile</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span><span class=\"p\">,</span>\n    <span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"n\">PathOnly</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span>\n    <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"n\">JSON</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span>\n    <span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span>\n        <span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"n\">Metadata</span><span class=\"p\">(</span>\n            <span class=\"n\">whence</span><span class=\"o\">=</span><span class=\"s2\">\"lorem\"</span><span class=\"p\">,</span>\n            <span class=\"n\">convert_from_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">documentation_status</span><span class=\"o\">=</span><span class=\"n\">DocumentationStatus</span><span class=\"o\">.</span><span class=\"n\">INTENTIONALLY_UNDOCUMENTED</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">HttpResponse</span><span class=\"p\">:</span>\n    <span class=\"o\">....</span>\n</code></pre></div>\n<p>There are some intentional restrictions:</p>\n<ul>\n<li>A single parameter cannot have more than one <code>Metadata</code></li>\n<li>Path-only parameters cannot have default values</li>\n<li><code>argument_type_is_body</code> is incompatible with whence</li>\n<li>\n<p>Unions are not supported out-of-the-box. Only Optionals are supported<br>\n  as of now. Hooks need to be implemented to support such types.</p>\n</li>\n<li>\n<p>Argument of names \"request\", \"user_profile\", \"args\", and \"kwargs\" are<br>\n  ignored by <code>endpoint</code>.</p>\n</li>\n<li>\n<p>Nesting endpoint decorators together is currently an undefined<br>\n  behavior. However, nesting endpoint inside a has_request_variables<br>\n  decorated function is fine (very common with the<br>\n<code>authenticated_rest_api_view</code> views).</p>\n</li>\n<li>\n<p>positional-only arguments are not supported by <code>endpoint</code>.</p>\n</li>\n</ul>\n<p>endpoint's handling of <code>ignored_parameters_unsupported</code> is mostly<br>\nidentical to that of <code>has_request_variables</code>. Similarly, we simply ported<br>\nthe code that integrates <code>has_request_variables</code> with openapi to <code>endpoint</code><br>\nso that it is supported as well. In the future, we can enhance these<br>\nfeatures by further improving the endpoint decorator.</p>",
  "<p>Yeah, this seems like a problem we should solve.   I suspect that most places where we use this pattern (which certainly feels like an anti-pattern in some ways), it would be pretty natural to refactor out most of the shared code into something like <code>do_whatever_backend_thing</code>, where the \"do_\" function assumes that the data has been validated.  I do realize that validation gets a little intrinsically messy in some of the more complex endpoints, but that's a case where my personal preference would be to have a little bit of duplicate validation code among two de-coupled functions rather than trying to nest them and create the ugly repeated use of <code>REQ</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> Maybe a concrete example would be helpful for the discussion?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> I did a fairly detailed review on <a href=\"https://github.com/zulip/zulip/pull/26365\">#26365</a>.  Apart from obvious typos most of my comments are advisory in nature, so if you disagree with me on them, feel free to resolve them or see if others agree.</p>",
  "<p>This is really nice work!</p>",
  "<p>Thanks for the review comments! Will address them later.</p>",
  "<p>I think our logic is designed to handle nested calls already, but maybe could benefit from extra assertions.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> mentioned this topic in <strong><a href=\"#narrow/stream/9-issues/topic/Change.20topic.20name/near/1619088\">#issues &gt; Change topic name</a></strong>.</p>",
  "<p>I opened <a href=\"https://github.com/zulip/zulip/pull/26419\">#26419</a> to handle most of the other <code>select_related</code> calls.</p>\n<p>There are a couple of more I think, which I guess can be removed as we do not access related fields for them. But I was thinking whether we want to use something like <a href=\"https://github.com/charettes/django-seal\">https://github.com/charettes/django-seal</a> to make sure the code is changed to use <code>select_related</code> in future if we access the related fields.</p>",
  "<p>Also, in the message related code, we currently access realm using <code>message.sender.realm</code> at some places. We added <code>realm</code> field to <code>Message</code> recently, so I guess we can remove them and directly access realm from <code>Message</code> object and avoid fetching <code>sender__realm</code> field in <code>select_related</code>.</p>",
  "<p>I have been working to resolve some issues I found when migrating <code>message_flags</code> to use the new decorator.<br>\nTo update, there are a few things to address in the current implementation:</p>\n<ul>\n<li>The handling of <code>Union</code> - It is implemented <a href=\"https://github.com/zulip/zulip/pull/26365/commits/0048e5ce8b4f462c40bd64aea278bd5eee4810b6\">here</a> at the time of writing. This is a generic way of handling unions. If registered, the converter will iterate through the possible types and return the one that can be successfully converted to.</li>\n<li>Integration of <code>attrs</code> class with OpenAPI - We need some extra tweaks to make classes decorated with <code>@attrs.define</code> (or similarly, <code>@dataclass</code>). This will mostly affect <code>has_request_variables</code> view functions that use <code>check_dict</code> or <code>check_dict_only</code>.</li>\n<li>Error handling - I'm still revising the error handling mechanism of converter errors. The custom converters and validators are allowed to raise arbitrary exceptions, but all known validation errors should be handled by the <code>zerver.lib.converters.format_exception</code> function. Otherwise, the exception will be re-raised.</li>\n<li>Calling <code>@endpoint</code>-decorated view functions directly - we do that a lot with <code>get_messages_backend</code> in the test cases. Because now <code>REQ</code> doesn't occupy the defaults of the function, when we call such functions with only the <code>HttpRequest</code> object, mypy rejects that for missing required arguments. We can use a util function that calls the view ignoring its parameter signature, or define <code>NotSpecified: Any = _NotSpecified()</code> as a placeholder for missing arguments.</li>\n</ul>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> I did a quick review of the union-related code and added a comment.  I think you made a wise decision to allow only the current set of Union types, since we do want to phase them out eventually.  My code review comment pertains to how you explain the decision, and feel free to improve upon my wording.  We may also want to add a comment toward the top of the file explaining the decision.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26365#discussion_r1285023878\">https://github.com/zulip/zulip/pull/26365#discussion_r1285023878</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> I think it would be very worthwhile for you to play with django-seal a bit.  If nothing else, I think it would be good to do a one-time automated audit of our code where we run the test suite with it.  I think it's pretty reasonable to have a policy where we <strong>never</strong> rely on Django to do an extra round trip, but I would change my opinion on this if your research revealed patterns that I didn't think through or knew existed.</p>",
  "<p>The seal project looks pretty sane at first glance, so I imagine this could be like a half-day spike.</p>",
  "<p>Then if the first experiments don't reveal too many complications, I think it's reasonable to at least try to have the test suite augment classes with the seal checks in some sort of test-specific way.  Ideally there could be a way that only the test suite even wraps the normal Django classes, but it's also probably reasonable to have the seal classes know whether they're running in test mode (i.e. throwing exceptions instead of just emitting warnings).  But I'm probably getting ahead of myself here. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/messages_in_narrow_backend.20calling.20NarrowBuilder.20directly/near/1611872\">said</a>:</p>\n<blockquote>\n<p>While the current web UI doesn't have good support for doing that sort of search, it'd clearly be an improvement to work towards supporting it. <span class=\"user-mention silent\" data-user-id=\"17026\">Akshat</span> are you interested in looking at this?</p>\n</blockquote>\n<p>PR: <a href=\"https://github.com/zulip/zulip/pull/26429\">#26429</a></p>",
  "<p>Rebased the final PR <a href=\"https://github.com/zulip/zulip/pull/23116\">#23116</a> that removes <code>extra_data_json</code> and went through the changes again. Ready for review now.</p>",
  "<p>Ok. I am not completely sure if you mean the same thing but I think so, I was thinking of modifying our code to seal the objects and then run tests to find if there are any cases where we access a related field without fetching it using <code>select_related</code> or <code>prefetch_related</code>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Yup, I think we're saying the exact same things here, and you're just saying it more succinctly. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p><a href=\"https://github.com/nix-community/poetry2nix/issues/627\">nix-community/poetry2nix#627</a> has been reopened. Looks like there is still something to resolve.</p>",
  "<p>This index in particular would need to be recalculated, and that's the part that might be expensive; <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> FYI:</p>\n<div class=\"codehilite\"><pre><span></span><code>            models.Index(\n                &quot;user_profile&quot;,\n                &quot;message&quot;,\n                condition=Q(flags__andnz=AbstractUserMessage.flags.mentioned.mask)\n                | Q(flags__andnz=AbstractUserMessage.flags.wildcard_mentioned.mask),\n                name=&quot;zerver_usermessage_wildcard_mentioned_message_id&quot;,\n            ),\n</code></pre></div>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> looks like it has a couple merge conflicts from yesterday's ruff PR.</p>",
  "<p>Got it. Just have it rebased.</p>",
  "<p>So I've skimmed the above. I know we're looking at trying something using pydantic 2 instead, but a few thoughts:</p>\n<ul>\n<li>I like a lot of the little ideas, like renaming <code>@has_request_variables</code> to something like <code>@endpoint</code> and the <code>WebhookPayload</code> helper.</li>\n<li>I don't love the <code>Metadata(path_only=True)</code> naming -- maybe calling that something like <code>ApiParameterConfig</code> or something like that would be helpful.</li>\n<li>I'm not sure I understand what the goals are in terms of functional benefits we expect to get in terms of concrete benefits that will help prevent bugs and the like -- is it mainly things like \"a string that is one of these 4 strings\" being parsed into a type that is limited to just those possible values, rather than a <code>str</code>? Or is it more being able to delete <code>validator.py</code> in favor of using a third-party library that thus cuts what we have to maintain?</li>\n</ul>",
  "<p>One of the major goals here is letting us migrate all our untyped dicts to typed dataclasses. Currently our dict validators have no way to connect to the type system and so we have <code>Dict[str, Any]</code> flying around everywhere.</p>",
  "<p>Delegating this all to a third-party library means less code to maintain, better ecosystem integration, less documentation to write, and reduced temptation to cut safety corners for expedient kludges or by accident.</p>",
  "<p>Pydantic in particular is battle-tested for our problem domain, since it\u2019s the base of FastAPI. It also has some interesting features like JSON schema generation that might help us do some kind of static checks against our hand-written OpenAPI spec in the future.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/commit/e566e985e4d2e824ecbafef74f171883e3a77b2a\">e566e985e4d2e824ecbafef74f171883e3a77b2a</a> looks like it made an important change that affects perf here -- it moved from <code>messages.update()</code> to <code>Messages.objects.bulk_update(messages_list, update_fields)</code> which is O(n) as opposed to O(1) <code>UPDATE</code> queries.  It also should have updated the <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/topic.py#L180-L183\">comment above it</a>, which no longer makes sense without an <code>.update</code> call.</p>\n<p>There look to be a few parts to why we have <code>messages_list</code>:</p>\n<ol>\n<li>We need to return <code>messages_list</code> to <code>do_update_message</code>, which uses it:<ol>\n<li>To check that it has more than one element (it always does, since <code>changed_messages = [target_message]</code> at the top and is only ever added to)</li>\n<li>To run various <code>DELETE</code> and <code>UPDATE</code> queries via <code>id__in</code>, which become much less performant when they have giant <code>CASE</code> statements</li>\n<li>To call <code>.exclude(id__in=...)</code> to find out if we're moving the whole topic, which is going to be very slow in cases when we _are_ moving the whole topic, and it is big</li>\n</ol>\n</li>\n<li>To adjust the <code>edit_history</code> of each of the messages, individually, by JSON-parsing, prepending, and re-serializing.</li>\n</ol>\n<p>All of the uses in <code>do_update_message</code> seem like they would benefit greatly from having a queryset to act on.  The <code>edit_history</code> is a <code>text</code> field in the database, so (lacking <a href=\"https://github.com/zulip/zulip/pull/18146\">#18146</a>) we could possibly write a query that adjusts every row using a single <code>UPDATE</code> by casting it to <code>jsonb</code> and back.  But <a href=\"https://github.com/zulip/zulip/pull/18146\">#18146</a> looks like it was essentially done, and just needed to be adjusted to do some batching on the migration.</p>",
  "<p>Interesting. And that adjustment of <code>edit_history</code> was the feature that commit was adding.</p>",
  "<p>I feel like that alone can't explain this slowness, given that we've been seeing it even in moving very small numbers of messages \u2014 in Tim's last report above, just a single message.</p>\n<p>Surely doesn't help, though.</p>",
  "<p>Probably is the cause of <a href=\"https://github.com/zulip/zulip/pull/25239\">#25239</a>, in that pulling all of the messages into memory can probably cause OOMs.</p>",
  "<p>Django\u2019s <code>bulk_update</code> is actually quadratic, as we recently discovered: <a href=\"https://code.djangoproject.com/ticket/31202\">https://code.djangoproject.com/ticket/31202</a></p>",
  "<p>Hmm. I can help with picking up <a href=\"https://github.com/zulip/zulip/pull/18146\">#18146</a></p>",
  "<p>An example would be that we can find more OpenAPI spec inconsistencies using just the type information. Parameters validated with <code>check_dict</code> and <code>check_dict_only</code> are assumed to be consistent with schemas of <code>type: object</code>, but it will be possible to do the validation with Pydantic.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"2328\">Rein Zustand</span> <a href=\"#narrow/stream/3-backend/topic/provision.20via.20nix/near/1379461\">said</a>:</p>\n<blockquote>\n<p>datakurre in the NixOS Discourse recommends against using <code>pip2nix</code>: <a href=\"https://discourse.nixos.org/t/mach-nix-pip2nix-poetry2nix-or-pynixify-for-zulip-provision/18836/17\">https://discourse.nixos.org/t/mach-nix-pip2nix-poetry2nix-or-pynixify-for-zulip-provision/18836/17</a>.</p>\n</blockquote>\n<p>So good to hear that you are patiently getting poetry2nix to work <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I can confirm that <code>pip2nix</code>'s state is still the same. While we added flake for it, it is still depending on pip version and legacy resolver from 2020. Simply have had no time to upgrade it to be compatible with recent pip, and and been slowly upgrading projects to poetry, wherever it works.</p>",
  "<p>Cool, yeah obviously we could turn all those dicts into TypedDict, but would be very glad to have a system that turns those into nice dataclasses , since we've been preferring those wherever convenient.</p>",
  "<p>The thing that I have a partial PR for and need to finish is specifically that we do something very inefficient when updating <code>UserMessage</code> rows when moving content between streams.</p>",
  "<p>For Django <code>bulk_update</code>, I think passing <code>batch_size=100</code> might be a quick fix for the quadratic nature.</p>",
  "<p>I'm not a huge fan of adding such a constraint, in that it means you have to destroy information if you temporarily toggle a stream between muted/unmuted.</p>",
  "<p>Our validator system doesn\u2019t allow us to soundly connect its validation with a <code>TypedDict</code>.</p>",
  "<p>We can claim that applying some <code>check_dict</code> gives us the right to use some <code>TypedDict</code> annotation, but nothing stops that claim from being wrong or becoming wrong as the code evolves.</p>",
  "<p>(Such a connection would be possible in TypeScript\u2014that\u2019s basically what Zod is\u2014but Python\u2019s typing is not powerful enough.)</p>",
  "<p>I would prefer dataclasses over <code>TypedDict</code>. The latter would be more useful if Python has better structural subtyping support.</p>",
  "<p>We could probably do it in Python if we wrote our own mypy extension or something, but I like the idea of using something like pydantic where someone else does that hard work and we can use an ecosystem of other outputs like JSONSchema generators a lot better.</p>",
  "<p>Yes. An advantage of Pydantic is that they have <a href=\"https://docs.pydantic.dev/latest/errors/errors/#customize-error-messages\">good support</a> for error handling. The error information is detailed enough, that I think we only need to maintain our internationalization code on top of that, and probably a small set of custom validators for special types like <code>WildValue</code>.</p>",
  "<p>That's only for cross-stream moves, though, and a bunch of the reports have been topic renames within a stream.</p>",
  "<p>And I think switching to <code>.update()</code> is worth the time rather than papering over it with <code>batch_size</code></p>",
  "<p>To be clear we should deprecate <code>WildValue</code> and eventually remove it once we have the ability to soundly express our typing expectations up front for webhook inputs, although that will take some time so a transitional state is needed.</p>",
  "<p>Yeah, I'm not entirely sure how the webhooks should be work -- we want to keep writing those as accessible as possible without knowing much about Zulip or our coding conventions, since they're one of the few areas where we want end users to be able to contribute. And we often want to avoid making assertions that aren't important to our formatting, because the third parties often changes their format without notice and we want to minimize the extent to which that breaks things.</p>\n<p>Certainly let's focus our attention on the main API and we can look at a potential redesign of the webhook input parsing API as a follow-up project.</p>",
  "<p>Yeah if we can do the bulk update via <code>update</code>, that'd be way better; definitely a very compelling case for that particular JSONB transition, which I'd previously thought of as mostly a low-importance cleanup.</p>",
  "<p>I\u2019m imagining that webhooks will mostly just declare the fields they actually use. This won\u2019t add net complication, and it will make more sense to everyone than requiring <code>.tame(check_string)</code> and the like at every access.</p>",
  "<p>(Also, if an end user decides they want to write a totally untyped YOLO webhook that fails all our linters for their own use, that will still be possible\u2014we can have someone who understands types fix it up before we merge it.)</p>",
  "<p>Yeah I think that's plausible, just would need to see a prototype and think about how it could be tweaked to have a clear opinion on exactly how we want to change it.</p>",
  "<p>I think our current design of <code>argument_type_is_body</code> makes a single Pydantic model very suitable for typing the payload. Allowing <a href=\"https://docs.pydantic.dev/latest/usage/model_config/#extra-attributes\">extra attributes</a> should work for our use case.</p>",
  "<p>My main thought on webhooks is that we're currently not spending a lot of time on maintaining them (thanks in large part to our fixture-oriented design for the system), and if we were to spend a dozen or more hours of good work on them I'd probably have other goals for that time-- we don't have many bugs in them that better typing would help with.... since they usually have to do with either bad formatting or a misunderstanding of the upstream project's API/data format.</p>",
  "<p>Yeah. There probably are some webhooks that do have formats that are too dynamic to type. So doing only the bare minimum typing for webhook payloads is ideal for us.</p>",
  "<p>Yeah, I think that might be the crux of the issue -- for webhooks, our model has a single endpoint that expects potentially like 15 different formats that the vendor designed. (It can be really chaotic/variable when a company has different people design every outgoing webhook format).</p>",
  "<p>So I just don't know how ugly it'll be to try to declare the type for that sort of thing in one place, rather than having the typing assertions closer to the code that uses it for rendering.</p>\n<p>(But we can always do different things for different webhooks; there's many that are like a single 20 line function).</p>",
  "<p>Will we want a  two-step strategy for this migration  like 1. <code>CREATE INDEX CONCURRENTLY</code> to calculate this as a new index without locking 2. Do the appropriate index renaming+drop old index?</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/26470\">#26470</a> I try to eliminate various Union and Optional types related to how we get display recipients.  I'll try to keep up with the GitHub review comments, but I wanted to give folks a heads up on this, as it's vaguely similar to some other ongoing efforts.</p>",
  "<p>I don't think there's an index rename necessary here -- the new index isn't going to be named <code>zerver_usermessage_wildcard_mentioned_message_id</code></p>",
  "<p>So I think this is a concurrent index creation and then a (concurrent?) index drop.</p>",
  "<p>It passed tests locally.  The builds are failing for provision-related reasons that are probably some kind of transient issue.</p>",
  "<p>Though the concurrent-ness is only necessary if you're not stopped, which mostly just means Zulip Cloud.  I wonder a little if we should have some flag in migrations for \"the server is not stopped\" which adds the concurrent flag -- and could potentially also do things about detecting non-back-compat migrations (something like <a href=\"https://github.com/3YOURMIND/django-migration-linter\">djang-migration-linter</a> or <a href=\"https://github.com/aspiredu/django-safemigrate\">django-safemigrate</a>, though neither are quite right)</p>",
  "<p>Basically, for all codepaths pertaining to <strong>stream</strong> messages, you already get the stream by some other means.  So the goal is basically to replace <code>Union[str, List[Dict]</code> with <code>List[Dict]</code> in several places.  And then most of the prep commits basically make sense even without that end goal in mind.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/get_display_recipient/near/1623000\">said</a>:</p>\n<blockquote>\n<p>It passed tests locally.  The builds are failing for provision-related reasons that are probably some kind of transient issue.</p>\n</blockquote>\n<p>It's green now.</p>",
  "<p>Hi! I haven't done much backend work the last couple years and haven't used mypy at Zulip much at all (though I did at my previous job) and am seeking advice/help with some mypy failures on this PR:</p>\n<p><a href=\"https://github.com/zulip/zulip/pull/26364\">https://github.com/zulip/zulip/pull/26364</a></p>\n<p>Essentially, a regular expression was switched to use the package <code>regex</code> instead of <code>re</code> regex because it supports some special patterns like \\p{Emoji} (which is helpful for the emoji regex), but the pattern matcher expects a regular expression of type <code>re</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>mypy      | zerver/lib/markdown/__init__.py:2197: error: Argument 1 to &quot;UnicodeEmoji&quot; has incompatible type &quot;regex.regex.Pattern[str]&quot;; expected &quot;re.Pattern[str]&quot;  [arg-type]\n</code></pre></div>\n<p>This is from <code>markdown.inlinepatterns.Pattern</code> which is outside of our code, so I'm not sure what to do here.</p>",
  "<p>Welp, Vagrant has been <a href=\"https://github.com/hashicorp/vagrant/commit/731e9cb6c48df71d8c3f8d2b929dd35875250d2d\">relicensed</a> to the Business Source License.</p>",
  "<p>\u201cOrganizations providing competitive offerings to HashiCorp will no longer be permitted to use the community edition products free of charge under our BSL license.\u201d</p>\n<p>\u201cHashiCorp considers a competitive offering to be a product or service provided to users or customers outside of your organization that has significant overlap with the capabilities of HashiCorp\u2019s commercial products or services.\u201d</p>\n<p>What does that mean? Could change at any time, I guess. And if it doesn\u2019t affect us, it could still affect some of our external contributiors.</p>",
  "<p>We might want to think about stringifying some of our major Model objects in a somewhat more lightweight way, even if it's slightly inconvenient at times.  I think it's generally a bad practice to hit the database or cache to make a string out of a Model object, since sometimes the entire reason you're having to do it is that something went wrong in the first place and you're in a debugging situation where <code>__str__</code> itself could fail for similar reasons.</p>\n<p>I don't feel super strongly here, as there are some pretty obvious trade-offs in both directions. <a href=\"https://github.com/zulip/zulip/commit/5b569ab865ce2e8fd0f63dab264f2a93fe31ebc2\">5b569ab865ce2e8fd0f63dab264f2a93fe31ebc2</a> is relevant and why I'm bringing this up as food for thought.</p>",
  "<p>I think my basic proposal is that Model objects should be allowed to custom-include any fields into their string representation from the direct model with arbitrary fancy formatting but you should not be allowed to traverse foreign-key relationships.</p>",
  "<p>If this doesn't resonate with folks who have operational experience, then I will quickly resolve this topic after any veto.</p>",
  "<p>I just read about the HashiCorp relicensing, but didn't realize quite how much it impacted. Other than, y'know, no longer being OSS...</p>\n<p>Is the scope as hugely broad as it sounds? That is, if they expand their scope of business to cover a new area, is all their software under that license restricted in the same way, independently of the scope of the piece of software providing that new scope?</p>",
  "<p>Some notes on reimplementing this with Pydantic.</p>\n<ul>\n<li>In Pydantic, using <code>TypeAdapter</code>, value parsing can be done with either <code>TypeAdapter(type).validate_json</code> or <code>TypeAdapter(type).validate_python</code>. <code>validate_json</code> assumes that the input is JSON encoded and is claimed to have <a href=\"https://docs.pydantic.dev/latest/api/pydantic_core/#pydantic_core._pydantic_core.SchemaValidator.validate_json\">some performance advantages</a>. However, it didn't work for me when the <a href=\"https://docs.pydantic.dev/latest/usage/types/json/\"><code>Json</code> wrapper</a> is used. A design that uses <code>validate_python</code> all the time, marking <code>Json</code> when needed would work. Alternatively, we can also use our own annotation variable like before to switch <code>validate_json</code> on and off. I feel like that <code>Json</code> is intended to be just like a variant of <code>str</code> or <code>bytes</code>, which describes a nested JSON-encoded field.</li>\n<li><code>TypeAdapter</code> doesn't support <code>extra=\"forbid\"</code> by design (which can replace <code>check_dict_only</code>), because <a href=\"https://docs.pydantic.dev/dev-v2/errors/usage_errors/#type-adapter-config-unused\"><code>config</code> is unused</a> when <code>TypeAdapter</code> is used with <code>dataclass</code>, <code>BaseModel</code> or <code>TypedDict</code>. This means that we might need to override the config by defining <code>__pydantic_config__ = ConfigDict(strict=True)</code> on the class.</li>\n<li>To match Pydantic's coercing behavior with our validator system, we need to use <a href=\"https://docs.pydantic.dev/latest/usage/strict_mode/\">strict mode</a>. It can be enabled per class, per <code>Annotated</code>, or per <code>TypeAdapter(...).validate_python</code>. I'm inclined to enable it per <code>validate_python</code> call that we controlled at only one place in the view function decorator. Because we want to just enable it for all JSON input given that's what json_validators like <code>check_int</code> and <code>check_float</code> behave.</li>\n<li>Error handling works extremely well for me. We just need to map the <a href=\"https://docs.pydantic.dev/latest/errors/validation_errors/\">error types</a> to translated messages and do special handling whenever necessary. All error information is well contained within Pydantic.</li>\n</ul>",
  "<p>I\u2019m expecting that <code>TypeAdapter(T).validate_json(s)</code> is equivalent to <code>TypeAdapter(Json[T]).validate_python(s)</code>. I think using <code>validate_python</code> always is right.</p>",
  "<div class=\"codehilite\" data-code-language=\"Python console session\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">TypeAdapter</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate_python</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"go\">'foo'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">TypeAdapter</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate_json</span><span class=\"p\">(</span><span class=\"s1\">'\"foo\"'</span><span class=\"p\">)</span>\n<span class=\"go\">'foo'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">TypeAdapter</span><span class=\"p\">(</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">validate_python</span><span class=\"p\">(</span><span class=\"s1\">'\"foo\"'</span><span class=\"p\">)</span>\n<span class=\"go\">'foo'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">TypeAdapter</span><span class=\"p\">(</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">validate_json</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\"\\\"foo\\\"\"'</span><span class=\"p\">)</span>\n<span class=\"go\">'foo'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">TypeAdapter</span><span class=\"p\">(</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]])</span><span class=\"o\">.</span><span class=\"n\">validate_python</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\"\\\"foo\\\"\"'</span><span class=\"p\">)</span>\n<span class=\"go\">'foo'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">TypeAdapter</span><span class=\"p\">(</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]])</span><span class=\"o\">.</span><span class=\"n\">validate_json</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\"\\\"</span><span class=\"se\">\\\\</span><span class=\"s1\">\\\"foo</span><span class=\"se\">\\\\</span><span class=\"s1\">\\\"\\\"\"'</span><span class=\"p\">)</span>\n<span class=\"go\">'foo'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">TypeAdapter</span><span class=\"p\">(</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]])</span><span class=\"o\">.</span><span class=\"n\">validate_python</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\"\\\"</span><span class=\"se\">\\\\</span><span class=\"s1\">\\\"foo</span><span class=\"se\">\\\\</span><span class=\"s1\">\\\"\\\"\"'</span><span class=\"p\">)</span>\n<span class=\"go\">'foo'</span>\n</code></pre></div>",
  "<p>Yeah. Looks like <a href=\"https://github.com/pydantic/pydantic-core/blob/87b4789a1943514785c967aca2a059e81fd2c2f1/src/validators/mod.rs#L198-L214\"><code>validate_json</code></a> is just a different wrapper than <a href=\"https://github.com/pydantic/pydantic-core/blob/87b4789a1943514785c967aca2a059e81fd2c2f1/src/validators/mod.rs#L149-L169\"><code>validate_python</code></a>.</p>",
  "<p>There should effectively be no performance difference, as long as we don't do JSON parsing on our own.</p>",
  "<p>Pushed the initial implementation to <a href=\"https://github.com/zulip/zulip/pull/26365\">#26365</a>.</p>",
  "<p>We could implement a <code>ApiParamConfig</code>-less annotation scheme, but I leave it for later because it will be kind of messier to implement.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/26474\">#26474</a> I clean up how we implement our two per-request caches.</p>",
  "<p>The PR has some useful test cleanup as well that should be easy to review.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Have you had a chance to try out seal?</p>",
  "<p>No, was busy with other issues. Will probably get to it next week only.</p>",
  "<p>Just wanted to add that <a href=\"https://github.com/zulip/zulip/pull/26419\">#26419</a> is merged, and I think that represents most of the known calls without passing the foreign keys to prefetch, but I've not audited for what's left.</p>",
  "<p>There are a couple of calls left which I think can be removed entirely, one for <code>Stream</code> object and one for <code>UserMessage</code> objects.</p>",
  "<p>Yeah that's a nice one, thanks!</p>",
  "<p>Yeah, I'm trying to lay groundwork for some really good future stuff.  I still consider most of my recent work \"prep work\" in nature, and I'm not sure I'll be the person to actually capitalize on the final blow or whatever, but hopefully somebody will. :)</p>",
  "<p>As you and I have agreed in comments on two of my recent PRs, it's getting more and more viable to just send ids back to our major apps to identify recipients (whether stream or users), and that should be a major win.  It's still a non-trivial thing to fix, but hopefully there's a lot less noise in the code that prevents the eventual fix.</p>",
  "<p>Definitely unfortunate -- while Vagrant is not part of our main distribution, I am not happy about something we rely on for Zulip development work no longer being OSS.</p>",
  "<p>I imagine in practice they're mostly concerned about competition from (1) AWS and (2) companies building something on top of Terraform, since that's, as I understand it, where Hashicorp's money comes from.</p>",
  "<p>I think in practice the stringification only gets used in the management shell, and the direction I'd like to go in is making them more readable.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> has marked this topic as resolved.</p>",
  "<p>RealmAuditLog in particular can be a fairly annoying to read.</p>",
  "<p><a href=\"https://github.com/python/typeshed/blob/7836c47286f0800ee0c1eff0616b36c28941642d/stdlib/re.pyi#L107-L181\">https://github.com/python/typeshed/blob/7836c47286f0800ee0c1eff0616b36c28941642d/stdlib/re.pyi#L107-L181</a><br>\n<a href=\"https://github.com/python/typeshed/blob/a580eda64e9a75877e878a89424a06367f6f03a6/stubs/regex/regex/_regex.pyi#L8-L253\">https://github.com/python/typeshed/blob/a580eda64e9a75877e878a89424a06367f6f03a6/stubs/regex/regex/_regex.pyi#L8-L253</a></p>",
  "<p>I think <code>regex.Pattern</code> and <code>re.Pattern</code> are intended to be different types, but the former is backward compatible with the latter.</p>",
  "<p>I guess it might make sense if the <a href=\"https://github.com/python/typeshed/blob/main/stubs/Markdown/markdown\">type definitions</a> for <code>markdown.inlinepatterns.Pattern</code> uses a protocol to define the regular expression expected.</p>",
  "<p>Maybe we should just cast <code>POSSIBLE_EMOJI_RE</code> to <code>Pattern[str]</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">cast</span>\n<span class=\"o\">...</span>\n<span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">UnicodeEmoji</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">Pattern</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">POSSIBLE_EMOJI_RE</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"s2\">\"unicodeemoji\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Yeah a <code>cast</code> is reasonable here. <code>markdown.inlinepatterns.Pattern</code> is not expecting to be monkey-patched in the way that our <code>CompiledPattern</code> subclass does.</p>",
  "<p>(That\u2019s not the only problem with this PR though, it\u2019s failing a bunch of backend tests. I know what some of the bugs are but not all of them.)</p>",
  "<p>I'm thinking if there is a better way to get coverage for each possible error type other than chaining <code>elif</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># TODO: To get coverage data, we should switch to match-case syntax when we</span>\n<span class=\"c1\"># upgrade to Python 3.10.</span>\n<span class=\"n\">ERROR_TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"int_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not an integer\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"int_parsing\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not an integer\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"string_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not a string\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"datetime_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not a date\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"bool_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not a boolean\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"list_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not a list\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"dict_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not a dict\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"float_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not a float\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"string_too_long\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is too long (limit: </span><span class=\"si\">{max_length}</span><span class=\"s2\"> characters)\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"string_too_short\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> cannot be blank.\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"less_than\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is too small\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"greater_than\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is too large\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"json_type\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not valid JSON\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"json_invalid\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{var_name}</span><span class=\"s2\"> is not valid JSON\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"unexpected_keyword_argument\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Argument \"</span><span class=\"si\">{argument}</span><span class=\"s1\">\" at </span><span class=\"si\">{var_name}</span><span class=\"s1\"> is unexpected'</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
  "<p>Hmm, perhaps a global variable that keeps a record of this?</p>",
  "<p>Regarding openapi. I'm trying to replace some of the code in <code>test_openapi</code> to make use of the JSON schema generated by <code>TypeAdapter(T).json_schema()</code>. Some tweaking around content type is needed because of some quirks of our OpenAPI spec.</p>",
  "<p>Also, opened <a href=\"https://github.com/zulip/zulip/pull/26481\">#26481</a> so that debugging <code>test_openapi</code> and getting all schema related errors are easier.</p>",
  "<p>Interesting stuff: <a href=\"https://forum.djangoproject.com/t/gsoc-2023-add-configurable-content-type-parsing-and-modernise-request-object/20933/15\">https://forum.djangoproject.com/t/gsoc-2023-add-configurable-content-type-parsing-and-modernise-request-object/20933/15</a></p>",
  "<p>I'm wondering if we switch to <code>application/json</code> from <code>application/x-www-form-urlencoded</code> in the future for all of our API endpoints, how different our parameter parsing process would be.</p>",
  "<p>For view functions, <code>pydantic.Json</code> will rarely be needed, as we don't need to encode JSON inside query parameters of a URL encoded form payload anymore.</p>\n<p>Metadata for each parameter will still be extracted from the view function signature. This includes type information, default values, etc. We construct a Pydantic model combining all the parameters together, instead of using a <code>TypeAdapter</code> for each parameter. The same model can be used to validate our OpenAPI schema definitions under <code>requestBody</code>.</p>\n<p>Upon the arrival of an incoming request, we do only one pass of JSON parsing on <code>request.body</code> via Pydantic by calling <code>.model_validate_json</code> on the model generated from the view function signature.</p>",
  "<p>Basically the same as the <code>argument_type_is_body</code> behavior, just that we build a Pydantic model from multiple parameters instead.</p>",
  "<p>I imagine that if we can switch to <code>application/json</code> globally by first checking if the request's content type is <code>application/json</code>.<br>\nIf so, we</p>\n<ol>\n<li>disallow <code>argument_type_is_body</code> to avoid ambiguous parsing behaviors (some views will need to be adjusted for this)</li>\n<li>remove the <code>Json</code> wrapper so that each parameter doesn't require separate JSON parsing</li>\n<li>use the model construction mechanism described above to parse the body as a whole using the Pydantic model.</li>\n</ol>\n<p>Otherwise, we fallback to the <code>application/x-www-form-urlencoded</code> behavior for backwards-compatibility.</p>",
  "<p>Ideally, this system must allow us to support both formats as discussed in <a class=\"stream-topic\" data-stream-id=\"412\" href=\"/#narrow/stream/412-api-documentation/topic/OpenAPI.20requestBody\">#api documentation &gt; OpenAPI requestBody</a></p>",
  "<p>I guess this can also be done with <code>has_request_variables</code>, by skipping JSON parsing for <code>json_validator</code> in step 2, and performing the same checks on the parsed request body in step 3 instead. But either way, we need to think through the corner cases first.</p>",
  "<p>I think we are already ready to use <code>@endpoint</code> for all webhook integrations now. <a href=\"https://github.com/zulip/zulip/pull/26365\">#26365</a> is updated to include that migration.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> I feel like there's at least enough buy-in to this approach that we should start merging some of the prep commits.  <span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> Do you consider everything in <a href=\"https://github.com/zulip/zulip/pull/26365\">#26365</a> ready to merge (pending review, of course)?  Are there any particularly non-controversial changes that you can move toward the front of the PR? \"has_request_variables: Avoid no-op use cases. \" stands out to me as a no-brainer merge that will reduce the size of the eventually completed PR.</p>",
  "<p>The PR is stacked on top of <a href=\"https://github.com/zulip/zulip/pull/26482\">#26482</a> and <a href=\"https://github.com/zulip/zulip/pull/26481\">#26481</a>, which are prep PRs that can be separately merged. I think the main PR is ready for integration, probably with some more documentation work.</p>",
  "<p>I'm not sure removing noop use cases would be correct; don't we need it to tag unsupported parameters?</p>",
  "<p>But I suppose if that analysis is correct we just close the PR and drop the commit.</p>",
  "<blockquote>\n<p>the new index isn't going to be named <code>zerver_usermessage_wildcard_mentioned_message_id</code></p>\n</blockquote>\n<p>I think the index name should remain <code>zerver_usermessage_wildcard_mentioned_message_id</code>. No change.</p>\n<p>We are renaming <code>wildcard_mentioned</code> to <code>stream_wildcard_mentioned</code> and introducing <code>topic_wildcard_mentioned</code>. <br>\nSo, 'wildcard_mentioned' in the name represents both the topic &amp; stream wildcard mentions.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/New.20has_request_variables.20API/near/1624444\">said</a>:</p>\n<blockquote>\n<p>I'm not sure removing noop use cases would be correct; don't we need it to tag unsupported parameters?</p>\n</blockquote>\n<p>Oh that makes sense! So they are not actually no-ops.</p>",
  "<p>We have a <code>select_related</code> call for <code>Message</code> object in <code>access_web_public_message</code>. There is some confusion regarding what fields should be prefetched here.</p>\n<p>We only use <code>recipient</code> field from the message fetched using the query. But there has been some discussion <a href=\"https://github.com/zulip/zulip/pull/26419#discussion_r1285297063\">here</a> that we should prefetch all the fields that are fetched from <code>Message</code> object in <code>access_message</code> and we do so currently. </p>\n<p><a href=\"https://github.com/zulip/zulip/blob/d205850d54f73d648488bc1dbd37cca2dfdef272/zerver/lib/message.py#L795\">Code for <code>access_web_public_message</code></a></p>\n<p><a href=\"https://github.com/zulip/zulip/blob/d205850d54f73d648488bc1dbd37cca2dfdef272/zerver/views/message_edit.py#L190\">Code for <code>json_fetch_raw_message</code>, which is the only caller of <code>access_web_public_message</code></a></p>",
  "<p>I think we ideally want those two functions to return the same type, including what prefetching has been done. There's no performance significance and that seems like the option least likely to introduce weird bugs.</p>",
  "<p>(deleted)</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26491\">#26491</a> for the stopgap <code>batch_size=100</code></p>",
  "<p>Yeah, that sounds correct to me.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> cool, merged the <code>subTest</code> PR.</p>",
  "<p>The module was renamed to <code>api_signature_parsing</code> because we might do things with both the request parameters and responses.</p>",
  "<p>I could imagine api_common or api_core or api being reasonable for that. Thoughts?</p>",
  "<p>Would <code>api_core</code> be confused with <code>openapi_core</code>? They serve quite different purposes. I feel that <code>api_common</code> is a bit less general than <code>api</code>, so it would be better.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/blob/b2400d26886c0e48d3f2622e5d9b1e4734ebe104/zerver/lib/request.py#L405-L410\">zerver.lib.request</a>, we have some code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">req_var</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">:</span>\n    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"n\">req_var</span><span class=\"p\">]</span>\n    <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">processed_parameters</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">req_var</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">req_var</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">:</span>\n    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">[</span><span class=\"n\">req_var</span><span class=\"p\">]</span>\n    <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">processed_parameters</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">req_var</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Should we check for <code>request.method</code> first and then decide which <code>QueryDict</code> to look up? Are we currently relying on the behavior that both <code>request.POST</code> and <code>request.GET</code> are used anywhere in the API?</p>",
  "<p>Or is it fine because only one of <code>request.GET</code> and <code>request.POST</code> will be non-empty?</p>",
  "<p><code>request.GET</code> will be nonempty in a POST request if there are query parameters in the URL. We might be able to infer whether Zulip Cloud clients are relying on this from the server logs, but there\u2019s likely a long tail of weird clients, especially for the webhooks.</p>",
  "<p>There used to be a <code>request.REQUEST</code> that had parameters from both the URL query string and the request body, but it was removed in Django 1.9 because you\u2019re not supposed to be that sloppy, so we reimplemented it and continued being sloppy.</p>",
  "<p>If we like <code>endpoint</code> as a decorator name, we might as well go all in and name the module <code>endpoint</code> too.</p>",
  "<p>I was doing a bit of profiling to compare <code>has_request_variables</code> and the Pydantic-based <code>endpoint</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>has_request_variables</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Total time: 0.0278345 s\nFile: /home/pig208/zulip/zerver/lib/request.py\nFunction: _wrapped_req_func at line 368\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   368                                               @wraps(req_func)\n   369                                               def _wrapped_req_func(\n   370                                                   request: HttpRequest, /, *args: ParamT.args, **kwargs: ParamT.kwargs\n   371                                               ) -&gt; ReturnT:\n   372        65     183657.0   2825.5      0.7          request_notes = RequestNotes.get_notes(request)\n   373       920     146199.0    158.9      0.5          for param in post_params:\n   374       920     173737.0    188.8      0.6              func_var_name = param.func_var_name\n   375       920     125793.0    136.7      0.5              if param.path_only:\n   382                                                           assert func_var_name in kwargs\n   383       920     147635.0    160.5      0.5              if func_var_name in kwargs:\n   384                                                           continue\n   385       920      78394.0     85.2      0.3              assert func_var_name is not None\n   386\n   387                                                       post_var_name: Optional[str]\n   388\n   389       920     111864.0    121.6      0.4              if param.argument_type == &quot;body&quot;:\n   390                                                           post_var_name = &quot;request&quot;\n   391                                                           try:\n   392                                                               val = request.body.decode(request.encoding or &quot;utf-8&quot;)\n   393                                                           except UnicodeDecodeError:\n   394                                                               raise JsonableError(_(&quot;Malformed payload&quot;))\n   395                                                       else:\n   396                                                           # This is a view bug, not a user error, and thus should throw a 500.\n   397       920      89402.0     97.2      0.3                  assert param.argument_type is None, &quot;Invalid argument type&quot;\n   398\n   399       920     118068.0    128.3      0.4                  post_var_names = [param.post_var_name]\n   400       920     128532.0    139.7      0.5                  post_var_names += param.aliases\n   401       920      83071.0     90.3      0.3                  post_var_name = None\n   402\n   403       920     114977.0    125.0      0.4                  for req_var in post_var_names:\n   404       920      79092.0     86.0      0.3                      assert req_var is not None\n   405       880     356050.0    404.6      1.3                      if req_var in request.POST:\n   406        40      36310.0    907.8      0.1                          val = request.POST[req_var]\n   407        40      13383.0    334.6      0.0                          request_notes.processed_parameters.add(req_var)\n   408       615     185669.0    301.9      0.7                      elif req_var in request.GET:\n   409       265     245788.0    927.5      0.9                          val = request.GET[req_var]\n   410       265      86490.0    326.4      0.3                          request_notes.processed_parameters.add(req_var)\n   411                                                               else:\n   412                                                                   # This is covered by test_REQ_aliases, but coverage.py\n   413                                                                   # fails to recognize this for some reason.\n   414                                                                   continue  # nocoverage\n   415       305      38798.0    127.2      0.1                      if post_var_name is not None:\n   416                                                                   raise RequestConfusingParamsError(post_var_name, req_var)\n   417       305      29749.0     97.5      0.1                      post_var_name = req_var\n   418\n   419       615      65483.0    106.5      0.2                  if post_var_name is None:\n   420       615      62078.0    100.9      0.2                      post_var_name = param.post_var_name\n   421       615      58668.0     95.4      0.2                      assert post_var_name is not None\n   422       615      94393.0    153.5      0.3                      if param.default is _REQ.NotSpecified:\n   423                                                                   raise RequestVariableMissingError(post_var_name)\n   424       615      96383.0    156.7      0.3                      kwargs[func_var_name] = param.default\n   425       615      41404.0     67.3      0.1                      continue\n   426\n   427       301      88062.0    292.6      0.3              if param.converter is not None:\n   428         4        401.0    100.2      0.0                  try:\n   429         4     255752.0  63938.0      0.9                      val = param.converter(post_var_name, val)\n   430                                                           except JsonableError:\n   431                                                               raise\n   432                                                           except Exception:\n   433                                                               raise RequestVariableConversionError(post_var_name, val)\n   434\n   435                                                       # json_validator is like converter, but doesn&#39;t handle JSON parsing; we do.\n   436       242      57093.0    235.9      0.2              if param.json_validator is not None:\n   437       242      34060.0    140.7      0.1                  try:\n   438       242     293623.0   1213.3      1.1                      val = orjson.loads(val)\n   ...\n   446       242      26386.0    109.0      0.1                  try:\n   447       242     193246.0    798.5      0.7                      val = param.json_validator(post_var_name, val)\n   448                                                           except ValidationError as error:\n   449                                                               raise JsonableError(error.message)\n   450\n   451                                                       # str_validators is like json_validator, but for direct strings (no JSON parsing).\n   452       305      44657.0    146.4      0.2              if param.str_validator is not None:\n   453                                                           try:\n   454                                                               val = param.str_validator(post_var_name, val)\n   455                                                           except ValidationError as error:\n   456                                                               raise JsonableError(error.message)\n   457\n   458       305      60902.0    199.7      0.2              kwargs[func_var_name] = val\n   459\n   460        61   23669502.0 388024.6     85.0          return_value = req_func(request, *args, **kwargs)\n   461\n   462        56      12908.0    230.5      0.0          if (\n   463        65      52403.0    806.2      0.2              isinstance(return_value, MutableJsonResponse)\n   464         9       2373.0    263.7      0.0              and not request_notes.is_webhook_view\n   471        18       3750.0    208.3      0.0              and 200 &lt;= return_value.status_code &lt; 300\n   472                                                   ):\n   473         9       8759.0    973.2      0.0              ignored_parameters = set(\n   474         9      20914.0   2323.8      0.1                  list(request.POST.keys()) + list(request.GET.keys())\n   475         9       1778.0    197.6      0.0              ).difference(request_notes.processed_parameters)\n   476\n   484         9       1531.0    170.1      0.0              if ignored_parameters:\n   485                                                           return_value.get_data()[&quot;ignored_parameters_unsupported&quot;] = sorted(\n   486                                                               ignored_parameters\n   487                                                           )\n   488                                                       else:\n   489         9       8153.0    905.9      0.0                  return_value.get_data().pop(&quot;ignored_parameters_unsupported&quot;, None)\n   490\n   491        65       7184.0    110.5      0.0          return return_value\n\nTotal time: 0.0302114 s\nFile: /home/pig208/zulip/zerver/tornado/views.py\nFunction: get_events at line 96\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   110\n   111        53   28576662.0 539182.3     94.6      return get_events_backend(request, user_profile)\n</code></pre></div>\n</div></div>",
  "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>endpoint</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Total time: 0.0334608 s\nFile: /home/pig208/zulip/zerver/lib/api_common.py\nFunction: parse_param_to_type at line 302\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   302                                           @profile\n   303                                           def parse_param_to_type(parameter: FuncParam[T], value: object) -&gt; T:\n   304       228      42985.0    188.5      0.1      try:\n   305       228   33343147.0 146241.9     99.6          return TypeAdapter(parameter.param_type).validate_python(\n   306       228      74659.0    327.5      0.2              value, strict=parameter.strict_mode, context={&quot;func_param&quot;: parameter}\n   307                                                   )\n\nTotal time: 0.0378095 s\nFile: /home/pig208/zulip/zerver/lib/api_common.py\nFunction: parse_request at line 375\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   422       444      88414.0    199.1      0.2              fallback_to_defaults[parameter.request_var_name] = parameter.default\n   423       444      35572.0     80.1      0.1              continue\n   424\n   425       228      64360.0    282.3      0.2          processed_request_var_names.add(request_variable.name)\n   426       228   34731255.0 152330.1     91.9          kwargs_to_update[parameter.param_name] = parse_param_to_type(\n   427       228      27423.0    120.3      0.1              parameter, request_variable.value\n   428                                                   )\n   429\n   430        42      86491.0   2059.3      0.2      return CallInfo(\n   431        42       5026.0    119.7      0.0          kwargs_to_update=kwargs_to_update,\n   432        42       4563.0    108.6      0.0          processed_request_var_names=processed_request_var_names,\n   433        42       4410.0    105.0      0.0          fallback_to_defaults=fallback_to_defaults,\n   434                                               )\n\nTotal time: 0.0549597 s\nFile: /home/pig208/zulip/zerver/lib/api_common.py\nFunction: _wrapped_view_func at line 469\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   469                                               @wraps(view_func)\n   470                                               def _wrapped_view_func(\n   471                                                   request: HttpRequest, /, *args: ParamT.args, **kwargs: ParamT.kwargs\n   472                                               ) -&gt; ReturnT:\n   473        42   39375973.0 937523.2     71.6          call_info = parse_request(request, endpoint_info, args, kwargs)\n   474        42      32878.0    782.8      0.1          kwargs.update(call_info.kwargs_to_update)\n   475\n   476        42   15293734.0 364136.5     27.8          return_value = view_func(request, *args, **kwargs)\n   477\n   478        42      87442.0   2082.0      0.2          request_notes = RequestNotes.get_notes(request)\n\nTotal time: 0.0421115 s\nFile: /home/pig208/zulip/zerver/tornado/views.py\nFunction: get_events at line 96\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   110\n   111        36   41029761.0 1139715.6     97.4      return get_events_backend_endpoint(request, user_profile)\n</code></pre></div>\n</div></div>",
  "<p>It occurs to me that <code>@endpoint</code> takes twice as long per hit for <code>GET /events</code>. The <code>TypeAdapter</code> call contributes the most to it.</p>",
  "<p>I'm guessing that it is slowed down by a lot because we are doing one <code>TypeAdapter(...).validate_python</code> call per parameter.</p>",
  "<p>Yeah, that seems to be the case. Constructing the <code>TypeAdapter</code> is really expensive.</p>",
  "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>endpoint with cached TypeAdapter</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Total time: 0.00255591 s\nFile: /home/pig208/zulip/zerver/lib/api_common.py\nFunction: parse_param_to_type at line 305\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   305                                           @profile\n   306                                           def parse_param_to_type(parameter: FuncParam[T], value: object) -&gt; T:\n   307       307      29167.0     95.0      1.1      try:\n   308       307    2452903.0   7989.9     96.0          return get_type_adapter(parameter.param_type).validate_python(\n   309       307      73844.0    240.5      2.9              value, strict=parameter.strict_mode, context={&quot;func_param&quot;: parameter}\n   310                                                   )\n\nTotal time: 0.00717496 s\nFile: /home/pig208/zulip/zerver/lib/api_common.py\nFunction: parse_request at line 378\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   378                                           @profile\n   379                                           def parse_request(\n   380                                               request: HttpRequest,\n   381                                               view_func_info: ViewFuncInfo,\n   382                                               args: Sequence[object],\n   383                                               kwargs: Mapping[str, object],\n   384                                           ) -&gt; CallInfo:\n   385        59      52197.0    884.7      0.7      processed_request_var_names = set()\n   386        59      19831.0    336.1      0.3      kwargs_to_update = {}\n   387        59      18722.0    317.3      0.3      fallback_to_defaults = {}\n   388       944     150628.0    159.6      2.1      for parameter in view_func_info.parameters:\n   389       944     267578.0    283.5      3.7          if parameter.param_config.path_only:\n   394                                                       assert (\n   395                                                           parameter.param_name in kwargs\n   396                                                       ), f&quot;Path-only variable {parameter.param_name} should be passed already&quot;\n   397       944     190462.0    201.8      2.7          if parameter.param_name in kwargs:\n   398                                                       # Skip parameters that are already supplied by the caller.\n   399                                                       continue\n   400\n   401                                                   # Extract the value to parse from the request.\n   402       944     105729.0    112.0      1.5          request_variable: Optional[RequestVariable] = None\n   403       944     177831.0    188.4      2.5          if parameter.param_config.argument_type_is_body:\n   404                                                       try:\n   405                                                           request_variable = RequestVariable(\n   406                                                               name=parameter.request_var_name,\n   407                                                               value=request.body.decode(request.encoding or &quot;utf-8&quot;),\n   408                                                           )\n   409                                                       except UnicodeDecodeError:\n   410                                                           raise JsonableError(_(&quot;Malformed payload&quot;))\n   411                                                   else:\n   412       944    1256985.0   1331.6     17.5              request_variable = process_request_var(\n   413       944      67855.0     71.9      0.9                  request,\n   414       944     165336.0    175.1      2.3                  aliases=[parameter.request_var_name, *parameter.param_config.aliases],\n   415                                                       )\n   416\n   417       637     105246.0    165.2      1.5          if request_variable is None:\n   418       637     121984.0    191.5      1.7              if parameter.default is NotSpecified:\n   419                                                           raise RequestVariableMissingError(parameter.request_var_name)\n   425       637     133476.0    209.5      1.9              fallback_to_defaults[parameter.request_var_name] = parameter.default\n   426       637      52498.0     82.4      0.7              continue\n   427\n   428       307      96267.0    313.6      1.3          processed_request_var_names.add(request_variable.name)\n   429       307    4004799.0  13044.9     55.8          kwargs_to_update[parameter.param_name] = parse_param_to_type(\n   430       307      36378.0    118.5      0.5              parameter, request_variable.value\n   431                                                   )\n   432\n   433        59     107043.0   1814.3      1.5      return CallInfo(\n   434        59      19776.0    335.2      0.3          kwargs_to_update=kwargs_to_update,\n   435        59      18125.0    307.2      0.3          processed_request_var_names=processed_request_var_names,\n   436        59       6214.0    105.3      0.1          fallback_to_defaults=fallback_to_defaults,\n   437                                               )\n\nTotal time: 0.030655 s\nFile: /home/pig208/zulip/zerver/lib/api_common.py\nFunction: _wrapped_view_func at line 472\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   472                                               @wraps(view_func)\n   473                                               def _wrapped_view_func(\n   474                                                   request: HttpRequest, /, *args: ParamT.args, **kwargs: ParamT.kwargs\n   475                                               ) -&gt; ReturnT:\n   476        59    9311398.0 157820.3     30.4          call_info = parse_request(request, endpoint_info, args, kwargs)\n   477        59      70583.0   1196.3      0.2          kwargs.update(call_info.kwargs_to_update)\n   478\n   479        59   20930897.0 354761.0     68.3          return_value = view_func(request, *args, **kwargs)\n   480\n   481        59     159113.0   2696.8      0.5          request_notes = RequestNotes.get_notes(request)\n   482        59      66695.0   1130.4      0.2          processed_parameters = request_notes.processed_parameters.union(\n   483        59      16943.0    287.2      0.1              call_info.processed_request_var_names\n   484                                                   )\n\nTotal time: 0.0300102 s\nFile: /home/pig208/zulip/zerver/tornado/views.py\nFunction: get_events at line 96\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   110\n   111        55   28383593.0 516065.3     94.6      return get_events_backend_endpoint(request, user_profile)\n</code></pre></div>\n</div></div>",
  "<p>Ah, that's messy. Guess we need to keep that implementation for now.</p>",
  "<p>/poll What should we name the module?</p>",
  "<p>Prior profiling discussions: <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/profiling.20get_events\">#backend &gt; profiling get_events</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args/near/1623529\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> Have you had a chance to try out seal?</p>\n</blockquote>\n<p>I tried using seal for <code>UserProfile</code> objects. I basically updated all the <code>UserProfile</code> queries to call <code>.seal()</code> and then ran the test suite. There were a few cases where we were accessing the related objects without using <code>select_related</code> which were caught using tests.</p>\n<p>Most of the test failures were due to using <code>refresh_from_db</code>. Basically what happens is that - we get the user using <code>example_user</code> which fetches the realm object using <code>select_related</code>. And then after performing some operations, <code>refresh_from_db</code> is called to test some other cases.</p>\n<p>When we call <code>refresh_from_db</code>, the fetched foreign keys are cleared and then if code accesses <code>realm</code> field from the user object, seal gives a warning (for current testing I have elevated it to raise errors in tests for ease of testing). I am not sure how to handle these now.</p>\n<p>One easy way is to refetch the object again from database and call <code>select_related</code> in the new query. But that would be a lot of changes.</p>",
  "<p>Thanks for investigating! That cache seems well worth doing if it is safe, as that overhead is really important especially on events calls.</p>",
  "<p>api_endpoint might be a better name for both module and decorator, now that I think about it.</p>",
  "<p>Hmm, yeah that's annoying. One answer would be to pass parameters to <code>refresh_from_db</code> for what fields to refresh, rather than refreshing the entire object. There may be some tests where that makes the test less good, but probably there will be many where it is fine?</p>",
  "<p>If we're relying on this in the web app, it'd be easy to change. But I would be surprised if we're not relying on this in the Python bindings or one of the client apps.</p>",
  "<p>We'll probably want to clean that up eventually but I don't think of increased strictness there as a priority -- at least I don't see an obvious problem it'd solve for us.</p>",
  "<p>And we might find that it's preferable to address by defining an <code>/api/v2</code> URL pattern that has stricter parameter encoding in various ways, and just have the existing thing be backwards-compatibility.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"17026\">@Akshat</span> cool, I think I see a path to merging that PR; but I guess the next question is whether we can change the now common code path to support multiple search operators and negation properly, as discussed above.</p>",
  "<p>Yup tests are next, the PR is still a draft and I was asking about mypy here :)</p>",
  "<p>I don\u2019t see us having any other kinds of \u201cendpoint\u201ds. My only reservation is that we have some non-\u201cendpoint\u201d uses of request variables in helper functions like <code>zerver.decorator.authenticate_notify</code>, <code>zerver.middleware.parse_client</code>, <code>zerver.views.auth.get_email_and_realm_from_jwt_authentication_request</code> (not sure how exhaustive that list is).</p>",
  "<p><code>check_send_webhook_message</code> is also one.</p>",
  "<p>Yeah the reason to put API in the name would just be for readability; like the words I'd typically use to describe one of these things decorated with this is an \"API endpoint\".</p>",
  "<p>I suppose if this decorator were just for our REST API you could imagine putting rest in the name, but as noted, it's used for webhooks too.</p>",
  "<p>I kinda like the idea that you see the api_endpoint decorator and that tells you that the function you're looking at is an API endpoint.</p>",
  "<p>We usually use \u201cAPI\u201d to mean the URLs in <code>/api/v1</code>, and this is more general.</p>\n<p>How about \u201c<code>typed_view</code>\u201d?</p>",
  "<p>We can potentially name the module <code>api</code>, the decorator <code>typed_view</code>/<code>endpoint</code>, and encourage the conventional use of <code>api.typed_view</code> or <code>api.endpoint</code>.</p>",
  "<p>For example, something like <code>zerver.views.registration.signup_send_confirm</code> is not part of the subset of our views you\u2019d consider as \u201cAPI\u201d, unless you consider all views as \u201cAPI\u201d, in which case it\u2019s just a redundant word.</p>",
  "<p>Basically, if \u201cAPI\u201d means anything, it\u2019s not this.</p>",
  "<p>That does not work. <a href=\"https://github.com/django/django/blob/d25f3892114466d689fd6936f79f3bd9a9acc30e/django/db/models/base.py#L736\"><code>refresh_from_db</code> clears cached relations</a> irrespective of whether it is included in the fields or not. And seal <a href=\"https://github.com/charettes/django-seal/blob/3a8163e2b5daf2ccf38ffab4499de06450369d58/seal/descriptors.py#L243\">expects them to be cached</a> (which is what <code>select_related</code> call does).</p>",
  "<p>How about typed_endpoint?</p>",
  "<p>That sounds good to me.</p>",
  "<p>For the rename operation:</p>\n<div class=\"codehilite\"><pre><span></span><code>ALTER INDEX [ IF EXISTS ] name RENAME TO new_name\n</code></pre></div>\n<p><a href=\"https://www.postgresql.org/docs/current/sql-alterindex.html\">from the docs</a>:</p>\n<blockquote>\n<p>The <code>RENAME</code> form changes the name of the index. If the index is associated with a table constraint (either <code>UNIQUE</code>, <code>PRIMARY KEY</code>, or <code>EXCLUDE</code>), the constraint is renamed as well. There is no effect on the stored data.<br>\n<strong>Renaming an index acquires a SHARE UPDATE EXCLUSIVE lock.</strong></p>\n</blockquote>\n<p>We can't do the <code>RENAME</code> operation concurrently. But since it doesn't affect stored data, we can do this operation without concurrency? </p>\n<p>The table-lock will be for a very short period of time; but again that \"short period\" can be problematic in the case of <code>UserMessage</code> table.</p>",
  "<p>Thoughts?</p>",
  "<p>I would expect that to just completely immediately anywhere but Zulip Cloud; we'll need to take some care in the Zulip Cloud context, but worst case we can skip the commit until it's convenient to rename the index, since index name is purely cosmetic.</p>",
  "<p>I would probably just not bother renaming the index to be honest and focus on the other changes.</p>",
  "<p>I think we need to clarify the interaction between <code>Annotated</code> and <code>Optional</code>.<br>\nIn the following examples, what should we allow and prohibit?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span>\n    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)],</span>\n    <span class=\"c1\"># Enforced by mypy via \"no implicit optional\"</span>\n    <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># These two are equivalent in runtime prior to py3.11: https://github.com/python/cpython/issues/90353</span>\n    <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># JSON encoded, but None is only possible when the default value is used</span>\n    <span class=\"c1\"># because a user cannot provide a Python None value via query parameters.</span>\n    <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># JSON encoded, null accepted</span>\n    <span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Json</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span> <span class=\"o\">...</span>\n</code></pre></div>",
  "<p>At the moment, we cannot differentiate these two variants in runtime.<br>\nSo there is no way to only allow the saner second option below:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">ApiParamConfig</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n</code></pre></div>",
  "<p>I decided that we should always encourage <code>d: Annotated[Optional[str], ApiParamConfig(...)]] = None</code>, i.e. not nesting the <code>Annotated</code> type inside another type when <code>ApiParamConfig</code> is specified.</p>",
  "<p>Because otherwise, it becomes unclear where the config object should come from. So it would be clearer to expect the parameter type is annotated without nesting whenever <code>ApiParamConfig</code> is needed.</p>",
  "<p>Yeah, I don't see a strong reason to do <code>Optional[Annotated[...</code>; we can lint against it if we think it's a bad idea.</p>",
  "<p>I think we want to be able to distinguish between <code>b</code> and <code>d</code> for the same reason we want to distinguish between <code>e</code> and <code>g</code>.</p>",
  "<p>Oh never mind, there isn\u2019t such a distinction for plain strings.</p>",
  "<p>To be clear, <code>Optional[Annotated[str, StringConstraint(max_length=10)]]</code> is a legit use case to implement capped string.<br>\nWe want to prohibit nesting <code>Annotated[..., ..., ApiParamConfig(...), ...]</code> anywhere inside the type annotation.</p>",
  "<p>Yeah that seems reasonable.</p>",
  "<p>I think that can be expressed in semgrep.</p>",
  "<p>Yeah. I think we can use semgrep to catch the case that cannot be determined in runtime, combined with a runtime check.</p>",
  "<p>Latest benchmark:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">Total</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.00940842</span> <span class=\"n\">s</span>\n<span class=\"n\">File</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">pig208</span><span class=\"o\">/</span><span class=\"n\">zulip</span><span class=\"o\">/</span><span class=\"n\">zerver</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">typed_endpoint</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Function</span><span class=\"p\">:</span> <span class=\"n\">_wrapped_view_func</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">473</span>\n\n<span class=\"n\">Line</span> <span class=\"c1\">#      Hits         Time  Per Hit   % Time  Line Contents</span>\n<span class=\"o\">==============================================================</span>\n   <span class=\"mi\">473</span>                                               <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">view_func</span><span class=\"p\">)</span>\n   <span class=\"mi\">474</span>                                               <span class=\"k\">def</span> <span class=\"nf\">_wrapped_view_func</span><span class=\"p\">(</span>\n   <span class=\"mi\">475</span>                                                   <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">ParamT</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">ParamT</span><span class=\"o\">.</span><span class=\"n\">kwargs</span>\n   <span class=\"mi\">476</span>                                               <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ReturnT</span><span class=\"p\">:</span>\n   <span class=\"mi\">477</span>        <span class=\"mi\">21</span>      <span class=\"mf\">44445.0</span>   <span class=\"mf\">2116.4</span>      <span class=\"mf\">0.5</span>          <span class=\"n\">request_notes</span> <span class=\"o\">=</span> <span class=\"n\">RequestNotes</span><span class=\"o\">.</span><span class=\"n\">get_notes</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n   <span class=\"mi\">478</span>       <span class=\"mi\">336</span>      <span class=\"mf\">74454.0</span>    <span class=\"mf\">221.6</span>      <span class=\"mf\">0.8</span>          <span class=\"k\">for</span> <span class=\"n\">parameter</span> <span class=\"ow\">in</span> <span class=\"n\">endpoint_info</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">:</span>\n   <span class=\"mi\">479</span>       <span class=\"mi\">336</span>     <span class=\"mf\">115561.0</span>    <span class=\"mf\">343.9</span>      <span class=\"mf\">1.2</span>              <span class=\"k\">if</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">path_only</span><span class=\"p\">:</span>\n   <span class=\"mi\">480</span>                                                           <span class=\"c1\"># For path_only parameters, they should already have been passed via</span>\n   <span class=\"mi\">481</span>                                                           <span class=\"c1\"># the URL, so there's no need for us to do anything.</span>\n   <span class=\"mi\">482</span>                                                           <span class=\"c1\">#</span>\n   <span class=\"mi\">483</span>                                                           <span class=\"c1\"># TODO: Run validators for path_only parameters for NewType.</span>\n   <span class=\"mi\">484</span>                                                           <span class=\"k\">assert</span> <span class=\"p\">(</span>\n   <span class=\"mi\">485</span>                                                               <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">param_name</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span>\n   <span class=\"mi\">486</span>                                                           <span class=\"p\">),</span> <span class=\"sa\">f</span><span class=\"s2\">\"Path-only variable </span><span class=\"si\">{</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">param_name</span><span class=\"si\">}</span><span class=\"s2\"> should be passed already\"</span>\n   <span class=\"mi\">487</span>       <span class=\"mi\">336</span>      <span class=\"mf\">53385.0</span>    <span class=\"mf\">158.9</span>      <span class=\"mf\">0.6</span>              <span class=\"k\">if</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">param_name</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n   <span class=\"mi\">488</span>                                                           <span class=\"c1\"># Skip parameters that are already supplied by the caller.</span>\n   <span class=\"mi\">489</span>                                                           <span class=\"k\">continue</span>\n   <span class=\"mi\">490</span>\n   <span class=\"mi\">491</span>                                                       <span class=\"c1\"># Extract the value to parse from the request body if specified.</span>\n   <span class=\"mi\">492</span>       <span class=\"mi\">336</span>      <span class=\"mf\">48547.0</span>    <span class=\"mf\">144.5</span>      <span class=\"mf\">0.5</span>              <span class=\"k\">if</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">argument_type_is_body</span><span class=\"p\">:</span>\n   <span class=\"mi\">493</span>                                                           <span class=\"k\">try</span><span class=\"p\">:</span>\n   <span class=\"mi\">494</span>                                                               <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">processed_parameters</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">request_var_name</span><span class=\"p\">)</span>\n   <span class=\"mi\">495</span>                                                               <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">param_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">parse_param_to_type</span><span class=\"p\">(</span>\n   <span class=\"mi\">496</span>                                                                   <span class=\"n\">parameter</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">encoding</span> <span class=\"ow\">or</span> <span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span>\n   <span class=\"mi\">497</span>                                                               <span class=\"p\">)</span>\n   <span class=\"mi\">498</span>                                                           <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n   <span class=\"mi\">499</span>                                                               <span class=\"k\">raise</span> <span class=\"n\">JsonableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Malformed payload\"</span><span class=\"p\">))</span>\n   <span class=\"mi\">500</span>                                                           <span class=\"c1\"># test_typed_endpoint.TestEndpoint.test_argument_type has</span>\n   <span class=\"mi\">501</span>                                                           <span class=\"c1\"># coverage of this, but coverage.py fails to recognize it for</span>\n   <span class=\"mi\">502</span>                                                           <span class=\"c1\"># some reason.</span>\n   <span class=\"mi\">503</span>                                                           <span class=\"k\">continue</span>  <span class=\"c1\"># nocoverage</span>\n   <span class=\"mi\">504</span>\n   <span class=\"mi\">505</span>                                                       <span class=\"c1\"># Otherwise, try to find the matching request variable in one of the QueryDicts</span>\n   <span class=\"mi\">506</span>                                                       <span class=\"c1\"># This is a view bug, not a user error, and thus should throw a 500.</span>\n   <span class=\"mi\">507</span>       <span class=\"mi\">336</span>      <span class=\"mf\">64797.0</span>    <span class=\"mf\">192.8</span>      <span class=\"mf\">0.7</span>              <span class=\"n\">possible_aliases</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">request_var_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">aliases</span><span class=\"p\">]</span>\n   <span class=\"mi\">508</span>       <span class=\"mi\">336</span>      <span class=\"mf\">31923.0</span>     <span class=\"mf\">95.0</span>      <span class=\"mf\">0.3</span>              <span class=\"n\">alias_used</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n   <span class=\"mi\">509</span>       <span class=\"mi\">336</span>      <span class=\"mf\">28893.0</span>     <span class=\"mf\">86.0</span>      <span class=\"mf\">0.3</span>              <span class=\"n\">value_to_parse</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n   <span class=\"mi\">510</span>\n   <span class=\"mi\">511</span>       <span class=\"mi\">336</span>      <span class=\"mf\">37875.0</span>    <span class=\"mf\">112.7</span>      <span class=\"mf\">0.4</span>              <span class=\"k\">for</span> <span class=\"n\">current_alias</span> <span class=\"ow\">in</span> <span class=\"n\">possible_aliases</span><span class=\"p\">:</span>\n   <span class=\"mi\">512</span>       <span class=\"mi\">320</span>     <span class=\"mf\">127496.0</span>    <span class=\"mf\">398.4</span>      <span class=\"mf\">1.4</span>                  <span class=\"k\">if</span> <span class=\"n\">current_alias</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">:</span>\n   <span class=\"mi\">513</span>        <span class=\"mi\">16</span>      <span class=\"mf\">11282.0</span>    <span class=\"mf\">705.1</span>      <span class=\"mf\">0.1</span>                      <span class=\"n\">value_to_parse</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"n\">current_alias</span><span class=\"p\">]</span>\n   <span class=\"mi\">514</span>       <span class=\"mi\">225</span>      <span class=\"mf\">78521.0</span>    <span class=\"mf\">349.0</span>      <span class=\"mf\">0.8</span>                  <span class=\"k\">elif</span> <span class=\"n\">current_alias</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">:</span>\n   <span class=\"mi\">515</span>        <span class=\"mi\">95</span>      <span class=\"mf\">71709.0</span>    <span class=\"mf\">754.8</span>      <span class=\"mf\">0.8</span>                      <span class=\"n\">value_to_parse</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">[</span><span class=\"n\">current_alias</span><span class=\"p\">]</span>\n   <span class=\"mi\">516</span>                                                           <span class=\"k\">else</span><span class=\"p\">:</span>\n   <span class=\"mi\">517</span>                                                               <span class=\"c1\"># This is covered by test_REQ_aliases, but coverage.py</span>\n   <span class=\"mi\">518</span>                                                               <span class=\"c1\"># fails to recognize this for some reason.</span>\n   <span class=\"mi\">519</span>                                                               <span class=\"k\">continue</span>  <span class=\"c1\"># nocoverage</span>\n   <span class=\"mi\">520</span>       <span class=\"mi\">111</span>      <span class=\"mf\">14910.0</span>    <span class=\"mf\">134.3</span>      <span class=\"mf\">0.2</span>                  <span class=\"k\">if</span> <span class=\"n\">alias_used</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n   <span class=\"mi\">521</span>                                                               <span class=\"k\">raise</span> <span class=\"n\">RequestConfusingParamsError</span><span class=\"p\">(</span><span class=\"n\">alias_used</span><span class=\"p\">,</span> <span class=\"n\">current_alias</span><span class=\"p\">)</span>\n   <span class=\"mi\">522</span>       <span class=\"mi\">111</span>      <span class=\"mf\">10538.0</span>     <span class=\"mf\">94.9</span>      <span class=\"mf\">0.1</span>                  <span class=\"n\">alias_used</span> <span class=\"o\">=</span> <span class=\"n\">current_alias</span>\n   <span class=\"mi\">523</span>\n   <span class=\"mi\">524</span>       <span class=\"mi\">225</span>      <span class=\"mf\">27494.0</span>    <span class=\"mf\">122.2</span>      <span class=\"mf\">0.3</span>              <span class=\"k\">if</span> <span class=\"n\">alias_used</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n   <span class=\"mi\">525</span>       <span class=\"mi\">225</span>      <span class=\"mf\">24131.0</span>    <span class=\"mf\">107.2</span>      <span class=\"mf\">0.3</span>                  <span class=\"n\">alias_used</span> <span class=\"o\">=</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">request_var_name</span>\n   <span class=\"mi\">526</span>       <span class=\"mi\">225</span>      <span class=\"mf\">30837.0</span>    <span class=\"mf\">137.1</span>      <span class=\"mf\">0.3</span>                  <span class=\"k\">if</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"ow\">is</span> <span class=\"n\">NotSpecified</span><span class=\"p\">:</span>\n   <span class=\"mi\">527</span>                                                               <span class=\"k\">raise</span> <span class=\"n\">RequestVariableMissingError</span><span class=\"p\">(</span><span class=\"n\">alias_used</span><span class=\"p\">)</span>\n   <span class=\"mi\">533</span>                                                           <span class=\"k\">continue</span>  <span class=\"c1\"># nocoverage</span>\n   <span class=\"mi\">534</span>\n   <span class=\"mi\">535</span>                                                       <span class=\"c1\"># Note that value_to_parse comes from a QueryDict, so it has no chance</span>\n   <span class=\"mi\">536</span>                                                       <span class=\"c1\"># of having a user-provided None value.</span>\n   <span class=\"mi\">537</span>       <span class=\"mi\">111</span>      <span class=\"mf\">12253.0</span>    <span class=\"mf\">110.4</span>      <span class=\"mf\">0.1</span>              <span class=\"k\">assert</span> <span class=\"n\">value_to_parse</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n   <span class=\"mi\">538</span>       <span class=\"mi\">111</span>      <span class=\"mf\">29738.0</span>    <span class=\"mf\">267.9</span>      <span class=\"mf\">0.3</span>              <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">processed_parameters</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">alias_used</span><span class=\"p\">)</span>\n   <span class=\"mi\">539</span>       <span class=\"mi\">111</span>     <span class=\"mf\">423343.0</span>   <span class=\"mf\">3813.9</span>      <span class=\"mf\">4.5</span>              <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">param_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">parse_param_to_type</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"p\">,</span> <span class=\"n\">value_to_parse</span><span class=\"p\">)</span>\n   <span class=\"mi\">540</span>        <span class=\"mi\">21</span>    <span class=\"mf\">8009056.0</span> <span class=\"mf\">381383.6</span>     <span class=\"mf\">85.1</span>          <span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">view_func</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n   <span class=\"mi\">541</span>\n   <span class=\"mi\">542</span>        <span class=\"mi\">19</span>       <span class=\"mf\">3923.0</span>    <span class=\"mf\">206.5</span>      <span class=\"mf\">0.0</span>          <span class=\"k\">if</span> <span class=\"p\">(</span>\n   <span class=\"mi\">543</span>        <span class=\"mi\">21</span>      <span class=\"mf\">16266.0</span>    <span class=\"mf\">774.6</span>      <span class=\"mf\">0.2</span>              <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">return_value</span><span class=\"p\">,</span> <span class=\"n\">MutableJsonResponse</span><span class=\"p\">)</span>\n   <span class=\"mi\">544</span>                                                       <span class=\"c1\"># TODO: Move is_webhook_view to the decorator</span>\n   <span class=\"mi\">545</span>         <span class=\"mi\">2</span>        <span class=\"mf\">461.0</span>    <span class=\"mf\">230.5</span>      <span class=\"mf\">0.0</span>              <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">is_webhook_view</span>\n   <span class=\"mi\">552</span>         <span class=\"mi\">4</span>        <span class=\"mf\">960.0</span>    <span class=\"mf\">240.0</span>      <span class=\"mf\">0.0</span>              <span class=\"ow\">and</span> <span class=\"mi\">200</span> <span class=\"o\">&lt;=</span> <span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span>\n   <span class=\"mi\">553</span>                                                   <span class=\"p\">):</span>\n   <span class=\"mi\">554</span>         <span class=\"mi\">2</span>       <span class=\"mf\">4393.0</span>   <span class=\"mf\">2196.5</span>      <span class=\"mf\">0.0</span>              <span class=\"n\">ignored_parameters</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span>\n   <span class=\"mi\">555</span>         <span class=\"mi\">2</span>       <span class=\"mf\">5939.0</span>   <span class=\"mf\">2969.5</span>      <span class=\"mf\">0.1</span>                  <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n   <span class=\"mi\">556</span>         <span class=\"mi\">2</span>        <span class=\"mf\">522.0</span>    <span class=\"mf\">261.0</span>      <span class=\"mf\">0.0</span>              <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">processed_parameters</span><span class=\"p\">)</span>\n   <span class=\"mi\">557</span>\n   <span class=\"mi\">564</span>         <span class=\"mi\">2</span>        <span class=\"mf\">305.0</span>    <span class=\"mf\">152.5</span>      <span class=\"mf\">0.0</span>              <span class=\"k\">if</span> <span class=\"n\">ignored_parameters</span><span class=\"p\">:</span>\n   <span class=\"mi\">565</span>                                                           <span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()[</span><span class=\"s2\">\"ignored_parameters_unsupported\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span>\n   <span class=\"mi\">566</span>                                                               <span class=\"n\">ignored_parameters</span>\n   <span class=\"mi\">567</span>                                                           <span class=\"p\">)</span>\n   <span class=\"mi\">568</span>                                                       <span class=\"k\">else</span><span class=\"p\">:</span>\n   <span class=\"mi\">569</span>         <span class=\"mi\">2</span>       <span class=\"mf\">2124.0</span>   <span class=\"mf\">1062.0</span>      <span class=\"mf\">0.0</span>                  <span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">\"ignored_parameters_unsupported\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n   <span class=\"mi\">570</span>\n   <span class=\"mi\">571</span>        <span class=\"mi\">21</span>       <span class=\"mf\">2336.0</span>    <span class=\"mf\">111.2</span>      <span class=\"mf\">0.0</span>          <span class=\"k\">return</span> <span class=\"n\">return_value</span>\n\n<span class=\"n\">Total</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.00946969</span> <span class=\"n\">s</span>\n<span class=\"n\">File</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">pig208</span><span class=\"o\">/</span><span class=\"n\">zulip</span><span class=\"o\">/</span><span class=\"n\">zerver</span><span class=\"o\">/</span><span class=\"n\">tornado</span><span class=\"o\">/</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Function</span><span class=\"p\">:</span> <span class=\"n\">get_events</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">95</span>\n\n<span class=\"n\">Line</span> <span class=\"c1\">#      Hits         Time  Per Hit   % Time  Line Contents</span>\n<span class=\"o\">==============================================================</span>\n   <span class=\"mi\">109</span>\n   <span class=\"mi\">110</span>        <span class=\"mi\">19</span>    <span class=\"mf\">8982635.0</span> <span class=\"mf\">472770.3</span>     <span class=\"mf\">94.9</span>      <span class=\"k\">return</span> <span class=\"n\">get_events_backend_endpoint</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user_profile</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>I inlined <code>parse_request</code>, flatten <code>FuncParam</code>, rewrote handling for aliasing and store the type adapter object on the parameter themselves. The performance has greatly improved.</p>",
  "<p>With the same workload (of sending messages and parsing events), it is roughly as fast as <code>has_request_variables</code> now.</p>",
  "<p>Updated the PR with the check and the performance fix.</p>",
  "<p>I also migrated a couple of other views to demonstrate some different uses of <code>@typed_endpoint</code>, while improving <code>test_openapi</code>'s integration with Pydantic.</p>",
  "<p>For reviewing purposes, the most critical part of the implementation is in the first three commits.<br>\nThe following non-webhook migration commits are more important for integrating <code>test_openapi</code>.<br>\nThe webhook migration commits are mostly just PoC that can be merged later.</p>",
  "<p>Is it a known design choice that removing/deactivating a user leaves user group memberships unchanged, i.e., the deactivated user is still shown in UI as belonging to their groups. A couple users have mentioned this as a bug in the user management as they have thought that the users are not removed as they are shown in the user groups..</p>",
  "<p>remove the user group memberships upon user deactivation seems to be quite a simple change, but of course, one can argue the current model might be preferred in some use cases where deactivated users can return to their previously assigned user groups. the documentation doesn't mention anything about this afaik <a href=\"https://zulip.com/help/user-groups\">https://zulip.com/help/user-groups</a></p>",
  "<p>Thanks for the report <span class=\"user-mention\" data-user-id=\"22790\">@Harri Avellan</span>. It is a bug. Deactivating a user should update the user groups memberships as well and user should be removed from the group.</p>\n<p>We currently delete the <code>UserGroupMembership</code> objects when removing a user from group. To support adding users back to the groups upon reactivation, we might instead want to keep the <code>UserGroupMembership</code> object and mark it as deactivated.</p>\n<p>But in any case, deactivated users should not be considered as a member of the group and should not be shown in the group members list in UI as well.</p>",
  "<p>should I create a GH issue for this?</p>",
  "<p><a href=\"https://github.com/zulip/zulip/issues/26515\">https://github.com/zulip/zulip/issues/26515</a></p>",
  "<p>I also expect that to be O(1) and not O(n) so not problematic on Zulip Cloud.</p>",
  "<p>Great!</p>",
  "<p>Wow yeah that's way better overhead ratio than the previous tests.</p>",
  "<p>I think the right approach might be to keep the state in the database for what groups they were in, but hide that from users (either via the API or clients filtering such users -- the API version might be more likely to work). And then include in the reactivation flow prompting whether you want to restore them to those groups.</p>\n<p>I don't think any database changes would be required to support that model; <span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> do you see a reason we wouldn't want to go with that class of design here?</p>",
  "<p>I was thinking of doing something similar to what we do for <code>Susbcription</code> objects where we use <code>active</code> and <code>is_user_active</code> fields, but this also seems good.</p>\n<p>But yeah, maybe we can get some advantage of having a direct field on <code>UserGroupMembership</code> object rather than checking a field on <code>UserProfile</code> object while querying for users in a group or something similar, especially with increased use of groups in new permissions model.</p>",
  "<p>should the reactivation flow cleanup any UserGroupMembership objects left in the \"inactive\" state that belong to the returning user? Just thinking our use case, where a lot of external contractors come and go, often returning to another team than they previously were working with. Also the reactivations happen automatically as SAML authentication is used, so usually there are no \"mouse clicks\" involved in the reactivation flow.</p>",
  "<p>I think in an ideal world we prompt the administrator who's reactivating them for what they want to do.</p>",
  "<p>If we don't, I imagine we'd land the administrator on the user's profile with a reminder to review the stream/group subscriptions for that user and consider changing them.</p>",
  "<p><a href=\"https://github.com/nix-community/poetry2nix/issues/857\">nix-community/poetry2nix#857</a> seems to be a blocker: <code>django</code> depends <code>backports.zoneinfo ; python_version &lt; \"3.9\"</code> which doesn\u2019t build on Python 3.10 and should be skipped by the environment marker, but poetry2nix tries to build it anyway.</p>",
  "<p>Opened <a href=\"https://github.com/nix-community/poetry2nix/pull/1267\">https://github.com/nix-community/poetry2nix/pull/1267</a> for <code>subdirectory</code> support.</p>",
  "<p>This basically gets me a working Python environment: <a href=\"https://gist.github.com/andersk/94423a8ccb57afe66bb731b487d29102\">https://gist.github.com/andersk/94423a8ccb57afe66bb731b487d29102</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Exactly how bad would it be to sweep <code>refresh_from_db</code> and then just re-query the objects explicitly (even if we possibly just do a sloppy big-hammer call to <code>select_related</code> with no args)? Is there a way to have <code>seal</code> help automate the change to some degree?  For example, you could hopefully have <code>seal</code> log the tables that cause round trips and then do a hacky Python script to fix things up.</p>\n<p>Or maybe you're not concerned more about the churn to the tests than the effort to clean them up?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> One idea would be to move this chunk of code up into <code>json_fetch_raw_message</code>, since that is the only caller:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">realm</span><span class=\"o\">.</span><span class=\"n\">web_public_streams_enabled</span><span class=\"p\">():</span>\n        <span class=\"k\">raise</span> <span class=\"n\">MissingAuthenticationError</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_SELECT_RELATED</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">message_id</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">MissingAuthenticationError</span>\n</code></pre></div>\n<p>And then keep the remainder of <code>access_web_public_message</code> as a helper function with a new name such as <code>validate_web_public_message</code>.</p>",
  "<p>Here is the rest of the function for convenience:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">get_web_public_streams_queryset</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">recipient</span><span class=\"o\">.</span><span class=\"n\">type_id</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Stream</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">MissingAuthenticationError</span>\n\n    <span class=\"c1\"># These should all have been enforced by the code in</span>\n    <span class=\"c1\"># get_web_public_streams_queryset</span>\n    <span class=\"k\">assert</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">is_web_public</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">deactivated</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">invite_only</span>\n    <span class=\"k\">assert</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">history_public_to_subscribers</span>\n\n    <span class=\"c1\"># Now that we've confirmed this message was sent to the target</span>\n    <span class=\"c1\"># web-public stream, we can return it as having been successfully</span>\n    <span class=\"c1\"># accessed.</span>\n    <span class=\"k\">return</span> <span class=\"n\">message</span>\n</code></pre></div>",
  "<p>Incidentally, this whole piece of code feels very convoluted.  We essentially need to fetch the message with a realm check and then fetch the stream with checks for the four relevant booleans, and if either comes up empty, we can fail.  The indirection to <code>get_web_public_streams_queryset</code> feels clumsy to me.</p>",
  "<p>Hrm, I count 51 places we'd have to fix just to address the <code>user</code> cases.</p>",
  "<p>Ugh, I am under-counting with 51.</p>",
  "<p>6 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/select_related.28.29.20with.20no.20args\">#backend &gt; select_related() with no args</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>6 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/django-seal.20audits\">#backend &gt; django-seal audits</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>I think I have some ideas on how to sweep this somewhat efficiently, so I'm working on this now.  I think <code>refresh_from_db</code> is a bit evil in a testing context, as it doesn't hit the cache, and it therefore doesn't exercise our cache-invalidation logic.</p>",
  "<p>In my sweep I have already encountered a place where we are over-counting the number of queries for an operation, because the test is using a Django-refreshed object.  The more representative scenario for asserting query counts is to fetch the object through Zulip's normal layer, and that's what my <code>refresh_user</code> helper does. (Of course, this is just another symptom of what Sahil is seeing.)</p>",
  "<p>I encountered the above in the soft deactivation tests, which are particularly nasty tests.  They have lots of long tests that mutate the same user between long-term-idle and active.  So it's never quite clear whether reloads are supposed to help with assertions or to set up state for the next chunk of code within the same test.  My changes don't really affect it either way; the pitfall is just intrinsic with overly long tests.  I am not fanatical about small tests, but some of the tests I've encountered are just way too long.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Can you try stacking your branch on top of my <a href=\"https://github.com/zulip/zulip/pull/26533\">#26533</a>? I think it will eliminate most or even all of the noise from <code>refresh_from_db</code> in your experiment.</p>",
  "<p>Also, can you post your code as a wip PR with basic instructions of how to install django-seal (assuming you haven't touched the provisioning piece yet)?</p>",
  "<p>The PR also eliminates calls to <code>refresh_from_db</code> for <code>Stream</code> and <code>Realm</code> objects.  The remaining calls are for relatively obscure tables.</p>",
  "<p>I some hacking tonight on a dedicated presence server for Zulip.</p>",
  "<p><a href=\"#narrow/stream/3-backend/topic/presence.20server/near/1628393\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/presence.20scalability\">#backend &gt; presence scalability</a> by <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span>.</p>",
  "<p>I have the server run two Tornado instances.  One's for all the normal events; the new one (which is just hacked from the old one) deals only with presence events.  And then the clients run two event loops instead of one (which involves a hacked copy of <code>server_events.js</code>).</p>\n<p>When you register with the Django server, it now talks to both Tornado codebases to get two different queue ids, and it passes them both back to the hacked up client.</p>",
  "<p>It's still way too raw to start posting any code, but the main idea is to get some kind of reference implementation of a presence server that works within the Zulip ecosystem to at least some degree. Even insofar as the two-event-loop approach is probably never gonna fly, I think it's gonna pretty difficult to replicate the tornado approach in a vacuum, so I wanted the prototype to show that you can hack away all you want with presence events, and it still kinda needs to work with all the other events.</p>",
  "<p>It's true that our current tornado implementation is fairly lightweight (~2300 lines plus a few calls out to zerver.lib), but it still has lots of details that would probably pose a lot of friction to somebody who wanted to port it to, say, Rust.  I think I can whittle away the right amount of stuff so that there's an entry point for somebody who wants to take a stab at porting it to a new technology.</p>",
  "<p>Yes, moving some of the code to <code>json_fetch_raw_message</code> can be a possible solutiton, but yeah that would kinda break our convention of using functions named as <code>access_....</code> to fetch the relevant object from ID, but should be fine as a one-off case.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20in.20access_web_public_message/near/1628088\">said</a>:</p>\n<blockquote>\n<p>Incidentally, this whole piece of code feels very convoluted.  We essentially need to fetch the message with a realm check and then fetch the stream with checks for the four relevant booleans, and if either comes up empty, we can fail.  The indirection to <code>get_web_public_streams_queryset</code> feels clumsy to me.</p>\n</blockquote>\n<p>Yes, this code seems somewhat unnecessarily complex and could be made much simpler for sure.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/select_related.28.29.20in.20access_web_public_message/near/1628443\">said</a>:</p>\n<blockquote>\n<p>Yes, moving some of the code to <code>json_fetch_raw_message</code> can be a possible solutiton, but yeah that would kinda break our convention of using functions named as <code>access_....</code> to fetch the relevant object from ID, but should be fine as a one-off case.</p>\n</blockquote>\n<p>Yeah, I think it would be fine to  do it as a one-off, especially if we're a bit thoughtful with names.  The convention could be that we always either a) just use <code>access...</code> for one-stop shopping or b) call <code>can_access...</code> and then fetch ourselves. Or something like that.</p>",
  "<p>I really wish the <code>zerver/tornado</code> code was a little bit more organized and modular.  It's generally good code but <code>event_queue.py</code> is kind of a kitchen sink.  It doesn't even organize itself around the idea of MVC.  <code>ClientDescriptor</code> sounds like it should just be a data bucket, but it has a method called <code>disconnect_handler</code>.</p>",
  "<p>There's a deep underlying paradigm to our real-time push system</p>\n<ul>\n<li>reader clients register</li>\n<li>writer clients do something</li>\n<li>the multiplexer pushes the events from the writers to the readers</li>\n</ul>\n<p>This is every single multi-player game engine in the world. This is Napster.</p>\n<p>This should be a solved problem.</p>\n<p>The current code organization mostly obscures the underlying universality of what we're doing.</p>",
  "<p>I hope to push something up either later today or tomorrow.  I'm still a bit in the muck, but I'm making progress.  It's actually gone smoother than I thought, but I am kind of running on fumes after the initial burst.</p>",
  "<p>We also need to clean up <code>server_events.js</code> a bit.  I have thoughts. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>This is just egregious:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"n\">event_queue_expired</span>\n<span class=\"n\">web</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">server_events</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">:</span>                    <span class=\"n\">page_params</span><span class=\"o\">.</span><span class=\"n\">event_queue_expired</span> <span class=\"o\">=</span> <span class=\"n\">true</span><span class=\"p\">;</span>\n<span class=\"n\">web</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">server_events</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">:</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">page_params</span><span class=\"o\">.</span><span class=\"n\">event_queue_expired</span> <span class=\"o\">===</span> <span class=\"n\">true</span> <span class=\"o\">||</span> <span class=\"n\">page_params</span><span class=\"o\">.</span><span class=\"n\">no_event_queue</span> <span class=\"o\">===</span> <span class=\"n\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"n\">web</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">server_events</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">:</span>    <span class=\"n\">page_params</span><span class=\"o\">.</span><span class=\"n\">event_queue_expired</span> <span class=\"o\">=</span> <span class=\"n\">true</span><span class=\"p\">;</span>\n</code></pre></div>",
  "<p>There's obviously some context to how the above code evolved, but we clearly don't want to hijack <code>page_params</code> to track state that we can perfectly reasonably track ourselves.</p>",
  "<p>There are other places where <code>server_events.js</code> consumes read-only stuff from <code>page_params</code> in a fairly legitimate way.<br>\nBut even there we ignore the pretty well-established pattern (by now) to just pass in a slice of <code>page_params</code> to the <code>initialize</code> function and then let the module not have to import <code>page_params</code>.  There are plenty of examples of this is in <code>ui_init.js</code>.</p>",
  "<p>For singleton modules like <code>alert_words</code> we use the destructive <code>pop_fields</code> idiom.  But you can also do innocuous things like <code>linkifiers.initialize(page_params.realm_linkifiers);</code>.</p>",
  "<p>I can't think of any good scenario where we would mutate<code>page_params</code>.  Certainly the stuff that is done by <code>server_events.js</code> does not qualify for my aesthetics.</p>",
  "<p>What's our current feeling on websockets?  It seems like a modern server for tracking presence would just push out occasional info about other users' presence on websockets to interested clients.</p>",
  "<p>The docs say \"This approach is reasonably efficient and works everywhere (unlike websockets, which have a decreasing but nonzero level of client compatibility problems).\"  I didn't track down when that was written, but I suspect that in 2023 browsers do websockets just as well as they do long-polling.  It's just moving the data from here to there.  Or there to here.</p>\n<p>Were there any reasons to avoid websockets in the past that just transcended the newness (and possible bugginess) of the thing?</p>",
  "<p>My recollection is that we had support for them, but browser support was inconsistent enough that we <em>also</em> had to have non-websocket support, and there was no measurable upside to using them, so it just added maintenance burden for no benefit.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/commit/ea6934c26d226055f0d1fac6737e4b235f0d7783\">ea6934c26d226055f0d1fac6737e4b235f0d7783</a> is the removal commit, in 2019</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/presence.20server/near/1628681\">said</a>:</p>\n<blockquote>\n<p>My recollection is that we had support for them, but browser support was inconsistent enough that we <em>also</em> had to have non-websocket support, and there was no measurable upside to using them, so it just added maintenance burden for no benefit.</p>\n</blockquote>\n<p>That's a definitely accurate recollection.  I'm just wondering if we should re-visit.</p>",
  "<p>What sorts of problems would moving to them solve, over longpolling?</p>",
  "<p>Browser support for WebSockets has been fine for about a decade\u2014the client compatibility problems are more about corporate firewalls/proxies/other middleboxes than about browser support.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/presence.20server/near/1628689\">said</a>:</p>\n<blockquote>\n<p>What sorts of problems would moving to them solve, over longpolling?</p>\n</blockquote>\n<p>Just flexibility to consider other implementations.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/presence.20server/near/1628691\">said</a>:</p>\n<blockquote>\n<p>Browser support for WebSockets has been fine for about a decade\u2014the client compatibility problems are more about corporate firewalls/proxies/other middleboxes than about browser support.</p>\n</blockquote>\n<p>Ugh.  Well that's a good reason to avoid them, I guess.</p>",
  "<p>My recollection of the Zulip history (and I think the comments in the commit from Anders corroborate it) was that we weren't necessarily as opposed to websockets per se as we were opposed to having to support two different ways of doing the same thing.  And websockets didn't have a super compelling advantage over long-polling; in fact, it had some obvious cons.</p>\n<p>So I think you two answered my question.  Thanks!</p>",
  "<p>I probably got a bit in the weeds there.  Back to my main point.  I am curious if folks like <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> and <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> think I am totally off base with the following hypothesis.  I believe there is a piece of relatively high-quality software out in the wild that meets all these conditions:</p>\n<ul>\n<li>allows you to register clients with opaque client descriptors</li>\n<li>allows clients to long-poll for events</li>\n<li>allows writers to push stuff into the queue</li>\n<li>is fast, free, and statically typed</li>\n<li>is reasonably easy to integrate into mainstream architectures</li>\n</ul>\n<p>I can't believe this doesn't exist.  But I have no evidence to prove I'm right either.  It's just a hunch.</p>",
  "<p>(and maybe has a plug-in architecture to deal with the opaque client descriptors, bla bla bla)  I just feel like there's gotta be something out there that solves 80% of the problem.</p>",
  "<p>I don't know of one, but I've not gone looking.</p>\n<p>My guess is that <a href=\"https://channels.readthedocs.io/\">https://channels.readthedocs.io/</a> may fit most of those, but I don't think we've done any investigation.</p>\n<p>The flip side to \"this is so simple it must exist, but has to have the right integration knobs\" is that \"we should write our own\" is not too far away from that point.</p>",
  "<p>Yeah, I'm not opposed to write-our-own.  I'm pretty aggressively anti-dependency.  But it would be nice to have something to crib off.</p>\n<p>I also just feel like there's a universal paradigm here (beyond chat) that we're not understanding.</p>",
  "<p>The \"channels\" stuff doesn't completely resonate with me, to be honest, but it's definitely in the ballpark.</p>",
  "<p>I just want a brutally fast multiplexer that just asks these questions:</p>\n<ul>\n<li>Do I trust the writer?</li>\n<li>Do I trust the reader?</li>\n<li>What does the writer want to send?</li>\n<li>Who does the writer want to talk to?</li>\n<li>What do the readers want to receive?</li>\n</ul>\n<p>And that's it.  Everything else is opaque to the software, and it just pumps it out.  The only nuance is maybe this question:</p>\n<ul>\n<li>How does the reader want the data re-interpreted?</li>\n</ul>\n<p>But I think that's probably over-complicating things.  Or maybe not.  It's a plugin.</p>",
  "<p>The architecture I want is also brutally simple:</p>\n<ul>\n<li>readers register</li>\n<li>writers write</li>\n<li>readers wait for events</li>\n</ul>\n<p>It's just pub-sub.  The authentication pieces can either be directly in the server or in some kind of front-end proxy thing.</p>\n<p>I mean I think that's basically what we have now, except for the <strong>fast</strong> part.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/django-seal.20audits/near/1628099\">said</a>:</p>\n<blockquote>\n<p>I think I have some ideas on how to sweep this somewhat efficiently, so I'm working on this now.  I think <code>refresh_from_db</code> is a bit evil in a testing context, as it doesn't hit the cache, and it therefore doesn't exercise our cache-invalidation logic.</p>\n</blockquote>\n<p>Hmm, yeah. I'm sure that in at least some cases the intent is to skip the cache to confirm that we updated the database properly. But probably we should get a review from <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> on the soft-deactivation stuff, since he's the maintainer for that subsystem and may remember the intent of those refreshes.</p>",
  "<p>So, I have mostly completed a working prototype here. -- <a href=\"https://github.com/zulip/zulip/pull/26382\">#26382</a></p>\n<p>We have a custom migration file to perform \"add index\" and \"remove index\" concurrently. -- 3rd commit</p>\n<p>Now, migration runs properly, everything works good. The problem is related to MigrationTest.</p>\n<p>There is a test failure related to <code>MigrationTest</code> which I would like to discuss.</p>\n<p>In <a href=\"https://github.com/zulip/zulip/blob/main/zerver/tests/test_migrations.py\"><code>zerver/tests/test_migration</code></a>, we need to move to a previous state -- <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/test_classes.py#L2262\">related code</a></p>\n<p>This calls <a href=\"https://github.com/django/django/blob/main/django/contrib/postgres/operations.py#L160\"><code>database_backwards</code></a> resulting in the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>File &quot;/srv/zulip-py3-venv/lib/python3.8/site-packages/django/db/migrations/migration.py&quot;, line 193, in unapply\n    operation.database_backwards(\n  File &quot;/srv/zulip-py3-venv/lib/python3.8/site-packages/django/contrib/postgres/operations.py&quot;, line 161, in database_backwards\n    self._ensure_not_in_transaction(schema_editor)\n  File &quot;/srv/zulip-py3-venv/lib/python3.8/site-packages/django/contrib/postgres/operations.py&quot;, line 113, in _ensure_not_in_transaction\n    raise NotSupportedError(\ndjango.db.utils.NotSupportedError: The RemoveIndexConcurrently operation cannot be executed inside a transaction (set atomic = False on the migration)\n</code></pre></div>\n<p>I have already included <code>atomic = False</code> in the migration file.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> I'd appreciate the review from <span class=\"user-mention silent\" data-user-id=\"10349\">Mateusz Mandera</span>, but I don't think you need to block on it.  I think most of the stuff probably actually pre-dates him.  When you see my commits I think you'll appreciate that I didn't really fundamentally change what we were testing for.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> suggested:</p>\n<p>The gist is that, in a normal Django TestCase (which ZulipTestCase subclasses), every test runs inside a transaction, which is rolled back at the end of the test so as to reset the DB state.<br>\nHowever, tests which subclass <a href=\"https://docs.djangoproject.com/en/4.2/topics/testing/tools/#transactiontestcase\">TransactionTestCase</a> do not run inside a transaction.</p>\n<p>Abhijeet Bodas: So if we're going to write a new test here, <a href=\"https://docs.djangoproject.com/en/4.2/topics/testing/tools/#transactiontestcase\">TransactionTestCase</a> might be useful (although I'm not sure if we should be writing a new test).</p>",
  "<p>All the tests that I modified still clearly validate the database was updated.  We don't have any history of updating the cache with stuff that doesn't get to the DB apart from weird transaction rollback/commit stuff, and my PR was nowhere near that kind of complexity.</p>",
  "<p>I responded to the comments on <a href=\"https://github.com/zulip/zulip/pull/26533\">#26533</a>.  It's honestly mostly push-back apart from some concession on names, which I don't think are super important in the short run.</p>\n<p>We really do want our tests to reflect how the app retrieves objects.  If there are corner cases from ancient tests, they should have been constructed in such a way that my changes would have broken the tests; otherwise, the tests are weak, and that probably means the programmer's thought process wasn't so strong.</p>",
  "<p>(my one-line changes to be clear...if you are testing something subtle like the cache gets written and the DB doesn't, you want some pretty serious lockdown with at least two assertions)</p>",
  "<p>I've managed to muddle my way through this exercise just by pattern-matching and being sort of careful, but there are fundamental things about our Tornado architecture that I still don't understand.  Am I correct that in dev we basically proxy all Tornado requests through the main Django server?  Is there a reason we don't use nginx in dev?  Or do we and I just don't fully understand what's going on?</p>",
  "<p>I've read <a href=\"https://zulip.readthedocs.io/en/latest/subsystems/events-system.html\">https://zulip.readthedocs.io/en/latest/subsystems/events-system.html</a> several times, and I definitely get like 70% of the big picture, but even after digging through the code in a pretty hands-on way, I don't feel fully confident in how the data moves through the system.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26542\">#26542</a> is the initial spike for the presence server.  Still tons of work to do before it's even ready to really look at, but it's up there now.</p>",
  "<p>I really want to preserve the <code>access_</code> convention for accessing security-sensitive objects; it saves me a lot of mental energy in verifying that application code doesn't have security bugs.</p>",
  "<p>Would <code>can_access</code> be ok?</p>",
  "<p>Cool! What does the \"flake\" in file names like <code>flake.nix</code> refer to?</p>",
  "<p>The main architectural design here is to make it hard to get a <code>Message</code> object in API code without having first done appropriate access checks. That sort of <code>can_access</code> thing can work as a helper, but I value the abstraction.</p>",
  "<p><a href=\"https://nix.dev/concepts/flakes\">https://nix.dev/concepts/flakes</a></p>",
  "<p>Renamed the topic to \"events server\", since \"presence\" is a totally different thing -- just the data for who's online, and generally is its own dedicated service.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/events.20server/near/1628840\">said</a>:</p>\n<blockquote>\n<p>I've managed to muddle my way through this exercise just by pattern-matching and being sort of careful, but there are fundamental things about our Tornado architecture that I still don't understand.  Am I correct that in dev we basically proxy all Tornado requests through the main Django server?  Is there a reason we don't use nginx in dev?  Or do we and I just don't fully understand what's going on?</p>\n</blockquote>\n<p>We proxy through <code>run-dev.py</code>, which is a separate little Tornado server that fills the role of <code>nginx</code>.</p>",
  "<p>We haven't looked deeply at using <code>nginx</code> in development; but I would expect doing so to be fairly annoying for reasons related to certificates and configuration file management and so on; the thing we're doing is a bit lighter-weight.</p>",
  "<p>I feel like you're being a little rigid in your stance.  We have code review and tests.  Why not express the code in the natural way?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/events.20server/near/1628993\">said</a>:</p>\n<blockquote>\n<p>Renamed the topic to \"events server\", since \"presence\" is a totally different thing -- just the data for who's online, and generally is its own dedicated service.</p>\n</blockquote>\n<p>Just to be clear, the experiment I worked on was for sending <strong>only</strong> \"presence\" events via the second server.</p>",
  "<p>What is the etymology behind the term <code>flake</code> there? I feel like I'm missing a reference, and that page doesn't answer that.</p>",
  "<p>I do like the \"event servers\" name, though.</p>",
  "<p>(for the general Tornado push thingy)</p>",
  "<p>OK that idea is a bit puzzling to me -- we mainly (non-long) poll presence, and there's only a tiny corner case where we send presence events at all via the existing events system.</p>",
  "<p>And I think the batching/polling model is most appropriate for presence -- trying to live-push every presence update is fundamentally a quadratic problem at best, and so one needs to manage that.</p>",
  "<p>It\u2019s just a word\u2014Python has wheels, Rust has crates, Nix has flakes. It\u2019s probably inspired by the Nix logo which looks like a snowflake.</p>",
  "<p>I guess I don't quite understand what problem we're trying to solve in this thread, trying to read it again. </p>\n<p>It looks like currently both <code>access_message</code> and <code>access_web_public_message</code> use <code>message = Message.objects.select_related(*Message.DEFAULT_SELECT_RELATED).get(id=message_id)</code>, and thus return the same type with the same fields pre-fetched.</p>",
  "<p>This seems totally fine -- this rarely called function may prefetch extra data, but it's easy to reason about.</p>",
  "<p>And I guess here is the one place it's called:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">maybe_user_profile</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n        <span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"n\">get_valid_realm_from_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">access_web_public_message</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">user_message</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">access_message</span><span class=\"p\">(</span><span class=\"n\">maybe_user_profile</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>My understanding of the Tornado bottleneck is that it mostly involves sending out the presence events.  Is that correct?</p>",
  "<p>I see the indirection to <code>get_web_public_streams_queryset</code> as making our life easier for verifying that this code follows the security model -- essentially we're arranging that we only write that check once, primarily for the main bulk message fetching code paths, and then just reuse that function rather than duplicating it here.</p>",
  "<p>I don't feel super strongly about anything here, but I do think <code>get_web_public_streams_queryset(realm)</code> feels unwieldy.  So, if the original question is satisfied, I hope we can still look at that.  This code looks like something I coded a couple months ago, and it was logical enough, and really not terrible, but <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> looked at my code for about one second and found a better way to express it.  Not sure if that applies here or not, but that code looks smelly to me.</p>",
  "<p>I agree it makes the <code>access_web_public_message</code> function implementation a bit ugly, but I guess I'm valuing the fact that it's a lot easier to check and maintain (both manually and in terms of automated tests) a single function like <code>get_web_public_streams_queryset</code> to have the right logic than it is to check 3-4 functions with slightly different semantics, and so given that we have this one-off need here....</p>",
  "<p>Fair enough.  It's all just glorified SQL to me.  I feel like there are much more difficult pieces of code to evaluate than clean SQL statements, but that's just subjective.</p>",
  "<p>Sorta. It's majority <code>heartbeat</code> events to maintain the connection in the presence of evil proxies that kill idle TCP connections, and then of the remainder, it's like 49% presence, 29% message, 2% the rest.</p>",
  "<p>Yeah, snowflake is the reference I'm missing, thanks!</p>",
  "<p>Splitting the backend into more processes has costs, mainly for RAM usage on low-RAM virtual servers which has been a steady stream of headaches for us. It also requires API changes in this case.</p>\n<p>If you\u2019re doing this experiment in an effort to understand the architecture, great, but if you\u2019re aiming to aid an incremental migration to Rust, I should note that there are other ways to orchestrate that. The one I was imagining would involve loading a Rust library into the Python process, or flipping things so a Python library is loaded into a Rust process, so that the Rust and Python parts maintain the ability to talk with each other directly.</p>",
  "<p>(And I think they\u2019re going to need to talk with each other directly for a while, so we can reuse the Django authentication middleware.)</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> generally we need to disable/delete tests in <code>test_migrations</code> when adding future migrations; <span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> has worked with those tests the most recently, and may have more to add. We should do something to improve its internal documentation about this fact, but structurally, those tests are only guaranteed to pass until the next migration is merged, which is fine, since they're only needed during the development process of a migration, not its post-development lifetime, as we rarely do future changes to them unless forced to do so.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> Can you elaborate a bit on these points?</p>\n<ul>\n<li>cost of processes on low-RAM (or even high-RAM) virtual servers</li>\n<li>why my changes require any API changes</li>\n</ul>",
  "<p>For Tornado in particular, the alternative is to move authentication to be token-based, for example, the <code>queue_id</code> is a secure random identifier.</p>\n<p>That's what we did at Dropbox when <span class=\"user-mention silent\" data-user-id=\"781\">Zev Benjamin</span> and others adapted this design for their common server=&gt;client push system.</p>",
  "<p>Yeah, I think authentication, while obviously important, is a pretty easy problem to solve.</p>",
  "<p>Well it'd be fairly complex for just about any other service, and there's still stuff like rate-limiting that we we need to either duplicate or reuse the middleware around ... but rate-limiting is also less important for a Rust implementation that is much faster at actually doing the work.</p>",
  "<p>The issue here is: Even if we write a new test in <code>test_migration</code>; we would need to move backward to a <code>migrate_from</code> state.<br>\nThe error says:</p>\n<blockquote>\n<p>django.db.utils.NotSupportedError: The RemoveIndexConcurrently operation cannot be executed inside a transaction (set atomic = False on the migration)</p>\n</blockquote>\n<p>So, we need to make sure, this test does't run inside a transaction. For that we have <code>TransactionTestCase</code>, but the whole system is designed around MigrationTestCase. Maybe we would need to design a similar <code>MigrationTestCase</code> class which inherits from <code>TransactionTestCase</code>.</p>",
  "<p>Regarding test cases without transaction wrapping, we recently added <a href=\"http://eebe46ad1c47c31e12c06617922bbd6740af9020\"><code>ZulipTransactionTestCase</code></a>, which we should probably use for <code>test_migrations</code>. But generally, we want to skip the migration once the relevant change is merged.</p>",
  "<p>In case we are writing a migration test for <a href=\"https://github.com/zulip/zulip/pull/26382\">#26382</a>, I think refactoring <code>MigrationTestCase</code> to use <code>ZulipTransactionTestCase</code> should solve the problem. We don't have legacy migration test cases to maintain that will break without the transaction, but I'm not entirely sure if the current <code>MigrationTestCase</code> relies on being wrapped inside a transaction.</p>",
  "<p>Yeah, I don't want to get too far ahead of myself here.  The current spike is 70% exploratory in nature.  The most likely outcome is to clean up some of our current Tornado code, which I suspect is gonna be around for a while, and which definitely has some flaws IMHO (all readability-related to be clear).</p>\n<p>But I do think there's value in having some kind of super-fast engine to just solve the multiplexer problem.  And I think my spike can possibly reduce friction toward making that happen.</p>\n<p>Maybe I'm just completely naive about how much it costs to start a process.  Do you always need about 500 MB to launch a multiplexer?  Or does the process just cost whatever things cost in the appropriate architecture?</p>",
  "<p>I haven\u2019t looked closely at your code but I inferred there are API changes from the need to modify the frontend code at all\u2014or is that just for debugging or something?</p>",
  "<p>I'll give it a try today!</p>",
  "<p>Extra Python processes cost memory because initializing the runtime and all the libraries we use results in heap objects that can\u2019t be shared. This is why we put all the queue runners in the same process on low-RAM systems.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/events.20server/near/1629150\">said</a>:</p>\n<blockquote>\n<p>I haven\u2019t looked closely at your code but I inferred there are API changes from the need to modify the frontend code at all\u2014or is that just for debugging or something?</p>\n</blockquote>\n<p>There's no API change, per se, but the client does need to launch a separate event loop.  I don't intend for my code to be any kind of final architecture, but if it did end up happening, there wouldn't necessarily be API changes, but there would certainly be some things to think about.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/events.20server/near/1629156\">said</a>:</p>\n<blockquote>\n<p>Extra Python processes cost memory because initializing the runtime and all the libraries we use results in heap objects that can\u2019t be shared. This is why we put all the queue runners in the same process on low-RAM systems.</p>\n</blockquote>\n<p>Ah, ok.  The whole purpose of my spike is to pave the way <strong>away</strong> from Python.  The idea is that you can crib off a 1000-line Python program that solves a simple problem (just pump out a zillion presence events to clients, but nothing else) vs. a 2300-line Python program that does a bunch of stuff that's non-essential to evaluating architecture (e.g. make sure client_gravatar gets plumbed through 5 layers of the stack).</p>",
  "<p>I'm curious about the hybrid Rust/Python approach.  I'll admit to being a bit skeptical, as it seems like the worst of both worlds.  Why not just go whole hog into a Rust solution?</p>",
  "<p>What's the memory footprint for a Rust server that listens on  a socket for a bunch of long-polling clients and just gives them Zulip data?  We're talking mostly hearbeat messages and presence payloads.  And, oh yeah, the clients who want the data have to do a one-time registration. Is that so tough?  And, oh, Django has to keep pumping stuff into a queue, which costs Rust nothing, but then Rust has to slurp data out of the queue.  The whole thing feels super lightweight to me.</p>",
  "<p>(presence payloads are tiny, to be clear)</p>",
  "<p>1M? 20M? 750 gigabytes?</p>",
  "<p>If the motivation for keeping Python in the equation is based on authentication, that just seems silly to me.  Let the Python process tell the Rust process what the authentication token is.  Obviously be super careful and thoughtful about it, but it's a solved problem.  And let <code>nginx</code> do its thing in terms of routing.  Let the clients essentially talk directly to the event server without any Python muckety-muck.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> On some relatively recent thread (&lt;  2 months) both Anders and I were ranting about performance stuff related to things like the Django ORM and whatever, and you said what the real bottlenecks in the system were.  Where are the bottlenecks?  I like performance.  I like learning new languages if that's what it takes.</p>\n<p>Am I just completely mis-remembering?</p>",
  "<p><a href=\"#narrow/stream/3-backend/topic/bulk.20caches/near/1615174\">https://chat.zulip.org/#narrow/stream/3-backend/topic/bulk.20caches/near/1615174</a></p>",
  "<p>Tim said:</p>\n<blockquote>\n<p>At the service level, that would probably start with Tornado and Presence, which are a huge fraction of our total runtime and hardly interact with the database beyond what is required to authenticate requests, and the exploration as part of those efforts will ideally be directed towards finding a model that we would feel good about moving other expensive subsystems towards using.</p>\n</blockquote>",
  "<p>I am literally following that advice to a tee with a fairly successful one-day spike, and I want to take it further if I can.  All the feedback so far has been completely constructive and helpful, but I would appreciate any re-direction if I misinterpreted the above.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/provision.20via.20nix/near/1627966\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/nix-community/poetry2nix/issues/857\">nix-community/poetry2nix#857</a> seems to be a blocker: <code>django</code> depends <code>backports.zoneinfo ; python_version &lt; \"3.9\"</code> which doesn\u2019t build on Python 3.10 and should be skipped by the environment marker, but poetry2nix tries to build it anyway.</p>\n</blockquote>\n<p>Is forking Django to remove that condition a reasonable workaround?</p>",
  "<p>I imagine we could do some sort of hand-hackery around that if need be.</p>",
  "<p>Yeah that\u2019s what this is.</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code>          <span class=\"ss\">backports-zoneinfo =</span>\n            <span class=\"k\">if</span> self<span class=\"o\">.</span>pythonAtLeast <span class=\"s2\">\"3.8\"</span> <span class=\"k\">then</span> <span class=\"no\">null</span> <span class=\"k\">else</span> super<span class=\"o\">.</span>backports-zoneinfo<span class=\"p\">;</span>\n</code></pre></div>",
  "<p><span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span> I think <a href=\"https://github.com/alexmv/kansas\">https://github.com/alexmv/kansas</a> is the thing to look at helping with if you're interested in doing Rust work on the events system -- that's a prototype that <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> started in that direction.</p>",
  "<p>Because we have a fairly clear API between the events system and the rest of the app (RabbitMQ queues), I don't think there's a great deal of benefit to looking at a Python rewrite of that part of the system vs. ding something in Rust directly.</p>",
  "<p>Rust memory footprints are likely to be insignificant compared to Python overhead.</p>",
  "<p>Kansas is a load balancer in Rust that goes in front of the unmodified Python Tornado system rather than aiming to replace it (though much of the technology stack in a replacement would be similar).</p>",
  "<p>I have some preliminary work from about a year ago toward prototyping a replacement, but not enough to demonstrate yet.</p>",
  "<p>I see. Will the migration of backend to Nix happen before the next release (7.3)?</p>",
  "<p>We\u2019re definitely not doing such a huge change in a minor release, and there\u2019s still plenty of work to be done before deciding which major release to target this for.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/events.20server/near/1629653\">said</a>:</p>\n<blockquote>\n<p>Because we have a fairly clear API between the events system and the rest of the app (RabbitMQ queues), I don't think there's a great deal of benefit to looking at a Python rewrite of that part of the system vs. ding something in Rust directly.</p>\n</blockquote>\n<p>That's where we disagree, but not my much.  I am definitely on the same page with you that we should do the rewrite in Rust directly.  I just think that it's a worthwhile intermediate step to have a minimal Python event server that only handles presence events.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/events.20server/near/1629660\">said</a>:</p>\n<blockquote>\n<p>I have some preliminary work from about a year ago toward prototyping a replacement, but not enough to demonstrate yet.</p>\n</blockquote>\n<p>Is there anything we can do to incentivize you to demonstrate it?  I don't mind looking at super raw code.  I can usually figure out what's going on in a spike.</p>",
  "<p>Actually I've found myself restarting the dev server way more often in development this week. Before, some kind of exotic rebase would be needed to throw off the dev server. Now it's like \"OMG you changed 3 lines in a JavaScript file <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span>\" In the console, Webpack says it built successfully, but the browser is getting a 500 error.</p>",
  "<p>Not every time, but often enough that I'm beginning to stop the server preemptively, which doesn't seem good.</p>",
  "<p>19 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/highlight.20topic-wildcard.20mention\">#api design &gt; highlight topic-wildcard mention</a> by <span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span>.</p>",
  "<p>Yeah, I have been having a similar experience though I tend to rebase things over long branches that it's hard to say when it started.</p>",
  "<p>A 500 error would not be coming from webpack, since webpack doesn\u2019t generate our HTML (unless you\u2019re looking at the network inspector and seeing that for a subresource?).</p>",
  "<p>It sounds like when you edited the JS file, webpack correctly triggered a page reload, which then failed because your Django process had already died for some other reason.</p>",
  "<p>I had a lot of internal errors today, and I needed to reload the dev-server after. Sometimes this was caused by commenting out a couple of lines in JavaScript or CSS.</p>\n<div class=\"codehilite\"><pre><span></span><code>Internal server error: [Errno 111] Connection refused\n</code></pre></div>",
  "<p>That indicates that your Django process has died, and editing the JavaScript or CSS is not the cause. Look at the terminal where you started <code>run-dev</code> for Python tracebacks.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> <a href=\"#narrow/stream/3-backend/topic/django-seal.20audits/near/1628178\">said</a>:</p>\n<blockquote>\n<p>Also, can you post your code as a wip PR with basic instructions of how to install django-seal (assuming you haven't touched the provisioning piece yet)?</p>\n</blockquote>\n<p>I have opened <a href=\"https://github.com/zulip/zulip/pull/26567\">#26567</a>. I had done the provisioning changes as well while installing it, so PR contains them. But as far as I remember, I just did <code>pip install django-seal</code> and tried following <a href=\"https://zulip.readthedocs.io/en/latest/subsystems/dependencies.html#python-packages\">this docs</a>.</p>",
  "<p>The PR has 4 tests failing  currently-</p>\n<ul>\n<li>One is a migration test, which I think we would remove since the PR adds a new migration.</li>\n<li>One is where test is accessing <code>recipient</code> field from UserProfile object. I don't think we should fetch <code>recipient</code> using <code>select_related</code> for all cases, since we ultimately use <code>get_user_by_delivery_email</code> to get the user in test. One easy way would be to just make a query like -</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">Recipient</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">recipient_id</span><span class=\"p\">)</span>\n</code></pre></div>\n<ul>\n<li>The other two tests are failing because of <code>default_events_register_stream</code> which is needed <a href=\"https://github.com/zulip/zulip/blob/4300ec329330869b69ba17d94e057df0b7351517/zerver/views/events_register.py#L32\">here</a>. We would need to pass <code>default_events_register_stream</code> to a couple of functions used to query UserProfile obejcts in <code>models.py</code>. I am not sure but can we use stream ID instead of name here?<br>\nThe <code>default_events_register_stream</code> and <code>default_sending_stream</code> fields are also used in <a href=\"https://github.com/zulip/zulip/blob/4300ec329330869b69ba17d94e057df0b7351517/zerver/models.py#L3965\"><code>bot_owner_user_ids</code></a>, which is called at few places to find users to whom the bot update event will be sent. I have not added these fields to <code>select_related</code> yet, but we would need to add these to a couple of the functions in <code>models.py</code> like above.</li>\n</ul>\n<p>Apart from this I have not sealed the <code>UserProfile</code> queries in tests and management commands code yet, as it would be good to get some feedback on the PR first.</p>",
  "<p>Regarding the <code>default_events_register_stream</code> and <code>default_sending_stream</code> (and probably <code>bot_owner__realm</code> too), I think we can pass it in <code>select_related</code> to almost all the commonly used functions defined in <code>models.py</code>. They would probably be <code>None</code> for most of the users (except <code>bot_owner__realm</code> which will be non-null for all bot users) and should not result in significant complexity in the query.</p>",
  "<p>Yeah I think the main issue here is actually that the Tornado process is not very good at auto-restarting successfully after rebasing, and I'm not sure why, but I think it has to do with \"restarting too early when only some of the files have changed, seeing an inconsistent state, and failing to start\".</p>",
  "<p>This is the Django process, not the Tornado process.</p>",
  "<p><code>run-dev</code> itself is still running (or it would not have been able to send you that error), but it\u2019s failing to make a connection to the Django process.</p>",
  "<p>And the Django process uses its own auto-reloader <code>django.utils.autoreload</code> that has nothing to do with Tornado.</p>",
  "<p>If the Tornado process had died, you\u2019d see a Django-formatted error like \u201cConnectionError at /: Django cannot connect to Tornado server (<a href=\"http://127.0.0.1:9993/api/v1/events/internal\">http://127.0.0.1:9993/api/v1/events/internal</a>); check /srv/zulip/var/log/errors.log and tornado.log\u201d.</p>",
  "<p>And if webpack had died, you\u2019d see an infinite loading spinner while all the CSS and JS subresources silently fail to load.</p>",
  "<p><code>default_events_register_stream</code> is a very low priority feature (I think it's basically undocumented) and I would be happy to see code paths related to it just do an extra database query to get whatever they need.</p>",
  "<p>I definitely do not want to be slowing down the app by prefetching that field anywhere - I guess it's almost always <code>None</code>, so there's not a lot of work there, but there probably is some overhead to having a <code>select_related</code> applied to something.</p>",
  "<p>Does <code>django-seal</code> have any performance impact, BTW? I would hope not much, but haven't studied how it works.</p>",
  "<p>Just to close this out, <a href=\"https://github.com/zulip/zulip/pull/26048\">#26048</a> fixes this issue and is merging today. Thanks everyone for helping figure out how to do this and write automated tests for it!</p>",
  "<p>The code won't get a ton of exercise in production at first, since we still don't have UI for subgroups, but it's great to have this base infrastructure in place such that we can count on our invariants being preserved.</p>",
  "<p><code>ZulipTransactionTestCase</code> was helpful; thanks <span class=\"user-mention silent\" data-user-id=\"19400\">Zixuan James Li</span></p>",
  "<p>One more question related to index naming in <a href=\"https://github.com/zulip/zulip/pull/26382\">#26382</a></p>\n<div class=\"codehilite\"><pre><span></span><code>models.Index(\n     &quot;user_profile&quot;,\n      &quot;message&quot;,\n       condition=Q(flags__andnz=AbstractUserMessage.flags.mentioned.mask)\n       | Q(flags__andnz=AbstractUserMessage.flags.stream_wildcard_mentioned.mask)\n       | Q(flags__andnz=AbstractUserMessage.flags.topic_wildcard_mentioned.mask),\n       name=&quot;zerver_usermessage_mentioned_or_wildcard_mentioned_message_id&quot;,\n ),\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"16839\">Abhijeet Bodas</span> suggested naming it to <code>personal_mentioned or stream_wildcard_mentioned or topic_wildcard_mentioned</code> instead of <br>\n<code>zerver_usermessage_mentioned_or_wildcard_mentioned_message_id</code>.</p>\n<p>Reason:</p>\n<blockquote>\n<p>This index is for personal_mentioned or stream_wildcard_mentioned or topic_wildcard_mentioned, correct?<br>\nWhy not name it like that? (I think it is OK to say \"stream_wildcard\" here since we are doing that rename in the next commit anyways)<br>\nAnd it is OK for index names to be very long if necessary, they don't come up anywhere in the codebase apart from migrations/models.py anyways.</p>\n</blockquote>\n<p>I named it to <code>zerver_usermessage_mentioned_or_wildcard_mentioned_message_id</code> for the reason <a href=\"https://github.com/zulip/zulip/pull/26382#discussion_r1305263257\">I explained here</a></p>",
  "<p>Thoughts?</p>",
  "<p>For <a href=\"https://github.com/zulip/zulip/pull/26515\">#26515</a>, do we want to label this issue as \"help wanted\" or is this something we want to have a core contributor pick up?</p>",
  "<p>Probably best to have a core team member do it -- I feel like a lot of the work is figuring out what the right fix is.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> I think that name is fine. Index names are mainly something you see when fairly deep in the code, and I think that name sets the right expectations.</p>",
  "<p>I believe there may be a max length in postgres, though.</p>",
  "<p>To be clear:</p>\n<p>\"that name\" here refers \"zerver_usermessage_mentioned_or_wildcard_mentioned_message_id\", right <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> ?</p>",
  "<p>Yes. Though actually thinking a bit more, we may want to do something more like <code>zerver_usermessage_any_mentioned_message_id</code>.</p>",
  "<p>To say a bit more explicitly what we have in mind without spelling out all the possibilities in the name.</p>",
  "<p>I spent a few days getting enough of my Tornado replacement prototype working to let you send messages.</p>\n<p><a href=\"https://github.com/andersk/boq\">https://github.com/andersk/boq</a> (Rust code)<br>\n<a href=\"https://github.com/andersk/zulip/commit/boq\">https://github.com/andersk/zulip/commit/boq</a> (Zulip patch)</p>\n<p>You can try it with something like</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">cd</span><span class=\"w\"> </span>boq\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--release\ncp<span class=\"w\"> </span>target/release/boq<span class=\"w\"> </span>../zulip/\n<span class=\"nb\">cd</span><span class=\"w\"> </span>../zulip/\ntools/run-dev\n</code></pre></div>\n<p>(If you need a static executable that runs on an older Ubuntu release than your host system, try <code>cargo build --release --target=x86_64-unknown-linux-musl; cp target/x86_64-unknown-linux-musl/release/boq ../zulip/</code> instead.)</p>",
  "<p>Quite off-topic, but is boq a reference to the musical <em>Wicked</em>?</p>",
  "<p>It is\u2014he\u2019s turned into the Rusty Tin Man before his love interest is crushed by the tornado.</p>",
  "<p>Was an enjoyable show to watch in person!</p>",
  "<p>OK so there's a somewhat important question that's mostly about readability that I posted <a href=\"https://github.com/zulip/zulip/pull/26382#discussion_r1307647866\">here</a>. Basically, here's the list of flags on <code>message</code> objects in the database:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">ALL_FLAGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"read\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"starred\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"collapsed\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"mentioned\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"stream_wildcard_mentioned\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># These next 4 flags are from features that have since been removed.</span>\n        <span class=\"s2\">\"summarize_in_home\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"summarize_in_stream\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"force_expand\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"force_collapse\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Whether the message contains any of the user's alert words.</span>\n        <span class=\"s2\">\"has_alert_word\"</span><span class=\"p\">,</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># Whether we've sent a push notification to the user's mobile</span>\n        <span class=\"c1\"># devices for this message that has not been revoked.</span>\n        <span class=\"s2\">\"active_mobile_push_notification\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"topic_wildcard_mentioned\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n</code></pre></div>",
  "<blockquote>\n<p>It would be kinda nice to have this be just after <code>wildcard_mentioned</code> for cleaner organization; and then maybe a future <code>group_mentioned</code> might sit just after it where <code>summarize_in_stream</code> is.</p>\n<p>I looked at the history, and <code>summarize_in_home</code> is a feature that was removed in 2014 (<a href=\"https://github.com/zulip/zulip/commit/748e5b6da6e1e55799add8db76eaa5e512927d3a\">748e5b6da6e1e55799add8db76eaa5e512927d3a</a>) while Zulip was still in private beta pre-Dropbox acquisition, so I think the only Zulip servers that might have that bit set on any are Zulip Cloud, or perhaps someone who fiddled with the API pre <a href=\"https://github.com/zulip/zulip/commit/fa77467d5d621f05b83ba155a2613eae42ee3fdf\">fa77467d5d621f05b83ba155a2613eae42ee3fdf</a>, which is likely not a concern worth thinking about much.</p>\n<p>I think it's possible that we did not do a migration to zero that bit, so some pre-2014 Zulip Cloud organizations might have some users with that flag set -- but I think we could pretty safely clear those, either directly, or via having the migration query </p>\n<p>{the set of UserMessage rows that have (mentioned|wildcard_mentioned|topic_mentioned)} - {the set of UserMessage rows that have (mentioned|wildcard_mentioned)}</p>\n<p>and setting <code>topic_wildcard_mentioned=0</code> for those -- that should be a quite fast operation before we drop the index.</p>\n</blockquote>",
  "<p>Thoughts? The main benefit for reusing those old flag indexes is just readability; which is nice but wouldn't be worth doing a complex set of migrations on our largest table to arrange.</p>",
  "<p>But as noted above, I think it might not actually be very complicated to reclaim those IDs.</p>",
  "<p>The other detail is that if we intend to in the future have a <code>group_mentioned</code> flag, which I know we've talked about before because our current design requires some messy hacks introduced in <a href=\"https://github.com/zulip/zulip/commit/3f66a9ef2bd5ab38ced2d11640a0ba899f82e347\">3f66a9ef2bd5ab38ced2d11640a0ba899f82e347</a> (see the <code>message_list_view.js</code> hunk) to compute whether a message contains a group mention or not to support our current web app design.</p>",
  "<p>If that's our ambition, then it might make sense to actually define the slots for both <code>summarize_in_home</code> and <code>summarize_in_stream</code> for <code>topic_wildcard_mentioned</code> and <code>group_mentioned</code>, and define the <code>..._any_mentioned_message_id</code> index as including both of those flags, and take care of zeroing both in this migration.</p>\n<p><code>group_mentioned</code> would still be always 0, but it'd leave us in a position where we wouldn't need to mess with the flags/indexes again to start having it be correct -- we'd just need to do the work to start writing the new field and backfill it, without having to do the very expensive index creation step here a second time.</p>",
  "<p>Yes, we can instead do extra database query for them. Will update the PR tommorrow with this change.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/django-seal.20audits/near/1631342\">said</a>:</p>\n<blockquote>\n<p>Does <code>django-seal</code> have any performance impact, BTW? I would hope not much, but haven't studied how it works.</p>\n</blockquote>\n<p>I tried profiling taking <a href=\"https://github.com/zulip/zulip/commit/759ea4be0f3bb3d5db275ab0b9c184bd6038a909#diff-e1a5432f32e42b2320203aae4dea4ef9fbb1e2417c3e377ce0c732654e5f5cba\">this commit</a> as reference. I do not know why but I cannot see the results when I am using dev server and making the changes which would call the function to be profiled.</p>\n<p>But when running the test which would call the function to be profiled, I get some results and the there is not much difference when I profiled <code>access_user_by_id</code> call which makes <code>.get</code> query to get a user object from ID when there are 1000 users in the realm.</p>",
  "<p>Great, that's probably good enough for now; we can make a note to compare graphs when we push the changes to <a href=\"http://chat.zulip.org\">chat.zulip.org</a> just in case.</p>",
  "<p>I can share the results that I got from tests tommorrow when I update the PR just to be sure.</p>",
  "<p>Ok.</p>",
  "<p>I have a simple reproducer for this. Just refresh localhost a few times (around 5) and you get internal server error.</p>",
  "<p><a href=\"/user_uploads/2/22/Cbd-DUv1HxXofcLWSerXageF/Screenshot-2023-08-29-at-7.24.28-PM.png\">Screenshot-2023-08-29-at-7.24.28-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/22/Cbd-DUv1HxXofcLWSerXageF/Screenshot-2023-08-29-at-7.24.28-PM.png\" title=\"Screenshot-2023-08-29-at-7.24.28-PM.png\"><img src=\"/user_uploads/2/22/Cbd-DUv1HxXofcLWSerXageF/Screenshot-2023-08-29-at-7.24.28-PM.png\"></a></div>",
  "<p><a href=\"https://pastebin.com/gTrqUeGx\">server log</a></p>",
  "<p>Nothing in errors.log</p>",
  "<p>I don't have historical context on this, but code-wise, this sounds like a good idea!</p>",
  "<p>Would it be possible to run a query on Zulip cloud to check how many (if at all) <code>UserMessages</code>s have those legacy bits set?</p>",
  "<p>I updated the PR to add commits to add extra database query for <code>default_sending_stream</code> and <code>default_events_register_stream</code>.</p>",
  "<p>I also tried to test the performance by modifying the code as below. So, I basically changed names of the user 10 times in dev server on a realm with ~5000 users and measured the time taken for <code>get_user_profile_by_id_in_realm</code> call, which is just a query to get user object.</p>\n<p>The average time when calling <code>.seal()</code> on the query was around 27.5 milliseconds and without calling <code>.seal()</code> on query was 28.7 milliseconds. The times were spread over from 15 to 60 milliseconds though in both the cases, so I guess there should not be much performance related concerns.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">access_user_by_id</span><span class=\"p\">(</span>\n    <span class=\"n\">user_profile</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span><span class=\"p\">,</span>\n    <span class=\"n\">target_user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span>\n    <span class=\"n\">allow_deactivated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">allow_bots</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">for_admin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">UserProfile</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Master function for accessing another user by ID in API code;</span>\n<span class=\"sd\">    verifies the user ID is in the same realm, and if requested checks</span>\n<span class=\"sd\">    for administrative privileges, with flags for various special</span>\n<span class=\"sd\">    cases.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n        <span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">get_user_profile_by_id_in_realm</span><span class=\"p\">(</span><span class=\"n\">target_user_id</span><span class=\"p\">,</span> <span class=\"n\">user_profile</span><span class=\"o\">.</span><span class=\"n\">realm</span><span class=\"p\">)</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">UserProfile</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">JsonableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"No such user\"</span><span class=\"p\">))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">st</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">access_user_common</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">user_profile</span><span class=\"p\">,</span> <span class=\"n\">allow_deactivated</span><span class=\"p\">,</span> <span class=\"n\">allow_bots</span><span class=\"p\">,</span> <span class=\"n\">for_admin</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>As Tim said, we can also compare the graphs when we push the changes to <a href=\"http://chat.zulip.org\">chat.zulip.org</a> but I would be happy to do some more testing using other ways if we want.</p>",
  "<p>Can you run the <code>dmesg</code> command and check for anything suspicious in recent lines?</p>",
  "<p>Hmm I was able to get the Django process to livelock at 100% CPU by refreshing many times.</p>",
  "<p>I suspect <a href=\"https://github.com/ijl/orjson/issues/415\">https://github.com/ijl/orjson/issues/415</a>.</p>",
  "<p>That sounds sufficient I think for premerge investigation.</p>",
  "<p>Output of dmesg:</p>\n<div class=\"codehilite\"><pre><span></span><code>[ 8342.463133] show_signal_msg: 21 callbacks suppressed\n[ 8342.463137] python3[54466]: segfault at 7ffbb86d2000 ip 00007ffbbacf8a53 sp 00007ffbab6744b0 error 7 in orjson.cpython-38-x86_64-linux-gnu.so[7ffbbace1000+2f000]\n[ 8342.463152] Code: a2 00 00 00 48 89 c7 be ff ff 10 00 ff 15 5d 84 01 00 49 89 c7 48 83 c0 48 4c 01 f3 eb 1b 66 0f 1f 84 00 00 00 00 00 49 ff c6 &lt;89&gt; 08 48 83 c0 04 49 39 de 0f 84 0c 02 00 00 41 0f b6 0e 84 c9 79\n[18738.399549] python3[127348]: segfault at 7f6f2c587116 ip 00007f6f2c587116 sp 00007f6f12733548 error 15\n[18738.399554] Code: 22 72 65 63 69 70 69 65 6e 74 5f 69 64 00 3a 33 32 2c 22 74 69 6d 65 73 74 61 6d 70 00 3a 31 36 39 33 30 38 36 35 35 30 2c 22 &lt;63&gt; 6c 69 65 6e 74 00 3a 22 49 6e 74 65 72 6e 61 6c 00 2c 22 73 75\n[141474.032636] python3[310613]: segfault at 131 ip 0000000000000131 sp 00007fb444fdd548 error 14 in python3.8[400000+23000]\n[141474.032661] Code: Bad RIP value.\n[151855.754599] traps: python3[345317] general protection fault ip:7f4262c82084 sp:7f4252b3e550 error:0 in orjson.cpython-38-x86_64-linux-gnu.so[7f4262c66000+2f000]\n[242125.724691] traps: python3[482447] general protection fault ip:7fca33885440 sp:7fca24ae24e8 error:0 in orjson.cpython-38-x86_64-linux-gnu.so[7fca33884000+2f000]\n[243539.629827] traps: python3[488377] general protection fault ip:7fdf1bf688d7 sp:7fdf07fb6510 error:0 in orjson.cpython-38-x86_64-linux-gnu.so[7fdf1bf5c000+2f000]\n[244397.791454] traps: python3[493272] trap invalid opcode ip:7f60ab4ddd36 sp:7f609be9c3f0 error:0 in orjson.cpython-38-x86_64-linux-gnu.so[7f60ab4c6000+2f000]\n[244514.912546] traps: python3[494359] general protection fault ip:7facf6123084 sp:7face6163550 error:0 in orjson.cpython-38-x86_64-linux-gnu.so[7facf6107000+2f000]\n[244666.655052] traps: python3[495173] trap invalid opcode ip:7f5dde055d36 sp:7f5dcf2983f0 error:0 in orjson.cpython-38-x86_64-linux-gnu.so[7f5dde03e000+2f000]\n[245123.051605] python3[497134]: segfault at 0 ip 00007f8aa07a5440 sp 00007f8a9117f3e8 error 4 in orjson.cpython-38-x86_64-linux-gnu.so[7f8aa07a4000+2f000]\n[245123.051648] Code: 40 31 d2 c5 fd 6f 05 1f 53 ff ff c5 fd 6f 0d 37 53 ff ff c5 e9 ef d2 31 c9 90 45 31 c0 c5 e1 ef db 66 0f 1f 84 00 00 00 00 00 &lt;c4&gt; a1 7d db 64 00 c0 c5 dd 64 e1 c5 e5 f8 dc c4 a1 7d db 64 00 e0\n</code></pre></div>",
  "<p><code>error 7 in orjson.cpython-38-x86_64-linux-gnu.so</code>: This suggests that the <code>orjson</code> library is probably the problem, just like <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> mentioned earlier.</p>",
  "<p>CZO is running 3.9.5 already, Zulip Cloud is not.  Let me see if we're seeing these crashes on CZO</p>",
  "<p>I don't see any on CZO.</p>",
  "<p>Should we revert <code>orjson</code> to 3.9.2 for now?</p>",
  "<p><a href=\"https://github.com/ijl/orjson/releases\">https://github.com/ijl/orjson/releases</a> suggests there's nothing important for security or otherwise in 3.9.3/3.9.4.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"16839\">@Abhijeet Bodas</span> there's billions of rows, and we don't have an index on those columns. So we'd have to do a table scan to do so, which is of course doable, but it's take a long time. </p>\n<p>I'm sure it's possible to do the query, but my claim is to some extent that if we write the migrations how I described them, that would clear the rows in question.</p>",
  "<p>26 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"6\" href=\"/#narrow/stream/6-frontend/topic/webpack.20woes\">#frontend &gt; webpack woes</a> by <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span>.</p>",
  "<p>Got it, makes sense. Thanks!</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/26617\">#26617</a> for the downgrade.</p>",
  "<p>Merged. Do we need to backport it too?</p>",
  "<p>Yes.</p>",
  "<p>Having a list of gradual changes that can be applied to the current system would be great. I'm happy to do some of them, and there is also <a href=\"https://github.com/RaitoBezarius\"><code>@RaitoBezarius</code></a> on GitHub who wants to help.</p>",
  "<p>I suppose it would be an elaboration of the first 2 items in <a href=\"#narrow/stream/3-backend/topic/provision.20via.20nix/near/1354366\">https://chat.zulip.org/#narrow/stream/3-backend/topic/provision.20via.20nix/near/1354366</a>.</p>",
  "<p>This now handles all event types, and is closely approaching feature parity to Tornado with just a handful of to-do items:</p>\n<ul>\n<li>API authentication,</li>\n<li>publishing <code>user_activity</code> messages,</li>\n<li>persisting queues to disk,</li>\n<li>supporting non-development configurations (database connection parameters, S3 avatar URLs),</li>\n<li>detecting <code>client_type_name</code> and <code>pronouns_field_type_supported</code> from User-Agent,</li>\n<li>a few missing access control checks.</li>\n</ul>",
  "<p>(Putting aside questions of how to integrate and deploy this, which becomes much easier with Nix.)</p>",
  "<p>Wanted to know more about the \"Add function for downloading an uploaded file\" issue and get started with its working</p>",
  "<p>How do you actually <em>retrieve</em> user status text via API? I looked through the API docs but couldn't find anything relevant.</p>",
  "<p>I'm pretty sure this is part of the events system.</p>\n<p>There's a <code>user_status</code>event type for the <a href=\"https://chat.zulip.org/api/register-queue\">/api/register-queue</a> and <a href=\"https://chat.zulip.org/api/get-events\">/api/get-events</a>. The register response will send an object with all the status of all users in the organization who have set one. And then a <code>user_status</code> event will be sent to the client when a user updates their status.</p>\n<p>There isn't currently an API endpoint for getting the status of all users in the organization though. The <a href=\"https://chat.zulip.org/api/update-status\">/api/update-status</a> endpoint is for updating the current user's status and generates the event above.</p>",
  "<p><a href=\"#narrow/stream/3-backend/topic/Add.20function.20for.20downloading.20an.20uploaded.20file.2C.20.23P628/near/1635027\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/python-zulip-api\">#backend &gt; python-zulip-api</a> by <span class=\"user-mention silent\" data-user-id=\"21836\">Lauryn Menard</span>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"27690\">@Aditi Singh</span> - Just a heads up that I moved your message to a new topic, and linked to the python-zulip-api issue in the topic name. There's a custom linkifier set up for linking to issues in that repository: <a href=\"https://github.com/zulip/python-zulip-api/pull/628\">#P628</a>.</p>",
  "<p>Hello <span class=\"user-mention\" data-user-id=\"21836\">@Lauryn Menard</span> Can you please help me in understanding the backend flow of the zulip so that I get a direction to work on the issue I  claimed</p>",
  "<p>Generally you should aim to learn enough about how the system works to be able to make progress on an issue before claiming it.</p>",
  "<p>Yeah we could in theory offer an endpoint to get status for a single user or for multiple users but I'd want to have a clear use case in mind. Can you share more about what you're trying to build?</p>",
  "<p>To keep this topic updated, I'm posting some changes since c422e98 here (thanks to <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span>'s review):</p>\n<ul>\n<li>Added <code>typed_endpoint_without_parameters</code>, and reworked parameter ignoring using keyword-only parameters.</li>\n<li>Removed the ability to override strict mode via <code>ApiParamConfig</code>, and enabled strict mode all the time regardless of <code>Json</code></li>\n<li>Improved exception handling for Pydantic validation error.</li>\n<li>Made <code>ApiParamConfig</code> picklable</li>\n<li>Renamed <code>parse_param_to_type</code> to <code>parse_value_for_parameter</code></li>\n<li>Rewrote <code>to_wild_value</code></li>\n</ul>",
  "<p>Our organization is planning to use user status to indicate who is \"on-call\". I'm planning on writing a script to look for a string in everyone's user status and manipulate external systems based on this info.</p>",
  "<p>Yeah, to highlight Tim's point, here's the section on <a href=\"https://zulip.readthedocs.io/en/latest/contributing/contributing.html#picking-an-issue-to-work-on\">picking an issue to work on</a> in the <a href=\"https://zulip.readthedocs.io/en/latest/contributing/contributing.html\">contributing guide</a>, which notes:</p>\n<blockquote>\n<p>Before you claim an issue, you should be confident that you will be able to tackle it effectively.</p>\n</blockquote>\n<p>Going through the <a href=\"https://zulip.readthedocs.io/en/latest/tutorials/index.html\">developer tutorials</a> can be a good way to get to know the codebase, but I'll note that the issue you've mentioned is not in the zulip server/web-app repository, but rather the zulip-python-api repository. So those tutorials are for a different, but related codebase.</p>",
  "<blockquote>\n<p>If that's our ambition, then it might make sense to actually define the slots for both<code> summarize_in_home</code> and <code>summarize_in_stream</code> for <code>topic_wildcard_mentioned</code> and <code>group_mentioned</code>, and define the ..._any_mentioned_message_id index as including both of those flags, and take care of zeroing both in this migration.</p>\n</blockquote>\n<p>If we'll include <code>group_mentioned</code> in <code>...any_mentioned_message_id</code> index; We'd need to perform the following operation:</p>\n<p>{the set of UserMessage rows that have (<code>mentioned|wildcard_mentioned|topic_mentioned|group_mentioned</code>)} - {the set of UserMessage rows that have (<code>mentioned|wildcard_mentioned|group_mentioned</code>)}</p>\n<p>Since we don't have an index including (<code>mentioned|wildcard_mentioned|group_mentioned</code>), this approach is not efficient?</p>",
  "<p>I think, we'll have to do the expensive index creation step twice.</p>",
  "<p>We would be zeroing the group mentioned flag too, right? So we can change values matching the new index and not the old one.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span>: Can you help me understand <a href=\"https://github.com/zulip/zulip/commit/cf0eb46afcb22a236211ee2b3e3d23b8ef924eab\">cf0eb46afcb22a236211ee2b3e3d23b8ef924eab</a> a bit better?  It swaps out:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"c1\"># The name for the index was chosen to match the name of the index Django would create</span>\n        <span class=\"c1\"># in a normal migration with AlterField of date_sent to have db_index=True:</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">RunSQL</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        CREATE INDEX CONCURRENTLY zerver_message_date_sent_3b5b05d8 ON zerver_message (date_sent);</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"p\">)</span>\n</code></pre></div>\n<p>for:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">AddIndexConcurrently</span><span class=\"p\">(</span>\n            <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s2\">\"message\"</span><span class=\"p\">,</span>\n            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"s2\">\"date_sent\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"zerver_message_date_sent_3b5b05d8\"</span><span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n</code></pre></div>\n<p>However, we already have:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">date_sent</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"s2\">\"date sent\"</span><span class=\"p\">,</span> <span class=\"n\">db_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>And migration <code>zerver/migrations/0245_message_date_sent_finalize_part1.py</code>, right before that migration, does:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">RunSQL</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">            DROP TRIGGER zerver_message_date_sent_to_pub_date_trigger ON zerver_message;</span>\n<span class=\"sd\">            DROP FUNCTION zerver_message_date_sent_to_pub_date_trigger_function();</span>\n\n<span class=\"sd\">            ALTER TABLE zerver_message ALTER COLUMN date_sent SET NOT NULL;</span>\n<span class=\"sd\">            ALTER TABLE zerver_message ALTER COLUMN pub_date DROP NOT NULL;</span>\n<span class=\"sd\">            \"\"\"</span><span class=\"p\">,</span>\n            <span class=\"n\">state_operations</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"c1\"># This just tells Django to, after running the above SQL, consider the AlterField below</span>\n                <span class=\"c1\"># as done. The building of the index actually happened in the previous migration, not here,</span>\n                <span class=\"c1\"># but nevertheless this seems like the correct place to put this fake AlterField.</span>\n                <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">AlterField</span><span class=\"p\">(</span>\n                    <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s2\">\"message\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"date_sent\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">db_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">\"date sent\"</span><span class=\"p\">),</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">),</span>\n</code></pre></div>\n<p>...which does mark the <code>zerver_message_date_sent_3b5b05d8</code> index that would be created by <code>db_index=True</code> as \"owned\"  by Django.  So having an explicit <code>AddIndexConcurrently</code> in the other migration means we're in this weird state where the index is doubly-owned (by the <code>state_operations</code>, as well as <code>AddIndexConcurrently</code>), and we have to have an explicit index for it in <code>Meta.indexes</code> despite it also being marked <code>db_index=True</code>.</p>\n<p>Reverting <a href=\"https://github.com/zulip/zulip/commit/cf0eb46afcb22a236211ee2b3e3d23b8ef924eab\">cf0eb46afcb22a236211ee2b3e3d23b8ef924eab</a> keeps makemigrations a no-op, but means we don't have the explicit index in <code>Meta.indexes</code> in addition to it being listed as <code>db_index=True</code>.</p>\n<p>Is there something I'm missing about that commit that we should keep?</p>",
  "<p>That seems like a valid complaint. That comment in 0245 wasn\u2019t placed where someone looking at 0244 would have seen it.</p>\n<p>My counter-question would be, <em>why</em> is that \u201cnevertheless\u201d the correct place to put that fake <code>AlterField</code>? It seems to me there should be one migration that does a <code>SeparateDatabaseAndState(AddIndexConcurrently(\u2026), AlterField(\u2026))</code> operation.</p>",
  "<p>Also, the <code>db_index=True</code> purports to apply to both <code>Message</code> and <code>ArchivedMessage</code>, while both the <code>RunSQL</code> and the <code>AddIndexConcurrently</code> apply only to <code>Message</code>.</p>",
  "<p>So I guess my proposal would be to remove the <code>db_index=True</code> instead.</p>",
  "<p>Yeah, <code>archived_message</code> doesn't have much call for a <code>date_sent</code> index.  That's arguably also true for most of the single-column indexes on the AbstractMessage class.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26660\">#26660</a></p>",
  "<p>Wait, maybe <code>ArchivedMessage.date_sent</code> really is indexed because it was renamed from <code>pub_date</code>.</p>",
  "<p>0243 adds it as a new column</p>",
  "<p>I don't think we did it as a rename, but rather as a complicated copy and trigger-to-double-write dance.</p>",
  "<p>OK, we essentially only use <code>zerver_archivedmessage_archive_transaction_id_3f0a7f7b</code> and <code>zerver_archivedmessage_pkey</code> on the archived messages.  So we should arguably do some dance where we move all of the single-column indexes from the abstract class' <code>db_index</code> to the <code>Message</code> list of indexes, and in so doing drop them from <code>zerver_archivedmessage</code>.</p>",
  "<p>Well uh 0246 also renames <code>pub_date</code> to it.</p>",
  "<p>...for ArchivedMessage but not Message?</p>",
  "<p>But yeah, that's wacky.</p>",
  "<p>(cc'ing <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> into the conversation if he remembers any more about these commits)</p>",
  "<p>To the earlier point about dropping the indexes from ArchivedMessage -- the table is pretty small compared to Message, so they're not all that notable in terms of size.  So it's not much gain.</p>",
  "<p>Oh I\u2019m not concerned about saving bytes, I\u2019m concerned about maintaining a correct reflection of the current state of the database from Django.</p>",
  "<p>Yeah, understood.  I was talking about making things more consistent by moving <em>all</em> of the indexes off of AbstractMessage, since the ones that <em>do</em> actually exist in the DB for ArchivedMessage are not useful there.</p>",
  "<p>Updated <a href=\"https://github.com/zulip/zulip/pull/26660\">#26660</a> to remove the <code>models.Index</code> instead.</p>",
  "<p>I <a href=\"https://github.com/ijl/orjson/issues/415#issuecomment-1710876724\">found</a> the orjson bug.</p>",
  "<p>Cool, that makes sense to me, merged.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"21236\">@shrizza</span> ok, makes sense. I think for now you can use the API noted above with just setting <code>event_types</code> to just get the statuses and it'll work fine; I don't expect any real performance impact from the inefficiency.</p>\n<p>But I think we should file an issue describing this use case for adding single-user and organization-wide <code>GET</code>s? Not a high priority but also likely not hard to do.</p>",
  "<blockquote>\n<p>Here\u2019s a question. What happens if <code>orjson.loads</code> allocates a Python object that triggers a garbage collection that invokes a destructor that calls <code>orjson.loads</code> again? (Or the destructor releases the GIL and a different thread calls <code>orjson.loads</code>?) That reentrancy will corrupt the <code>YYJSON_ALLOC</code> buffer, right?</p>\n</blockquote>\n<p>Neat! That's a fun bug.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/django.20migrations/near/1636398\">said</a>:</p>\n<blockquote>\n<p>Well uh 0246 also renames <code>pub_date</code> to it.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/django.20migrations/near/1636399\">said</a>:</p>\n<blockquote>\n<p>...for ArchivedMessage but not Message?</p>\n</blockquote>\n<p>Yeah, the whole dance with the columns is a mess - but iirc the point here was that the best way to \"rename\" <code>pub_date</code> to <code>date_sent</code> was different for the two tables:</p>\n<ol>\n<li>For <code>Message</code>, because it's large, we needed the dance with the trigger.</li>\n<li>For <code>ArchivedMessage</code>, because it's small, a simple rename was sufficient and therefore best.</li>\n</ol>\n<p>And I think the reason the wacky <code>date_sent</code> column was added to <code>ArchivedMessage</code> in the earlier migrations, just to drop it and rename <code>pub_date</code> to it in 0246 - was in order to have the two tables \"compatible\" while the lengthy 0244 migration was operating in the background, so that retention code (e.g. \"delete message\" feature) wouldn't crash.</p>\n<div class=\"codehilite\"><pre><span></span><code>        # Until now, date_sent was in ArchivedMessage only for the sake of keeping the model\n        # compatible with Message.\n        #  We can now remove it, and rename pub_date to date_sent to have this column\n        # set correctly for all existing rows.\n        migrations.RemoveField(\n            model_name=&quot;archivedmessage&quot;,\n            name=&quot;date_sent&quot;,\n        ),\n        migrations.RenameField(\n            model_name=&quot;archivedmessage&quot;,\n            old_name=&quot;pub_date&quot;,\n            new_name=&quot;date_sent&quot;,\n        ),\n</code></pre></div>\n<p>the comment should clarified that it was about keeping retention features working during the migration period, so that we wouldn't have to be guessing now</p>",
  "<p>And the resolution of the original issue discussed here in <a href=\"https://github.com/zulip/zulip/pull/26660\">#26660</a> seems right to me as well</p>",
  "<p>Cool, thanks for the additional context.</p>",
  "<p>This morning we were able to merge <a href=\"https://github.com/zulip/zulip/pull/26365\">#26365</a>, which adds this new system for parsing request parameters based on <code>Pydantic</code> and converts most of our webhook integration endpoints a few 3 normal endpoints to use it. Documentation is pending, so I recommend not trying to spend much time trying to figure out how it works -- I'd rather have more eyes fresh with questions when looking at the docs, so definitely don't worry if a bunch of the discussion above is arcane to you. </p>\n<p><a href=\"https://github.com/zulip/zulip/commit/9c539958302ddfed7f66f722bf8f9eb960eed109\">9c539958302ddfed7f66f722bf8f9eb960eed109</a> is a sample commit migrating one views file, to give a sense of what it looks like; here's the core diff that's not just editing imports:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -19,21 +20,23 @@ def clean_alert_words(alert_words: List[str]) -&gt; List[str]:</span>\n<span class=\"w\"> </span>    return [w for w in alert_words if w != \"\"]\n\n\n<span class=\"gd\">-@has_request_variables</span>\n<span class=\"gi\">+@typed_endpoint</span>\n<span class=\"w\"> </span>def add_alert_words(\n<span class=\"w\"> </span>    request: HttpRequest,\n<span class=\"w\"> </span>    user_profile: UserProfile,\n<span class=\"gd\">-    alert_words: List[str] = REQ(json_validator=check_list(check_capped_string(100))),</span>\n<span class=\"gi\">+    *,</span>\n<span class=\"gi\">+    alert_words: Json[List[Annotated[str, StringConstraints(max_length=100)]]],</span>\n<span class=\"w\"> </span>) -&gt; HttpResponse:\n<span class=\"w\"> </span>    do_add_alert_words(user_profile, clean_alert_words(alert_words))\n<span class=\"w\"> </span>    return json_success(request, data={\"alert_words\": user_alert_words(user_profile)})\n\n\n<span class=\"gd\">-@has_request_variables</span>\n<span class=\"gi\">+@typed_endpoint</span>\n<span class=\"w\"> </span>def remove_alert_words(\n<span class=\"w\"> </span>    request: HttpRequest,\n<span class=\"w\"> </span>    user_profile: UserProfile,\n<span class=\"gd\">-    alert_words: List[str] = REQ(json_validator=check_list(check_string)),</span>\n<span class=\"gi\">+    *,</span>\n<span class=\"gi\">+    alert_words: Json[List[str]],</span>\n<span class=\"w\"> </span>) -&gt; HttpResponse:\n<span class=\"w\"> </span>    do_remove_alert_words(user_profile, alert_words)\n<span class=\"w\"> </span>    return json_success(request, data={\"alert_words\": user_alert_words(user_profile)})\n</code></pre></div>",
  "<p>As you can see, in most cases the actual view code is about as short and about as readable; the <code>remove_alert_words</code> version is I think clearly cleaner, whereas the other replaced one somewhat arcane thing with a different somewhat arcane thing.</p>",
  "<p>The benefits of the new request parameter parsing system are several:</p>\n<ul>\n<li>Using more standard tooling internals means when we want to do something fancy, we don't have to do all the work of writing tooling for it with tests.</li>\n<li>For endpoints with more complex signatures/validation, we're now able to parse parameters directly to nice Python structures like dataclasses that we can then pass around to <code>actions</code> functions, rather than the poorly-typed dictionaries that the <code>check_dict</code> validator would give us; this makes it a lot easier to write type-safe code.</li>\n<li>We get to take advantage of more battle-tested third-party code for validating that our OpenAPI docs actually match the implementation for what parameters various endpoints accept. Ultimately it'll be less custom code (that is security-sensitive!) for us to maintain.</li>\n<li>As you can see, the actual API for using this stuff is generally more readable than the custom <code>has_request_variables</code> system.</li>\n</ul>",
  "<p>We don't add new endpoints particularly often, and it's pretty easy to adjust an endpoint that's been converted by just looking at surrounding code, but if you're stuck on anything before the documentation updates are out, post here and we'll help you out.</p>",
  "<p>We still have a decent amount of work before this project is finished in terms of updating our documentation, bulk-migrating all the existing API endpoints, and then deleting the <code>has_request_variables</code> system. </p>\n<p>Huge thanks to <span class=\"user-mention\" data-user-id=\"19400\">@Zixuan James Li</span> and <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> for figuring out a plan here that involved a highly reviewable giant PR -- if you'd asked me 6 months ago, I'd have said we're probably not going to change this part of the system, since it serves our needs fine and it'd be prohibitively costly to migrate for what benefit we'd get, but the plan that was eventually worked out here feels surprisingly low-cost to migrate to.</p>",
  "<p>Sent a patch, fixed in 3.9.7.</p>",
  "<p>I have updated the PR <a href=\"https://github.com/zulip/zulip/pull/26567\">#26567</a>. I have mentioned in the PR the cases where we do not all <code>.seal</code> for UserProfile queries.</p>\n<p>But we might want to first complete <a href=\"https://github.com/zulip/zulip/pull/26533\">#26533</a>, which has some pending discussions. I can complete that PR if <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> is not available currently.</p>",
  "<p>Probably worth asking with a mention: <span class=\"user-mention\" data-user-id=\"58\">@Steve Howell</span>. I should have time to do reviews and try to integrate this stuff over the next week.</p>",
  "<p>Apparently <code>ruff</code> now has an (alpha) code formatter: <a href=\"https://github.com/astral-sh/ruff/issues/1904#issuecomment-1716130700\">https://github.com/astral-sh/ruff/issues/1904#issuecomment-1716130700</a></p>",
  "<p>Issue: <a href=\"https://github.com/zulip/zulip/pull/23470\">#23470</a> PR: <a href=\"https://github.com/zulip/zulip/pull/26634\">#26634</a></p>\n<p>Zulip has an invariant that all unread messages must be in streams the user is subscribed to. Therefore, with issue <a href=\"https://github.com/zulip/zulip/pull/23470\">#23470</a>, we want to notify users about the messages that were ignored by the server when marking them as unread from a narrow like all messages.</p>\n<p>To achieve this, we are adding a field called <code>ignored_because_not_subscribed</code> in the response of <code>/messages/flags/narrow</code> which is a dictionary mapping streams to messages that were ignored by the server (as discussed <a href=\"#narrow/stream/378-api-design/topic/Not.20marked.20unread.20banner/near/1635508\">here</a>).</p>\n<p>Before adding <code>ignored_because_not_subscribed</code> to the response, we want to filter the accessible messages to prevent security bugs. The core functions for obtaining accessible messages are <code>bulk_access_message</code> and <code>access_message</code>, both of which use <code>has_message_access</code>. With this <a href=\"https://github.com/zulip/zulip/commit/c908b518ef15eee4fb768cd015e8e72261d98e93\">commit</a>, we have restricted accessing messages from previously subscribed private streams. However, messages from private unsubscribed streams might be present in the narrow, and we want to include them in <code>ignored_because_not_subscribed</code> and the notification banner.</p>\n<p>I had a discussion about this with <span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> in dms, and he suggested the following approach:</p>\n<blockquote>\n<p>One thing that we might do is to update <code>has_message_access</code> to take a <code>for_read</code> parameter and then return True if <code>for_read and has_user_message</code>.</p>\n</blockquote>\n<p>Basically, this would grant permission to access the message if the user previously had access to the message and if the message is needed for read-only purposes.</p>\n<p>Can we go with the above approach or any other suggestions?</p>",
  "<p>I found a bug here that mypy missed.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>OptionalTopic: TypeAlias = Annotated[\n<span class=\"w\"> </span>    Optional[str],\n<span class=\"w\"> </span>    StringConstraints(strip_whitespace=True),\n<span class=\"gd\">-    ApiParamConfig(whence=\"topic\", aliases=(\"subject\")),</span>\n<span class=\"gi\">+    ApiParamConfig(whence=\"topic\", aliases=(\"subject\",)),</span>\n<span class=\"w\"> </span>]\n</code></pre></div>\n<p>I think the symptom here will be that <code>update_message_backend</code> accepts aliases of <code>s</code>, <code>u</code>, <code>b</code>, <code>j</code>, <code>e</code>, <code>c</code>, <code>t</code> for <code>topic</code> instead of <code>subject</code>.</p>\n<p><a href=\"https://github.com/zulip/zulip/pull/26710\">#26710</a></p>",
  "<p>Makes me want a mypy flag for \"make me explicitly specify that I am intentionally using a string as a character iterator\"</p>",
  "<p>No that\u2019s not the bug. We specified <code>aliases: Tuple[str, ...]</code>, which does not permit <code>str</code> as a subtype. The bug is that mypy ignores expressions in <code>Annotated</code> without type-checking them at all.</p>",
  "<p>Possibly related <a href=\"https://github.com/python/mypy/issues/8750#issuecomment-1682931698\">https://github.com/python/mypy/issues/8750#issuecomment-1682931698</a></p>",
  "<p>Oh nevermind, it was referring to a different issue.</p>",
  "<p>For reference, <a href=\"https://pyright-playground.decorator-factory.su/?gzip=H4sIAG3AAGUC_0srys9VKKksyMxLV8jMLcgvKlFwzMvLL0ksSU3h4qqwQvCiM_NKdBSMFLQVlPLzC4qVYhVsFUwBWQSGrz8AAAA%3D\">pyright does check for this</a></p>",
  "<p>Related: <a href=\"https://github.com/python/mypy/issues/10872\">python/mypy#10872</a></p>",
  "<p>We no longer support Debian 10 -- should we switch back to one of the other backends, so that this failure is no longer silent?  Do we gain anything from using bmemcached?</p>",
  "<p>3 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"31\" href=\"/#narrow/stream/31-production-help/topic/missing.20postgresql.20server\">#production help &gt; missing postgresql server</a> by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>.</p>",
  "<p>Yes. But this will require some actual configuration work on both the memcached client and server sides, to migrate from the binary protocol with SASL authentication to the ASCII protocol with username+password authentication.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"25140\">@Hemant Umre</span> I think for the purpose of this API, we can just compute the set of <code>stream_id</code> values for the affected messages, and then use <code>filter_stream_authorization</code> to see which streams the user has access to -- I don't see any purpose in checking <code>has_message_access</code> on each individual message if all we're returning is a set of stream IDs anyway.</p>",
  "<p>We should rename the management command to <code>unarchive_stream</code> or something before merging <a href=\"https://github.com/zulip/zulip/pull/26684\">https://github.com/zulip/zulip/pull/26684</a>, right?</p>",
  "<p>Probably, yes.</p>",
  "<p>OK. Might be simplest for one of us to just push to that PR; I'm flexible on whether we do that in the next hour or just schedule it for backporting 7.5 rather than trying to get it into today's 7.4.</p>",
  "<p>As per the <a href=\"https://github.com/zulip/zulip/pull/25884/files#r1218280325\">discussion here</a>, we should probably move the constants used for defining system group names and descriptions from <code>UserGroup</code> class in <code>models.py</code>.</p>\n<p>This is because we need to access them in other models like <code>Realm</code> and <code>Stream</code>as well and <code>Realm</code> is defined before <code>UserGroup</code> currently, so we cannot access fields like <code>UserGroup.ADMINISTRATORS_GROUP_NAME</code> in <code>Realm</code>.</p>\n<p>So, instead of re-ordering the class definitions or duplicating the data, we can probably have a separate object or class. Would be good to have feedback on this idea or any other suggestions.</p>",
  "<p>I haven't thought about this a lot but would play with something like a data class with a structure like <code>SYSTEM_GROUPS.ADMINISTRATORS.name</code> or <code>SYSTEM_GROUPS.ADMINISTRATORS</code> if we don't need other attributes on them.</p>",
  "<p>And see what version of that sort of thing feels ergonomic to work with.</p>",
  "<p>Sorry for the delayed response. What we want is to also receive notifications for unsubscribed private streams if we had access to their messages previously, as shown in the screenshot below.</p>\n<p><a href=\"/user_uploads/2/22/P4I3lOWbH5TAlYXEKe0q9geG/image.png\">all_messages.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/22/P4I3lOWbH5TAlYXEKe0q9geG/image.png\" title=\"all_messages.png\"><img src=\"/user_uploads/2/22/P4I3lOWbH5TAlYXEKe0q9geG/image.png\"></a></div><p>If I click \"Mark as unread from here\" for the \"announce\" stream, I want to include both the unsubscribed public stream and the unsubscribed private stream in the notification banner.</p>",
  "<p>The <code>filter_stream_authorization</code> function does not fulfill this requirement since it considers unsubscribed private streams as unauthorized streams.</p>",
  "<p>To clarify, we are returning a dictionary where each entry maps a stream ID to a list of affected messages, as discussed <a href=\"#narrow/stream/378-api-design/topic/Not.20marked.20unread.20banner/near/1636298\">here</a>.</p>",
  "<p>Yeah, I think we would only need name. So, do you mean something like this -</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">SYSTEM_GROUPS</span><span class=\"p\">:</span>\n    <span class=\"n\">ADMINISTRATORS</span> <span class=\"o\">=</span> <span class=\"s2\">\"@role:administrators\"</span>\n    <span class=\"n\">MODERATORS</span> <span class=\"o\">=</span> <span class=\"s2\">\"@role:moderators\"</span>\n    <span class=\"o\">....</span>\n</code></pre></div>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> yeah.</p>",
  "<p>We're working on fixing a bug where \"Deleting a message completely does not revoke mobile push notifications.\" -- <a href=\"https://github.com/zulip/zulip/pull/26815\">#26815</a></p>\n<p><a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/message_flags.py#L216\">do_clear_mobile_push_notifications_for_ids</a></p>\n<p>Currently <code>do_clear_mobile_push_notifications_for_ids</code> is used while marking messages as read and editing a message to remove @-personal-mention.</p>\n<p>In both the cases we have either \"one user\" or \"one message\"; hence the function has an assertion: <code>assert len(user_profile_ids) == 1 or len(message_ids) == 1</code></p>\n<p>To be verbose: </p>\n<ul>\n<li>A user can mark multiple messages as read </li>\n<li>While editing a message we can remove @-mention of multiple users; so one message multiple users (to remove push notifications for)</li>\n</ul>",
  "<p>Now, for delete operation; When we delete a topic, we have the case of \"multiple users\" and \"multiple messages\".</p>\n<p>The db query that the function includes is:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">notifications_to_update</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">UserMessage</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">message_id__in</span><span class=\"o\">=</span><span class=\"n\">message_ids</span><span class=\"p\">,</span>\n            <span class=\"n\">user_profile_id__in</span><span class=\"o\">=</span><span class=\"n\">user_profile_ids</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span>\n            <span class=\"n\">where</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">UserMessage</span><span class=\"o\">.</span><span class=\"n\">where_active_push_notification</span><span class=\"p\">()],</span>\n        <span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">\"user_profile_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"message_id\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This would be expensive and can lead to timeout (quadratic work).</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"https://github.com/zulip/zulip/pull/26815#discussion_r1334618012\">said</a>:<br>\none theory is that we use the <code>deferred_work</code> queue for this. A good structure might be:</p>\n<blockquote>\n<p>If there are both multiple messages and multiple users, enqueue a <code>deferred_work</code> job for each user with the set of messages (that structure seems good given that's how the events are organized).</p>\n</blockquote>\n<p>But even that might be bad (floods the queue) if there's 20k users and 1k messages. The actual index on the usermessage table is really sparse; it's possible that just walking the full index for all usermessages in the organiation is fast enough and this operation will complete, but I'm a bit skeptical, especially given the query plan I expect this to generate which might be quadratic.</p>\n<p>This might be a thing that we can't happily do until we add a <code>UserMessage.realm</code> column (which we need for sharding) and do a <code>(realm, user_id, message_id)</code> partial index.</p>",
  "<p>Yeah I'm actually not sure what is an acceptable solution here. From a \"what is actually going to be efficient\" standpoint, probably an index on <code>(appropriate flag value), message_id</code> and doing a query that just is <code>UserMessage.objects.filter(message_id__in=message_ids)</code> (skipping the <code>user_profile_ids</code> filter which may confuse the query planner) will in practice return a modest amount of stuff; it's going to be rare for a topic that you're deleting to have more than a few active push notifications.</p>",
  "<p>So maybe the best answer involves adding such a (likely tiny) partial index and then querying it.</p>",
  "<p>Hey All, <br>\nI am new to this community but I have contributed to different open-source organizations like Oppia, and Layer5.<br>\nI have a small doubt regarding the issue <a href=\"https://github.com/zulip/zulip/issues/23022\">#23022</a> and I have raised a <a href=\"https://github.com/zulip/zulip/pull/26820\">Draft PR</a> to crosscheck if my approach is correct or not.<br>\nCan anyone of you confirm for me if my approach is good to go so that I can start working on it and make the PR reviewable?<br>\nThanks,<br>\nGopi Vaibhav</p>",
  "<p>I figured I should raise for extra visibility <a href=\"https://github.com/zulip/zulip/pull/26697#discussion_r1335063801\">https://github.com/zulip/zulip/pull/26697#discussion_r1335063801</a>, which proposes renaming the flag in the new <code>typed_endpoint</code> system (<a class=\"stream-topic\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend/topic/New.20has_request_variables.20API\">#backend &gt; New has_request_variables API</a>) for \"the body of the request parsed as JSON\": <a href=\"https://github.com/zulip/zulip/pull/26697/commits/45a81f0cc5016b0b9fe98ffc4d2f5aca0e7f644c\">https://github.com/zulip/zulip/pull/26697/commits/45a81f0cc5016b0b9fe98ffc4d2f5aca0e7f644c</a></p>",
  "<p>I think that proposed rename is definitely an improvement (not every webhook is JSON, for example) but if there's an even better idea, it would save some churn to decide that now, so figured I'd bring it up here like other renames.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"27827\">@Gopi Vaibhav</span> I would start by reading our new application feature tutorial and related docs so that you understand the system more; I think this should be a question you're able to answer for yourself after doing so.</p>",
  "<p>Given no new feedback, I intend to proceed with integrating that rename.</p>",
  "<p>Opened as <a href=\"https://github.com/zulip/zulip/pull/26889\">#26889</a> so we don't need to wait on the rest of <a href=\"https://github.com/zulip/zulip/pull/26697\">#26697</a> completing.</p>",
  "<p>I opened <a href=\"https://github.com/zulip/zulip/pull/26891\">#26891</a> to add some comments for <code>AbstractMessage</code>, since it seemed under-documented for such an important part of the codebase.</p>",
  "<p>I went ahead and pushed <a href=\"https://github.com/zulip/zulip/pull/26899\">#26899</a> which implements bulk access and bulk move operations.  It works around the lack of jsonb column with some excessive casting.</p>",
  "<p>Hello, I am about to work on issue <a href=\"https://github.com/zulip/zulip/pull/773\">#773</a> on the python-zulip-api.  I have already completed my environment setup. since  this is my first issue on zulip, I would like to know if the RATE_LIMIT_HIT has to do with the message_limit in the RateLimit class in the lib.py file of the zulip_bots. or the entire API's rate limit</p>",
  "<p>You can use <a href=\"https://github.com/zulip/python-zulip-api/pull/773\">#P773</a> to have it linkify to the right repository.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"27901\">@Fahd Mohammed</span> posted a comment on the issue but I think you might want to read <a href=\"https://zulip.com/api/rest-error-handling\">https://zulip.com/api/rest-error-handling</a> and maybe some third-party blog posts on implementing rate limiting to get some context.</p>",
  "<p>alright, sure. thanks.</p>",
  "<p>Hello <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span>  I have read a number of articles on Rate Limiting and gone through the other zulip repo.(server and web application) which has the code that's been documented in the link you shared with me as well. However, I want to know if I have to implement the sleep retry on the zulip bot RateLimit class as seen in the image attached below. <a href=\"https://github.com/zulip/python-zulip-api/pull/773\">#P773</a> . <br>\n<a href=\"/user_uploads/2/65/GlllR29JXqU-F0WuHFca-I85/Screenshot-2023-10-02-at-20.17.25.png\">Screenshot-2023-10-02-at-20.17.25.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/65/GlllR29JXqU-F0WuHFca-I85/Screenshot-2023-10-02-at-20.17.25.png\" title=\"Screenshot-2023-10-02-at-20.17.25.png\"><img src=\"/user_uploads/2/65/GlllR29JXqU-F0WuHFca-I85/Screenshot-2023-10-02-at-20.17.25.png\"></a></div>",
  "<blockquote>\n<p>but I think we could pretty safely clear those, either directly, or via having the migration query</p>\n</blockquote>\n<blockquote>\n<p>{the set of UserMessage rows that have (mentioned|wildcard_mentioned|topic_mentioned)} - {the set of UserMessage rows that have (mentioned|wildcard_mentioned)}</p>\n</blockquote>\n<blockquote>\n<p>and setting topic_wildcard_mentioned=0 for those</p>\n</blockquote>\n<p>Suppose a row has both <code>mentioned</code> and <code>topic_mentioned</code> set. So, this row would be available in both the sets. We would miss setting <code>topic_wildcard_mentioned = 0</code> for such rows, right?</p>",
  "<p>How about following these steps:</p>\n<ul>\n<li>Rename <code>summarize_in_home</code> to <code>topic_wildcard_mentioned</code> and <code>summarize_in_stream</code> to <code>group_mentioned</code></li>\n<li>Create index concurrently including <code>mentioned</code>, <code>stream_wildcard_mentioned</code>, <code>topic_wildcard_mentioned</code> and <code>group_mentioned</code>.</li>\n<li>Drop the <code>zerver_usermessage_wildcard_mentioned_message_id</code> index.</li>\n<li>Fetch usermessages utilizing the index we created and filter the rows having <code>topic_wildcard_mentioned</code> or <code>group_mentioned</code> set; set both of them to 0.</li>\n</ul>\n<p>I think the rows having mention flags would be way lesser compared to the billions of rows we have?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> I did a <code>explain analyze</code> on the query. Here's the result:</p>\n<div class=\"codehilite\"><pre><span></span><code>zulip=&gt; explain analyze SELECT &quot;zerver_usermessage&quot;.&quot;user_profile_id&quot;, &quot;zerver_usermessage&quot;.&quot;message_id&quot; FROM\n&quot;zerver_usermessage&quot; WHERE (&quot;zerver_usermessage&quot;.&quot;message_id&quot; IN (3, 4, 5, 6, 7, 8) AND\n&quot;zerver_usermessage&quot;.&quot;user_profile_id&quot; IN (7, 8, 9) AND (flags &amp; 4096 &lt;&gt; 0));\n                                                                                   QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Index Only Scan using zerver_usermessage_active_mobile_push_notification_id on zerver_usermessage  (cost=0.12..6.60 rows=17 width=8) (actual time=0.030..0.030 rows=0 loops=1)\n   Index Cond: ((user_profile_id = ANY (&#39;{7,8,9}&#39;::integer[])) AND (message_id = ANY (&#39;{3,4,5,6,7,8}&#39;::integer[])))\n   Heap Fetches: 0\n Planning Time: 0.876 ms\n Execution Time: 0.051 ms\n(5 rows)\n</code></pre></div>\n<p>As you already mentioned, </p>\n<blockquote>\n<p>it's going to be rare for a topic that you're deleting to have more than a few active push notifications.</p>\n</blockquote>\n<p>I think the query would be actually pretty fast?</p>",
  "<p>It uses this index:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"user_profile\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"message\"</span><span class=\"p\">,</span>\n         <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span>\n            <span class=\"n\">flags__andnz</span><span class=\"o\">=</span><span class=\"n\">AbstractUserMessage</span><span class=\"o\">.</span><span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">active_mobile_push_notification</span><span class=\"o\">.</span><span class=\"n\">mask</span>\n         <span class=\"p\">),</span>\n         <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"zerver_usermessage_active_mobile_push_notification_id\"</span><span class=\"p\">,</span>\n     <span class=\"p\">)</span>\n</code></pre></div>",
  "<p>It'll be fast on a server with few mobile push notifications. On Zulip Cloud, you have all the mobile notifications for every organization added together, and I'm pretty sure that can be slow if moving a topic with 1k messages in an organization with 20k users, because I think basically the best query plan for that is just to walk every <code>active_mobile_push_notification</code> on the server.</p>\n<p>Maybe I did my testing wrong; probably a thing for <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> to experiment with a bit as he has more time.</p>\n<p>(We do need to put <code>realm_id</code> into <code>usermessage</code> eventually for other reasons, but it's not a thing I really want to do this year if we can avoid it)</p>",
  "<p>Yes, mention flags are fairly sparse, and we can just walk all of them.</p>",
  "<p>Hm, I think that the partial index on \"active push notifications\" is always going to be pretty small?</p>",
  "<p>As long as we're doing the UPDATE for the flags in a single SQL statement (or is this a DELETE?), and not iterating over them and using <code>bulk_update</code>, I think this should be reasonably fast.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> </p>\n<p>This is related to <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/message_flags.py#L216\"><code>do_clear_mobile_push_notifications_for_ids</code></a></p>\n<p>This is a SELECT query. </p>\n<p>For a given set of <code>message_ids</code> and <code>user_profle_ids</code> we fetch the user messages having <code>active_mobile_push_notification</code> flag set and remove them from <code>missedmessage_mobile_notifications</code> queue.</p>",
  "<p>Ah, they get enqueued, right.</p>",
  "<p>Well, enqueued to be dequeued. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>I just did a quick test in a large realm in Zulip Cloud, selecting 1000 random messages and 100 random users, and it ran as an INDEX ONLY SCAN in 150ms.</p>",
  "<p>It did return 0 rows, since they were random message/user pairs, but it's the same amount of work regardless.</p>",
  "<blockquote>\n<p>I think that the partial index on \"active push notifications\" is always going to be pretty small?</p>\n</blockquote>\n<p>So, it's not the case then.</p>",
  "<p>I don't think I follow?</p>",
  "<p>Oh my bad, sorry, I missed the \"large realm\" part and thought \"150ms\" being a bad metric.</p>",
  "<p>No, for 100,000 usermessage rows, that's reasonable.  Processing those push notifications is going to be the bigger bottleneck.</p>",
  "<p>To add some context, this is needed while \"deleting a topic\".</p>",
  "<p>Yeah, I get that -- we still send a notification to the phone in that case, no?</p>",
  "<p>Yes, to those users for messages that have active push notifications.</p>",
  "<p>The thing I'm worried about with deleting a topic is the case where it's 1000 messages and 10000 users. I expect in most cases the actual number of active mobile push notifications for a topic being deleted to be &lt;10 -- people often delete old topics, etc.</p>",
  "<p>We would need multiple queries to get users who can be accessed by a guest user, so just wanted to discuss once about how to make sure that the queries do not impact performance.</p>\n<p>The queries we would need to do -<br>\n1) Query to get subscribers of the streams subscribed by guest.<br>\n2) Query to get the participants of group DMs.<br>\n3) Query to get the senders of messages for which the guest has <code>UserMessage</code> rows.<br>\n4) Query to get the users that the guest had sent DMs to but the user has not responed yet, so it is not covered by the above query for <code>UserMessage</code> rows. This can happen when guest previously had access to all users but then the setting was changed.</p>",
  "<p>For (1), we can do two queries - one to get streams subscribed by the guest and then one to get subscribers of the stream or we can just do one complex query including a subquery.</p>\n<p>For(2), we would need to similar queries like we did for streams.</p>\n<p>Since we use <code>Subscription</code> table for both stream and huddle members, we can actually get the users who are part of the subscribed streams and huddles using the same queries on <code>Subscription</code> table.</p>",
  "<p>For (3), we would need to query the <code>UserMessage</code> rows to get the sender of all the messages for which the guest user has <code>UserMessage</code> rows. </p>\n<p>For (4), one way can be to just do a single query like <code>Message.objects.filter(sender=guest_user, recipient__type=Recipient.PRIVATE).values_list(\"recipient__type_id\")</code>.</p>",
  "<p>Just wanted some suggestions here on how to optimize it. This query will be executed when sending the users data in <code>page_params</code> and <code>/register</code> response. And may also be needed while doing API checks like, can the guest user send DM to a particular user or can mention a user.</p>\n<p>So, any feedback on like whether we would need to write these queries in raw SQL instead of using Django ORM or add any new indexes would be helpful.</p>",
  "<p>For (3), I don't think we need <code>UserMessage</code>; just this is roughly <code>Message.objects.filter(recipient=user_profile).values(\"sender\").distinct()</code>. Longer term I think we're probably going to move to having <code>Huddle</code> objects for direct messages and that will let this just use the same query as in (1) -- just getting the distinct subscribers to the users' streams.</p>",
  "<p>That (3) query is probably not going to be incredibly cheap for users who've received a lot of DMs; but that's probably not the common case with guests.</p>",
  "<p>I guess we should also keep in mind we need to write two functions:</p>\n<ul>\n<li><code>can_access_user_for_read(user_id)</code> would be a single-target-user form that could be a lot cheaper than the \"everyone this user can access\" query needed for things like presence.</li>\n</ul>",
  "<p>(3) is for the senders of message for which the guest has <code>UserMessage</code> rows. So it will also include the case where a user sent message to a stream the guest is subscribed to, i.e. guest has a <code>UserMessage</code> row for it but the user then unsubscribes from the stream, so not for DMs only.</p>",
  "<p>I just ran that query in a large realm, taking the most recent 1k messages and the earliest 10k users -- it took 13s, and returned 6k rows.</p>\n<p>I expect a non-trivial part of that time is even <em>parsing</em> the query, since it comes in at 80k of text.</p>",
  "<p>Oh, I see. What do we need those users for? I don't think that can be cheaply computed.</p>",
  "<p>I don't think that there's a necessarily better query plan than that, however.</p>",
  "<p>Well the idea I was thinking about is to just query ALL UserMessage corresponding to messages in that set with <code>active_mobile_push_notification</code>. The set of users is not actually a useful constraint (it's roughly the set of all users who are subscribed to the stream, i.e. the set of users who might have a UserMessage) and is most of that parsing work.</p>",
  "<p>I don't think that filtering for that in Python is going to be any faster?</p>",
  "<p>We discussed about allowing access to all users from which the guest has received a message. So, the case which I mentioned above like a user who sent a message to a stream but then unsubscribed from the stream, will not be included in other cases.</p>",
  "<p>Which is why I was thinking we might want a new partial index on <code>(active_mobile_push_notification_flag=True, message)</code>.</p>",
  "<p>I don't think we need to filter in Python at all, really, but we could do that with a <code>Set</code> of users to process if we need to.</p>",
  "<p>But then we have to go though those results to filter down to the users which match, in python, which seems slower than doing it in the database.</p>",
  "<p>But the whole point is we're revoking the like &lt;50 active mobile push notifications that were generated among a set of 1K messages, and we happen to have the set of 10K users who they might be for. But fundamentally the actual task is to get those 50 active mobile push notification rows and cancel them, the set of users is a distraction here.</p>",
  "<p>The fact that <code>active_mobile_push_notification=True</code> implies from a business logic perspective that the user is one of those 10K users.</p>",
  "<p>(Since we don't trigger push notifications for users who are not subscribed to a stream in the first place).</p>",
  "<p>And then Python only processes the 50 results that were returned, which will of course be fast.</p>",
  "<p>Yeah, I know that's what we were thinking, but if it's not implementable in a performant fashion, I think we can probably cut that.</p>",
  "<p>Ahh, I see your point.  Dropping the user limit (which switches it to <em>just</em> the <code>message_id</code> index) seems to run in 120ms.</p>",
  "<p>And produces 7.5k rows as opposed to the correct 6k rows.  So it's not just 50 results, but it's not a difference of 50k rows.</p>",
  "<p>Adding the partial index on <code>active_mobile_push_notification_flag</code> will also drop that 120ms even lower.</p>",
  "<p>But indexes on usermessage are not cheap, so there's a bit of a question of if it's worth it.</p>",
  "<p>Hmm, is this sort of small partial index cheap? I guess I don't know the impact on update cost, but the disk space cost should be minimal.</p>",
  "<p>The other strategic option is we could just move <code>active_mobile_push_notification</code> to live in a separate table rather than being a flag on <code>UserMessage</code>.</p>",
  "<p>I've not really thought through the trade-offs around that; but it would provide some isolation from costs related to <code>UserMessage</code>.</p>",
  "<p>I checked Zulip Cloud, but it's about 1/200th the size of a full index on the table.  So not nothing, but not tiny (unlike the starred message index, which is <em>tiny</em>)</p>",
  "<p>I cannot think of any better way to do this. I am fine with just giving access to only the stream subscribers and the DM and group DM users. Should we discuss this in <a class=\"stream\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design\">#design</a> first?</p>",
  "<p>I have updated the PR <a href=\"https://github.com/zulip/zulip/pull/26382\">#26382</a></p>",
  "<p>Yes please post there.</p>",
  "<p>Posted a bunch of feedback! I think <a href=\"https://github.com/zulip/zulip/pull/26382/commits/4f550840f35ac9ee3dad9d404d2056f90f521507#r1349301003\">this question</a> deserves some extra eyes on it:</p>\n<blockquote>\n<p>Would it be a better index to instead index on:<br>\n<code>condition=Q(flags__andnz=AbstractUserMessage.flags.mentioned.mask | AbstractUserMessage.flags.stream_wildcard_mentioned.mask | AbstractUserMessage.flags.topic_wildcard_mentioned.mask | AbstractUserMessage.flags.group_mentioned.mask)</code>, so that we're asking the database to do a single bitmask check, rather than 4 parallel ones. </p>\n</blockquote>",
  "<p>I guess the main difference is that if we make the index be on rows containing the OR of the 4 different mask terms, that is probably a slightly more expensive index to maintain and for the query planner to reason about ... but it's also perhaps more theoretically likely that Postgres can figure out on its own that a query for one of these indexes could be done using this index?</p>",
  "<p>I don't know how the postgres query planner handles that but I also think it doesn't matter -- I'd expect if we wanted to pull out just <code>topic_mentioned</code> rows for some reason, we could hint the database pretty clearly by filtering on <code>where_mentioned</code>  as well as <code>Q(flags__andnz=AbstractUserMessage.flags.mentioned.mask)</code>, and it'd naturally filter using our \"any mention\" index and then hand-check those for whatever matches the specific flag, rather than doing a table scan.</p>\n<p>(I'm assuming the database is not smart enough to figure out that the mask asked for is a subset of a mask it has a partial index on)</p>",
  "<p>where is the helm chart repo ? I did not find in docs</p>",
  "<p>This topic was moved to <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/Reminde.20me.20of.20message.20in.20.3Ctime.3E.20API.20.2321810\">#api design &gt; Reminde me of message in &lt;time&gt; API #21810</a> by <span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span>.</p>",
  "<p><a href=\"#narrow/stream/3-backend/topic/helm.20chart/near/1658354\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"2\" href=\"/#narrow/stream/2-general/topic/Contribution\">#general &gt; Contribution</a> by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"28118\">@West Farmer</span> it's in the main <code>docker-zulip</code> repository: <a href=\"https://github.com/zulip/docker-zulip/tree/main/kubernetes/chart/zulip\">https://github.com/zulip/docker-zulip/tree/main/kubernetes/chart/zulip</a></p>",
  "<p>(Possibly this is something that should be better documented)</p>",
  "<p>I'm not seeing any magic around bitwise indexes in the psotgres source (though I may well be missing it, so it's worth testing).  So my gut is that a single wide <code>flags__andnz=</code> condition isn't actually going to be used.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/queries.20to.20get.20accessible.20users.20.2310970/near/1656129\">said</a>:</p>\n<blockquote>\n<p>I guess we should also keep in mind we need to write two functions:</p>\n<ul>\n<li><code>can_access_user_for_read(user_id)</code> would be a single-target-user form that could be a lot cheaper than the \"everyone this user can access\" query needed for things like presence.</li>\n</ul>\n</blockquote>\n<p>Yeah I have added such a function and it is somewhat cheaper as we only need to check whether a subscription exists or a DM exists.</p>\n<p>We would also need a function to get \"Which guest users can access this user\" to make sure we sent update events for names, role and emails only to those who can access them.</p>",
  "<p>Can you explain that? The main query that we need is on exactly the set of items that match the index -- messages that contain any of these types of mentions. (We may in the future decide we want to query subsets, but I don't think we have a caller that would use that today)</p>",
  "<p>And I would hope if we have a query on <code>Q(flags__andnz=AbstractUserMessage.flags.mentioned.mask | AbstractUserMessage.flags.stream_wildcard_mentioned.mask | AbstractUserMessage.flags.topic_wildcard_mentioned.mask | AbstractUserMessage.flags.group_mentioned.mask)</code> and a partial index on that precise mask, that it'll be used.</p>",
  "<p>I think that the query planner will not use <code>CREATE INDEX foo ON bar(baz, troz, zort) WHERE bitfield &amp; 7 &lt;&gt; 0</code> to match a query which is <code>SELECT * FROM foo WHERE bitfield &amp; 4 &lt;&gt; 0 AND bitfield &amp; 2 &lt;&gt; 0 AND bitfield &amp; 1 &lt;&gt; 0</code>, and vice versa.  But I have no way to test this.</p>",
  "<p>ISTR it can\u2019t even match <code>bitfield &amp; 1 &lt;&gt; 0</code> to <code>bitfield &amp; 1 = 1</code>, which has forced us to write extra code to deal with mismatches between the conventions of django-bitfield and our historical indexes.</p>",
  "<p>News to me but wouldn't surprise me.  The partial index is <em>really</em> picky about how it matches.</p>",
  "<p>(This has made me wonder if we\u2019re getting any value out of django-bitfield at all.)</p>",
  "<p><code>django-bitfield</code> definitely feels nice for code that isn't trying to fetch messages, like the <code>create_user_messages</code> code path. It's probably only ~50 lines of <code>UserMessage</code> code that benefit from that syntax (and that's our only bitfield), and I imagine we could write something not too much worse if we did our own thing.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/topic_wildcard_mentioned.20flag/near/1659512\">said</a>:</p>\n<blockquote>\n<p>I think that the query planner will not use <code>CREATE INDEX foo ON bar(baz, troz, zort) WHERE bitfield &amp; 7 &lt;&gt; 0</code> to match a query which is <code>SELECT * FROM foo WHERE bitfield &amp; 4 &lt;&gt; 0 AND bitfield &amp; 2 &lt;&gt; 0 AND bitfield &amp; 1 &lt;&gt; 0</code>, and vice versa.  But I have no way to test this.</p>\n</blockquote>\n<p>Yeah, I'd expect that as well. We need to make the <code>where_mentioned</code> function that constructs these queries do the exact same convention as what we put into the index. </p>\n<p>The decision we're trying to make is which of those two conventions we want to use -- 4 individual bit checks ANDed together or a single bitfield check with a larger number that had 4 bits true.</p>",
  "<p>My initial thinking had been that it's almost certainly better to do the single mask with a number that has 4 bits true if we're only able to use that exact query anyway, and I think we haven't identified a reason to do something different?</p>",
  "<p>It's not \"better\" since the only thing it affects is if postgresql chooses the partial index.  The actual plan or what-not is irrelevant, since the <em>contents</em> of the two ways of forming the index is identical.</p>",
  "<p>Oh, having a shorter query that involves less arithmetic I would expect to result in queries that are easier to read/debug/work with; might be some essentially negligible performance benefit too but I think that's very much secondary.</p>",
  "<p>We could attempt to test this by making some indexes on Zulip Cloud and comparing how they run -- I've held off on that because these are the biggest tables, and so doing that is not lightwieght.  But my instinct would be to just stick with the same scheme as we currently have (of OR'ing the conditions) -- I don't find the argument of \"easier to read\" all that compelling, personally.</p>",
  "<p>Yeah, we can just try creating one index or the other on <a href=\"http://chat.zulip.org\">chat.zulip.org</a> to test. But my expectation is that it's going to be a easier for the query planner to decide to use the index when only a single clause in a complex <code>AND</code> sequence is</p>\n<p>At least AFAIK, postgres has no special logic for bitmasks targeting a single bit, and thus a single <code>WHERE bitfield &amp; 15 &lt;&gt; 0</code> as what we're using (both in the query and the partial index construction) seems like it should Just Work than <code>WHERE bitfield &amp; 8 &lt;&gt; 0 AND bitfield &amp; 4 &lt;&gt; 0 AND bitfield &amp; 2 &lt;&gt; 0 AND bitfield &amp; 1 &lt;&gt; 0</code>, especially if we also have like 4 other operators filtering on the <code>message</code> table in that same query. In which case the Postgres query planner has to figure out that particular set of 4/8 of the terms in its AND construction already has a partial index.</p>\n<p>Postgres does seem smart enough to do that correctly with our current setup with 2 such things ANDed together, but this seems like something one can't expect to scale.</p>",
  "<p>To be concrete, I'm thinking that <code>WHERE user_message.message_id = message.id AND user_message.bitfield &amp; 15 &lt;&gt; 0 AND user_message.user_profile_id = 17 AND message.sender_id = 34 AND message.has_image</code> for your <code>has:mention has:image sender:34</code> search feels like something any basic query planner should figure out it should consider using our index on <code>(user_profile_id, message_id) WHERE user_message.bitfield &amp; 15 &lt;&gt; 0</code>, but it seems like a much fancier query planner may be needed if our index is itself on an <code>AND</code> of 4/8 of those <code>WHERE</code> clauses.</p>",
  "<p>In <code>actions/message_edit.py</code> we have the following query:</p>\n<div class=\"codehilite\"><pre><span></span><code>        UserMessage.objects.filter(\n            message=message_id,\n            flags=~UserMessage.flags.historical,\n        )\n        .filter(Q(flags__andnz=UserMessage.flags.mentioned | UserMessage.flags.wildcard_mentioned))\n        .values_list(&quot;user_profile_id&quot;, flat=True)\n</code></pre></div>\n<p>and currently it doesn't use the index due to</p>\n<blockquote>\n<p>Q(flags__andnz=UserMessage.flags.mentioned | UserMessage.flags.wildcard_mentioned)</p>\n</blockquote>\n<p>Should I do a small PR to fix this or I think we can wait for our final decision here. If we eventually decide to use <code>bitfield &amp; 15 &lt;&gt; 0</code>approach then that fix is not needed, our new index will be used.</p>",
  "<p>We should change it to use where_mentioned, probably?</p>\n<p>But I also think we can probably safely go with the 15 approach if you want to get that ready, I can test it tomorrow here.</p>",
  "<p>We discussed earlier that why a function like <code>where_any_mentioned</code> is not much helpful right now<br>\n<a href=\"https://github.com/zulip/zulip/pull/26382/#discussion_r1307625742\">#26382 (comment)</a> and <a href=\"https://github.com/zulip/zulip/pull/26382/#discussion_r1307629110\">(comment)</a></p>\n<blockquote>\n<p>I guess because this is SQLAlchemy, we can't use a common models.py function</p>\n</blockquote>",
  "<p>Yeah we can't do that with sqlalchemy, but we would avoid hand coding it outside models.py in Django code.</p>",
  "<p><code>zerver/lib/models.py</code> is about 5K lines of code, which is certainly well past the point where it needs to be split.</p>",
  "<p>I think at a high level, we should use the same approach we took for splitting <code>actions.py</code>: making files for individual clusters of model classes (E.g. all the subclasses of <code>AbtractMessage</code> and <code>AbstractUserMessage</code> would be in <code>zerver/models/message.py</code>).</p>\n<p>We would start with a rename to <code>zerver/models/__init__.py</code> to avoid having to change other code. We might want that file to re-export all the models long term to avoid requiring making importing necessary models more verbose; not sure but in any case, it'll be nice to move code without changing like 500 import lines each time.</p>",
  "<p>There's like a handful of functions that probably don't belong in those files:</p>\n<ul>\n<li><code>validate_attachment_request</code>, <code>get_old_unclaimed_attachments</code> seem like they belong in <code>zerver/lib/attachments.py</code></li>\n<li>The <code>display_recipient</code> stuff at the top probably belongs in <code>zerver.lib.display_recipient</code>?</li>\n</ul>\n<p>But most of the other code is just model classes and accessors like <code>get_user_profile_by_id</code>.</p>",
  "<p>So I think a proposal to split it would basically just involve an assignment of where stuff in <code>git grep '^class ' zerver/models.py</code> goes.</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># zerver/models/realm_emoji.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">EmojiInfo</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmEmoji</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># unused?</span>\n<span class=\"k\">class</span> <span class=\"nc\">AndZero</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Lookup</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]):</span>\n<span class=\"k\">class</span> <span class=\"nc\">AndNonZero</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Lookup</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]):</span>\n\n<span class=\"c1\"># zerver/models/realms.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmAuthenticationMethod</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Realm</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmDomain</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">DomainNotAllowedForRealmError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">DisposableEmailError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">EmailContainsPlusError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmDomainDict</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n<span class=\"c1\"># Needs to be with `get_fake_email_domain`</span>\n<span class=\"k\">class</span> <span class=\"nc\">InvalidFakeEmailDomainError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/linkifiers.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmFilter</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"c1\"># zerver/models/realm_playground.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmPlayground</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/recipients.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">Recipient</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Huddle</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/users.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserBaseSettings</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmUserDefault</span><span class=\"p\">(</span><span class=\"n\">UserBaseSettings</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserProfile</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseUser</span><span class=\"p\">,</span> <span class=\"n\">PermissionsMixin</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">PasswordTooWeakError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/groups.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserGroup</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>  <span class=\"c1\"># type: ignore[dja</span>\n <span class=\"n\">custom</span> <span class=\"n\">CTEManager</span> <span class=\"n\">yet</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">typeddja</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserGroupMembership</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">GroupGroupMembership</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/prereg_users.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">PreregistrationRealm</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">PreregistrationUser</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">MultiuseInvite</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">EmailChangeStatus</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmReactivationStatus</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/push_notifications.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractPushDeviceToken</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">PushDeviceToken</span><span class=\"p\">(</span><span class=\"n\">AbstractPushDeviceToken</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/streams.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">Stream</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Subscription</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">DefaultStream</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">DefaultStreamGroup</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/user_topics.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserTopic</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/muted_users.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">MutedUser</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/clients.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">Client</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/messages.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractMessage</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ArchiveTransaction</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ArchivedMessage</span><span class=\"p\">(</span><span class=\"n\">AbstractMessage</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"p\">(</span><span class=\"n\">AbstractMessage</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractSubMessage</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">SubMessage</span><span class=\"p\">(</span><span class=\"n\">AbstractSubMessage</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ArchivedSubMessage</span><span class=\"p\">(</span><span class=\"n\">AbstractSubMessage</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractEmoji</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractReaction</span><span class=\"p\">(</span><span class=\"n\">AbstractEmoji</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Reaction</span><span class=\"p\">(</span><span class=\"n\">AbstractReaction</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ArchivedReaction</span><span class=\"p\">(</span><span class=\"n\">AbstractReaction</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractUserMessage</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserMessage</span><span class=\"p\">(</span><span class=\"n\">AbstractUserMessage</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ArchivedUserMessage</span><span class=\"p\">(</span><span class=\"n\">AbstractUserMessage</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractAttachment</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ArchivedAttachment</span><span class=\"p\">(</span><span class=\"n\">AbstractAttachment</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Attachment</span><span class=\"p\">(</span><span class=\"n\">AbstractAttachment</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/drafts.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">Draft</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/user_activity.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserActivity</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserActivityInterval</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/presence.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserPresence</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/user_status.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserStatus</span><span class=\"p\">(</span><span class=\"n\">AbstractEmoji</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/custom_profile_fields.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomProfileField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomProfileFieldValue</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n\n\n<span class=\"c1\"># zerver/messages/scheduled_jobs.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractScheduledJob</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ScheduledEmail</span><span class=\"p\">(</span><span class=\"n\">AbstractScheduledJob</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">MissedMessageEmailAddress</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">NotificationTriggers</span><span class=\"p\">:</span>\n<span class=\"k\">class</span> <span class=\"nc\">ScheduledMessageNotificationEmail</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Mod</span>\n<span class=\"k\">class</span> <span class=\"nc\">APIScheduledStreamMessageDict</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">APIScheduledDirectMessageDict</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">ScheduledMessage</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/realm_audit_log.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractRealmAuditLog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">RealmAuditLog</span><span class=\"p\">(</span><span class=\"n\">AbstractRealmAuditLog</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/bots.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">BotStorageData</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">BotConfigData</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Service</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/alert_words.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">AlertWord</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># zerver/models/user_hotspots.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserHotspot</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n</code></pre></div>",
  "<p>There are a few <code>TypedDict</code> in this list. Are there probably some that needs to be moved to/from <code>zerver/lib/types.py</code>?</p>",
  "<p>I think there's no strong requirement that code live in <code>types.py</code> just because it's a type; some types are local to a file and it's usually clearest to declare them there. The main reason to put code in that file is because it's a type used in several places in the codebase.</p>",
  "<p>Yeah, we shouldn\u2019t aim to be dumping all our types in <code>types.py</code>. We originally created <code>types.py</code> (<a href=\"https://github.com/zulip/zulip/commit/17937175ac6329f219f88b3f6bd10e4f27c4a280\">17937175ac6329f219f88b3f6bd10e4f27c4a280</a>) to solve a specific technical problem that no longer even exists (<a href=\"https://github.com/zulip/zulip/commit/7e92ff9d0a5b6909010c1fcd6cf25a409cb5909b\">7e92ff9d0a5b6909010c1fcd6cf25a409cb5909b</a>).</p>",
  "<p>Most types should live close to the values they\u2019re typing.</p>",
  "<p>We could probably just delete <code>types.py</code> at this point and move its contents into the appropriate files.</p>",
  "<p>Yeah, I agree with that. Probably worth waiting to do that until after we've split <code>models.py</code>, since I think in some cases those types will move to <code>models.py</code> as the return types for functions like <code>Stream.to_dict</code> that are defined there.</p>",
  "<p>Hello !<br>\nI have a problem with HELM Chart </p>\n<div class=\"codehilite\"><pre><span></span><code>helm repo add zulip https://github.com/zulip/docker-zulip\n</code></pre></div>\n<p>problem is here -&gt; answer:</p>\n<div class=\"codehilite\"><pre><span></span><code>Error: looks like &quot;https://github.com/zulip/docker-zulip&quot; is not a valid chart repository or cannot be reached: failed to fetch https://github.com/zulip/docker-zulip/index.yaml : 404 Not Found\n</code></pre></div>\n<p>Please create <strong>index.yaml</strong></p>",
  "<p>Let me make a couple test indexes here on CZO to have something concrete to talk about.  Personally, I do not think that PostgreSQL has any problems with pulling out multiple AND'd fields to use the right partial index.</p>",
  "<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">create</span><span class=\"w\"> </span><span class=\"k\">index</span><span class=\"w\"> </span><span class=\"k\">concurrently</span><span class=\"w\"> </span><span class=\"n\">test_usermessage_multi_fields</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span>\n<span class=\"go\">CREATE INDEX</span>\n</code></pre></div>\n<p>Best of 5 runs:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"n\">zulip</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">analyze</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">5000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">(</span><span class=\"n\">message_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">);</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL EXPLAIN dialect\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">Finalize </span><span class=\"k\">Aggregate</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nc\">cost</span><span class=\"p\">=</span><span class=\"mf\">12093001.65</span><span class=\"p\">..</span><span class=\"mf\">12093001.66</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">220.120</span><span class=\"p\">..</span><span class=\"mf\">238.768</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"k\">Gather</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nc\">cost</span><span class=\"p\">=</span><span class=\"mf\">12093001.43</span><span class=\"p\">..</span><span class=\"mf\">12093001.64</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">219.190</span><span class=\"p\">..</span><span class=\"mf\">238.741</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"cp\">Workers Planned</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">         </span><span class=\"cp\">Workers Launched</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">         </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"cp\">Partial </span><span class=\"k\">Aggregate</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nc\">cost</span><span class=\"p\">=</span><span class=\"mf\">12092001.43</span><span class=\"p\">..</span><span class=\"mf\">12092001.44</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">198.309</span><span class=\"p\">..</span><span class=\"mf\">198.311</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"cp\">Parallel </span><span class=\"k\">Bitmap Heap Scan</span><span class=\"w\"> </span><span class=\"p\">on</span><span class=\"w\"> </span><span class=\"nv\">zerver_usermessage</span><span class=\"w\">  </span><span class=\"nc\">(cost</span><span class=\"p\">=</span><span class=\"mf\">6166.67</span><span class=\"p\">..</span><span class=\"mf\">12090848.00</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">461374</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">(actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">145.691</span><span class=\"p\">..</span><span class=\"mf\">197.977</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">3526</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"cp\">Recheck Cond</span><span class=\"nv\">: ((user_profile_id &lt; 5000) AND (((flags &amp; '8'::bigint) &lt;&gt; 0) OR ((flags &amp; '16'::bigint) &lt;&gt; 0) OR ((flags &amp; '32'::bigint) &lt;&gt; 0) OR ((flags &amp; '64'::bigint) &lt;&gt; 0)))</span>\n<span class=\"w\">                     </span><span class=\"cp\">Filter</span><span class=\"nv\">: (mod(message_id, 7) = 0)</span>\n<span class=\"w\">                     </span><span class=\"ne\">Rows Removed by Filter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">55887</span>\n<span class=\"w\">                     </span><span class=\"cp\">Heap Blocks</span><span class=\"nv\">: exact=51409</span>\n<span class=\"w\">                     </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"k\">Bitmap Index Scan</span><span class=\"w\"> </span><span class=\"p\">on</span><span class=\"w\"> </span><span class=\"nv\">test_usermessage_multi_fields</span><span class=\"w\">  </span><span class=\"nc\">(cost</span><span class=\"p\">=</span><span class=\"mf\">0.00</span><span class=\"p\">..</span><span class=\"mf\">5889.84</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">221459568</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">(actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">33.436</span><span class=\"p\">..</span><span class=\"mf\">33.437</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">178239</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                           </span><span class=\"cp\">Index Cond</span><span class=\"nv\">: (user_profile_id &lt; 5000)</span>\n<span class=\"w\"> </span><span class=\"cp\">Planning Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.335</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"w\"> </span><span class=\"cp\">JIT</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"cp\">Functions</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">23</span>\n<span class=\"w\">   </span><span class=\"cp\">Options</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">Inlining</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Optimization</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Expressions</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Deforming</span><span class=\"w\"> </span><span class=\"no\">true</span>\n<span class=\"w\">   </span><span class=\"cp\">Timing</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">Generation</span><span class=\"w\"> </span><span class=\"mf\">4.603</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Inlining</span><span class=\"w\"> </span><span class=\"mf\">183.435</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Optimization</span><span class=\"w\"> </span><span class=\"mf\">92.690</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Emission</span><span class=\"w\"> </span><span class=\"mf\">63.081</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Total</span><span class=\"w\"> </span><span class=\"mf\">343.808</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"w\"> </span><span class=\"cp\">Execution Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">240.892</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n</code></pre></div>",
  "<p>And combined:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">create</span><span class=\"w\"> </span><span class=\"k\">index</span><span class=\"w\"> </span><span class=\"k\">concurrently</span><span class=\"w\"> </span><span class=\"n\">test_usermessage_combined_fields</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">120</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span>\n<span class=\"go\">CREATE INDEX</span>\n</code></pre></div>\n<p>Best of 5 runs:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">analyze</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">120</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">5000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">(</span><span class=\"n\">message_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">);</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL EXPLAIN dialect\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">Finalize </span><span class=\"k\">Aggregate</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nc\">cost</span><span class=\"p\">=</span><span class=\"mf\">8870659.96</span><span class=\"p\">..</span><span class=\"mf\">8870659.97</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">230.419</span><span class=\"p\">..</span><span class=\"mf\">244.833</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"k\">Gather</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nc\">cost</span><span class=\"p\">=</span><span class=\"mf\">8870659.74</span><span class=\"p\">..</span><span class=\"mf\">8870659.95</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">229.509</span><span class=\"p\">..</span><span class=\"mf\">244.822</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"cp\">Workers Planned</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">         </span><span class=\"cp\">Workers Launched</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">         </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"cp\">Partial </span><span class=\"k\">Aggregate</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nc\">cost</span><span class=\"p\">=</span><span class=\"mf\">8869659.74</span><span class=\"p\">..</span><span class=\"mf\">8869659.75</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">203.188</span><span class=\"p\">..</span><span class=\"mf\">203.190</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"cp\">Parallel </span><span class=\"k\">Bitmap Heap Scan</span><span class=\"w\"> </span><span class=\"p\">on</span><span class=\"w\"> </span><span class=\"nv\">zerver_usermessage</span><span class=\"w\">  </span><span class=\"nc\">(cost</span><span class=\"p\">=</span><span class=\"mf\">6165.29</span><span class=\"p\">..</span><span class=\"mf\">8868512.06</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">459072</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">(actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">150.066</span><span class=\"p\">..</span><span class=\"mf\">202.837</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">3526</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"cp\">Recheck Cond</span><span class=\"nv\">: ((user_profile_id &lt; 5000) AND ((flags &amp; '120'::bigint) &lt;&gt; 0))</span>\n<span class=\"w\">                     </span><span class=\"cp\">Filter</span><span class=\"nv\">: (mod(message_id, 7) = 0)</span>\n<span class=\"w\">                     </span><span class=\"ne\">Rows Removed by Filter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">55887</span>\n<span class=\"w\">                     </span><span class=\"cp\">Heap Blocks</span><span class=\"nv\">: exact=53793</span>\n<span class=\"w\">                     </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"k\">Bitmap Index Scan</span><span class=\"w\"> </span><span class=\"p\">on</span><span class=\"w\"> </span><span class=\"nv\">test_usermessage_combined_fields</span><span class=\"w\">  </span><span class=\"nc\">(cost</span><span class=\"p\">=</span><span class=\"mf\">0.00</span><span class=\"p\">..</span><span class=\"mf\">5889.84</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">220354379</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">(actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">35.736</span><span class=\"p\">..</span><span class=\"mf\">35.736</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">178239</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                           </span><span class=\"cp\">Index Cond</span><span class=\"nv\">: (user_profile_id &lt; 5000)</span>\n<span class=\"w\"> </span><span class=\"cp\">Planning Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.240</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"w\"> </span><span class=\"cp\">JIT</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"cp\">Functions</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">23</span>\n<span class=\"w\">   </span><span class=\"cp\">Options</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">Inlining</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Optimization</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Expressions</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Deforming</span><span class=\"w\"> </span><span class=\"no\">true</span>\n<span class=\"w\">   </span><span class=\"cp\">Timing</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">Generation</span><span class=\"w\"> </span><span class=\"mf\">4.145</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Inlining</span><span class=\"w\"> </span><span class=\"mf\">212.207</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Optimization</span><span class=\"w\"> </span><span class=\"mf\">91.545</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Emission</span><span class=\"w\"> </span><span class=\"mf\">62.082</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Total</span><span class=\"w\"> </span><span class=\"mf\">369.979</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"w\"> </span><span class=\"cp\">Execution Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">246.685</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"c1\">rows</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>(TIL there's a <code>postgres-explain</code> highlight language)</p>",
  "<p>The difference in query planning time (0.095ms) is in the noise, as is the 6ms difference in runtime.</p>",
  "<p>The cost on the multi-column one is 12M and the cost on the single-column one is 8.8M.  Of course, cost is only loosely correlated to actual runtime.</p>\n<p>My guess is that the query planner gives a higher cost to the multi-column one because the recheck condition has to recheck \"more fields,\" even if at the low level those bitfields checks may actually be combined.</p>",
  "<p>So I think the only admissible arguments here for this decision (\"one-clause\" vs \"multi-clause\") are:</p>\n<ol>\n<li>Is one form more fragile and more likely to accidentally stop using the desired index?</li>\n<li>Is one form easier to understand in the code?</li>\n<li>Is one form easier to understand in the raw SQL?</li>\n</ol>\n<p>For (1), I don't think either has an advantage.  Both forms are vulnerable to \"what if another bitfield is OR'd in\":</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">5000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">(</span><span class=\"n\">message_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">);</span>\n<span class=\"go\">                                                                                                                         QUERY PLAN</span>\n<span class=\"go\">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"go\"> Finalize Aggregate  (cost=13511194.18..13511194.19 rows=1 width=8)</span>\n<span class=\"go\">   -&gt;  Gather  (cost=13511193.96..13511194.17 rows=2 width=8)</span>\n<span class=\"go\">         Workers Planned: 2</span>\n<span class=\"go\">         -&gt;  Partial Aggregate  (cost=13510193.96..13510193.97 rows=1 width=8)</span>\n<span class=\"go\">               -&gt;  Parallel Seq Scan on zerver_usermessage  (cost=0.00..13509040.50 rows=461385 width=0)</span>\n<span class=\"go\">                     Filter: ((user_profile_id &lt; 5000) AND (mod(message_id, 7) = 0) AND (((flags &amp; '8'::bigint) &lt;&gt; 0) OR ((flags &amp; '16'::bigint) &lt;&gt; 0) OR ((flags &amp; '32'::bigint) &lt;&gt; 0) OR ((flags &amp; '64'::bigint) &lt;&gt; 0) OR ((flags &amp; '128'::bigint) &lt;&gt; 0)))</span>\n<span class=\"go\"> JIT:</span>\n<span class=\"go\">   Functions: 7</span>\n<span class=\"go\">   Options: Inlining true, Optimization true, Expressions true, Deforming true</span>\n<span class=\"go\">(9 rows)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"gp\">zulip=&gt;</span><span class=\"w\"> </span><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mf\">248</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">5000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">(</span><span class=\"n\">message_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">);</span>\n<span class=\"go\">                                                       QUERY PLAN</span>\n<span class=\"go\">------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"go\"> Finalize Aggregate  (cost=9050622.53..9050622.54 rows=1 width=8)</span>\n<span class=\"go\">   -&gt;  Gather  (cost=9050622.31..9050622.52 rows=2 width=8)</span>\n<span class=\"go\">         Workers Planned: 2</span>\n<span class=\"go\">         -&gt;  Partial Aggregate  (cost=9049622.31..9049622.32 rows=1 width=8)</span>\n<span class=\"go\">               -&gt;  Parallel Seq Scan on zerver_usermessage  (cost=0.00..9048474.62 rows=459078 width=0)</span>\n<span class=\"go\">                     Filter: ((user_profile_id &lt; 5000) AND ((flags &amp; '248'::bigint) &lt;&gt; 0) AND (mod(message_id, 7) = 0))</span>\n<span class=\"go\"> JIT:</span>\n<span class=\"go\">   Functions: 7</span>\n<span class=\"go\">   Options: Inlining true, Optimization true, Expressions true, Deforming true</span>\n<span class=\"go\">(9 rows)</span>\n</code></pre></div>\n<p>Theoretically the multi-clause form is more vulnerable if the clauses are separated in some way that the query planner can't handle, but I don't view this as a likely risk -- we only apply combinations of flags, in adjacent code lines, when we have an index, so we're not in danger of accidentally dropping or moving half of the clause.  And neither form is going to handle <em>combining</em> different types of limits (e.g. an index on mentioned AND starred) without extra work -- the single-clause form would need custom code to unify the bitfields into one value for the one clause, and the multi-clause form would need custom code to place them in the same OR clause.</p>\n<p>For (2), code legibility, I don't think either is more or less understandable.</p>\n<p>For (3), SQL legibility, I think that broken-out has a bit more comprehensibility to me, since I don't have to do a mental binary expansion of the value.  But that has such a tiny weight, since IMHO this is really not a common investigation to do.</p>\n<p>Finally, there's a small finger on the scale for \"what form are the existing indexes,\" in that we ideally wouldn't like to churn the existing indexes for consistency.</p>",
  "<p>The mentioned index is our only multi-bitfield index, so I think there's no \"what form are the existing indexes\" decision to make -- we're replacing the one <code>AND</code> of two single-bit checks with either an <code>AND</code> of 4 or a single mask.</p>",
  "<p>We should check the test case in <a href=\"https://github.com/zulip/zulip/pull/27278#discussion_r1365820469\">https://github.com/zulip/zulip/pull/27278#discussion_r1365820469</a> -- that was one where it seemed the index wasn't being used properly in the development environment.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"28443\">@mobiservice19</span> I think that command expects a \"charts repository\", not a Git repository.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <br>\nThe current <a href=\"https://github.com/zulip/docker-zulip/blob/main/kubernetes/chart/zulip/README.md\">doc </a> reads as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>Helm chart based on https://github.com/zulip/docker-zulip\n</code></pre></div>\n<p>What prevents you from doing the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>helm create zulip\n</code></pre></div>\n<p>and put it in the access for all ???</p>",
  "<p>Yeah, we could potentially upload it somewhere to make it easier to access.</p>",
  "<p>OK I do note tha <code>historical</code> filtering in <a href=\"https://github.com/zulip/zulip/pull/27278#discussion_r1365820469\">https://github.com/zulip/zulip/pull/27278#discussion_r1365820469</a> appears to be completely unnecessary from a logic standpoint, so we can drop it if it isn't making things faster, which I think is the case.</p>",
  "<p>So I think we can merge <a href=\"https://github.com/zulip/zulip/pull/27278\">#27278</a>; doing so after a quick tweak to fix an <code>isort</code> bug in the first commit.</p>",
  "<p>Why is <a href=\"https://github.com/zulip/python-zulip-api/blob/5199c140772cfde93b437a0a190891299db79ca7/zulip_bots/zulip_bots/bots/merels/merels.py#L9\"><code>zulip_bots.bots.merels.merels.Storage.data</code></a> a class variable (shared between all instances)?</p>",
  "<p>I don't know. In general most of those bots are very much contrib quality code and I would not assume any significant review occurred on them.</p>",
  "<p>The query as given in that comment is uninteresting, since it has a <code>message_id</code> limit, so it uses that index:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL EXPLAIN dialect\"><pre><span></span><code><span class=\"w\">                                                                     </span><span class=\"c1\">QUERY PLAN</span>\n<span class=\"c1\">-----------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"w\"> </span><span class=\"k\">Index Scan</span><span class=\"w\"> </span><span class=\"p\">using</span><span class=\"w\"> </span><span class=\"nv\">zerver_usermessage_4ccaa172</span><span class=\"w\"> </span><span class=\"p\">on</span><span class=\"w\"> </span><span class=\"nv\">zerver_usermessage</span><span class=\"w\">  </span><span class=\"nc\">(cost</span><span class=\"p\">=</span><span class=\"mf\">0.57</span><span class=\"p\">..</span><span class=\"mf\">21307.17</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">47</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">(actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">0.035</span><span class=\"p\">..</span><span class=\"mf\">0.035</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"cp\">Index Cond</span><span class=\"nv\">: (message_id = 101)</span>\n<span class=\"w\">   </span><span class=\"cp\">Filter</span><span class=\"nv\">: (((flags &amp; '120'::bigint) &lt;&gt; 0) AND ((flags | '-1025'::bigint) = '-1025'::integer))</span>\n<span class=\"w\">   </span><span class=\"ne\">Rows Removed by Filter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\"> </span><span class=\"cp\">Planning Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.173</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"w\"> </span><span class=\"cp\">Execution Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.057</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"c1\">rows</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Broadening that as I used in the above tests uses the index:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">explain</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"w\"> </span><span class=\"k\">WHERE</span>\n<span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1025</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1025</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">5000</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">120</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL EXPLAIN dialect\"><pre><span></span><code><span class=\"w\">                                                                           </span><span class=\"c1\">QUERY PLAN</span>\n<span class=\"c1\">-----------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"w\"> </span><span class=\"k\">Gather</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nc\">cost</span><span class=\"p\">=</span><span class=\"mf\">6891.55</span><span class=\"p\">..</span><span class=\"mf\">9958229.99</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">5517</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">84.294</span><span class=\"p\">..</span><span class=\"mf\">204.098</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">10580</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"cp\">Workers Planned</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">   </span><span class=\"cp\">Workers Launched</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">   </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"cp\">Parallel </span><span class=\"k\">Bitmap Heap Scan</span><span class=\"w\"> </span><span class=\"p\">on</span><span class=\"w\"> </span><span class=\"nv\">zerver_usermessage</span><span class=\"w\">  </span><span class=\"nc\">(cost</span><span class=\"p\">=</span><span class=\"mf\">5891.55</span><span class=\"p\">..</span><span class=\"mf\">9956678.29</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">2299</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">(actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">110.859</span><span class=\"p\">..</span><span class=\"mf\">164.863</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">3527</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"cp\">Recheck Cond</span><span class=\"nv\">: ((user_profile_id &lt; 5000) AND ((flags &amp; '120'::bigint) &lt;&gt; 0))</span>\n<span class=\"w\">         </span><span class=\"cp\">Filter</span><span class=\"nv\">: (((flags | '-1025'::bigint) = '-1025'::integer) AND (mod(message_id, 7) = 0))</span>\n<span class=\"w\">         </span><span class=\"ne\">Rows Removed by Filter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">55890</span>\n<span class=\"w\">         </span><span class=\"cp\">Heap Blocks</span><span class=\"nv\">: exact=50331</span>\n<span class=\"w\">         </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"k\">Bitmap Index Scan</span><span class=\"w\"> </span><span class=\"p\">on</span><span class=\"w\"> </span><span class=\"nv\">test_usermessage_combined_fields</span><span class=\"w\">  </span><span class=\"nc\">(cost</span><span class=\"p\">=</span><span class=\"mf\">0.00</span><span class=\"p\">..</span><span class=\"mf\">5890.17</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">220689350</span><span class=\"w\"> </span><span class=\"nc\">width</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">(actual</span><span class=\"w\"> </span><span class=\"nc\">time</span><span class=\"p\">=</span><span class=\"mf\">30.680</span><span class=\"p\">..</span><span class=\"mf\">30.681</span><span class=\"w\"> </span><span class=\"nc\">rows</span><span class=\"p\">=</span><span class=\"mi\">178249</span><span class=\"w\"> </span><span class=\"nc\">loops</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"cp\">Index Cond</span><span class=\"nv\">: (user_profile_id &lt; 5000)</span>\n<span class=\"w\"> </span><span class=\"cp\">Planning Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.373</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"w\"> </span><span class=\"cp\">JIT</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"cp\">Functions</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">18</span>\n<span class=\"w\">   </span><span class=\"cp\">Options</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">Inlining</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Optimization</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Expressions</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kp\">Deforming</span><span class=\"w\"> </span><span class=\"no\">true</span>\n<span class=\"w\">   </span><span class=\"cp\">Timing</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">Generation</span><span class=\"w\"> </span><span class=\"mf\">1.801</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Inlining</span><span class=\"w\"> </span><span class=\"mf\">145.726</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Optimization</span><span class=\"w\"> </span><span class=\"mf\">63.198</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Emission</span><span class=\"w\"> </span><span class=\"mf\">46.968</span><span class=\"w\"> </span><span class=\"p\">ms,</span><span class=\"w\"> </span><span class=\"kp\">Total</span><span class=\"w\"> </span><span class=\"mf\">257.692</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"w\"> </span><span class=\"cp\">Execution Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">205.495</span><span class=\"w\"> </span><span class=\"p\">ms</span>\n<span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"c1\">rows</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>So I don't see any reason why this won't perform as expected, even with additional filters on <code>flags</code></p>",
  "<p>OK, great. <span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> can you work on the next steps for finishing <code>@topic</code> on top of this?</p>",
  "<p>Rebased <a href=\"https://github.com/zulip/zulip/pull/26382\">#26382</a> </p>\n<p>I think the migration to clear the historical bits (first commit) is not good enough as the update query costs a full table scan of usermessage table. Looking into other ways to optimize it.</p>",
  "<p>The easy way to do it is to use the new index and the old index together.</p>",
  "<p>Query rows that match the new index and not the old index and that'll be exactly the set of rows to clear, and then we can do that in batches.</p>",
  "<p>I think that would not work for the reason I <a href=\"#narrow/stream/3-backend/topic/topic_wildcard_mentioned.20flag/near/1654571\">mentioned earlier</a>:</p>\n<blockquote>\n<p>Suppose a row has both\u00a0<code>mentioned</code>\u00a0and\u00a0<code>topic_mentioned</code>\u00a0set. So, this row would be available in both the sets. We would miss setting\u00a0<code>topic_wildcard_mentioned = 0</code>\u00a0for such rows, right?</p>\n</blockquote>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/26382\">#26382</a> is ready to review.</p>",
  "<p>Hmmm, yeah, that's correct.</p>",
  "<p>The migration there looks correct, I'll try to start testing it in production tomorrow.</p>",
  "<p>Creating outbox table for events</p>",
  "<p>I think you're going to need to add more context for anyone to know what you're talking about.</p>",
  "<p>The existing notifications code assumes that all iOS clients getting notifications through APNs have the same app ID. In particular all such notifications going through the bouncer are assumed to be for the same app ID, <code>org.zulip.Zulip</code>, which corresponds to the main Zulip mobile app.</p>\n<p>For the new Flutter-based app, we have a separate app ID <code>com.zulip.flutter</code> we'll be using through the Flutter app's beta period, so that it can be installed alongside the existing app. In order to get notifications there, then (<a href=\"https://github.com/zulip/zulip-flutter/pull/321\">#F321</a>), we'll need the same servers to be able to send notifications to both <code>org.zulip.Zulip</code> and <code>com.zulip.flutter</code>.</p>",
  "<p>Yesterday I sent <a href=\"https://github.com/zulip/zulip/pull/27590\">#27590</a> which does most of what we need here. There's one more piece which I just <a href=\"https://github.com/zulip/zulip/pull/27590#issuecomment-1800172255\">realized</a> a few minutes ago: in order to support multiple app IDs we'll also need to do something about how we authenticate to APNs.</p>",
  "<p>Currently we <a href=\"https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_certificate-based_connection_to_apns\">use a certificate</a>. The certificate is tied to a specific app.</p>\n<p>There are two options:</p>\n<ul>\n<li>\n<p>We could use several certificates. In this approach, we'd set up several <code>aioapns.APNs</code> instances, in order to get separate connection pools. The logic when sending notifications would split up the devices by app ID in order to use the separate instances.</p>\n</li>\n<li>\n<p>Alternatively we could use <a href=\"https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token-based_connection_to_apns\">token-based authentication</a>. This is the approach that Apple gently recommends when sending notifications to several apps.</p>\n<p>This means we'd sign a little token, in JWT format, and send that in an HTTP header. The token has a timestamp. There's a requirement to sign a fresh token often, but not too often:</p>\n<blockquote>\n<p>Refresh your token no more than once every 20 minutes and no less than once every 60 minutes.</p>\n</blockquote>\n<p>presumably because Apple memoizes checking the token's validity. So that just means we need to memoize the token too, next to the connection, and replace it with a fresh one when it's like 30 minutes or 50 minutes old.</p>\n</li>\n</ul>",
  "<p>It looks like <code>aioapns</code> does have support for the token method, so probably that's the easiest thing.</p>",
  "<p>Yeah, if <code>aioapns</code> does most of the work for us, that does sound like an easier strategy.</p>",
  "<p>I'll go try that out on my dev server.</p>",
  "<p>Whether we should restrict this feature for personal mentions only or is there any future plan to use it for group or wildcard mentions?</p>\n<p>I have opened a PR, <a href=\"https://github.com/zulip/zulip/pull/27174\">#27174</a>, for the issue <a href=\"https://github.com/zulip/zulip/issues/26795\">#26795</a> and it is currently for personal mentions only.</p>",
  "<p>It'd be great to move this to <a class=\"stream-topic\" data-stream-id=\"9\" href=\"/#narrow/stream/9-issues/topic/Mentioned.20in.20Recent.20conversations\">#issues &gt; Mentioned in Recent conversations</a> (that topic has related discussion)</p>",
  "<p>OK, I will do that.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"27665\">Kunal Sharma</span> has marked this topic as resolved.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/django-seal.20audits/near/1637138\">said</a>:</p>\n<blockquote>\n<p>But we might want to first complete <a href=\"https://github.com/zulip/zulip/pull/26533\">#26533</a>, which has some pending discussions. I can complete that PR if <span class=\"user-mention silent\" data-user-id=\"58\">Steve Howell</span> is not available currently.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> Sorry I've been offline for a while.  I am not sure if the quoted message is still relevant, but I am still mostly unavailable, so I would be happy if you could take over any of my PRs that might be blocking your work.</p>",
  "<p>This project is a bit on hold as we focus on 8.0 release work.</p>",
  "<p>Do we have an asset we like for this?</p>\n<p>We'll also want one for the 403 case which is adjacent, though that's going to be much less common in practice.</p>",
  "<p>I don't think so but I guess <a href=\"#narrow/stream/101-design/topic/deleted.20files/near/1473627\">this</a> is the design thread to bump.</p>",
  "<p>Hi <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> , This more of a clarification about the issue <a href=\"https://github.com/zulip/zulip/issues/16431\">#Notify bot owners if bot tries to send to a stream it does not have access to</a>; I think currently Zulip supports sending PMs to bot owners if the bot tries to send message  to a stream that doesn't exist so, there is nothing to address to the first part of the issue; But the second part, of the issue can be actionable. Which states, if the stream exist but the bot doesn't have the permission to access, it should trigger a notification; Earlier a PR has been raised for this, you can find it <a href=\"https://github.com/zulip/zulip/pull/16530\">here</a>. I think it addresses the issue, but if any modifications needed let me know, I can raise a PR for it. Assuming no one is working on it.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/16539\">#16539</a> needs at very least to be rebased.  You can try doing that (and pushing a new PR based on it).  Tim also had a suggestion pending (see <a class=\"stream-topic\" data-stream-id=\"49\" href=\"/#narrow/stream/49-development-help/topic/Help.20in.20.2316431\">#development help &gt; Help in #16431</a>) about if there was a cleaner way to do it.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/27847\">#27847</a></p>\n<p>We are doing refactoring to extend our Hotspot system to support things like \"NON_INTRO_HOTSPOTS\" and \"show one time banner/notice\" to a user.</p>\n<p>As a part of that we plan to rename <code>UserHotspot</code> model to <code>OnboardingStep</code> and <code>hotspot</code> field to <code>onboarding_step</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserHotspot</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">hotspot</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">onboarding_step</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">timezone_now</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n       <span class=\"n\">unique_together</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hotspot\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>For migration,  Django's <code>migrations.RenameModel</code> renames the table but the constraints etc are not renamed resulting in broken state.</p>\n<p>What approach do we follow for \"table rename\" operation?</p>\n<p>Remove the old constraint and create new approach?</p>",
  "<p>Can you describe the broke staten? I would expect the Django migrations system to handle renaming a table transparently, albeit leaving a weird/legacy name for the constraint after the rename. But it's probably fine to remove the constraint and add a replacement one surrounding the table rename.</p>\n<p>(The other option, which might be most expedient is to pass the table name parameter to the class such that one renames the class without renaming the database table, and come back to this later).</p>",
  "<p><a href=\"https://docs.djangoproject.com/en/4.2/ref/models/options/#table-names\">https://docs.djangoproject.com/en/4.2/ref/models/options/#table-names</a></p>",
  "<p>I don't think we've used that feature before, preferring to actually rename the database tables, but it is an option.</p>",
  "<blockquote>\n<p>Can you describe the broke state?</p>\n</blockquote>\n<p>In <code>import_realm.py</code>, we have </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">update_model_ids</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">TableData</span><span class=\"p\">,</span> <span class=\"n\">related_table</span><span class=\"p\">:</span> <span class=\"n\">TableName</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">get_db_table</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Important: remapping usermessage rows is</span>\n    <span class=\"c1\"># not only unnecessary, it's expensive and can cause</span>\n    <span class=\"c1\"># memory errors. We don't even use ids from ID_MAP.</span>\n    <span class=\"k\">assert</span> <span class=\"s2\">\"usermessage\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">table</span>\n\n    <span class=\"n\">old_id_list</span> <span class=\"o\">=</span> <span class=\"n\">current_table_ids</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"p\">)</span>\n    <span class=\"n\">allocated_id_list</span> <span class=\"o\">=</span> <span class=\"n\">allocate_ids</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">table</span><span class=\"p\">]))</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">table</span><span class=\"p\">])):</span>\n        <span class=\"n\">update_id_map</span><span class=\"p\">(</span><span class=\"n\">related_table</span><span class=\"p\">,</span> <span class=\"n\">old_id_list</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">],</span> <span class=\"n\">allocated_id_list</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">])</span>\n    <span class=\"n\">re_map_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"n\">related_table</span><span class=\"o\">=</span><span class=\"n\">related_table</span><span class=\"p\">,</span> <span class=\"n\">id_field</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The <code>allocate_ids()</code> here looks for <code>zerver_onboardingstep_id_seq</code> relation.</p>\n<p>Hence the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Traceback (most recent call last):\n  File &quot;/srv/zulip-py3-venv/lib/python3.8/site-packages/django/db/backends/utils.py&quot;, line 89, in _execute\n    return self.cursor.execute(sql, params)\n  File &quot;/srv/zulip/zerver/lib/db.py&quot;, line 38, in execute\n    wrapper_execute(self, super().execute, query, vars)\n  File &quot;/srv/zulip/zerver/lib/db.py&quot;, line 21, in wrapper_execute\n    action(sql, params)\npsycopg2.errors.UndefinedTable: relation &quot;zerver_onboardingstep_id_seq&quot; does not exist\nLINE 1: select nextval(&#39;zerver_onboardingstep_id_seq&#39;) from generate...\n</code></pre></div>",
  "<p><a href=\"https://code.djangoproject.com/ticket/23577\">https://code.djangoproject.com/ticket/23577</a></p>",
  "<p>We have tooling to do this</p>",
  "<p>See <code>zerver/migrations/0443_userpresence_new_table_schema.py</code></p>",
  "<p>Be sure to read the caveats in the <code>rename_indexes_constraints</code> function.</p>",
  "<p>Thanks, giving it a read.</p>",
  "<p>Here\u2019s a <a href=\"https://docs.google.com/spreadsheets/d/1MrB_IEWrK9en523Iq6ee5DBtScs5GPQZ0Kgzy13MQqw/edit#gid=0\">spreadsheet with everything from <code>models.py</code></a> (classes, functions, and constants). I\u2019ve transcribed the above plan into it.</p>",
  "<p>Do we want to make the filenames consistently plural or consistently singular?</p>",
  "<p>Hmm, good question. </p>\n<p>I think consistent is good and I think plural is the more common pattern in  <code>zerver/lib</code> and <code>zerver/actions</code> for things named after a data type, especially for more important models (streams, users, etc.) where we are more likely to have spent attention on that sort of naming question.</p>",
  "<p>And I think for some things that are naturally plural in nature, singular might feel awkward, whereas probably there's no model that would feel awkward to be in a final with the plural name.</p>",
  "<p>I'm proposing a <code>zerver/models/constants.py</code> for the couple shared constants like <code>MAX_TOPIC_NAME_LENGTH</code> that are used in multiple of the new files.</p>",
  "<p>I think <code>AndZero</code> and friends could just go in the <code>UserMessage</code> file since I think they're currently only used there, but that feels a bit wrong given they can in theory be used anywhere that we have a bitfield? Realistically we are likely to only have the one bitfield on <code>UserMessage</code> though -- it's hard to imagine something else being big enough that we'd feel the optimization is worth it. So I might just put it in that file right above the <code>UserMessage</code> definitions.</p>",
  "<p>Idunno what to do with <code>query_for_ids</code>, maybe just a <code>zerver/models/query_helpers.py</code> is a fine place to stuff them and we can think about it later if we have more similar things.</p>",
  "<p>Hello maintainers,  just going thorough this splitting plan in the doc mentioned above, wanted to know if this plan is open for contributions? if it is, I'd also like to work on it, get feedback and improve along the way.  But I currently see no issues open for this, so asking here. </p>\n<p>Thank you.</p>",
  "<p>what</p>",
  "<p>This isn\u2019t a task for new contributors. See <a href=\"https://zulip.readthedocs.io/en/latest/contributing/contributing.html#where-to-look-for-an-issue\">where to look for an issue</a> for those.</p>",
  "<blockquote>\n<p>I think consistent is good and I think plural is the more common pattern</p>\n</blockquote>\n<p>Okay; should we do <code>display_recipient.py</code> \u2192 <code>display_recipients.py</code>, <code>realm_emoji.py</code> \u2192 <code>realm_emojis.py</code> (?), <code>realm_playground.py</code> \u2192 <code>realm_playgrounds.py</code>?</p>",
  "<p>Let's stick with \"emoji\" as the plural form, but the others, sure.</p>",
  "<p>As noted in <a href=\"https://github.com/zulip/zulip/pull/28014#discussion_r1412847089\">https://github.com/zulip/zulip/pull/28014#discussion_r1412847089</a>, we have some code that I now recall was introduced in <a href=\"https://github.com/zulip/zulip/pull/16219\">#16219</a> to make <code>test-backend</code> pass with the <code>zilencer</code> module disabled (and some tests skipped).</p>\n<p>If I'm not mistaken, the motivation for that change was likely that we'd had at least a version of <code>main</code> that didn't run for self-hosters because of sloppy importing of code not included in the release tarballs? I guess I'm not sure to what extent the class of bug is something that might recur, but I am currently thinking that if that is a risk we're worried about, we should have one of our CI jobs pass options to <code>test-backend</code> to run the backend tests with some apps disabled.</p>\n<p>Thoughts?</p>",
  "<p>I opened <a href=\"https://github.com/zulip/zulip/pull/28030\">#28030</a>, which implements an initial version of being able to override settings values that would normally be set in <code>dev_settings.py</code> without modifying a file tracked in Git. From its documentation:</p>\n<blockquote>\n<ul>\n<li>If you need to override a setting in your development environment,<br>\n  you can do so by creating a <code>zproject/custom_dev_settings.py</code><br>\n  setting the values you'd like to override (the test suites ignore<br>\n  this file). This optional file is processed just after<br>\n<code>dev_settings.py</code> in <code>configured_settings.py</code>, so<br>\n<code>zproject/computed_settings.py</code> will correctly use your custom<br>\n  settings when calculating any computed settings that depend on them.</li>\n</ul>\n</blockquote>",
  "<p>I think it's very possible this could use some tweaks. It also is very noisy about being turned on; every service run by <code>run-dev.py</code> prints <code>Using custom settings from zproject/custom_dev_settings.py.</code> when it's enabled; this is helpful for making sure that you know you've got something weird configured, but I'd prefer it to be just one total.</p>",
  "<p>Hmm this is going to be more involved than I thought, because of cycles like <code>UserProfile.has_permission</code> \u2192 <code>Realm.POLICY_NOBODY</code>, <code>Realm.get_admin_users_and_bots</code> \u2192 <code>UserProfile.ROLE_REALM_OWNER</code>.</p>",
  "<p>Ideally all the constants like those would be <code>enum</code>s, so maybe we should do that first. And then we have to decide where to put them.</p>",
  "<p>Alternatively we can try to break the cycles with function-level lazy imports, but ugh.</p>",
  "<p>Our import convention for the <code>datetime</code> standard library is split in half: we currently use <code>from datetime import datetime, timedelta, timezone</code> (or subsets) in 65 files and <code>import datetime</code> in 66 files.</p>\n<p>I argue that <code>from datetime import \u2026</code> is better here, because <code>datetime.datetime</code> is redundant, and all of the examples in the <a href=\"https://docs.python.org/3/library/datetime.html\">Python documentation</a> use <code>from datetime import \u2026</code>. So I opened <a href=\"https://github.com/zulip/zulip/pull/27794\">#27794</a>. But Tim wants to discuss it here.</p>\n<p>Discuss.</p>",
  "<p>I'm in favor of the more concise form.</p>",
  "<p>Err, I guess that isn't clear.  More concise in when it's used, so <code>from datetime import datetime, timedelta, timezone</code></p>",
  "<p>If what Tim is looking for is a more general policy: some Python standard library modules were clearly designed with <code>from</code>\u2026<code>import</code> in mind, and we should use it for those. Another one that bothers me is <code>urllib.parse</code>.</p>",
  "<p>I think for datetime I agree we should do the more brief version where it's used.</p>",
  "<p>I'm less convinced by <code>urllib.parse</code> because function called <code>parse</code> is a very plausible name for a function we'd write ourselves somewhere, and it doesn't at all indicate from seeing it that it's related to URLs.</p>",
  "<p>The function is not <code>parse</code>. The function is <code>urllib.parse.urlparse</code> (although we should actually be using <code>urllib.parse.urlsplit</code>).</p>",
  "<p>Ahh, OK, yeah I'd be fine with <code>urlsplit</code> being imported for use under that name. But <code>urllib.parse.quote</code> is an example where just bare <code>quote</code> feels bad.</p>",
  "<p>But maybe we should just live with that anyway; we don't use that name in that many files.</p>",
  "<p>Function-level lazy imports seems like probably the best way to proceed; it'll be easy to clean those up in a refactor to change those things to enums later.</p>",
  "<p>(Since I think the imports will become unused variables in those scopes after migrating how those policy constants get accessed?)</p>",
  "<p>Do we have a way to check whether a <code>zulip_version</code> string is greater than <code>8.0</code>, correctly handling forks and betas and so on? </p>\n<p>We have some functions in <code>zerver/lib/compatibility</code> for clients, but I am not convinced those are suitable for version strings like <code>8.0-beta1-600-g4da498fbe1</code>.</p>",
  "<p>(It would be very handy for the error-handling code path in <a href=\"https://github.com/zulip/zulip/pull/28081#discussion_r1419667043\">https://github.com/zulip/zulip/pull/28081#discussion_r1419667043</a>)</p>",
  "<p>I don't believe we have such a function already.</p>",
  "<p>It'd be helpful if someone could generate one for me; I think just writing the function (can go in <code>zerver/lib/compatibility.py</code> with tests in that file's usual test suite) would be a very helpful prep PR.</p>",
  "<p>(I expect <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> will have time for it today if nobody else picks it up)</p>",
  "<p>Seems to me we ought to use the API feature level rather than parsing version strings.</p>",
  "<p>If we don\u2019t have that here, let\u2019s update 8.0 to send it here, and then its absence indicates pre-8.0.</p>",
  "<p>Ok yeah that does seem like a good idea.</p>",
  "<p>So the way we send the version today is via this <code>{\"User-agent\": f\"ZulipServer/{ZULIP_VERSION}\"}</code> in <code>send_to_push_bouncer</code>. While we could put the feature level in a payload, I wonder whether it should be in something like a <code>X-ZULIP-API-FEATURE-LEVEL</code> HTTP header?</p>",
  "<p>Headers have a mildly higher chance of being mangled by proxies.</p>",
  "<p>Yeah payload seems fine.</p>",
  "<p>So I guess we'd make <code>send_to_push_bouncer</code> extend the <code>post_data</code> dictionary with an extra field? Yeah that seems OK.</p>",
  "<p>I'd still appreciate a PR for this; feeling very short on attention.</p>",
  "<p>Oh I see\u2026this is something that gets slurped from all <code>send_to_push_bouncer</code> calls regardless of URL and data type? Maybe it does need to be a header then.</p>",
  "<p>Hmm I\u2019m not seeing that code? There\u2019s <code>remote_server_post_analytics</code> which takes an explicit <code>version</code> argument, but I don\u2019t see the user-agent being parsed.</p>",
  "<p>We don't parse the user-agent -- it's a separate parameter, added in <a href=\"https://github.com/zulip/zulip/commit/216d2ec1bf0f6ea5e2c0e51231cd96b06c2b736c\">216d2ec1bf0f6ea5e2c0e51231cd96b06c2b736c</a></p>",
  "<p>We only have a current need for it in the <code>remote_server_post_analytics</code> code path, though I was thinking it might be nice to just have the API feature level unconditionally in the other endpoints too down the line.</p>",
  "<p>(Though those can all be individually transitioned to sending it when we have a cause to care)</p>",
  "<p>Yeah I\u2019m in favor of being explicit about where data is needed, rather than spamming it everywhere and having to go back later and untangle where it was actually needed if we ever want to change that code.</p>",
  "<p>So something like <a href=\"https://github.com/zulip/zulip/pull/28105\">#28105</a>?</p>",
  "<p>Yeah, that seems like a fine solution, thanks!</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/28147\">https://github.com/zulip/zulip/pull/28147</a> rewrites the <code>run-dev</code> proxy using the <code>aiohttp</code> library; this is expected to make it more faithful to what happens in production, which in particular recently burned us in debugging a Tornado memory leak.</p>\n<p>I'm going to wait to merge it to tomorrow morning (when I can be around to manage things like reverting it as needed).</p>",
  "<p>Merged; please report any issues you encounter with <code>run-dev</code> here.</p>",
  "<p>This topic was moved to <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/zulip-flutter.20user.20agent\">#api design &gt; zulip-flutter user agent</a> by <span class=\"user-mention silent\" data-user-id=\"13313\">Chris Bobbe</span>.</p>",
  "<p>In issue <a href=\"https://github.com/zulip/zulip/pull/25781\">#25781</a>, just renaming the table field from \"recent_topics\" to \"topics\" and doing some migrations is that simple ?<br>\nOr is there any other approach ?<br>\nI had another question. If we implement this solution will it break the existing code or the database table model ?</p>",
  "<p>Welcome! I recommend spending a bit more time reading the code using <code>git grep web_home_view</code> -- it'll help you ask more informed questions. There's not that many references to this and you should be able to reason about the impact of changing them.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <br>\nThank for informing me. I will read and try to understand the code.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/28239\">#28239</a> is a starting point for this project. So far it extracts <code>constants</code>, <code>users</code>, and <code>groups</code>.</p>",
  "<p>Moving functions into <code>zerver/lib/display_recipient.py</code> is going to create cycles since that imports <code>Recipient</code>.</p>",
  "<p>I guess function-level imports suffice there too.</p>",
  "<p>Yeah that seems fine for that detail.</p>",
  "<p>I assume <a href=\"https://github.com/zulip/zulip/pull/28009\">#28009</a> means <code>user_hotspots</code> becomes <code>onboarding_steps</code>.</p>",
  "<p>I think this is ready.</p>",
  "<p>Er no there are still some linter and documentation details to adjust.</p>",
  "<p>Okay now ready.</p>",
  "<p>OK will review when next between things.</p>",
  "<p>Django 5.0, released two weeks ago, already dropped support for Python &lt; 3.10. So the time we\u2019ll need to make that switch is fast approaching. That would mean we\u2019d require Ubuntu \u2265 22.04 or Debian \u2265 12 (unless we also change our Python distribution strategy).</p>",
  "<p>OK I think that means we drop support in <code>main</code>/9.0-dev for those Python versions and upstream releases; I expect we'll keep 8.0 on the 4.2 LTS.</p>",
  "<p>I would like to change our Python distribution strategy but I don't think there's a big reason to block on it; there's a good chance 24.04 will be out and supported by the time 9.0 comes out anyway.</p>",
  "<p>And we usually don't try to support across 3 LTS release periods.</p>",
  "<p>Okay, I\u2019ll proceed with that plan.</p>",
  "<p>The <a href=\"https://discourse.ubuntu.com/t/noble-numbat-release-schedule/35649\">Ubuntu 24.04 release schedule</a> says they plan to make Python 3.12 the default next month, which might be a minor adventure.</p>",
  "<p>Update: The beta was released two months ago. Announcement: <a href=\"https://astral.sh/blog/the-ruff-formatter\">https://astral.sh/blog/the-ruff-formatter</a></p>\n<p>The announcement features Zulip as a test case for performance and compatibility with Black.</p>",
  "<p>Yeah we\u2019ve been playing with it and filed some issues. We\u2019re using it for zulint and python-zulip-api. We will probably switch to it for the main server repository soon, pending resolution of some minor issues.</p>",
  "<p>Ah: <a class=\"stream-topic\" data-stream-id=\"2\" href=\"/#narrow/stream/2-general/topic/Ruff.20formatter\">#general &gt; Ruff formatter</a></p>",
  "<p>Someone opened <a href=\"https://github.com/zulip/zulip/issues/28279\">https://github.com/zulip/zulip/issues/28279</a> asking what Postgres versions Zulip 8.0 supports.</p>",
  "<p>It looks like <span class=\"user-mention\" data-user-id=\"11785\">@Akash Kumar Singh</span> opened <a href=\"https://github.com/zulip/zulip/pull/28282\">https://github.com/zulip/zulip/pull/28282</a> adding documentation, but I'm not sure how it was checked which versions are supported.</p>",
  "<p>I don't remember postgres 16 support being added? It was released in September, so fairly recent; that might be a thing we forgot to do and should backport.</p>",
  "<p>I don't believe we added it explicitly, and I don't think we test with it, so that doesn't look right.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"29201\">Aleksandr Sl</span> has marked this topic as resolved.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> has marked this topic as unresolved.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/28317\">#28317</a> for PostgreSQL 16 support.</p>",
  "<p>Is pull request <a href=\"https://github.com/zulip/zulip/pull/28269\">#28269</a> the solution for issue <a href=\"https://github.com/zulip/zulip/pull/25781\">#25781</a> ?<br>\nIf that's not the solution I would like to be helped by you on this issue.<br>\nThank you.</p>",
  "<p>I was wondering if there have been any thoughts of adding OpenTelemetry support to Zulip?</p>\n<p>As there is already support for <a href=\"https://opentelemetry-python.readthedocs.io/en/stable/examples/django/README.html\">Django Instrumentation</a> it should be not too difficult to have it integrated.</p>",
  "<p>What would your goals be for such instrumentation?</p>",
  "<p>Mainly for monitoring, alerting and support purposes at the moment.</p>\n<ol>\n<li>having some metrics of the apps health <a href=\"https://faun.pub/use-vs-red-vs-the-four-golden-signals-50655e93fad7\">USE vs RED vs The Four Golden Signals</a></li>\n<li>having traces for troubleshooting db, cache, internal processing or other issues.</li>\n</ol>\n<p>From digging through the repo, there seems to be only the uwsgi-exporter available, but no other means of monitoring the apps health or performance issues.</p>\n<p>The only way to do that right now is to monitor all the parts individually without the valuable context of which client request actually caused a long running sql query for examle.</p>\n<p>Besides the common operational view, I think this is also very valuable for development.<br>\nIn the company I work for this helped us uncover a myriad of database requests which were caused by the applications logic and enabled us to reduce them massively.</p>\n<p>There also seems to be a shift towards <a href=\"https://opentelemetry.io/blog/2023/testing-otel-demo/\">trace-based testing</a> to uncover these kind of issues early on in the development process.</p>",
  "<p>I am currently working on this and the implementation is pretty much done but I am encountering an error in some backend tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>django.db.utils.OperationalError: target lists can have at most 1664 entries\n</code></pre></div>\n<p>This error is raised when the function present in <code>messages.py</code> (given below) is called in some tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>def get_usermessage_by_message_id(\n    user_profile: UserProfile, message_id: int\n) -&gt; Optional[UserMessage]:\n    try:\n        return UserMessage.objects.select_related().get(\n            user_profile=user_profile, message_id=message_id\n        )\n    except UserMessage.DoesNotExist:\n        return None\n</code></pre></div>\n<p>Can someone please explain the possible cause of this error?</p>",
  "<p>Yeah, I'd be in favor of building some OpenTelemetry support into Zulip.  I did a brief stab at adding Honeycomb integration a while back, but didn't get very far into it.</p>\n<p>We primarily use grok-exporter to monitor the nginx access logs and extract RED signals from that.  It's not very CPU-efficient, so I'dlike to switch that over to mtail, which is more supported and less CPU-intensive.</p>",
  "<p>I don't see how that call could produce that error.  Can you show the full traceback?</p>",
  "<p>Sure, here is the full error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Running zerver.tests.test_widgets.WidgetContentTestCase.test_todo_type_validation\n2024-01-01 20:08:26.691 ERR  [django.request] Internal Server Error: /api/v1/submessage\nTraceback (most recent call last):\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/backends/utils.py&quot;, line 89, in _execute\n    return self.cursor.execute(sql, params)\n  File &quot;/home/vector/zulip/zerver/lib/db.py&quot;, line 38, in execute\n    wrapper_execute(self, super().execute, query, vars)\n  File &quot;/home/vector/zulip/zerver/lib/db.py&quot;, line 21, in wrapper_execute\n    action(sql, params)\npsycopg2.errors.TooManyColumns: target lists can have at most 1664 entries\n\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/core/handlers/exception.py&quot;, line 55, in inner\n    response = get_response(request)\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/core/handlers/base.py&quot;, line 197, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/home/vector/zulip/zerver/lib/rest.py&quot;, line 39, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/views/decorators/csrf.py&quot;, line 56, in wrapper_view\n    return view_func(*args, **kwargs)\n  File &quot;/home/vector/zulip/zerver/lib/rest.py&quot;, line 203, in rest_dispatch\n    return target_function(request, **kwargs)\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/views/decorators/csrf.py&quot;, line 56, in wrapper_view\n    return view_func(*args, **kwargs)\n  File &quot;/home/vector/zulip/zerver/decorator.py&quot;, line 779, in _wrapped_func_arguments\n    raise err\n  File &quot;/home/vector/zulip/zerver/decorator.py&quot;, line 776, in _wrapped_func_arguments\n    return view_func(request, user_profile, *args, **kwargs)\n  File &quot;/usr/lib/python3.10/contextlib.py&quot;, line 79, in inner\n    return func(*args, **kwds)\n  File &quot;/home/vector/zulip/zerver/lib/request.py&quot;, line 464, in _wrapped_req_func\n    return_value = req_func(request, *args, **kwargs)\n  File &quot;/home/vector/zulip/zerver/views/submessage.py&quot;, line 27, in process_submessage\n    message, user_message = access_message(user_profile, message_id, lock_message=True)\n  File &quot;/home/vector/zulip/zerver/lib/message.py&quot;, line 850, in access_message\n    user_message = get_usermessage_by_message_id(user_profile, message_id)\n  File &quot;/home/vector/zulip/zerver/models/messages.py&quot;, line 624, in get_usermessage_by_message_id\n    return UserMessage.objects.select_related().get(\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/models/query.py&quot;, line 633, in get\n    num = len(clone)\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/models/query.py&quot;, line 380, in __len__\n    self._fetch_all()\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/models/query.py&quot;, line 1881, in _fetch_all\n    self._result_cache = list(self._iterable_class(self))\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/models/query.py&quot;, line 91, in __iter__\n    results = compiler.execute_sql(\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py&quot;, line 1562, in execute_sql\n    cursor.execute(sql, params)\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/backends/utils.py&quot;, line 67, in execute\n    return self._execute_with_wrappers(\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/backends/utils.py&quot;, line 80, in _execute_with_wrappers\n    return executor(sql, params, many, context)\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/backends/utils.py&quot;, line 84, in _execute\n    with self.db.wrap_database_errors:\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/utils.py&quot;, line 91, in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n  File &quot;/srv/zulip-py3-venv/lib/python3.10/site-packages/django/db/backends/utils.py&quot;, line 89, in _execute\n    return self.cursor.execute(sql, params)\n  File &quot;/home/vector/zulip/zerver/lib/db.py&quot;, line 38, in execute\n    wrapper_execute(self, super().execute, query, vars)\n  File &quot;/home/vector/zulip/zerver/lib/db.py&quot;, line 21, in wrapper_execute\n    action(sql, params)\ndjango.db.utils.OperationalError: target lists can have at most 1664 entries\n</code></pre></div>",
  "<p>Huh.  Can you push the changes you've made to a draft PR, or link to a branch?</p>",
  "<p>I have seen this error a couple of this times. This is probably due to some incorrect <code>select_related</code> call without any arguments passed to it and is raised now because I guess you might have added a setting field in <code>Realm</code> table.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/101-design/topic/restricting.20PMs/near/1711283\">said</a>:</p>\n<blockquote>\n<p>Huh.  Can you push the changes you've made to a draft PR, or link to a branch?</p>\n</blockquote>\n<p>Here is the link to the draft PR: <a href=\"https://github.com/zulip/zulip/pull/28396\">#28396</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/101-design/topic/restricting.20PMs/near/1711372\">said</a>:</p>\n<blockquote>\n<p>I have seen this error a couple of this times. This is probably due to some incorrect <code>select_related</code> call without any arguments passed to it and is raised now because I guess you might have added a setting field in <code>Realm</code> table.</p>\n</blockquote>\n<p>Yes I have added <code>direct_message_permission_group</code> and <code>direct_message_initiator_group</code> fields in <code>Realm</code>. How can I resolve the error?</p>",
  "<p>Currently Zulip is using the old way of authenticating and there is also no way to define a username for authentication.</p>\n<p>With the introduction of <a href=\"https://redis.io/docs/management/security/acl/\">ACLs in Redis</a> it would be possible to restrict the required permissions for Zulip and therefore enhance the security of redis.</p>\n<p>This could be done by setting an ACL entry for the application user, like</p>\n<div class=\"codehilite\"><pre><span></span><code>user zulip ((ACL-rules)) on &gt;password\n</code></pre></div>\n<p>in the redis.conf and the possibility to configure a redis_user for authentication, plus the support for it in the code.</p>\n<p>For compatibility and as fallback (if the username is not configured) an additional ACL entry for the default user should allow old clients to continue working.</p>",
  "<p>What versions of Redis support ACLs?  We need to support Ubuntu 22.04 and Debian 11, which means Redis 6.0.</p>",
  "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/restricting.20PMs\">#design &gt; restricting PMs</a> by <span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span>.</p>",
  "<p>Based on the <a href=\"https://redis.io/docs/management/security/#authentication\">Docs</a>, Redis 6 </p>\n<blockquote>\n<p><strong>Authentication</strong></p>\n<p>Redis provides two ways to authenticate clients. The recommended authentication method, introduced in Redis 6, is via Access Control Lists, allowing named users to be created and assigned fine-grained permissions. ....</p>\n</blockquote>",
  "<p>What the advantage to switching to ACLs?  From their <a href=\"https://redis.io/docs/management/security/acl/#when-acls-are-useful\">docs</a>, I don't think any of these apply:</p>\n<blockquote>\n<p>Before using ACLs, you may want to ask yourself what's the goal you want to accomplish by implementing this layer of protection. Normally there are two main goals that are well served by ACLs:</p>\n<ol>\n<li>\n<p>You want to improve security by restricting the access to commands and keys, so that untrusted clients have no access and trusted clients have just the minimum access level to the database in order to perform the work needed. For instance, certain clients may just be able to execute read only commands.</p>\n</li>\n<li>\n<p>You want to improve operational safety, so that processes or humans accessing Redis are not allowed to damage the data or the configuration due to software errors or manual mistakes. For instance, there is no reason for a worker that fetches delayed jobs from Redis to be able to call the <code>FLUSHALL</code> command.</p>\n</li>\n</ol>\n<p>Another typical usage of ACLs is related to managed Redis instances. Redis is often provided as a managed service both by internal company teams that handle the Redis infrastructure for the other internal customers they have, or is provided in a software-as-a-service setup by cloud providers. In both setups, we want to be sure that configuration commands are excluded for the customers.</p>\n</blockquote>",
  "<p>For me this is actually the relevant part.<br>\nThe app should only be granted the required permissions to do what it needs to, but not able to execute dangerous admin commands.</p>",
  "<p>From what it seems the uwsgi exporter can also not be used in a docker setup right now, as it only uses a socket hardcoded and sharing that one with the exporter container is a huge pain. I have to see what other alternatives I can come up with for that one.</p>",
  "<p>That's a reasonable thought for defense-in-depth, but the redis bindings we're using don't allow for arbitrary command execution -- so I don't think it actually accomplishes much.  Any codepath which allows for arbitrary command execution on Redis is going to be a big problem regardless of if it can <code>FLUSHALL</code>.  And even <code>FLUSHALL</code> is only moderately problematic, since we treat Redis as non-durable storage -- it's only used for rate-limiting and very-short-term auth information.</p>\n<p>A similar proposal would be like splitting the <code>zulip</code> PostgreSQL user into two, one which can do DDL, and the other which can do queries.  Moderately complicated to do, and there's not a lot of actual protection it affords -- if lower-privileged account can still <code>DELETE</code> (which it has to to in usual operation) then there's little difference between its allowed <code>DELETE FROM zerver_messages</code> and the disallowed <code>DROP TABLE zerver_messages</code>.</p>",
  "<p>I guess we do not need that <code>select_related</code> call since we do not use any related fields from the <code>UserMessage</code> object fetched using that query.</p>",
  "<p>Practically, the only useful metric from uwsgi is the number of busy uwsgi processes -- uwsgi either needs to be built with <a href=\"https://github.com/unbit/uwsgi-netlink\">https://github.com/unbit/uwsgi-netlink</a> or needs to talk to nginx over a network socket in order to provide queue backlog information.</p>\n<p>I think we'd happily take a PR to change the <code>stats=</code> to be configurable via a <code>zulip.conf</code> value, though.</p>",
  "<p>Following up on this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/restricting.20PMs/near/1712428\">said</a>:</p>\n<blockquote>\n<p>I guess we do not need that <code>select_related</code> call since we do not use any related fields from the <code>UserMessage</code> object fetched using that query.</p>\n</blockquote>\n<p>Should we lint-ban <code>select_related</code>/<code>prefetch_related</code> without parameters?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git grep &#39;_related\\(\\)&#39;\ndocs/contributing/code-style.md:bars = Bar.objects.filter(...).select_related()\ndocs/contributing/code-style.md:    using `.select_related()` ([see above](#avoid-excessive-database-queries)!),\ndocs/testing/testing-with-django.md:remedy is often just to call `select_related()`, but sometimes it\nzerver/lib/default_streams.py:    # select_related() with not arguments (and thus joined to too many tables).\nzerver/lib/subscription_info.py:    The caller can refine this query with select_related(), values(), etc. depending\nzerver/migrations/0273_migrate_old_bot_messages.py:        return UserProfile.objects.select_related().get(\nzerver/models/messages.py:        return UserMessage.objects.select_related().get(\nzerver/models/streams.py:        # Stream.objects.select_related().filter(name__iexact__in=stream_names,\n</code></pre></div>",
  "<p>We got this reply on <a href=\"https://github.com/zulip/zulip/pull/28317\">#28317</a>:</p>\n<blockquote>\n<p>Thanks - who can make a change to Docker / Docker Compose for zulip-docker and zulip/zulip-postgresql if the default is now going to be Postgres 16? It's currently stuck on an old and vulnerable version of Postgres 14.</p>\n</blockquote>\n<p>We should probably look at upgrading the Docker postgres image, though we need to be careful bumping the major version.</p>",
  "<p>Seems like a good idea considering how few cases there are to audit.</p>",
  "<p>We have a technique for doing major version upgrades now, but it's not exactly turnkey.</p>",
  "<p>Yeah, there are only two actual calls in that list.</p>",
  "<p>We should upgrade zulip/zulip-postgresql:14 to the current 14.x regardless of whether we add a :16, because existing users have :14 in their docker-compose.yml.</p>",
  "<p>Yeah.</p>",
  "<p>And the minor versions are on-disk-storage compatible, so don't require any upgrade steps.</p>",
  "<p>it would also help to regularly update the container images for a specific version.</p>\n<p><code>groonga/pgroonga:latest-alpine-14-slim</code> was last updated on <code>2023-12-18T20:27:46.800191984Z</code><br>\nvs.<br>\n<code>zulip-postgresql:14</code> on <code>2022-04-16T01:19:25.7187071Z</code></p>\n<p>This <em>should</em> not break the database, as the major pg version stays the same, but would increase security.</p>\n<p>see also <a href=\"https://github.com/zulip/docker-zulip/issues/421\">https://github.com/zulip/docker-zulip/issues/421</a></p>",
  "<p>Hm. <code>groonga/pgroonga:latest-alpine-14-slim</code> looks to currently only have amd64 arch images.  At some point it had arm64 images as well, since we have a zulip/zulip-postgresql which has arm64.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"147\">@kou</span>: Can you build multiarch versions of the <code>groonga/pgroonga</code> images?</p>",
  "<p>I have some memory of doing that manually myself, so they may never have existed upstream.</p>",
  "<p><code>latest-debian-12</code> is multi-arch, so it looks like there's some tooling for it.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/28365\">#28365</a>, we're looking at adding a topic settings object, that at least for now would be , but would be a starting point for any future dense <code>Topic</code> model, so deserves significant design care. I think it'll be a while before we'll be ready to merge that, and I wanted to start some discussion about naming conventions and other things we might want to do to prepare.</p>",
  "<p>I kinda feel like we want to eventually be able to call the model <code>class Topic</code> and have local variables for them be <code>topic</code>, with the name being accessed via something straightforward like <code>topic.name</code>.</p>",
  "<p>So one preparatory refactor that might be a good idea is to rename all our server-side local variables called <code>*topic</code> (e.g. <code>new_topic</code>) to things like <code>new_topic_name</code> -- so that we don't need to think about type collisions in individual code paths where we might want to talk about both <code>Topic</code> objects and strings for the topic name.</p>",
  "<p>Sure! I'll try it!</p>",
  "<p>Thank you!</p>",
  "<p>Done.<br>\n<code>groonga/pgroonga:latest-alpine-14-slim</code>is a multiarch image now.</p>",
  "<p>Amazing.  Thank you!</p>",
  "<p>Hello everyone, I am currently working on this <a href=\"https://github.com/zulip/zulip/pull/25168\">#25168</a> and i need help with links that have open graph meta tags to test my changes, please feel free to drop links here. Thank you so much</p>",
  "<p>Makes sense to me.  I have always been a huge proponent of adding a Topic model, and I still stand behind it.  I believe it was Alex who pointed out some security issues with a naive concept of topic ids where you can use their sequential nature to plausibly snoop on topics. I don't remember the details super well, but I think at the time I was convinced that we need some kind of hash to represent topics if we get away from names.  I think we clearly need to get away from names.  Hashes are clumsy at times, but I think that's the solution.</p>\n<p>Not sure if this is super relevant to what Tim proposes.  I think Tim's idea is sensible with or without the historical context that I am giving.</p>\n<p>I hope this goes forward!</p>",
  "<p>So is the next step here to build the updated postgres 14 image for Docker?</p>",
  "<p>OK I think the next step is to do such a bulk-renaming operation on local variables in the server named <code>topic</code> or <code>new_topic</code> or whatnot that have type string.</p>",
  "<p>Starting pinned topics was one of my first tasks after joining topic, and soon after suggested we make a topic model with topic IDs.  You can see more of what I wrote on that <a href=\"https://paper.dropbox.com/doc/Why-should-we-have-topic-IDs--CHQ3B827cPaDQIQOn0AaeQxcAg-5SEdwDAY9vlBjv3JHnzeo\">here</a> and <a href=\"https://paper.dropbox.com/doc/Topic-IDs--CHTVsFqgS96Bix1Cu_SluZ3YAg-9iSYEXlik9BMMK9uqmTh2\">here</a> if that helps!</p>",
  "<p>Starting with renaming \"topic\" to \"topic_name\" sounds like a great first step!</p>",
  "<p>Hi :) I wonder whether it would be possible to change a message's reactions which use a certain emoji to another emoji? Would the clients pick up the change?</p>",
  "<p>I still really need this</p>",
  "<p>We can close <a href=\"https://github.com/zulip/docker-zulip/issues/421\">https://github.com/zulip/docker-zulip/issues/421</a> when we release the updated image for this.</p>",
  "<p>As I had to do quite some digging initially, starting from the <a href=\"https://hub.docker.com/r/zulip/zulip-postgresql\">docker hub page</a> to get to the actual <a href=\"https://github.com/zulip/zulip/blob/main/Dockerfile-postgresql\">Dockerfile</a> to see what is under the hood, which was not the greatest experience.</p>\n<p>Therefore I have some suggestions around that experience</p>\n<ol>\n<li>\n<p>It would be really helpful if the docker hub page gives you a bit more information, like</p>\n<ul>\n<li>about the container usage</li>\n<li>which is the base container used</li>\n<li>link to the repository</li>\n</ul>\n</li>\n<li>\n<p>What is the specific reason, that the pg is part of the <code>zulip</code> and not of the <code>docker-zulip</code> repo?<br>\n   Of course I initially looked into the docker repo, as it has already the name init, but again no dockerfile or a reference to the one in the main repo. A small note in the README in <code>docker-zulip</code> would really help, as it is also used in the compose file.</p>\n</li>\n</ol>\n<blockquote>\n<p>Feel free to move this one to a new Topic if you think it fit's better somewhere else.</p>\n</blockquote>",
  "<p>I've pushed an updated <code>zulip/zulip-postgresql-14</code> image.</p>",
  "<p>I don't know of any reasonable reason that the Postgres Dockerfile is in the <code>zulip</code> repo as opposed to the <code>docker-zulip</code> repo.</p>",
  "<p>I think it might share some SQL code with zulip/zulip?</p>",
  "<p>Hm, <code>puppet/zulip/files/postgresql/zulip_english.stop</code> and <code>scripts/setup/create-db.sql</code></p>",
  "<p>I suspect if you google around, you can find some database of sample open graph URLs to use.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"17322\">@Robert (ro-i)</span> it's certainly possible to write a management command to do that. I would expect with the simplest implementation, where you call the <code>zerver/actions/reactions.py</code> functions to remove the old emoji and then add the new one, clients will live-update.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/topic.20model.20preparation/near/1716481\">said</a>:</p>\n<blockquote>\n<p>OK I think the next step is to do such a bulk-renaming operation on local variables in the server named <code>topic</code> or <code>new_topic</code> or whatnot that have type string.</p>\n</blockquote>\n<p>I'm starting the work on this.</p>",
  "<p>PR: <a href=\"https://github.com/zulip/zulip/pull/28559\">#28559</a></p>\n<p>I approached this renaming work, directory wise: <code>zerver/actions</code>, <code>zerver/lib</code>, so on. Most of the things are covered, the remaining things are:</p>\n<ul>\n<li><code>analytics/</code></li>\n<li><code>corporate/</code></li>\n<li><code>zerver/webhooks/</code></li>\n</ul>\n<p>We can merge this and I can do a separate PR for the rest, or I'll include them in this PR only -- whatever feels good.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> this felt pretty good, merged this. I don't think we need to be exhaustive, just cover the stuff that's easy to bulk-update.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/28603\">#28603</a> &amp; <a href=\"https://github.com/zulip/zulip/pull/28559\">#28559</a> completes the bulk-update work (mostly).</p>",
  "<p>would it maybe make sense to create a dedicated stream for docker topics?</p>",
  "<p>Or containerized deployments in general. Podman user here.</p>",
  "<p>Hmm. I worry about reduced visibility for a separate stream; I guess we could copy membership from <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a>.</p>",
  "<p>Or <a class=\"stream\" data-stream-id=\"31\" href=\"/#narrow/stream/31-production-help\">#production help</a>? Or the self-hosted group?</p>",
  "<p>Given motivation of moving towards stream groups, what about migrating towards something like:<br>\n<code>#deployments/chat.zulip.org</code> (=<code>#chat.zulip.org</code>?)<br>\n<code>#deployments/containerized</code> (for the above)<br>\n<code>#deployments/general</code> (= <code>#production help</code>?)<br>\n<code>#deployments/zulip cloud</code> (= <code>#zulip cloud</code> ?)</p>",
  "<p>Hi everyone, I am working on <a href=\"https://github.com/zulip/zulip/pull/22143\">#22143</a> what database do i use to integrate the emoji  search feature PostgreSQL or PGroonga. From what I read in the documentation Zulip will be switching to PGroonga.</p>",
  "<p>We have no immediate plans to complete switching to PGroonga, but ideally one would make it work for both.</p>",
  "<p>I'd start with just looking at what is actually present in the <code>tsearch</code> columns for messages containing unicode emoji.</p>",
  "<p>Hmm. Some organization may help, and \"deployments\" is a right word, but I'm not sure how intuitive that would be for end users.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/provision.20via.20nix/near/1627980\">said</a>:</p>\n<blockquote>\n<p>Opened <a href=\"https://github.com/nix-community/poetry2nix/pull/1267\">https://github.com/nix-community/poetry2nix/pull/1267</a> for <code>subdirectory</code> support.</p>\n</blockquote>\n<p>Given that <a href=\"https://github.com/nix-community/poetry2nix/pull/1267\">https://github.com/nix-community/poetry2nix/pull/1267</a> has been merged, there shouldn't be any major blocker yet to using poetry2nix for provisioning?</p>",
  "<p>Looks like I didn't reply to this back in 2022. I was just reminded of it from <a href=\"https://github.com/zulip/zulip/pull/28640\">#28640</a>.</p>\n<p>Mostly I've tried to have the mobile code treat 1:1 DMs and group DMs uniformly. Then one consequence is that it doesn't need names for the two concepts separately.</p>",
  "<p>(There are a variety of places where we have to <em>condition</em> on group DM vs. 1:1 DM, mainly because of various places where the server API isn't quite uniform in how it handles them. Those get written with conditionals like:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">userIds</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Self-PM.</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">userIds</span><span class=\"p\">[</span><span class=\"mf\">0</span><span class=\"p\">].</span><span class=\"nx\">toString</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">userIds</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Non-self 1:1 PM.  Unlike display_recipient, leave out the self user.</span>\n<span class=\"w\">    </span><span class=\"c1\">// [\u2026]</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">userIds</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">userId</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">userId</span><span class=\"w\"> </span><span class=\"o\">!==</span><span class=\"w\"> </span><span class=\"nx\">ownUserId</span><span class=\"p\">)[</span><span class=\"mf\">0</span><span class=\"p\">].</span><span class=\"nx\">toString</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Group PM.</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">userIds</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>But those are largely kept local, inside the implementation of individual functions.)</p>",
  "<p>Then for those times when we do need such a name, what we've done in a few places is say \"1 to 1 PM\". (zulip-mobile hasn't taken the \"private\" \u2192 \"direct\" rename in its code, only its user-facing strings.) So e.g.</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"cm\">/**</span>\n<span class=\"cm\"> * A 1:1 PM narrow, possibly with self.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * This has the same effect as calling pmNarrowFromUsers, but for code that</span>\n<span class=\"cm\"> * statically has just one other user it's a bit more convenient because it</span>\n<span class=\"cm\"> * doesn't require going through our `recipient` helpers.</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">pm1to1NarrowFromUser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">UserOrBot</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Narrow</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"nx\">pmNarrowInternal</span><span class=\"p\">(</span><span class=\"nx\">pmKeyRecipientsFor1to1</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">user_id</span><span class=\"p\">));</span>\n</code></pre></div>",
  "<p>That naming is slightly awkward because identifiers can't start with a digit; when the term belongs at the start of a name, we flip it around to say <code>pm1to1FooBar</code>, as in the example above.</p>",
  "<p>In zulip-flutter, I think we may have zero names so far that need to refer to the distinction. The analogue of <code>pm1to1NarrowFromUser</code> is a constructor for the <code>DmNarrow</code> class that's just called <code>DmNarrow.withUser</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Dart\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">/// A [DmNarrow] for a 1:1 DM conversation, either with self or otherwise.</span>\n<span class=\"w\">  </span><span class=\"kd\">factory</span><span class=\"w\"> </span><span class=\"n\">DmNarrow</span><span class=\"p\">.</span><span class=\"n\">withUser</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">userId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"kd\">required</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">selfUserId</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">DmNarrow</span><span class=\"p\">(</span><span class=\"nl\">selfUserId:</span><span class=\"w\"> </span><span class=\"n\">selfUserId</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"nl\">allRecipientIds:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">userId</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">selfUserId</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">selfUserId</span><span class=\"p\">]</span>\n<span class=\"w\">                       </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">userId</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">selfUserId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">userId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">selfUserId</span><span class=\"p\">]</span>\n<span class=\"w\">                       </span><span class=\"o\">:</span><span class=\"w\">                         </span><span class=\"p\">[</span><span class=\"n\">selfUserId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">userId</span><span class=\"p\">]);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span> <a href=\"#narrow/stream/3-backend/topic/Renaming.20Recipient.2EPERSONAL/near/1725731\">said</a>:</p>\n<blockquote>\n<p>Then for those times when we do need such a name, what we've done in a few places is say \"1 to 1 PM\".</p>\n</blockquote>\n<p>Yeah, OK, and in fact there are really only two examples of that in the codebase:</p>\n<ul>\n<li><code>pm1to1NarrowFromUser</code> as mentioned above;</li>\n<li>the React component <code>New1to1PmScreen</code> which is what you get with the \"New DM\" button on the list-of-DM-conversations screen.</li>\n</ul>\n<p>Looking at <code>git grep -ho '\\w+1[a-zA-Z]+1\\w*' src | sort | uniq -c</code>, the other matches are (a) <code>pmKeyRecipientsFor1to1</code>, whose only non-test call site is the one quoted above, so morally it's a private helper for <code>pm1to1NarrowFromUser</code>; (b) <code>is1to1PmNarrow</code> which is a silly trivial legacy function with one non-test call site; (c) a local variable inside one test.</p>",
  "<p>Since writing that, I was thinking that specific deployments (czo/cloud) may be useful being distinct from general styles of deployment (general/containerized), though a common prefix/grouping would still be useful if it could be achieved.</p>",
  "<p>Maybe some insights on my thought process for asking the initial question.</p>\n<p>As we are running the container version, I keep finding myself searching through various streams trying to find existing discussions about a topic or an issue.<br>\nHaving found something, I still have to wade through the conversations to see if it is a common topic or one specific for the container setup (as not all topics have docker-zulip in the title like this one)<br>\nAt least for me, having these topics grouped together in a dedicated stream would make my life easier.</p>\n<p>On the other hand fragmenting the information and making the decision, which would be the right stream will still be tricky, as a discussion usually include and overlap with other topics or parts of the system.<br>\nTherefore I fully agree with <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>'s  concerns about reduced visibility and usability for the end users.</p>\n<p>Alternatively, to go back to this topic, a small mention in the documentation, or in the docker-zulip README about the differences between the available deployment methods would most likely have saved me from chasing down the rabbit hole.</p>",
  "<p>Would it be feasible to move the settings in question to someplace that they could be managed by the UI? I don\u2019t use the docker version so I may be completely misunderstanding the issue but thought I\u2019d throw that out there anyways.</p>",
  "<p>My current thinking as part of <a class=\"stream-topic\" data-stream-id=\"2\" href=\"/#narrow/stream/2-general/topic/Renaming.20Huddle.20to.20DirectMessageGroup\">#general &gt; Renaming Huddle to DirectMessageGroup</a> is that we would just rename <code>HUDDLE</code> to <code>DIRECT_MESSAGE_GROUP</code> and then <code>Recipient.PERSONAL</code> would cease to exist once that project is completed.</p>\n<p>That's currently listed as the first bullet in <a href=\"https://github.com/zulip/zulip/pull/28640\">#28640</a>.</p>",
  "<p>We will want to have a <code>size</code> field (name TBD) on the new direct message group objects -- so it should be easy to check that without fetching additional rows from somewhere else, where that's useful.</p>",
  "<p>(deleted)</p>",
  "<p>We've gotten more reports of this in 8.1 -- e.g. <a class=\"stream-topic\" data-stream-id=\"31\" href=\"/#narrow/stream/31-production-help/topic/Sending.20message.20takes.20too.20long\">#production help &gt; Sending message takes too long</a></p>",
  "<p>I've got a lot on my plate right now; it would be good if someone else could take a look at this, because it seems like a notable regression which is negatively affecting users' experience.</p>",
  "<p>There's a memory leak in <code>uwsgi</code> processes that we should probably debug using a production system. But that's unlikely to be the cause of a new problem on upgrade to 8.x -- it appears to be a fairly slow leak. One thing we've noticed is that the minimal memory usage of Zulip <code>uwsgi</code> processes in production seems to be higher than I remember in past versions.</p>\n<p>I wonder if there's a good way to investigate whether there's unexpectedly huge dependencies being pulled in to our Python processes? I remember we found a bunch of bugs a couple years ago involving unused Python code imported by badly written modules consuming a ton of CPU (and presumably also memory) resources.</p>",
  "<p>Any ideas on how to investigate that?</p>",
  "<p>For an 8.2 release, the stopgap answer is to reduce <code>uwsgi_processes</code> in some memory range; let me see about doing a quick PR for that.</p>",
  "<p>I have <a href=\"https://www.youtube.com/watch?v=bw5AHdZA7e4\">heard</a> that <a href=\"https://bloomberg.github.io/memray/\">Memray</a> is useful in such cases.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bw5AHdZA7e4\" href=\"https://www.youtube.com/watch?v=bw5AHdZA7e4\"><img src=\"/external_content/79d383df8d2a3bba034f29af9fe38c14cd0c2cc3/68747470733a2f2f692e7974696d672e636f6d2f76692f6277354148645a413765342f64656661756c742e6a7067\"></a></div>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/28755\">#28755</a> with a proposal for how to adjust how many processes we use:</p>\n<ul>\n<li>Moves the minimum memory for multiprocess mode to 3800MiB from 3500MiB; this is still higher 4000MB that you sometimes get from hosting providers selling \"4GB\" systems.</li>\n<li>Changes how we calculate the default for <code>uwsgi_processes</code> to increase in a more stepped fashion, and in particular not increase from 4 to 6 until 6000MB.</li>\n</ul>",
  "<p><span class=\"user-mention silent\" data-user-id=\"26910\">Saurabh Purkar</span> <a href=\"#narrow/stream/3-backend/topic/Unable.20to.20connect.20local.20PostgreSQL.20database.20using.20pgAdmin/near/1565383\">said</a>:</p>\n<blockquote>\n<p>Hi everyone, I followed the instruction given in the dev_tools to connect local PostgreSql database using pgadmin<br>\n<a href=\"/user_uploads/2/75/GEVKmDU8R_7fPxRUgI5Un57s/image.png\">image.png</a><br>\nBut I am not able getting the  following error while connecting. Can anyone suggest what is wrong here?<br>\n<a href=\"/user_uploads/2/0/cmUlcmSrTFbhdKKJfoF57IUI/image.png\">image.png</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"26910\">@Saurabh Purkar</span>  Hi there please can you share me a link to the instructions ? I really need them.</p>",
  "<p>For the emoji search are we aiming for exact matches,\u00a0similarity-based results,\u00a0or other types of matching?</p>",
  "<p>I would expect this to be exact matching.</p>",
  "<p>From <a href=\"https://github.com/zulip/zulip/pull/28704\">#28704</a>, someone brought up that MicroSoft OneNote has these crazy <code>onenote:https://</code> links and they'd like those links to linkify in Zulip:</p>\n<blockquote>\n<p>If OneNote is installed on your PC and you click such a link, OneNote launches and goes directly to the linked page.<br>\nIt's treated a bit like a \"mailto\" link.</p>\n<p>We only use Zulip and M365. The fact that the latter supports this is self-explanatory. I do not know whether other software supports this scheme. However, it would be nice if Zulip could at least accept the link as it is with the url formatting <code>[OneNote](onenote:https://...)</code>.</p>\n</blockquote>",
  "<p>Presumably we could just tweak our Markdown processor to treat <code>onenote:https://</code> as a valid URL scheme so that this \"works\"? It seems like probably anyone who has such a URL does intend to use that OneNote feature.</p>",
  "<p>Just came across <a href=\"https://github.com/paradedb/paradedb/tree/dev/pg_bm25#overview\">https://github.com/paradedb/paradedb/tree/dev/pg_bm25#overview</a> who may fix this behavior</p>",
  "<p>Thanks for sharing that! That does look really cool; and the <a href=\"https://github.com/paradedb/paradedb/blob/dev/benchmarks/README.md\">benchmarks</a> of it being much faster than the build-in <code>tsvector</code> system seem pretty cool.</p>",
  "<p>It's Affero GPL, however.</p>",
  "<p>Yeah I'm not sure I understand the legal considerations for how that is supposed to work for a postgres extension.</p>",
  "<p>As discussed in <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/group.20permissions.20UI\">#design &gt; group permissions UI</a>, we want to allow users to set a setting to multiple user groups.</p>\n<p>We currently use a <code>ForeignKey</code> field for each setting. Maybe we might need a <code>ManyToMany</code> field now.</p>\n<p>Regarding the API, I think that would just be a list of IDs (and strings for cases like single user groups) instead of the currently used ID. We can discuss this separately if needed in <a class=\"stream\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design\">#api design</a></p>",
  "<p>Yeah, the API part is easy -- a list of group IDs seems clear, and having a <code>_groups</code> rather than <code>_group</code> in the name.</p>",
  "<p>The thing that I'm less sure about is whether we can do some of the query we want to be efficient easily with <code>ManyToManyField</code>; the answer is probably yes but it might take some work.</p>",
  "<p>We'll need to make more use of <code>get_recursive_subgroups_for_groups</code>, certainly.</p>",
  "<p>But the main thing that might be tricky is code like what we have for the handful of settings where we have optimizations where we want to do a <code>select_related</code> and then answer without going back to the database \"Is this specifically just the EVERYONE group?\". Probably that's possible, just with a bit more care required.</p>",
  "<p>What's the case where we use the <code>/notify_tornado</code> endpoint?</p>\n<p>It's only called from <code>send_notification_http</code> in the case where <code>settings.USING_TORNADO and not settings.RUNNING_INSIDE_TORNADO</code>, inside a check in <code>queue_json_publish</code> for <code>not settings.USING_RABBITMQ</code>.</p>\n<p>Which I think translates to only the full-stack test-cases?</p>",
  "<p>Yeah I think that is for the puppeteer tests.</p>",
  "<p>I think I can try to implement this change for one of the existing setting to get an idea of how much complex this would be.</p>",
  "<p>Ok, that's a reasonable prototyping strategy.</p>",
  "<p>Is <a href=\"https://github.com/zulip/zulip/pull/28271\">#28271</a> a useful documentation update? The commit history is pretty messy but the overall diff seems readable enough.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/28529\">#28529</a>, it's proposed that we loosen the <code>check_url</code> validator to accept things that are valid URLs except that they're missing a domain.</p>\n<p>I've forgotten the exact motivation for this, but I'm sure there are installations where a company has set up <code>/etc/hosts</code> to make just <code>https://service/</code> without using public DNS.</p>",
  "<p>I guess questions include whether this is a good idea, and if it is, whether we want to make the behavior controlled by a parameter for whether we're allowing invalid domains, or if that isn't important.</p>",
  "<p>I could also imagine renaming it... and on my mind to some extent is whether we need to replace <code>check_url</code> with a <code>typed_endpoint</code> variant.</p>",
  "<p>This is someone who had a link in their Slack-compatible webhook for <a href=\"https://hostname/\">https://hostname/</a></p>",
  "<p>The way <code>http://service/</code> works is by having DHCP assign a DNS search path that maps <code>service</code> to <code>service.internal.acme.com</code>, not by having everyone edit <code>/etc/hosts</code>. So a fully-qualified equivalent to these short names should always be available.</p>",
  "<p>There should always be a fully-qualified name that could be used in its place, sure.  The question is if we should require that everyone posting things that we validate as \"URLs\" to interact with Zulip by switching to those.</p>",
  "<p>It seems like relaxing this should be fine in principle. (I just commented on this specific implementation.)</p>",
  "<p>I just played with memray, and it was indeed pretty useful -- worth pointing at our workers and django processes, for sure.</p>",
  "<p>nginx is being <a href=\"https://mailman.nginx.org/pipermail/nginx-devel/2024-February/K5IC6VYO2PB7N4HRP2FUQIBIBCGP4WAU.html\">forked by its main developer</a> at <a href=\"https://freenginx.org/\">freenginx.org</a> over security policy disagreements.</p>",
  "<p>Thanks for sharing, not an event that happens often!</p>",
  "<p>I've been noticing a bit of lag doing mark-as-unread actions sometimes on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>. Looking at logs, <code>/json/messages/flags/narrow</code> actions by my account generally take 50-115ms to complete, even in cases where it's literally just a couple messages that were targeted. Sample timing section is <code>107ms (db: 40ms/11q)</code>.</p>\n<p>The change-flags-for-a-specific-set-of-message-IDs endpoint is significantly faster for 1-2 message actions, with a sloe timing section from logs being <code>69ms (db: 27ms/7q)</code>.</p>",
  "<ul>\n<li>One question is whether the web app should be just sending a specific set of message IDs for mark-as-unread requests where <code>message_lists.current.data.fetch_status.has_found_newest</code> -- i.e. the client is certain (to the extent it ever is) that it has all the messages for the current view. This would save the server from needing to ask the database whether there are further messages matching this query.</li>\n</ul>",
  "<ul>\n<li>Another is whether we should profile/optimize those code paths; a presence update is several times faster and I would have thought was a more expensive operation. (sample timing logs: <code>27ms (db: 7ms/2q)</code>).</li>\n</ul>",
  "<p>OK on the optimization front, <code>do_incremental_logging_stat</code> does this:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">_default_manager</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n        <span class=\"nb\">property</span><span class=\"o\">=</span><span class=\"n\">stat</span><span class=\"o\">.</span><span class=\"n\">property</span><span class=\"p\">,</span>\n        <span class=\"n\">subgroup</span><span class=\"o\">=</span><span class=\"n\">subgroup</span><span class=\"p\">,</span>\n        <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"n\">end_time</span><span class=\"p\">,</span>\n        <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"n\">increment</span><span class=\"p\">},</span>\n        <span class=\"o\">**</span><span class=\"n\">id_args</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">created</span><span class=\"p\">:</span>\n        <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">\"value\"</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">increment</span>\n        <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"value\"</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>and that could definitely be done in a single database query rather than fetching the data into Python. We call it twice for two different <code>CountStat</code> objects in this code path, so we could cut two queries/RTTs to the database that way.</p>",
  "<p>Another thing that's a bit fishy, looking at the logs, is that I think the presence of the <code>batch_size</code> (of 2000) is causing Django to do 3 queries for what I would have thought would be a single <code>UPDATE</code> operation:</p>\n<div class=\"codehilite\"><pre><span></span><code>query = (\n    UserMessage.select_for_update_query()\n    .filter(user_profile=user_profile)\n    .extra(where=[UserMessage.where_unread()])[:batch_size]\n)\n# This updated_count is the same as the number of UserMessage\n# rows selected, because due to the FOR UPDATE lock, we&#39;re guaranteed\n# that all the selected rows will indeed be updated.\n# UPDATE queries don&#39;t support LIMIT, so we have to use a subquery\n# to do batching.\nupdated_count = UserMessage.objects.filter(id__in=query).update(\n    flags=F(&quot;flags&quot;).bitor(UserMessage.flags.read),\n)\n</code></pre></div>\n<p>turns into this:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">BEGIN</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"flags\"</span><span class=\"p\">,</span>\n<span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span>\n<span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">ASC</span><span class=\"w\"> </span><span class=\"k\">FOR</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">OF</span>\n<span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span>\n<span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nb\">Bit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"n\">is_set</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">010</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">COMMIT</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span>\n<span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n</code></pre></div>",
  "<p>I'm not totally sure why it needs to do that select-update-reselect workflow.</p>",
  "<p>Oh, it's probably not the batching, it's likely <code>UserMessage.select_for_update_query()</code>.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/28947\">#28947</a> for the <code>do_increment_logging_stat</code> issue, and <a href=\"https://github.com/zulip/zulip/pull/28945\">#28945</a> for using a better endpoint. </p>\n<p>I'm not sure if anything can readily be done about the <code>select_for_update</code> locking cost without creating other problems.</p>",
  "<p>Django provides an <code>update_or_create</code> method that combines the logic of <code>get_or_create</code> with the ability to update fields in a single query. We can use <code>update_or_create</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>row, created = table._default_manager.update_or_create(\n    property=stat.property,\n    subgroup=subgroup,\n    end_time=end_time,\n    defaults={&quot;value&quot;: F(&quot;value&quot;) + increment},\n    **id_args,\n)\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"29637\">Ankit Suryawanshi</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1740183\">said</a>:</p>\n<blockquote>\n<p>Django provides an <code>update_or_create</code> method that combines the logic of <code>get_or_create</code> with the ability to update fields in a single query. We can use <code>update_or_create</code> like this:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>row, created = table._default_manager.update_or_create(\n    property=stat.property,\n    subgroup=subgroup,\n    end_time=end_time,\n    defaults={&quot;value&quot;: F(&quot;value&quot;) + increment},\n    **id_args,\n)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank You Ankit,</p>",
  "<p>The <code>F</code> here is being used to increment the values automatically? Am I right..</p>",
  "<p>(deleted)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"29754\">Mahhheshh</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1740943\">said</a>:</p>\n<blockquote>\n<p>The <code>F</code> here is being used to increment the values automatically? Am I right..</p>\n</blockquote>\n<p>The 'F' character can only be used if an entry exists in the database; it cannot be used for insertion operations.</p>",
  "<p>In Django 5, <code>create_defaults</code> argument has been introduced so below snippet can work, (not tested)</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">_default_manager</span><span class=\"o\">.</span><span class=\"n\">update_or_create</span><span class=\"p\">(</span>\n        <span class=\"nb\">property</span><span class=\"o\">=</span><span class=\"n\">stat</span><span class=\"o\">.</span><span class=\"n\">property</span><span class=\"p\">,</span>\n        <span class=\"n\">subgroup</span><span class=\"o\">=</span><span class=\"n\">subgroup</span><span class=\"p\">,</span>\n        <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"n\">end_time</span><span class=\"p\">,</span>\n        <span class=\"n\">defaults</span><span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">\"value\"</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">increment</span><span class=\"p\">},</span> <span class=\"c1\"># update the value field if the row already exists</span>\n        <span class=\"n\">create_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"n\">increment</span><span class=\"p\">},</span> <span class=\"c1\"># create a new row with the value field set to increment</span>\n        <span class=\"o\">**</span><span class=\"n\">id_args</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</code></pre></div>",
  "<p><span class=\"user-mention\" data-user-id=\"29754\">@Mahhheshh</span> I think the next step would be to actually test that logic, and make sure it both produces correct results and in fact does a single postgres query.</p>",
  "<p>Sure! I will get back to you soon.</p>",
  "<p>in the newer version of Django (5), they have implemented <code>update_or_create</code> like this<br>\n<a href=\"https://github.com/django/django/blob/31314980be428c0ab8a6cf40cce0a0c17ead8ec6/django/db/models/query.py#L930-L1012\">https://github.com/django/django/blob/31314980be428c0ab8a6cf40cce0a0c17ead8ec6/django/db/models/query.py#L930-L1012</a><br>\nin which they have done </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">update_defaults</span> <span class=\"o\">=</span> <span class=\"n\">defaults</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n<span class=\"k\">if</span> <span class=\"n\">create_defaults</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"n\">create_defaults</span> <span class=\"o\">=</span> <span class=\"n\">update_defaults</span>\n<span class=\"c1\"># more code here</span>\n    <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">select_for_update</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n                <span class=\"n\">create_defaults</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n            <span class=\"p\">)</span>\n</code></pre></div>\n<p>so I tried to do same for our Django version (4.2.9), </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">custom_update_or_create</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">create_defaults</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"n\">defaults</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n    <span class=\"n\">create_defaults</span> <span class=\"o\">=</span> <span class=\"n\">create_defaults</span> <span class=\"ow\">or</span> <span class=\"n\">defaults</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">defaults</span><span class=\"si\">=}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">create_defaults</span><span class=\"si\">=}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">_default_manager</span><span class=\"o\">.</span><span class=\"n\">update_or_create</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"n\">create_defaults</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">created</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Entry did not existed before created new entry\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">created</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Entry existed before updating the entry\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n</code></pre></div>\n<p>for some weird reason, it always updates the entry. (previously it was not). I will be looking into this</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"29754\">Mahhheshh</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1741248\">said</a>:</p>\n<blockquote>\n<p>previously it was not</p>\n</blockquote>\n<p>sending a message from the first account and then logging into the second account to mark the message as read was previously causing an insertion query to be created.</p>",
  "<p>Is it time to proceed with dropping older version compatibility and then upgrading Django?</p>",
  "<p>That <code>update_or_create</code> logic in Django 5 looks like it always does two database queries, though, right?</p>",
  "<p><a href=\"https://discourse.ubuntu.com/t/noble-numbat-release-schedule/35649\">24.04 hits feature freeze on the 29th</a>, as well.</p>",
  "<p>We do a raw SQL thing in one place in <code>zerver/worker/queue_processors.py</code> that does a single query:</p>\n<div class=\"codehilite\"><pre><span></span><code>        # Perform a single bulk UPSERT for all of the rows\n        sql_query = SQL(\n            &quot;&quot;&quot;\n            INSERT INTO zerver_useractivity(user_profile_id, client_id, query, count, last_visit)\n            VALUES {rows}\n            ON CONFLICT (user_profile_id, client_id, query) DO UPDATE SET\n                count = zerver_useractivity.count + excluded.count,\n                last_visit = greatest(zerver_useractivity.last_visit, excluded.last_visit)\n            &quot;&quot;&quot;\n        ).format(rows=SQL(&quot;, &quot;).join(rows))\n        with connection.cursor() as cursor:\n            cursor.execute(sql_query)\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1741254\">said</a>:</p>\n<blockquote>\n<p>That <code>update_or_create</code> logic in Django 5 looks like it always does two database queries, though, right?</p>\n</blockquote>\n<p>It uses <code>get_or_create</code> under the hood</p>",
  "<p>Right, and <code>get_or_create</code> is going to do two queries every time after the first that you use it to update something -- first one to fetch the object, then a second to do the write after updating the value in Python.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1741263\">said</a>:</p>\n<blockquote>\n<p>Right, and <code>get_or_create</code> is going to do two queries every time after the first that you use it to update something -- first one to fetch the object, then a second to do the write after updating the value in Python.</p>\n</blockquote>\n<p>yes!</p>",
  "<p>So I think we need to do the UPSERT manually in SQL.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1741259\">said</a>:</p>\n<blockquote>\n<p>We do a raw SQL thing in one place in <code>zerver/worker/queue_processors.py</code> that does a single query:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>        # Perform a single bulk UPSERT for all of the rows\n        sql_query = SQL(\n            &quot;&quot;&quot;\n            INSERT INTO zerver_useractivity(user_profile_id, client_id, query, count, last_visit)\n            VALUES {rows}\n            ON CONFLICT (user_profile_id, client_id, query) DO UPDATE SET\n                count = zerver_useractivity.count + excluded.count,\n                last_visit = greatest(zerver_useractivity.last_visit, excluded.last_visit)\n            &quot;&quot;&quot;\n        ).format(rows=SQL(&quot;, &quot;).join(rows))\n        with connection.cursor() as cursor:\n            cursor.execute(sql_query)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't have much experience with raw SQL queries,</p>",
  "<p>(<span class=\"user-mention\" data-user-id=\"29754\">@Mahhheshh</span>: there's no need to quote every message you reply to)</p>",
  "<p>oh sorry! My bad sir</p>",
  "<p><a href=\"https://zulip.com/development-community/#communication-style\">No need to call folks here \"sir,\"</a> either.  I do suggest giving our <a href=\"https://zulip.com/development-community/#community-norms\">community guidelines</a> a read. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Should I abandon the issue so someone else with better SQL skills can help ship it faster?</p>",
  "<p>I think you could try reading the code that I pointed to as a working example of how to do this exact pattern correctly, and see if you're able to get it to work for this use case. I don't think deeper SQL expertise is required to do so, if you're willing to spend some time reading/thinking/testing your work.</p>",
  "<p>alright! will try finish it ASAP <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span></p>",
  "<p>I\u2019m still waiting for the Zulip Cloud migration off of Ubuntu 20.04.</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">id_args_keys</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span><span class=\"s2\">\", \"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">Identifier</span><span class=\"p\">,</span> <span class=\"n\">id_args</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span><span class=\"s2\">\", \"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">Literal</span><span class=\"p\">,</span> <span class=\"n\">id_args</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n<span class=\"n\">sql_query</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    INSERT INTO {table_name}(property, subgroup, end_time, value, {id_args_keys})</span>\n<span class=\"sd\">    VALUES (%s, %s, %s, %s, {id_args_values})</span>\n<span class=\"sd\">    ON CONFLICT (property, subgroup, end_time, {id_args_keys_update})</span>\n<span class=\"sd\">    DO UPDATE SET</span>\n<span class=\"sd\">    value = {table_name}.value + %s</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">db_table</span><span class=\"p\">),</span>\n    <span class=\"n\">id_args_keys</span><span class=\"o\">=</span><span class=\"n\">id_args_keys</span><span class=\"p\">,</span>\n    <span class=\"n\">id_args_values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span>\n    <span class=\"n\">id_args_keys_update</span><span class=\"o\">=</span><span class=\"n\">id_args_keys</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sql_query</span><span class=\"p\">)</span>\n<span class=\"n\">parameter_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">stat</span><span class=\"o\">.</span><span class=\"n\">property</span><span class=\"p\">,</span> <span class=\"n\">subgroup</span><span class=\"p\">,</span> <span class=\"n\">end_time</span><span class=\"p\">,</span> <span class=\"n\">increment</span><span class=\"p\">,</span> <span class=\"n\">increment</span><span class=\"p\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql_query</span><span class=\"p\">,</span> <span class=\"n\">parameter_list</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I am getting an error: psycopg2.ProgrammingError: can't adapt type 'Realm'</p>",
  "<blockquote>\n<p>error: psycopg2.ProgrammingError: can't adapt type 'Realm'</p>\n</blockquote>\n<p>solved, previously in <code>id_args</code> the models were passed as is (python objects) that's why the error was occurring</p>",
  "<p>I have encountered an error <code>psycopg2.errors.InvalidColumnReference: there is no unique or exclusion constraint matching the ON CONFLICT specification</code></p>",
  "<p>Can you put up a draft PR with your code?</p>",
  "<p>sure <a href=\"https://github.com/zulip/zulip/pull/29027\">#29027</a></p>",
  "<p>Left a couple comments.  The short answer is \"partial indexes make this harder.\"</p>",
  "<p>I will take a look at it</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">where_clause</span><span class=\"p\">:</span> <span class=\"n\">Composable</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span><span class=\"s2\">\"WHERE subgroup IS NOT NULL\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">subgroup</span> <span class=\"ow\">is</span>  <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">where_clause</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span><span class=\"s2\">\"WHERE subgroup IS NULL\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I tried to add a simple if-else to generate dynamic, but the issue still persists.</p>",
  "<p>should we update the database constraints??</p>",
  "<p>the updated sql query</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">sql_query</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        INSERT INTO {table_name}(property, subgroup, end_time, value, {id_args_keys})</span>\n<span class=\"sd\">        VALUES (%s, %s, %s, %s, {id_args_values})</span>\n<span class=\"sd\">        ON CONFLICT (property, subgroup, end_time, {id_args_keys_update})</span>\n<span class=\"sd\">       {where_clause}</span>\n<span class=\"sd\">       DO UPDATE SET</span>\n<span class=\"sd\">        value = {table_name}.value + excluded.value</span>\n<span class=\"sd\">        \"\"\"</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">db_table</span><span class=\"p\">),</span>\n        <span class=\"n\">id_args_keys</span><span class=\"o\">=</span><span class=\"n\">id_args_keys</span><span class=\"p\">,</span>\n        <span class=\"n\">id_args_values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span>\n        <span class=\"n\">id_args_keys_update</span><span class=\"o\">=</span><span class=\"n\">id_args_keys</span><span class=\"p\">,</span>\n        <span class=\"n\">where_clause</span><span class=\"o\">=</span><span class=\"n\">where_clause</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</code></pre></div>",
  "<p>I have found a similar issue on the PostgreSQL <code>Partial Indexes</code> on GitHub, <a href=\"https://github.com/artiomchi/FlexLabs.Upsert/issues/113\">https://github.com/artiomchi/FlexLabs.Upsert/issues/113</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> Is this issue still open?<br>\nIf yes, I'd like to work on this. Also, can you suggest some references on how to resolve this issue.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"29754\">@Mahhheshh</span> what precisely did you see as the queries generated with that <code>where_clause</code> conditional?</p>",
  "<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'messages_read::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-02-26T06:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11</span><span class=\"p\">)</span>\n<span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n<span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span>\n<span class=\"w\"> </span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">excluded</span><span class=\"mf\">.</span><span class=\"k\">value</span>\n</code></pre></div>\n<p>the generated query looks like this</p>",
  "<p>in <code>analytics/models.py</code> </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserCount</span><span class=\"p\">(</span><span class=\"n\">BaseCount</span><span class=\"p\">):</span>\n<span class=\"o\">....</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">UniqueConstraint</span><span class=\"p\">(</span>\n                <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"property\"</span><span class=\"p\">,</span> <span class=\"s2\">\"end_time\"</span><span class=\"p\">,</span> <span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"realm\"</span><span class=\"p\">],</span>\n                <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subgroup__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"unique_user_realm_count_null_subgroup\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n</code></pre></div>\n<p>added these unique constraints, <code>mark_message_as_read</code> works fine for stream and topic as well as <code>mark_all_messages</code> as read from inbox.</p>",
  "<p>and here the output</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"mf\">2024</span><span class=\"o\">-</span><span class=\"mf\">02</span><span class=\"o\">-</span><span class=\"mf\">26</span><span class=\"w\"> </span><span class=\"mf\">05</span><span class=\"p\">:</span><span class=\"mf\">59</span><span class=\"p\">:</span><span class=\"mf\">17.278</span><span class=\"w\"> </span><span class=\"n\">DEBG</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">django</span><span class=\"mf\">.</span><span class=\"n\">db</span><span class=\"mf\">.</span><span class=\"n\">backends</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.003</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'messages_read::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-02-26T06:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">15</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n<span class=\"w\">        </span><span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span>\n<span class=\"w\">        </span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">excluded</span><span class=\"mf\">.</span><span class=\"k\">value</span>\n<span class=\"w\">        </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'messages_read::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mf\">2024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">timezone</span><span class=\"mf\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mf\">6</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"mf\">2024</span><span class=\"o\">-</span><span class=\"mf\">02</span><span class=\"o\">-</span><span class=\"mf\">26</span><span class=\"w\"> </span><span class=\"mf\">05</span><span class=\"p\">:</span><span class=\"mf\">59</span><span class=\"p\">:</span><span class=\"mf\">17.281</span><span class=\"w\"> </span><span class=\"n\">DEBG</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">django</span><span class=\"mf\">.</span><span class=\"n\">db</span><span class=\"mf\">.</span><span class=\"n\">backends</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.002</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'messages_read_interactions::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-02-26T06:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">15</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n<span class=\"w\">        </span><span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span>\n<span class=\"w\">        </span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">excluded</span><span class=\"mf\">.</span><span class=\"k\">value</span>\n<span class=\"w\">        </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'messages_read_interactions::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mf\">2024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">timezone</span><span class=\"mf\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n</code></pre></div>",
  "<p>Great news, works also for sending invite</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL console (psql)\"><pre><span></span><code><span class=\"mf\">2024</span><span class=\"o\">-</span><span class=\"mf\">02</span><span class=\"o\">-</span><span class=\"mf\">26</span><span class=\"w\"> </span><span class=\"mf\">06</span><span class=\"p\">:</span><span class=\"mf\">05</span><span class=\"p\">:</span><span class=\"mf\">02.491</span><span class=\"w\"> </span><span class=\"n\">DEBG</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">django</span><span class=\"mf\">.</span><span class=\"n\">db</span><span class=\"mf\">.</span><span class=\"n\">backends</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.004</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'invites_sent::day'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-02-27T00:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n<span class=\"w\">        </span><span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span>\n<span class=\"w\">        </span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">excluded</span><span class=\"mf\">.</span><span class=\"k\">value</span>\n<span class=\"w\">        </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'invites_sent::day'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mf\">2024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">timezone</span><span class=\"mf\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n</code></pre></div>",
  "<p>We would also have to add unique constraints to <code>RealCount</code> model, so the user creation, activation, and de-activation doesn't get affected.</p>",
  "<p>Is it possible to execute the query without modifying the database constraints? This way, we will not have to update constraints for each table.</p>",
  "<p>The benchmarks link seems to have broken, but here's what appears to be <a href=\"https://github.com/paradedb/paradedb/blob/a279836706d5e8b95fa6647191feafdb13f6af4f/pg_bm25/benchmarks/README.md\">its new home</a>, as a permalink.</p>",
  "<p>(GitHub has a handy keyboard shortcut <code>y</code> to get a permalink for whatever you're looking at when you browse \u2014 it replaces the branch name in the current URL with a commit ID.)</p>",
  "<p>Python 3.12 became the default Python in Ubuntu 24.04 a few hours ago. I\u2019ll start trying it.</p>",
  "<p>I'm not sure what to do regarding the AGPL issue, though. I suppose we could ask their support if they have a recommendation for how we could offer it as an option for the search backend in Zulip given our Apache 2 license, and see if they have anything interesting to say.</p>",
  "<p><a href=\"https://github.com/paradedb/paradedb/issues/794\">https://github.com/paradedb/paradedb/issues/794</a> is perhaps somewhat relevant as a window into their thinking on license issues.</p>",
  "<p>Oh, very funny, hilarious, Pip 20 doesn\u2019t run on Python 3.12.</p>",
  "<p>Interesting. Seems like it's all very new, and also they're still figuring out their strategy. That could make it good timing to ask them a question like that.</p>",
  "<p>I guess I'll send them an email to inquire.</p>",
  "<p>They appear to also <a href=\"https://github.com/paradedb/paradedb/issues/824\">not support replication yet</a>, which make it not an option for larger datasets.</p>",
  "<p>But they may well get working in the future.</p>",
  "<p>Hm, that may actually just be about the <code>pg_analytics</code> part, not the <code>pg_bm25</code> part.</p>",
  "<p>Sigh, at some point we may have to bite the bullet of working around the issue preventing us from upgrading that, since it doesn't seem we have any reason to believe upstream is going to fix it.</p>",
  "<p>I think we first need to decide the policy question of whether this is a thing we're willing to merge if we could get it working.</p>",
  "<p>Can you explain why you need new constraints here? I would have thought the existing ones would be sufficient.</p>",
  "<p>For reference, that's <a href=\"https://github.com/pypa/pip/issues/5780\">https://github.com/pypa/pip/issues/5780</a>, and <a href=\"https://github.com/pypa/pip/pull/10564\">https://github.com/pypa/pip/pull/10564</a> which attempts to address it?</p>",
  "<p>Hey it doesnt feel like it is in django even though it is quite similar</p>",
  "<p>It is Django.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/What.20Stack.20is.20the.20project.20using.20actually.20.3F/near/1746110\">said</a>:</p>\n<blockquote>\n<p>It is Django.</p>\n</blockquote>\n<p>Hey how do I know what is where I am literally contributing for the first time or trying to I have a basic idea of how the folder structure is</p>",
  "<p>is it using just vanilla javascript for frontend ?</p>",
  "<p>See: <a href=\"https://zulip.readthedocs.io/en/latest/overview/architecture-overview.html\">https://zulip.readthedocs.io/en/latest/overview/architecture-overview.html</a></p>",
  "<p>Also <a href=\"https://zulip.readthedocs.io/en/latest/overview/directory-structure.html\">https://zulip.readthedocs.io/en/latest/overview/directory-structure.html</a> and, more likely usefully, <a href=\"https://zulip.readthedocs.io/en/latest/tutorials/index.html\">https://zulip.readthedocs.io/en/latest/tutorials/index.html</a></p>",
  "<p>as of my understanding, the existing constraints only work on combination of three columns, and not on real_id and userid.</p>",
  "<p>and since on conflict occurs on all columns, the columns not included in constraints are consider as partial indexes.</p>",
  "<p>Right. I\u2019m working around it for now by patching Pip (<a href=\"https://github.com/zulip/zulip/pull/29074\">#29074</a>).</p>",
  "<p>Yeah. I guess it'd be nicer if the workaround were patching modern Pip with the changes from that PR, but it doesn't quite look to be in a state that I'd feel great about running it.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> it might make sense for you to review next steps here, since I think you've swapped in the context more than I have in the above discussion.</p>",
  "<p>The problem is that you have both <code>user_id</code> and <code>realm_id</code> in your <code>id_args_keys_update</code> in the <code>ON CONFLICT</code> set, while we only have <code>user_id</code> as the unique key :</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserCount</span><span class=\"p\">(</span><span class=\"n\">BaseCount</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Realm</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handles invalid duplicate UserCount data</span>\n        <span class=\"n\">constraints</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">UniqueConstraint</span><span class=\"p\">(</span>\n                <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"property\"</span><span class=\"p\">,</span> <span class=\"s2\">\"subgroup\"</span><span class=\"p\">,</span> <span class=\"s2\">\"end_time\"</span><span class=\"p\">],</span>\n                <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subgroup__isnull</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"unique_user_count\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">UniqueConstraint</span><span class=\"p\">(</span>\n                <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"property\"</span><span class=\"p\">,</span> <span class=\"s2\">\"end_time\"</span><span class=\"p\">],</span>\n                <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subgroup__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"unique_user_count_null_subgroup\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n</code></pre></div>\n<p>And <code>user</code> is which is all that's required, since user-ids are globally unique.</p>",
  "<p>So the fix is that we can't just reuse the same set of <code>id_args.keys()</code> for the <code>ON CONFLICT</code>, but need to be specific:</p>\n<ul>\n<li><code>InstallationCount</code>: <code>[]</code></li>\n<li><code>RealmCount</code>: <code>[\"realm_id\"]</code></li>\n<li><code>UserCount</code>: <code>[\"user_id\"]</code></li>\n<li><code>StreamCount</code>: <code>[\"stream_id\"]</code></li>\n<li><code>RemoteInstallationCount</code>: <code>[\"server_id\"]</code></li>\n<li><code>RemoteRealmCount</code>: <code>[\"server_id\", \"realm_id\"]</code></li>\n</ul>",
  "<p>(I'm including <code>InstallationCount</code> for completeness, but I think in this codepath we will never actually inc it directly)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1738516\">said</a>:</p>\n<blockquote>\n<p>Another thing that's a bit fishy, looking at the logs, is that I think the presence of the <code>batch_size</code> (of 2000) is causing Django to do 3 queries for what I would have thought would be a single <code>UPDATE</code> operation: [snip]</p>\n</blockquote>\n<p>I'm confused.  This topic is about mark as <em>unread</em>, in a narrow -- but the code you quote, <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>, is the \"mark every message as read\" code in <code>do_mark_all_as_read</code></p>",
  "<p>The relevant code is this one:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">do_mark_stream_messages_as_read</span><span class=\"p\">(</span>\n    <span class=\"n\">user_profile</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">stream_recipient_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">(</span><span class=\"n\">savepoint</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">UserMessage</span><span class=\"o\">.</span><span class=\"n\">select_for_update_query</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n                <span class=\"n\">user_profile</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"p\">,</span>\n                <span class=\"n\">message__recipient_id</span><span class=\"o\">=</span><span class=\"n\">stream_recipient_id</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span>\n                <span class=\"n\">where</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">UserMessage</span><span class=\"o\">.</span><span class=\"n\">where_unread</span><span class=\"p\">()],</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">topic_name</span><span class=\"p\">:</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">filter_by_topic_name_via_message</span><span class=\"p\">(</span>\n                <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span>\n                <span class=\"n\">topic_name</span><span class=\"o\">=</span><span class=\"n\">topic_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">message_ids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">\"message_id\"</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">message_ids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">\"flags\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bitor</span><span class=\"p\">(</span><span class=\"n\">UserMessage</span><span class=\"o\">.</span><span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Which results in the SQL:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">BEGIN</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span>\n<span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_message\"</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_message\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_message\"</span><span class=\"p\">.</span><span class=\"ss\">\"recipient_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">35</span>\n<span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span>\n<span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"ss\">\"zerver_message\"</span><span class=\"p\">.</span><span class=\"ss\">\"subject\"</span><span class=\"p\">::</span><span class=\"nb\">text</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"s1\">'router'</span><span class=\"p\">))</span>\n<span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">ASC</span>\n<span class=\"k\">FOR</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">OF</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span>\n\n<span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span>\n<span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"w\"> </span><span class=\"n\">U0</span>\n<span class=\"w\">   </span><span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_message\"</span><span class=\"w\"> </span><span class=\"n\">U1</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U1</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">U1</span><span class=\"p\">.</span><span class=\"ss\">\"recipient_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">35</span>\n<span class=\"w\">    </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span>\n<span class=\"w\">   </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"n\">U1</span><span class=\"p\">.</span><span class=\"ss\">\"subject\"</span><span class=\"p\">::</span><span class=\"nb\">text</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"s1\">'router'</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">FOR</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">OF</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"p\">)</span>\n\n<span class=\"k\">COMMIT</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span>\n<span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">66</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">67</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>",
  "<p>The addition of the <code>len</code> check causes the <code>SELECT</code> to show up both as its own query <em>and</em> inside the <code>UPDATE</code>, which is silly.</p>",
  "<p>I guess we need to have the list of mesage-ids that we affected.  Hm.</p>",
  "<p>And the SELECT outside the transaction is for clearing push notifications.</p>",
  "<p>Oh, hang on.  Ironically, despite calling Tim out on mark-as-read vs mark-as-unread, I fell into the same trap.  This code is also all mark-as-<em>read</em>.  What codepath do we use for mark-as-<em>unread</em>?</p>",
  "<p><code>update_message_flags_for_narrow</code>, which fetches the messages (not inside a transaction, without locking) and then calls <code>do_update_message_flags</code> which then opens a transaction and does a bunch of queries.</p>",
  "<p>Specifically, marking as unread requires looking up user subscriptions, and re-filtering the messageset based on those subscriptions.</p>",
  "<p>We also do the search for which usermessage rows are affected in Python, rather than the database.  We could fix that to special-case for unread, which we do know has an index.</p>",
  "<p>We then have to check for, and possibly create, usermesage rows.  Which we do in two queries, and can probably optimize to one server-side query with an <code>ON CONFLICT</code>.</p>",
  "<p>But we actually don't call <code>do_increment_logging_stat</code> at all when marking messages as <em>unread</em>.  So while it's probably a reasonable thing to optimize for other places where it may be he hotpath, it's not going to help the performance issue that started this topic. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Hmm yeah though we do mark as read like 100x more often so it's certainly impactful.</p>",
  "<p>And also eliminates an obvious race condition.</p>",
  "<p>I did some initial work on this in <a href=\"https://github.com/zulip/zulip/pull/29124\">#29124</a>.</p>\n<p>I initially implemented it by using a <code>ManyToManyField</code> on <code>UserGroup</code> model, but that would need a separate table created for each setting to be used as <code>through</code> table, irrespective of whether we define that table ourselves or use the one created by django.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> suggested that we should not use the <code>ManyToManyField</code> and instead create a separate table like <code>UserGroupPermissionSetting</code> which can be used for all settings. I think we can do that. The table will have fields like <code>user_group</code>, <code>setting_group</code> and <code>setting_name</code>. </p>\n<p>One disadvantage of not using a <code>ManyToManyField</code> can be that we would not be able to access the groups which are allowed to mention the group like <code>user_group.can_mention_groups.all()</code> and we would instead need to do something like <code>UserGroupPermissionSetting.filter(user_group=group, setting_name=\"can_mention_groups\")</code>. I don't think we would have any disadvantage of not being able to use <code>prefetch_related</code> in the <code>UserGroup</code> query itself, as <code>prefetch_related</code> also used a separate query to fetch the data.</p>\n<p>Link for PR discussion about this - <a href=\"https://github.com/zulip/zulip/pull/29124#discussion_r1508325963\">https://github.com/zulip/zulip/pull/29124#discussion_r1508325963</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> thoughts on this schema design question would be appreciated.</p>\n<p>My thinking is that having a generic permissions table would make the overhead of adding new group-based settings less, since it wouldn't require a database migration to change the SQL schema at all; we just need to do whatever migration is required to set the initial value for each new permission setting (or have logic that does something reasonable if no value is present).</p>",
  "<p>I imagine we would end up doing similar permissions tables for <code>Realm</code> settings whose value is a <code>UserGroup</code> and <code>Stream</code>  settings whose value is a <code>UserGroup</code>.</p>",
  "<p>Gaah this is so much extra complexity.</p>",
  "<p>If we have to do this, we can do it with just two extra tables total instead of separately for per-group, per-stream, and per-realm settings.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserGroupSet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserGroup</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">can_mention_groups</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserGroupSet</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Stream</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">can_subscribe_groups</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserGroupSet</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Realm</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">can_invite_groups</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserGroupSet</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>And then maybe some simplicity can be recovered by refactoring <code>UserGroup.direct_subgroups</code> to indirect back through <code>UserGroupSet</code> too.</p>",
  "<p>A different possible strategy would be to split the <code>UserGroup</code> model into <code>UserGroup</code> and <code>NamedUserGroup</code>, so that a base <code>UserGroup</code> may be anonymous.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserGroup</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">direct_members</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"err\">\u2026</span><span class=\"p\">)</span>\n    <span class=\"n\">direct_subgroups</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"s2\">\"self\"</span><span class=\"p\">,</span> <span class=\"err\">\u2026</span><span class=\"p\">)</span>\n    <span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Realm</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NamedUserGroup</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Django automatically creates usergroup_ptr = models.OneToOneField(UserGroup, \u2026)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"err\">\u2026</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"err\">\u2026</span><span class=\"p\">)</span>\n    <span class=\"n\">is_system_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"err\">\u2026</span><span class=\"p\">)</span>\n    <span class=\"n\">can_mention_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Stream</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">can_subscribe_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Realm</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">can_invite_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Hiii, I was working on the issue : \u00a0<a href=\"https://github.com/zulip/zulip/pull/28777\">#28777</a> and am hoping to get suggestions on how to implement the part of following a topic on getting a alert word. </p>\n<ol>\n<li>First thing that comes to mind should we consider all the previous message before that alert word is added or should we consider all messages after that?</li>\n<li>Second thing is what should we do of the topics that were due to it consisting of a message having that alert word.</li>\n</ol>\n<p>Also how should I implement the same. Should I use workers for that?</p>",
  "<p>I think you should spend some more time reading the code for both alert words and followed topics and then ask your questions again; some of them suggest you don't have the base understanding of the two features in question to start working on it yet.</p>",
  "<p>I think the specification in the issue is fairly clear for someone who does understand the data model.</p>",
  "<p>Hmm, that <code>NamedUserGroup</code> model is potentially quite compelling; a big part of the problem that we were having with using <code>UserGroup</code> for these anonymous fields was the fact that we'd be polluting the namespace with tons of groups that require names and having to deal with all the complexity of auto-generating those.</p>",
  "<p>I guess a big challenge for that model is how permissions work for editing a non-named <code>UserGroup</code> object.</p>",
  "<p>But I guess the model would be that you can only access/edit them if you have permission to modify the setting whose value is that group, and there would be one for each setting that doesn't have a <code>NamedUserGroup</code> as its value?</p>",
  "<p>And they could presumably be garbage-collected in the event that the value of a setting changes back to a <code>NamedUserGroup</code> and thus one becomes unreferenced.</p>",
  "<p>I want to be clear that I still don\u2019t like this. The idea before wasn\u2019t to pollute the namespace with zillions of auto-generated named groups; the idea was to encourage the user to share groups. In practice only a small handful of groups are ever going to be necessary.</p>",
  "<p>With this multiple-groups model, we <em>are</em> going to be auto-generating zillions of groups (or group sets or however we decide to store them), which is still complexity even if they aren\u2019t named.</p>",
  "<p>We could do it in a way that each setting can be a named group or a unique anonymous group, or in a way that each setting must be a unique anonymous group (which might then contain a single named group), and both strategies have costs.</p>",
  "<p>I agree we should encourage sharing named groups in the UI, but I feel pretty confident that a lot of common workflows will be clunky if the <strong>only</strong> way to input a set of people is to create a named group for that set. It's hard to find examples of that pattern that feel nice to use and inspect.</p>\n<p>And I'd really like us to figure out a model we can live with indefinitely, not something that we're going to need to unpleasantly migrate again in a few years, or feel like is a major impediment to designing the UI that feels most natural. Migrating the ~50 permissions settings that we have today between one data format and another is not something we will want to do twice if we can avoid it.</p>",
  "<p>And I don't think it's that much complexity to have an array of groups that have access to a given permission.</p>\n<p>The <a href=\"https://docs.djangoproject.com/en/5.0/topics/auth/default/#permissions-and-authorization\">Django built-in permission system</a>, for example, works that way. </p>\n<p>(It doesn't support groups inside other groups, which of course is one of the core features of our groups system and is why this is a tricky design space)</p>",
  "<p>So inorder to visually view zulip data (e.g. tables, relations..) <a href=\"https://www.pgadmin.org/\">pgAdmin</a> is the way to go ? is it recommned over the default django admin panel ?</p>",
  "<p>So, in this model would we create two different unnamed <code>UserGroup</code> object for two settings even if the groups they reference are same?</p>",
  "<p>We would have to, because the user would expect future modifications to be independent if there\u2019s nothing visible to link them with each other.</p>",
  "<p>I have played with <code>do_incremental_logging_stats</code> a bit yesterday, <br>\nusing constraints</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'messages_read::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-03-04T06:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11</span><span class=\"p\">)</span>\n<span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONFLICT</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONSTRAINT</span><span class=\"w\"> </span><span class=\"n\">unique_user_count_null_subgroup</span>\n<span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span>\n<span class=\"w\">    </span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">EXCLUDED</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The error was </p>\n<div class=\"codehilite\"><pre><span></span><code>psycopg2.errors.UndefinedObject: constraint &quot;unique_user_count_null_subgroup&quot; for table &quot;analytics_usercount&quot; does not exist\n</code></pre></div>\n<p>using where clause</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'messages_read::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-03-04T07:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11</span><span class=\"p\">)</span>\n<span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">user</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">)</span>\n<span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span>\n<span class=\"w\">    </span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">EXCLUDED</span><span class=\"mf\">.</span><span class=\"k\">value</span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"n\">property</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EXCLUDED</span><span class=\"mf\">.</span><span class=\"n\">property</span>\n<span class=\"w\">    </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"n\">end_time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EXCLUDED</span><span class=\"mf\">.</span><span class=\"n\">end_time</span>\n<span class=\"w\">    </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_usercount\"</span><span class=\"mf\">.</span><span class=\"n\">user_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EXCLUDED</span><span class=\"mf\">.</span><span class=\"n\">user_id</span><span class=\"p\">;</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>django.db.utils.ProgrammingError: there is no unique or exclusion constraint matching the ON CONFLICT specification\n</code></pre></div>",
  "<p>according to this stack overflow <a href=\"https://stackoverflow.com/questions/42022362/no-unique-or-exclusion-constraint-matching-the-on-conflict/54169587#54169587\">thread</a>. <strong>when using a partial index and upserting with ON CONFLICT,\u00a0</strong>the index_predicate must be specified**, Without\u00a0<code>index_predicate</code>\u00a0we get an error: <code>-- ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification</code></p>",
  "<p>now am I not sure what will be the <code>index_predicate</code> for our UserCount model<br>\n<code>WHERE ((user_id): = EXCLUDE.user_id::)</code></p>",
  "<p>pgAdmin is not recommended, no.  Zulip does not enable the Django admin panel.  Both of those make it too easy to corrupt your database state by editing values directly instead of using Zulip's APIs.</p>\n<p>If you want a visual database inspector, I would recommend finding a SQL client that does that, rather than installing anything on the server, which poses a security risk.  Or get comfortable with SQL and use <code>./manage.py dbshell</code> directly.</p>",
  "<p>I think you misunderstood what I was saying <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1747980\">above</a>.  Your previous queries were not far off -- you just needed to remove <code>realm_id</code> from the <code>ON CONFLICT</code> clause -- e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"ss\">\"analytics_usercount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"user_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'messages_read::hour'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-02-26T06:00:00+00:00'</span><span class=\"p\">::</span><span class=\"n\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"user_id\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n<span class=\"w\">        </span><span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ss\">\"analytics_usercount\"</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">excluded</span><span class=\"p\">.</span><span class=\"n\">value</span>\n</code></pre></div>",
  "<p>The \"index predicate\" here is <code> WHERE subgroup is NULL</code>, and we are specifying it.</p>",
  "<p>They key is that this:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"user_id\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n</code></pre></div>\n<p>...must match a partial index we have, <em>exactly</em>.  Since we have:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserCount</span><span class=\"p\">(</span><span class=\"n\">BaseCount</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Realm</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handles invalid duplicate UserCount data</span>\n        <span class=\"n\">constraints</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">UniqueConstraint</span><span class=\"p\">(</span>\n                <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"property\"</span><span class=\"p\">,</span> <span class=\"s2\">\"subgroup\"</span><span class=\"p\">,</span> <span class=\"s2\">\"end_time\"</span><span class=\"p\">],</span>\n                <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subgroup__isnull</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"unique_user_count\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">UniqueConstraint</span><span class=\"p\">(</span>\n                <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"property\"</span><span class=\"p\">,</span> <span class=\"s2\">\"end_time\"</span><span class=\"p\">],</span>\n                <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subgroup__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"unique_user_count_null_subgroup\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n</code></pre></div>\n<p>The second <code>UniqueConstraint</code> there is on <code>[\"user\", \"property\", \"end_time\"]</code>, with a condition (predicate) of <code>Q(subgroup__isnull=True)</code>.  That translates to this index:</p>\n<div class=\"codehilite\"><pre><span></span><code>    &quot;unique_user_count_null_subgroup&quot; UNIQUE, btree (user_id, property, end_time) WHERE subgroup IS NULL\n</code></pre></div>\n<p>So to use that index, we need an <code>ON CONFLICT</code> which exactly matches it -- namely:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">IS</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n</code></pre></div>",
  "<p>In this <a href=\"#narrow/stream/137-feedback/topic/Creator.20of.20Stream.20info/near/1641291\">CZO</a>, Tim mentioned the necessity of creating a <code>Stream.creator</code> field and populating it with <code>RealmAuditLog</code>. I've successfully written a script for backfilling and populating this field. What , I want to ask is what type I should define for the <code>creator</code> field in the <code>zerver/lib/types.py</code> file.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">creator</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>That type seems correct. Will <code>null</code> be a real possibility in production use? I am not sure what gets recorded as the creator for the default streams in a new organization, for example.</p>",
  "<p>Correct. In many ways it's equivalent to putting a list of group IDs in a ManyToManyField -- except that it puts extra rows in the <code>UserGroup</code> table rather than in a more dedicated/limited table.</p>\n<p>I worry a bit about these nameless user groups being annoying in that we'd have to think about that structure every time we added a new field to the user-facing <code>UserGroup</code> table -- how to initialize it, which fields we declare as nullable because they need to be null with these fake groups, even if they can't be null for a real group.</p>\n<p>Thinking about that the type consequences of reusing <code>UserGroup</code> in this way definitely makes me more interested in the proposal <a href=\"#narrow/stream/3-backend/topic/set.20a.20group.20setting.20to.20multiple.20groups/near/1749656\">presented here</a> than reusing <code>UserGroup</code> in this way.</p>",
  "<p><code>on_delete=CASCADE</code> isn\u2019t right. That would mean if a user is deleted, all the streams they created would be deleted too. (We usually deactivate users rather than deleting them, but deletion shouldn\u2019t do more damage than necessary.)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/set.20a.20group.20setting.20to.20multiple.20groups/near/1751237\">said</a>:</p>\n<blockquote>\n<p>I worry a bit about these nameless user groups being annoying in that we'd have to think about that structure every time we added a new field to the user-facing <code>UserGroup</code> table -- how to initialize it, which fields we declare as nullable because they need to be null with these fake groups, even if they can't be null for a real group.</p>\n</blockquote>\n<p>If you're referring to Anders's <code>UserGroup</code> / <code>NamedUserGroup</code> proposal, I think those fields would all go on <code>NamedUserGroup</code>.</p>\n<p>That is, if it's a field that doesn't make sense for the anonymous user groups, then it shouldn't go on them \u2014 that's what <code>NamedUserGroup</code> is for.</p>",
  "<p>A variation that it sounds like might fit your mental model better would be to say <code>UserGroup</code> for the named groups, and something like <code>BaseUserGroup</code> for the base class.</p>\n<p>I.e. exactly the same structure as Anders's proposal, just renamed.</p>",
  "<p>\u201cBase\u201d connotes a class that exists to be subclassed and not directly instantiated (like <code>analytics.models.BaseCount</code>), which is not what\u2019s going on.</p>",
  "<p>\"General\", perhaps?</p>",
  "<p>(Personally, the \"NamedUserGroup\" naming already works well for me)</p>",
  "<p>I suspect Tim is confused not by the naming, but by a misunderstanding of how model inheritance works in Django. At the SQL level, <code>UserGroup</code> and <code>NamedUserGroup</code> are two different tables, linked by the automatically generated <code>OneToOneField</code> that I mentioned in the comment. There are no nullable fields involved at all.</p>",
  "<p>How does Django generate IDs for those tables -- do they share a sequence number, such that a group ID is a unique reference to an object of either of those types?</p>",
  "<p>Is the idea that these non-named user groups would exist in the API, or would they just be a backend detail that powers an API that communicates via lists of user group IDs? If they're a thing that needs to appear in the API, I definitely don't want them to have duplicate IDs with existing user groups.</p>",
  "<p>Yeah, that's fair, <code>on_delete=SET_NULL</code> seems correct here.</p>",
  "<p>I don\u2019t know why you\u2019re asking me to defend all this extra complexity\u2014I don\u2019t want all this extra complexity.</p>",
  "<p>I\u2019m pretty sure inherited models get their own independent primary key sequences.</p>",
  "<p>There are multiple ways we could expose this in the API, all of which are unnecessarily complicated.</p>",
  "<p>Oh, no, Django is clever enough to reuse the <code>OneToOneField</code> as the primary key.</p>",
  "<p>Great, so just doing the most obvious things should result in a single ID to use for both types, namely the <code>UserGroup</code> ID.</p>",
  "<p>That doesn\u2019t negate my criticism. API consumers still need to understand which groups are named and deal with them differently.</p>",
  "<p>Sure, but I think it answers Tim's questions.</p>",
  "<p>There are still design decisions to make. Maybe you can give permissions directly to a named group, or maybe you must always give it to an unnamed group that contains the named group. Maybe the API represents an unnamed group by expanding it to an array of named groups, or maybe it exposes the unnamed group ID.</p>",
  "<p>All of these choices shift the unnecessary complexity to different places.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/set.20a.20group.20setting.20to.20multiple.20groups/near/1751556\">said</a>:</p>\n<blockquote>\n<p>I don\u2019t know why you\u2019re asking me to defend all this extra complexity\u2014I don\u2019t want all this extra complexity.</p>\n</blockquote>\n<p>Nobody wants unnecessary complexity. But if a reasonable, modern-feeling editing nice UI is not possible with the original \"every setting's value is a single named group\" model, and we think that such a model is important, then we should design our APIs with the capabilities to support that, rather than saving a bit of complexity in exchange for a bunch of user-facing headaches later.</p>\n<p>I think the next step is to revisit that design conversation that determined it was a UI/product requirement to support specifying multiple groups in individual settings. <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span> volunteered to do a write-up on the topic that we can talk through.</p>",
  "<p>Ultimately the question will in part be a prediction about what sorts of values people will want to put in these fields, but I think a bit of product research can likely give us better shared intuition on that type of question.</p>",
  "<p>Thank you! alex, I have updated the PR.</p>",
  "<p>TestLoggingCountStats test 'analytics.tests.test_counts' is failing. I have tried debugging it, but I have no clue why it's failing.</p>",
  "<p>solved.</p>",
  "<p>That doesn't looks like the right fix in <code>test_counts.py</code>.  The contents in the database should be the same before and after this change, so any change in the tests that isn't to the number of queries is a bug.</p>",
  "<p>Something in your query is getting quoted which shouldn't be, is my guess.</p>",
  "<div class=\"codehilite\"><pre><span></span><code>class BaseCount(models.Model):\n    # Note: When inheriting from BaseCount, you may want to rearrange\n    # the order of the columns in the migration to make sure they\n    # match how you&#39;d like the table to be arranged.\n    property = models.CharField(max_length=32)\n    subgroup = models.CharField(max_length=16, null=True)\n    end_time = models.DateTimeField()\n    value = models.BigIntegerField()\n\n    class Meta:\n        abstract = True\n</code></pre></div>\n<p>The subgroup is char field in the databse</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code> <span class=\"n\">RealmCount</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">property</span><span class=\"o\">=</span><span class=\"nb\">property</span><span class=\"p\">,</span> <span class=\"n\">subgroup</span><span class=\"o\">=</span><span class=\"s2\">\"false\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">aggregate</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"s2\">\"value\"</span><span class=\"p\">))[</span>\n                <span class=\"s2\">\"value__sum\"</span>\n            <span class=\"p\">]</span>\n</code></pre></div>\n<p>the output from this was {\"value_sum\": None},</p>",
  "<p>Yes, and nullable.  <code>False</code> is represented as <code>NULL</code>, I believe.</p>",
  "<p>It should probably be <code>None</code> and not <code>False</code></p>",
  "<p>no, it was being stored as 'false'</p>",
  "<p>But regardless, the whole point of this change is to afjust <em>how</em> we get the data in, not <em>what</em> the data is.</p>",
  "<p>I tried logging before user_creation and after use creation</p>",
  "<p>Hm, then that's a bug in the test.  And it should probably be <code>subgroup=None</code>, not <code>subgroup=\"false\"</code></p>",
  "<p>(which is also a change you should split into its own commit, if so)</p>",
  "<p>I think, I tried that too. but the results was empty</p>",
  "<p>It also looks like the commit message needs to be updated.</p>",
  "<p>Yeah, OK, this test is just ... very weird and misleading.  It's shoving <code>true</code> and <code>false</code> in, instead of a string and null/None.</p>",
  "<p>what should we do about it</p>",
  "<p>Hm.  I mean, it's not <em>wrong</em> that a subgroup could be true/false, I suppose.</p>",
  "<p>this might be because of </p>\n<div class=\"codehilite\"><pre><span></span><code>subgroup: Optional[Union[str, int, bool]],\n</code></pre></div>\n<p>in <code>do_increment_logging_stat</code></p>",
  "<p>Yeah, upon consideration, it's not all that wrong to have true/faluse values in the subgroup, since it's for counting things like <code>is_bot</code></p>",
  "<p>another option would be to change the subgroup field from char field to boolean field</p>",
  "<p>No, we use it for non-boolean subgroups as well.</p>",
  "<p>oh</p>",
  "<p>If you <em>just</em> make your change to <code>test_active_users_log_by_is_bot</code>, with none of the other changes, does it pass tests?</p>",
  "<p>only this fails <code>TestLoggingCountStats</code></p>",
  "<p>can we overite subgroup if the subgroup is False to None? so it will be stored as NULL in the db</p>",
  "<p>No.  <code>None</code>/ <code>NULL</code> mean \"there is no subgroup\".  <code>'false'</code> means \"the value of the subgroup (e.g. <code>is_bot</code>) is False\"</p>",
  "<p>got it</p>",
  "<p>So the change in the test means that we are actually changing something about what's in the database.  We need to make sure the updated code functions the same as the current code, in terms of what gets into the database.</p>",
  "<p>My suggestion is to check out <code>main</code>, run <code>./tools/rebuild-dev-database</code>, open a <code>./manage.py shell</code>, and run <code>do_create_user</code> by hand (calling it like the test does), and see what rows end up in the <code>analytics_usercount</code> table.  Contrast that with doing all of those steps on your branch.</p>",
  "<p>I suspect the difference will be in case of the <code>'False'</code> or something.  And that's what we'll need to adjust the new code for.</p>",
  "<p>For reference, on <code>main</code>, here's what I see in the <code>analytics_usercount</code> table:</p>\n<div class=\"codehilite\"><pre><span></span><code>  id  | realm_id | user_id |            property            |        end_time        | value |    subgroup\n------+----------+---------+--------------------------------+------------------------+-------+-----------------\n    1 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 01:00:00+00 |     1 | false\n    2 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 02:00:00+00 |     2 | false\n    3 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 03:00:00+00 |     1 | false\n    4 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 04:00:00+00 |     7 | false\n    5 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 05:00:00+00 |    11 | false\n    6 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 06:00:00+00 |     8 | false\n    7 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 07:00:00+00 |     2 | false\n    8 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 08:00:00+00 |     3 | false\n    9 |        3 |      19 | messages_sent:is_bot:hour      | 2023-11-26 09:00:00+00 |     1 | false\n...\n</code></pre></div>",
  "<p>ok, I will test and update you on this</p>",
  "<p>Oh, those should be <code>analytics_realmcount</code>, not <code>analytics_usercount</code></p>",
  "<p>Which, on main, I see as:</p>\n<div class=\"codehilite\"><pre><span></span><code>zulip=&gt; select * from  analytics_realmcount where property = &#39;active_users_log:is_bot:day&#39;;\n  id  | realm_id |          property           |        end_time        | value | subgroup\n------+----------+-----------------------------+------------------------+-------+----------\n 9080 |        2 | active_users_log:is_bot:day | 2024-03-06 00:00:00+00 |     1 | False\n</code></pre></div>\n<p>...which is an upper-case <code>False</code> -- in contrast to the <code>analytics_usercount</code> table, which has it lower-case.</p>",
  "<p>In<code>types.py</code> module. I attempted to include <code>UserProfile</code> as a type in the <code>DefaultStreamDict</code> class, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">zerver.models.users</span> <span class=\"kn\">import</span> <span class=\"n\">UserProfile</span>\n<span class=\"c1\">#.</span>\n<span class=\"c1\">#.</span>\n<span class=\"c1\">#.</span>\n<span class=\"k\">class</span> <span class=\"nc\">DefaultStreamDict</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n    <span class=\"n\">creator</span><span class=\"p\">:</span> <span class=\"n\">UserProfile</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>mypy      |     from zerver.lib.types import GroupPermissionSetting\nmypy      | ImportError: cannot import name 'GroupPermissionSetting' from partially initialized module 'zerver.lib.types' (most likely due to a circular import) (/home/sujal/zulip/zerver/lib/types.py)\n</code></pre></div>",
  "<p>the False, can be filtered by subgroup=False, but the <code>false</code> requires to be filtered using subgroup='false'.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Type.20for.20Stream.2Ecreator.20field/near/1751233\">said</a>:</p>\n<blockquote>\n<p>I am not sure what gets recorded as the creator for the default streams in a new organization, for example</p>\n</blockquote>\n<p>As you can see, for default streams like \"general\" and \"core team\", the creator field is currently recorded as <code>None</code>, indicating that the creator information is not available. This suggests that for new organizations, the default streams might not have explicit creator information recorded.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">stream: Verona,</span>\n<span class=\"go\">creator: None,</span>\n<span class=\"go\">Realm: zulip 2</span>\n\n<span class=\"go\">stream: core team,</span>\n<span class=\"go\">creator: None,</span>\n<span class=\"go\">Realm: zulip 2</span>\n\n<span class=\"go\">stream: general,</span>\n<span class=\"go\">creator: None,</span>\n<span class=\"go\">Realm: analytics 3</span>\n\n<span class=\"go\">stream: core team,</span>\n<span class=\"go\">creator: None,</span>\n<span class=\"go\">Realm: analytics 3</span>\n\n<span class=\"go\">stream: general,</span>\n<span class=\"go\">creator: None,</span>\n<span class=\"go\">Realm: realm-25 4</span>\n\n<span class=\"go\">stream: core team,</span>\n<span class=\"go\">creator: None,</span>\n<span class=\"go\">Realm: realm-25 4</span>\n\n<span class=\"go\">stream: stream2 of realm-25,</span>\n<span class=\"go\">creator: user-25@zulip.com &lt;Realm: realm-25 4&gt;,</span>\n<span class=\"go\">Realm: realm-25 4</span>\n\n<span class=\"go\">stream: stream 1 of realm zulip Dev,</span>\n<span class=\"go\">creator: user9@zulipdev.com &lt;Realm: zulip 2&gt;,</span>\n<span class=\"go\">Realm: zulip 2</span>\n</code></pre></div>",
  "<p>Yes.  So the question is what about your change is causing it to be inserted lower-case, instead of the upper-case <code>False</code> it was before.</p>\n<p>Though once we figure that out, there's a separate question of if we should fix things to be consistent between tables about <code>False</code> vs <code>false</code>.  Which is also a little complicated by the fact that we transmit some of these rows to Zulip Cloud if the server has statistics reporting enabled, which we need for push notification plans.</p>",
  "<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">VALUES</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'active_users_log:is_bot:day'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'2024-03-06T00:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">CONFLICT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"subgroup\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"k\">IS</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span>\n<span class=\"w\">            </span><span class=\"k\">DO</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">SET</span>\n<span class=\"w\">                </span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"k\">value</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">EXCLUDED</span><span class=\"mf\">.</span><span class=\"k\">value</span>\n<span class=\"w\">        </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'active_users_log:is_bot:day'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">False</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mf\">2024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">timezone</span><span class=\"mf\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n</code></pre></div>\n<p>the main reason for False being converted to <code>false</code>, is because of <code>%s</code> placeholder.</p>",
  "<p>So passing <code>str(subgroup)</code> should prevent it from getting fancy and doing that.</p>",
  "<p>we get another error</p>",
  "<p>This was done by Django, the subgroup value is set to string of <code>False</code>.</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"property\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"subgroup\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"end_time\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"value\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"end_time\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'2024-03-06T00:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"property\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'active_users_log:is_bot:day'</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"subgroup\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'False'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mf\">21</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mf\">2024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">timezone</span><span class=\"mf\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s1\">'active_users_log:is_bot:day'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'False'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"mf\">2024</span><span class=\"o\">-</span><span class=\"mf\">03</span><span class=\"o\">-</span><span class=\"mf\">05</span><span class=\"w\"> </span><span class=\"mf\">17</span><span class=\"p\">:</span><span class=\"mf\">27</span><span class=\"p\">:</span><span class=\"mf\">10.954</span><span class=\"w\"> </span><span class=\"n\">DEBG</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">django</span><span class=\"mf\">.</span><span class=\"n\">db</span><span class=\"mf\">.</span><span class=\"n\">backends</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"s s-Name\">\"property\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'active_users_log:is_bot:day'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"subgroup\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'False'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"end_time\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'2024-03-06T00:00:00+00:00'</span><span class=\"o\">::</span><span class=\"nb\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s s-Name\">\"value\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"value\"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"mf\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s s-Name\">\"realm_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"s s-Name\">\"analytics_realmcount\"</span><span class=\"mf\">.</span><span class=\"s s-Name\">\"id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">9088</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'active_users_log:is_bot:day'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'False'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mf\">2024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"mf\">.</span><span class=\"n\">timezone</span><span class=\"mf\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">9088</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n</code></pre></div>",
  "<p><span class=\"user-mention\" data-user-id=\"29754\">@Mahhheshh</span> I think you need to spend some more time debugging this before asking for more help with it.</p>",
  "<p>Cool, thanks for tracking that down. I'm sure we could set the organization creator as the <code>creator</code> for those if we wanted the field to not be nullable.</p>",
  "<p>So that's probably a bit of a design discussion to have.</p>",
  "<p>if that will take time should i drop the <a href=\"https://github.com/zulip/zulip/issues/25648\">issue</a>?</p>",
  "<blockquote>\n<p><code>str(subgroup)</code></p>\n</blockquote>\n<p>so we cannot typecast subgroup to string every time, the problem of typecasting <code>None</code> to string results in <code>\"None\"</code>, which causes integrity issues. So in the updated Pr, I have made a check to only typecast bools to str to prevent \"False\" to 'false' conversions. <br>\nso if the subgroup is None, It will be inserted as NULL in our query, and if it's a boolean value it will be inserted as <code>False/True</code>.</p>",
  "<p>ran the query suggested by alex, and here are the results<br>\n<a href=\"/user_uploads/2/54/DBh03FIEmKztjW6IokbYlCtD/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/54/DBh03FIEmKztjW6IokbYlCtD/image.png\" title=\"image.png\"><img src=\"/user_uploads/2/54/DBh03FIEmKztjW6IokbYlCtD/image.png\"></a></div>",
  "<p>I would special-case <code>None</code>, rather than <code>bool</code>.</p>",
  "<p>but typecasting python <code>None</code> makes it a <code>\"None\"</code>, which violates, <code>`UniqueConstraint</code>.</p>",
  "<p>Special-case <code>None</code> to <em>not</em> get stringified.</p>",
  "<p>I don't think so. I think you can do an implementation with <code>creator</code> being nullable, which I think is the most likely answer, and we'll try to decide that question before we merge it. It shouldn't be that hard to change the code if we decide we want it to be not nullable.</p>",
  "<p>An advantage of it being <code>nullable</code> is that streams imported from other products may not have values for who created them. (They may, but it's not a guarantee). And it'd save us from having to be very careful with <code>do_delete_user</code> to avoid deleting <code>Stream</code> objects as a cascading deletion.</p>",
  "<p>So I think that's most likely to be what we want? Feedback is appreciated.</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">subgroup</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">is_subgroup</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span><span class=\"s2\">\"NULL\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">is_subgroup</span> <span class=\"o\">=</span> <span class=\"n\">SQL</span><span class=\"p\">(</span><span class=\"s2\">\"NOT NULL\"</span><span class=\"p\">)</span>\n    <span class=\"n\">subgroup</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">subgroup</span><span class=\"p\">)</span>\n    <span class=\"n\">conflict_args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"subgroup\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>would this be ok?</p>",
  "<p>I'm using <code>dbshell</code> to explore zulip tables using <code>sql</code> commands, but the output is simply unreadable <br>\n<a href=\"/user_uploads/2/af/lmnxYt0w6v32Avh4Ww7nUx2q/Screenshot-from-2024-03-07-07-48-12.png\">Screenshot-from-2024-03-07-07-48-12.png</a><br>\nIs it an issue in my terminal ?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/af/lmnxYt0w6v32Avh4Ww7nUx2q/Screenshot-from-2024-03-07-07-48-12.png\" title=\"Screenshot-from-2024-03-07-07-48-12.png\"><img src=\"/user_uploads/2/af/lmnxYt0w6v32Avh4Ww7nUx2q/Screenshot-from-2024-03-07-07-48-12.png\"></a></div>",
  "<p><strong>What tool are you using to explore Zulip data/tables ?</strong></p>",
  "<p>The <code>realm</code> table is very wide -- that is, it has a lot of columns.  It will be more readable if you use <code>select id, string_id</code> to start with, and add other columns you want.</p>\n<p>You can also use <code>\\x</code> at the prompt to toggle to \"extended\" view which puts one property per line, instead of trying to make a column for each.  This is helpful for wide tables which you're only selecting a couple rows from.</p>",
  "<p>I'm working on <a href=\"https://github.com/zulip/zulip/pull/29073\">#29073</a>.</p>\n<p><strong>Background</strong></p>\n<p>To improve onboarding experience, we'll show a one-time modal explaining \"Inbox\" &amp; \"Recent conversations\" views. (When user visits them for the first time.)</p>\n<p>When a user views a modal, we mark it as read by storing a row in the <code>OnboardingStep</code> model.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">OnboardingStep</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">onboarding_step</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">timezone_now</span><span class=\"p\">)</span>\n</code></pre></div>\n<p><strong>Query</strong></p>\n<p>We don't want to show these two one-time-modal to existing users. We'll have to do a migration creating <strong>two rows per user</strong> (mark them as read) in <code>OnboardingStep</code> model.</p>\n<p>Should we do some optimization by creating these rows only for users who are not <code>long_term_idle</code>? -- or is it fine to create rows for all the users?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"30142\">@Bedo Khaled</span>  I use pgadmin and it works great. As Alex indicated there is the possibility of corruption so if you are concerned about that creating a read only user would be my suggestion.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"18975\">@Pat Roam</span>  There shouldn't be any corruptions if i only explore the data and maybe some <strong>sql</strong> <code>SELECT</code> commands right ?<br>\nAlso if you use Vagrant setup did you set up <strong>port forwarding</strong> so the <strong>pgadmin</strong> can connec to <code>postgres</code>  ?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"30142\">@Bedo Khaled</span>  I\u2019m not aware of any damage you can do with a select statement. Imho it\u2019s just best practice to not use a user with write privileges unless it\u2019s needed for some reason. I know from experience that mistakes happen. I watched a vendor wipe out one of our databases recently so maybe I\u2019m just a bit more cautious than some. I don\u2019t know much about Vagrant. The db\u2019s I use are installed on vm\u2019s and access is controlled by firewall rules.</p>",
  "<p>ok thanks, I'm now using <strong>pgadmin</strong>  and have successfully connected and can explore the data now</p>",
  "<p>Yup! Wish I was doing that instead of fighting  a darn firewall!</p>",
  "<p>I guess, we would put this hold on till we get clarity about the product requirement.</p>",
  "<p>I think it's probably fine to just create them for everyone; it's not actually a lot of storage.</p>",
  "<p>(And later we'll get to delete the ones for the existing onboarding hotspots once those are removed from the app)</p>",
  "<p>Updated the commit message, And removed the <code>isinstance(subgroup, bool)</code> check,</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29027\">#29027</a></p>",
  "<p>So reading [the AGPL text[(<a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">https://www.gnu.org/licenses/agpl-3.0.en.html</a>):</p>\n<blockquote>\n<p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>\n</blockquote>\n<p>It seems like if we were to have an option in Zulip to interface with this postgres extension over SQL, it seems the AGPL intent is not that Zulip as a whole would need to be licensed under the AGPL as well, since even if we distributed this extension with Zulip, since it'd be an aggregate?</p>",
  "<p>I think it'd be very hard for anyone to argue Zulip was an extension of <code>pg_bm25</code> just because we had an option to use it, or even if we used it for full-text search by default.</p>",
  "<p>Yeah, Zulip definitely doesn't seem like \"by [its] nature [an] extension[]\" of <code>pg_bm25</code>.</p>\n<p>I'm not sure what \"combined with it such as to form a larger program\" means, though. Seems like it turns on the meaning of \"program\".</p>",
  "<p>The usual practice with the GPL would be that the copyleft doesn't reach the Zulip application code, because that interaction is happening over a wire protocol (with SQL) and not by being linked into the same binary or anything like that.</p>\n<p>OTOH I think the PostgreSQL server process running on the Zulip server typically <em>would</em> be seen as part of the same program, subject to the copyleft, under typical GPL practice.</p>\n<p>And in fact probably the whole reason they're going with AGPL instead of GPL or Apache is so that if Amazon were to try to run this in RDS, their whole Postgres process would be subject to the copyleft. (And so they'd instead have to negotiate with the ParadeDB folks a commercial license on the side.)</p>",
  "<p>There's probably no fundamental obstacle to us treating that Postgres process as covered by AGPL (it's probably under a compatible license, though I haven't checked).</p>\n<p>So in that case it'd just mean that we have to deal with figuring out what the logistics should be of complying with AGPL's rather fuzzy terms about offering the corresponding source to anyone who connects to the service.</p>",
  "<p>Reviewed; it might also be nice to have a prep commit adding a test for the number of queries for the mark-as-read scenario that inspired this thread, and then the second commit would be able to show that number going down by 2.</p>",
  "<p>So I had a call with them today following up on my emailed question. It sounds like they'd be up for adding a clarification on their pages like the one MongoDB had (<a href=\"https://web.archive.org/web/20230424052941/https://www.mongodb.com/blog/post/the-agpl\">https://web.archive.org/web/20230424052941/https://www.mongodb.com/blog/post/the-agpl</a>).</p>\n<p>They're thinking about it in a very similar way to MongeDB: They want anyone to be able to build applications on top of their database extension without thinking about licensing, and just want the AGPL to protect them from things like an Amazon RDS style service where the product is in fact their database extension.</p>",
  "<p>So I think it's reasonable for us to see if we'd be happy with this extension as solving our main search problems from a technical standpoint:</p>\n<ul>\n<li>The fact that searching for tokens within URLs does not work well.</li>\n<li>The fact that stemming only supports English.</li>\n<li>Search being a consideration.</li>\n</ul>\n<p>If it looks like it does, then I think the licensing situation is likely solvable.</p>",
  "<p>I promised to email them that MongoDB blog post, so I guess I'll do that and we can see if they add a license intention clarification thing that feels satisfactory to their website.</p>",
  "<p>Sent said email, and CCed <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span>, who tracked that resource down for me.</p>",
  "<p>22 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"137\" href=\"/#narrow/stream/137-feedback/topic/search.3A.20include.20link.20match\">#feedback &gt; search: include link match</a> by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>.</p>",
  "<p>Great! Sounds promising.</p>",
  "<p>Hey folks, I want to work on this <a href=\"https://github.com/zulip/zulip/issues/19490\">issue</a> (opened by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> ) ASAP, as i've already started investigating and wrote the first steps for the code, can someone assign me</p>",
  "<p>This was also suggested by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span></p>",
  "<p>It's tucked into the comments there, but the main plan for that issue is to add a column to the database model for sessions -- akin to <a href=\"https://docs.djangoproject.com/en/5.0/topics/http/sessions/#example\">https://docs.djangoproject.com/en/5.0/topics/http/sessions/#example</a></p>",
  "<p>I've assigned you; the first work should be working on doing that session model change, and nothing to do with deleting users.</p>",
  "<blockquote>\n<p>and nothing to do with deleting users.</p>\n</blockquote>\n<p>That's just initially right, after that custom session model is completed eventually the goal is  : </p>\n<div class=\"codehilite\"><pre><span></span><code>def delete_user_sessions(user_profile: UserProfile) -&gt; None:\n    # Current code\n    for session in Session.objects.all():\n        if get_session_user_id(session) == user_profile.id:\n            delete_session(session)\n    # New code\n    for session in Session.objects.filter(realm=user_profile.realm,user=user_profile):\n        delete_session(session)\n</code></pre></div>",
  "<p><code>New code</code> is to be tested firt of course, just sharing my initial thought<br>\nsince we are adding a combined index for realm and user, it makes since now to filter by both fields, much more efficient than <code>.all()</code></p>",
  "<p>Am I following things correctly ?</p>",
  "<p>That's one of the things that we can do once we have those columns and indexes, yes.</p>",
  "<p>I think the <code>class SessionStore(DBStore):</code> in <a href=\"https://docs.djangoproject.com/en/5.0/topics/http/sessions/#example\">django example</a> would corresponde to this <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/safe_session_cached_db.py#L8\"> SessionStore(CachedDbSessionStore)</a> ?</p>",
  "<p>So methods of the first should apply to the latter, (e.g. <code>create_model_instance</code> should handle saving the two new created fields</p>",
  "<p>I think I would move <code>safe_session_cached_db.py</code> to the more generic <code>sessions.py</code>, rename that <code>SessionStore</code> to be <code>LeaklessCachedDbSessionStore</code> or something, and then further subclass that with the <code>create_model_instance</code> work.</p>",
  "<p>Or you may want to move all of those into a <code>zerver/models/sessions.py</code></p>",
  "<p>last option is also good to avoid circular import</p>",
  "<p>Yeah, making a new models file sounds right to me.</p>",
  "<p>Is there a way for an administrator to change a stream to public? If you are not a member of that stream?</p>",
  "<p>Here's the help center documentation on <a href=\"https://zulip.com/help/change-the-privacy-of-a-stream\">changing the privacy of a stream</a> and the <a href=\"https://zulip.com/help/stream-permissions#private-streams\">private streams permissions chart</a>. So, the administrator needs to be subscribed to the stream in order to change that stream's setting.</p>",
  "<p>Already found these. I was hoping that as a server admin, I could change the privacy type, even if I don't have any users subscribed to the streams. <br>\nAll of the members left, and users are from AD which is not maintained by us, so I cannot recreate the users just to change the stream privacy settings</p>",
  "<p>I don't think that's possible. Being able to do so would go against the security model described <a href=\"https://zulip.readthedocs.io/en/latest/production/security-model.html#messages-and-history\">here for messages and history</a>.</p>",
  "<p>Not even directly in the DB?</p>",
  "<p>You can do anything you want if you have direct DB access.  We generally discourage direct changes to the database, because it breaks our audit trails, etc.  What you want is possible to do via the management shell, which at least does some safety checks and does update audit logs.</p>",
  "<p>I'm on mobile, so can't dig out the functions easily right now, but I'll drop them in here in a bit (if nobody beats me to it).</p>",
  "<p><span class=\"user-mention\" data-user-id=\"12174\">@Tomislav Ple\u010dko</span>: As the <code>zulip</code> user:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">cd</span><span class=\"w\"> </span>~/deployments/current\n./manage.py<span class=\"w\"> </span>shell\n</code></pre></div>\n<p>At the prompt that opens:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">zerver.models.realms</span> <span class=\"kn\">import</span> <span class=\"n\">get_realm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zerver.models.streams</span> <span class=\"kn\">import</span> <span class=\"n\">get_stream</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zerver.models.users</span> <span class=\"kn\">import</span> <span class=\"n\">get_user_by_delivery_email</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zerver.actions.streams</span> <span class=\"kn\">import</span> <span class=\"n\">do_change_stream_permission</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">get_realm</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"s2\">\"the-stream-name\"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">get_user_by_delivery_email</span><span class=\"p\">(</span><span class=\"s2\">\"your-email-address@example.com\"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n\n<span class=\"n\">do_change_stream_permission</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">invite_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">history_public_to_subscribers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">is_web_public</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">acting_user</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Thank you!</p>",
  "<p>Do we need to put effort into doing better queries for creating two rows in the <code>OnboardingSteps</code> table per user in a migration? <a href=\"https://github.com/zulip/zulip/pull/29192#discussion_r1525327766\">https://github.com/zulip/zulip/pull/29192#discussion_r1525327766</a></p>",
  "<p>That's going to be very memory-intensive to load all of those user objects into memory at once, when all we care about is their IDs, 10000 at a time.</p>",
  "<p>I think doing it as two <code>INSERT INTO ... SELECT</code> statements (or one <code>INSERT INTO SELECT ... CROSS JOIN</code> if we want to be fancy) is going to be much faster and less memory-intensive.</p>",
  "<p>Yeah I think in practice it might not be enough memory to actually matter but that's also probably an easy tweak to make, and a good habit to be in. <span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> FYI.</p>",
  "<p>This was life saving in this instance</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29317\">https://github.com/zulip/zulip/pull/29317</a> (and its parent PR) are failing with this rather odd exception:</p>\n<div class=\"codehilite\"><pre><span></span><code>  File &quot;/srv/zulip-venv-cache/3d15d8967e9b0d3f3fc8bd395bcf22593091472e/zulip-py3-venv/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py&quot;, line 2202, in _handle_ns\n    loader = importer.find_module(packageName)\n             ^^^^^^^^^^^^^^^^^^^^\nAttributeError: &#39;FileFinder&#39; object has no attribute &#39;find_module&#39;\n</code></pre></div>\n<p>It looks like this is a problem that many packages had with newer Python a few years ago, and it's probably fixed in <code>pip</code> upstream.</p>",
  "<p>Try with <a href=\"https://github.com/zulip/zulip/pull/29319\">#29319</a></p>",
  "<p>Hi folks, I wonder where I can find good references on how to properly handle third-party API calls inside Zulip. Are there any decorators or functions that I keep in mind? functions such as @typed_endpoint and @webhook_view come to mind, but those are used to write endpoints and not call one. Reference to a directory inside the code would be super helpful <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Hi, Zulip noob here and I'm trying to do some customisations on the client side.<br>\nQuestion:<br>\nCan I use userprofile.uuid for identifying a user uniquely?</p>\n<p>In lib&gt;export.py, it's in the excluded list.</p>\n<div class=\"codehilite\"><pre><span></span><code># We exclude these fields for the following reasons:\n# * api_key is a secret.\n# * password is a secret.\n# * uuid is unlikely to be useful if the domain changes.\nEXCLUDED_USER_PROFILE_FIELDS = [&quot;api_key&quot;, &quot;password&quot;, &quot;uuid&quot;]\n</code></pre></div>\n<p>I did not understand the comment about uuid. What happens to the uuid if/when the domain changes?<br>\nPlease help.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> , can you take a look at the migration. <a href=\"https://github.com/zulip/zulip/commit/b821ba7c9be380bf460aef0c3ff4ac12143eaa0a\">b821ba7c9be380bf460aef0c3ff4ac12143eaa0a</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"29217\">@Sandeepa Nadahalli</span> can you give a bit more context on what you're trying to do?</p>",
  "<p>The UUID is not sent to clients because its purpose is mainly to prevent a class of bug with the data import/export tools. It is immutable and so it can serve as a unique ID for a user; but the <code>id</code> field has the same property unless you import/export the organization (which usually renumbers users).</p>",
  "<p>in <code>zerver/models/sessions.py</code> : </p>\n<div class=\"codehilite\"><pre><span></span><code># custom session model\nclass RealmSession(AbstractBaseSession):\n    user = models.ForeignKey(UserProfile, null=True, on_delete=models.CASCADE)\n    realm = models.ForeignKey(Realm, null=True, on_delete=models.CASCADE)\n\n    class Meta:\n        models.Index(\n            fields=(&quot;realm&quot;, &quot;user&quot;),\n            name=&quot;zerver_realmsession_realm_user_idx&quot;,\n        ),\n\n    @classmethod\n    def get_session_store_class(cls):\n        return RealmSessionStore\n\n\nclass LeaklessCachedDbSessionStore(CachedDbSessionStore):\n    &quot;&quot;&quot;Caching session object which does not leak into the cache.\n\n    django.contrib.sessions.backends.cached_db does write-through to\n    the cache and the backing database.  If the database is in a\n    transaction, this may leak not-yet-committed changes to the cache,\n    which can lead to inconsistent state.  This class wraps changes to\n    the session in assertions which enforce that the database cannot\n    be in a transaction before writing.\n\n    &quot;&quot;&quot;\n\n    @override\n    def save(self, must_create: bool = False) -&gt; None:\n        assert not get_connection().in_atomic_block\n        super().save(must_create)\n\n    @override\n    def delete(self, session_key: Optional[str] = None) -&gt; None:\n        assert not get_connection().in_atomic_block\n        super().delete(session_key)\n\n\nclass RealmSessionStore(LeaklessCachedDbSessionStore):\n\n    cache_key_prefix = &quot;sessions_realm_session_store&quot;\n\n    @classmethod\n    def get_model_class(cls):\n        return RealmSession\n\n    def create_model_instance(self, data):\n\n        obj = super().create_model_instance(data)\n        try:\n            user_id = int(data.get(&quot;user_id&quot;))\n            realm_id = int(data.get(&quot;realm_id&quot;))\n\n        except (ValueError, TypeError):\n            realm_id = None\n            user_id = None\n\n        obj.realm_id = realm_id\n        obj.user_id = user_id\n\n        return obj\n</code></pre></div>\n<ol>\n<li>\n<p>I chose to put <code>realm</code> first in the index fields, it should be faster, it narrows down search results by realm first then by user (No. realms &lt; No. users), Also if for some reason we want to filter by user only then i will add a separate index for user.</p>\n</li>\n<li>\n<p>Am i missing something above ? </p>\n</li>\n<li>\n<p>If the above step is good, next step should be <code>makemigrations</code> and <code>migrate</code> then migrate other code to use that custom session model, (e.g. <code>settings.SESSION_ENGINE</code> should point to that  new file) right ?</p>\n</li>\n<li>Any suggestions on best way to test those changes ?</li>\n</ol>",
  "<p>Those columns need to be marked nullable.  Did you test that?</p>",
  "<p>I also suggested keeping the LeaklessCachedDbSessionStore class (with its <code>save</code> and <code>delete</code> methods) separate from the class which defines <code>create_model_instance</code>, but having one subclass the other -- because those two pieces of functionality are very unrelated.  Did you try that?</p>",
  "<p><code>realm, user</code> does seem like the right order, yes.  Particularly because a session certainly can have a realm but no user (e.g. sessions on the login page)</p>",
  "<p>You should certainly run <code>makemigrations</code> and <code>migrate</code> to test the schema.  Testing it can first be done by running <code>./tools/run-dev</code>and just navigating around, and checking the sessions table's contents, and making sure nothing is 500'ing.</p>",
  "<p>Then testing by ... using the testsuite. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<blockquote>\n<p>Those columns need to be marked nullable.</p>\n</blockquote>\n<p>The reason is to put a default value for existing session rows right ?</p>",
  "<p>In part, but sessions can also exist before the user is logged in</p>",
  "<p>Also, e.g. spectators</p>",
  "<blockquote>\n<p>I also suggested keeping the LeaklessCachedDbSessionStore class (with its\u00a0<code>save</code>\u00a0and\u00a0<code>delete</code>\u00a0methods) separate from the class which defines\u00a0<code>create_model_instance</code></p>\n</blockquote>\n<p>Ok, i will keep the class which defines <code>create_model_instance</code> in that same file above, the other class could be as it was previously in <code>safe_session_cached_db.py</code> then make the first class extend the latter. <br>\nThe latter should be the one whose name is <code>LeaklessCachedDbSessionStore</code> since it defines the functions (<code>save</code> and <code>delete</code>) which are responsible for this feature.</p>",
  "<p>I would move <code>LeaklessCachedDbSessionStore</code> next to the other one, in <code>zerver/model/sessions.py</code>.  There's no utility to scattering the session classes across multiple files.</p>",
  "<p>ok</p>",
  "<p>Above <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1760488\">code</a> message is updated based on the suggestions.<br>\nNow other code that's  currently using <code>safe_session_cached_db.SessionStore</code> should now use <code>RealmSessionStore</code> (which extends <code>LeaklessCachedDbSessionStore</code> and has the index) not <code>LeaklessCachedDbSessionStore</code>itself (No index) , right ?<br>\nif that's the case <code>LeaklessCachedDbSessionStore</code> is now treated as an abstract class</p>",
  "<p>Are there other fields that we would like to potentially store when creating new sessions? </p>\n<p>I could imagine IP address and <code>User-Agent</code> being particularly valuable for being able to display a view showing all your logged-in sessions.</p>",
  "<blockquote>\n<p>Particularly because a session certainly can have a realm but no user (e.g. sessions on the login page)</p>\n</blockquote>\n<p>If that's the case : then in <code>create_model_instance</code> i should handle those fields separately, as in the current function above, one affects the assignment of the other in case of exception.</p>",
  "<p>I was searching the codebase for <code>related_name</code> naming convention but found most of them are <code>+</code>, what's that for ?</p>",
  "<p>You can read about it in the upstream Django documentation: <a href=\"https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.related_name\">https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.related_name</a></p>",
  "<p>Ok if we add the<code>+</code>, The result is that <code>UserProfile</code>and  <code>Realm</code> objects won\u2019t have a backwards relation to that<br>\n custom session model.</p>",
  "<p>do we want that ?<br>\nI did find most  of the codbase uses <code>+</code> rather than actual value, why ?</p>",
  "<p>You started out with the right question: \u201cwhat\u2019s that for?\u201d For example, why does <code>Realm.new_stream_announcements_stream</code> have <code>related_name=\"+\"</code>? It\u2019s because it would not make sense to allow Django to auto-generate <code>stream.realm_set</code> that refers to \u201call the realms that have that stream as their <code>new_stream_announcements_stream</code>\u201d\u2014no, the relationship is more specific than that.</p>",
  "<p>Would it make sense for Django to auto-generate <code>user.session_set</code> that refers to \u201call sessions that have that user as their <code>user_profile</code>\u201d? Yes, that makes perfect sense, so there\u2019s no reason to override <code>related_name</code> in that case.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1760695\">said</a>:</p>\n<blockquote>\n<p><code>new_stream_announcements_stream</code></p>\n</blockquote>\n<p>If I understand correctly, that would also include <code>realm.signup_announcements_stream</code>(another related field) in <code>stream.real_set</code> result which is wrong if <code>realm.new_stream_announcements_stream</code>is only what we want, right?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1760698\">said</a>:</p>\n<blockquote>\n<p>Would it make sense for Django to auto-generate <code>user.session_set</code> that refers to \u201call sessions that have that user as their <code>user_profile</code>\u201d? Yes, that makes perfect sense, so there\u2019s no reason to override <code>related_name</code> in that case.</p>\n</blockquote>\n<p>Yes, and I think the same applies to <code>realm</code></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1760639\">said</a>:</p>\n<blockquote>\n<p>Are there other fields that we would like to potentially store when creating new sessions? </p>\n<p>I could imagine IP address and <code>User-Agent</code> being particularly valuable for being able to display a view showing all your logged-in sessions.</p>\n</blockquote>\n<ol>\n<li>If we want both <code>Ipv4</code> and <code>Ipv6</code> I would use <code>models.GenericIPAddressField()</code></li>\n<li>Should we store the raw <code>User-Agent</code> string or some parsed/formatted version of it ?</li>\n</ol>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1760639\">said</a>:</p>\n<blockquote>\n<p>Are there other fields that we would like to potentially store when creating new sessions?</p>\n<p>I could imagine IP address and <code>User-Agent</code> being particularly valuable for being able to display a view showing all your logged-in sessions.</p>\n</blockquote>\n<p>I assumed the session already had the IP and user-agent.  But regardless, we don't need to make a <em>column</em> for that unless we intend to query for them.  I don't see any need to do aggregation or querying by user-agent; if we store that, we should just store it in the session hash.  The IP, I could see an argument for wanting to filter all sessions by IP, so pulling that out into a column makes sense.</p>",
  "<p>If we want to store a parsed version of the user-agent, we should have a foreign key to the Client table, which is how we already normalize user-agents.</p>",
  "<p>Ok for now i will add a column for the IP</p>",
  "<p>in <a href=\"https://zulip--29260.org.readthedocs.build/en/29260/tutorials/new-feature-tutorial.html#adding-a-field-to-the-database\">Adding a field to the database</a>, one time it says after migration run <code>./scripts/setup/flush-memcached</code> to flush memcached, and in the example below it says after migration run <code>/etc/init.d/memcached\u00a0restart</code> to restart memcached, what's the difference ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1760518\">said</a>:</p>\n<blockquote>\n<p>You should certainly run <code>makemigrations</code> and <code>migrate</code> to test the schema.  Testing it can first be done by running <code>./tools/run-dev</code>and just navigating around, and checking the sessions table's contents, and making sure nothing is 500'ing.</p>\n</blockquote>\n<p>what does <code>ing</code> stand for ? I searched throughly before asking</p>",
  "<p>A HTTP 500 error is the HTTP status code for an internal server error. \"500'ing\" was shorthand for  \"returning HTTP 500 errors\".</p>",
  "<p>The \"restart\" language is old; flushing it has the same effect while not requiring root permissions.</p>",
  "<p>So both places should suggest flushing; a PR would be appreciated.</p>",
  "<p>Ok, on it !</p>",
  "<p>aha, couldn't figure that out, if it was <code>ise</code> that would make it clearer, but ok got it</p>",
  "<p><code>git grep OutgoingSession</code> will find you all the places we subclass the base class we use for outgoing HTTP connections.</p>",
  "<p>Done, <a href=\"https://github.com/zulip/zulip/pull/29362\">PR</a></p>",
  "<p><a href=\"/user_uploads/2/3/SsHSFCCmg6z0m9dRR20aov1G/Screenshot-from-2024-03-20-02-27-45.png\">Screenshot-from-2024-03-20-02-27-45.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/3/SsHSFCCmg6z0m9dRR20aov1G/Screenshot-from-2024-03-20-02-27-45.png\" title=\"Screenshot-from-2024-03-20-02-27-45.png\"><img src=\"/user_uploads/2/3/SsHSFCCmg6z0m9dRR20aov1G/Screenshot-from-2024-03-20-02-27-45.png\"></a></div>",
  "<p>Do these logs messages mean that memcached auto-flushes after running <code>./manage.py migrate</code> ?</p>",
  "<p>I ran <code>./tools/test-backend</code></p>",
  "<p>There are Two errors , but i will investiage them by myself first <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"92\" href=\"/#narrow/stream/92-learning/topic/Proper.20way.20of.20handling.20external.20API.20calls.20in.20Zulip\">#learning &gt; Proper way of handling external API calls in Zulip</a> by <span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span>.</p>",
  "<p>Errors are solved <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  all test cases of <code>./tools/test-backend</code> passed.</p>",
  "<p>Good observation! So it may be that we should change that documentation to just mention that feature to help the reader understand, but not tell them to do something.</p>",
  "<p>ok, on it</p>",
  "<p>The PR I sent to aioapns as part of <a href=\"https://github.com/zulip/zulip/pull/27590\">#27590</a> was merged the other day, and there's a release 3.2 that contains my change. So we should be able to take that upgrade and stop pinning to the PR branch.</p>\n<p>I don't think there's any rush here, so I'm guessing the most efficient workflow is just that whenever <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> next does a round of upgrading Python dependencies, this can be part of that.</p>",
  "<p>(The maintainer did add a <a href=\"https://github.com/Fatal1ty/aioapns/commit/0447b208bb6b3be1e9ddfd3738b70b64994b1618\">follow-up commit</a> with this unfortunate \"simplification\":</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-        if request.apns_topic is not None:</span>\n<span class=\"gd\">-            apns_topic = request.apns_topic</span>\n<span class=\"gd\">-        else:</span>\n<span class=\"gd\">-            apns_topic = self.apns_topic</span>\n<span class=\"gi\">+        apns_topic = request.apns_topic or self.apns_topic</span>\n</code></pre></div>\n<p>But we have an invariant that our <code>apns_topic</code> values are nonempty strings \u2014 they go through <code>check_app_id</code> in <code>zerver/views/push_notifications.py</code> \u2014 so I believe that doesn't cause any live bug for us.)</p>",
  "<p>Now\u2019s as good a time as any. <a href=\"https://github.com/zulip/zulip/pull/29384\">#29384</a>.</p>",
  "<p>Nope something broke.</p>",
  "<p>I was thinking of picking topic based settings as one of my projects for gsoc. I was wondering what would probably be the next step in this topic model preparation.</p>",
  "<p>I think the thing I'd start with is getting an understanding of the <code>UserTopic</code> model and how moving messages interacts with it; the next major transition would be to create a parallel <code>Topic</code> model that is not required to exist, but can be used to hang settings off of, and make sure the message-edit code path handles it correctly in all cases, probably in part by extending existing tests for <code>UserTopic</code> transition logic.</p>",
  "<p>22 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"92\" href=\"/#narrow/stream/92-learning/topic/mypy.20typing\">#learning &gt; mypy typing</a> by <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>.</p>",
  "<p>Redis is <a href=\"https://redis.com/blog/redis-adopts-dual-source-available-licensing/\">no longer open-source</a>:</p>\n<blockquote>\n<p>Beginning today, all future versions of Redis will be released with source-available licenses. Starting with Redis 7.4, Redis will be dual-licensed under the Redis Source Available License (RSALv2) and Server Side Public License (SSPLv1). Consequently, Redis will no longer be distributed under the three-clause Berkeley Software Distribution (BSD).</p>\n</blockquote>",
  "<p>Wow, that's surprising! I remember <a href=\"https://techcrunch.com/2019/02/21/redis-labs-changes-its-open-source-license-again/\">https://techcrunch.com/2019/02/21/redis-labs-changes-its-open-source-license-again/</a>, and the claim at the time that they would keep the main<code>redis</code> software under its existing license.</p>",
  "<p>I'm done with the first step of creating the custom session model along with its sessionstore, here is the <a href=\"https://github.com/zulip/zulip/pull/29404\">PR</a> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n<p>PR body still needs more details explaining the changes made, don't worry.</p>",
  "<p>After you review, next step should be migrating the code to start using that new session and take advantage of the new <code>realm</code> and <code>user</code> indexs!</p>",
  "<p>can someone explain/link to doc, why we do or don't export some tables ?</p>",
  "<p>also for a custom session model what should be the reason for not exporting it? as you may have noticed <code>NON_EXPORTED_TABLES</code> likes to state the reason for every couple of tables not exported</p>",
  "<p>We don't export passwords, logged-in sessions, or similar secrets, so that would be the reason to not export sessions.</p>",
  "<p>from <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>  PR comment :</p>\n<blockquote>\n<p>I think the mypy logic here is wrong.</p>\n<p>You want to construct a new RealmSession, perhaps initialized frmo obj and return that, not declare you're returning an AbstractBaseSession, I think?</p>\n</blockquote>\n<p>the problem is that <code>obj</code> is indeed of type <code>AbstractBaseSession</code> (initially), but then after that we add the custom variables for it to become of type <code>RealmSession</code></p>",
  "<p>can mypy handle that type change <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>,</p>",
  "<p><strong>ok here is the approach i've reached based on <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>  suggestion and mypy doesn't complain :</strong>  </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@override</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_model_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RealmSession</span><span class=\"p\">:</span>\n      <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_model_instance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n      <span class=\"n\">realm_session_obj</span> <span class=\"o\">=</span> <span class=\"n\">RealmSession</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n       <span class=\"o\">....</span> <span class=\"n\">rest</span> <span class=\"n\">of</span> <span class=\"n\">code</span>\n      <span class=\"k\">return</span> <span class=\"n\">realm_session_obj</span>\n</code></pre></div>",
  "<p>What do you think</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> has marked this topic as resolved.</p>",
  "<p>No</p>",
  "<p>Maybe above is not so clear or <code>**obj.__dict__</code> not so efficient</p>",
  "<p>here is a better way : </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@override</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_model_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RealmSession</span><span class=\"p\">:</span>\n      <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_model_instance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n      <span class=\"n\">realm_session_obj</span> <span class=\"o\">=</span> <span class=\"n\">RealmSession</span><span class=\"p\">(</span>\n            <span class=\"n\">session_key</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">session_key</span><span class=\"p\">,</span>\n            <span class=\"n\">session_data</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">session_data</span><span class=\"p\">,</span>\n            <span class=\"n\">expire_date</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">expire_date</span>\n        <span class=\"p\">)</span>\n       <span class=\"o\">....</span> <span class=\"n\">rest</span> <span class=\"n\">of</span> <span class=\"n\">code</span>\n      <span class=\"k\">return</span> <span class=\"n\">realm_session_obj</span>\n</code></pre></div>",
  "<p>Those <code>obj</code> attributes values are the different ones from <code>realm_session_obj</code> and they get assigned to <code>obj</code> when the parent method is called</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29409\">#29409</a> does this, after finding one of those two calls in the hot path.</p>",
  "<p>I was thinking of working on this until we decide about whether we want to allow setting multiple groups to a permission setting.</p>\n<p>I wanted to discuss what approach we want to use here. As mentioned above - we can either add a new <code>is_user_active</code> field to <code>UserGroupMembership</code> model like we have for <code>Subscription</code> or we can just filter out the deactivated users using the <code>UserProfile.is_active</code> field before sending the API response.</p>",
  "<p>We access the group members either by doing <code>user_group.direct_members.all()</code>, where we get the <code>UserProfile</code> objects so we can do the <code>user_group.direct_members.filter(is_active=True)</code> to exclude deactivate users, or we query the <code>UserGroupMembership</code> table at other places, where we would need to filter on <code>user_profile__is_active=True</code> or we can use the new field if we add it.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> Thanks a lot for your answer. I will use the id itself. And I don't plan to import/export the org. <br>\nI am trying to extend the Zulip client with some custom functionality where I need to map users with accounts from some other server.</p>",
  "<p>I'm a bit skeptical that this won't end up creating duplicate rows or otherwise be incorrect. What precisely does <code>create_model_instance</code> do in the superclass?</p>",
  "<p>The whole point of providing <code>get_model_class</code> is that it should cause <code>create_model_instance</code> to return you an instance of that class.  So <code>obj</code> should already be a <code>RealmSession</code></p>",
  "<p>Ref <a href=\"https://github.com/django/django/blob/1c11dba835fb15d7c026d6e8a57c96ed66089437/django/contrib/sessions/backends/db.py#L94-L104\">https://github.com/django/django/blob/1c11dba835fb15d7c026d6e8a57c96ed66089437/django/contrib/sessions/backends/db.py#L94-L104</a> and <a href=\"https://github.com/django/django/blob/1c11dba835fb15d7c026d6e8a57c96ed66089437/django/contrib/sessions/backends/db.py#L20-L30\">https://github.com/django/django/blob/1c11dba835fb15d7c026d6e8a57c96ed66089437/django/contrib/sessions/backends/db.py#L20-L30</a></p>",
  "<p>I think the <code>is_user_active</code> denormalization is expensive in terms of complexity to maintain, so if the queries are efficient without doing it, I don't think there's any reason to do it.</p>\n<p>I think the motivation for doing <code>is_user_active</code> in <code>Subscription</code> was precisely to make fetching the subscribers data structure of which is in which stream somewhat more efficient. Since I think we don't expect it to be common for users to be directly members of 20+ groups in organizations with thousands of streams, it is probably not a necessary optimization (and of course something we can add later). Role groups, in particular, we can probably optimize by just having the client impute their membership from the <code>role</code> fields on user objects, and even those only put each user in 1-2 groups.</p>\n<p>So I'd skip that extra complexity for now, and just do a join, ideally having the join happen in the database rather than post-Python post-processing.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1764341\">said</a>:</p>\n<blockquote>\n<p>So <code>obj</code> should already be a <code>RealmSession</code></p>\n</blockquote>\n<p>Yes, but initially it is not, since the parent method <code>super().create_model_instance()</code> returns <code>AbstractBaseSession</code> instance</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1764334\">said</a>:</p>\n<blockquote>\n<p>I'm a bit skeptical that this won't end up creating duplicate rows or otherwise be incorrect.</p>\n</blockquote>\n<p>duplicate rows, i don't think so, I didn't call <code>save()</code> method on <code>realm_session_obj</code></p>",
  "<p>Have you tried actually printing the object that's returned?</p>",
  "<p>No, I think now it's a good time to start migrating the code to actually use that custom model to see how things interact</p>",
  "<p>I think creating <code>RealmSession</code>objects directly for testing (e.g. from shell) is not super representable of the real use cases</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1764364\">said</a>:</p>\n<blockquote>\n<p>Yes, but initially it is not, since the parent method <code>super().create_model_instance()</code> returns <code>AbstractBaseSession</code> instance</p>\n</blockquote>\n<p>How do you know that?  Is that from mypy, or from inspecting the object?</p>\n<p>Because I suspect mypy's typing here (from the Django stubs) may just be wrong.</p>",
  "<p>ok, I've inspected the current session model (<code>Session</code>) and indeed  <code>create_model_instance()</code> returns an <code>Session</code> instnace.<br>\nWith that same logic after migrating code <code>create_model_instance()</code> must return <code>RealmSession</code> instance</p>",
  "<p><strong>All this discussion is because mypy was complaining as it expects <code>super().create_model_instance()</code> to return <code>AbstractBaseSession</code></strong></p>",
  "<p>There is a workaround using <code>cast</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">RealmSession</span><span class=\"p\">,</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_model_instance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n</code></pre></div>",
  "<p>or using <code># type: ignore</code></p>",
  "<p>After migrating will simply double check if <code>obj</code> is indeed a <code>RealmSession</code> (e.g <code>isinstance(obj, RealmSession)</code></p>",
  "<p>what do you prefer ?</p>",
  "<p>Never use <code>cast</code> or <code># type: ignore</code>\u2014these don\u2019t check anything. If <code>obj</code> really is a <code>RealmSession</code> at runtime, you can write <code>assert isinstance(obj, RealmSession)</code> to check this at runtime and mypy will understand that.</p>",
  "<p>Yes, this worked Thanks !</p>",
  "<p><code># type: ignore</code> is being used throughout the source code though</p>",
  "<p>I suspect because mypy doesn't always get it right or something ?</p>",
  "<p>When you become smarter than mypy, fully understand the maintainability implications of disabling it, and can correctly recognize situations where there\u2019s no better option, you\u2019ll be able to consider writing it yourself. Until then, don\u2019t.</p>",
  "<p>Ok, fair enough</p>",
  "<p>Note that almost every <code># type: ignore</code> has a comment after it pointing to a Mypy bug, or other bug report.  We don't just toss them around on every mypy error.</p>",
  "<p>yes i've done that in the PR</p>\n<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1764468\">said</a>:</p>\n<blockquote>\n<p>Note that almost every <code># type: ignore</code> has a comment after it pointing to a Mypy bug, or other bug report.  We don't just toss them around on every mypy error.</p>\n</blockquote>",
  "<p>You've filed a bug in mypy?</p>",
  "<p>no, i mean mentioned the reason for disabling the error</p>",
  "<p>This is from the Pr : </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">RealmSession</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseSession</span><span class=\"p\">):</span>  <span class=\"c1\"># type: ignore[explicit-override] # some called functions by this class like get_next_by_expire_date override the parent functions, but since we don't explicitly use or define them we cannot use @override</span>\n</code></pre></div>",
  "<p>My point was the same as <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span>' -- <code># type: ignore</code> is almost certainly not correct for most PRs.  It's the tool to use when there is a bug in mypy, not just because you got an error and decided to use a giant hammer.</p>",
  "<p>That use of <code># type: ignore</code> is indeed incorrect.</p>",
  "<p>hmmm, ok will work on that</p>",
  "<p>Also, we have 56 <code>type: ignore</code> lines in O(100K) lines of code. That is not \"a lot\" of uses of it.</p>",
  "<p>For that one you\u2019re missing a reference to <a href=\"https://github.com/typeddjango/django-stubs/issues/1698\">https://github.com/typeddjango/django-stubs/issues/1698</a>, like we have in 8 other files.</p>",
  "<p>When we file an upstream bug like that, we leave references to it so we can go back and clean up the code when the upstream bug gets fixed.</p>",
  "<p>Thanks and this also has silenced mypy</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29404\">PR</a> I've made the appropriate changes based on this discussion and the review</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/actions/runs/8395675046/job/22995451537?pr=29404\">test coverage</a>, what exactly should i test for in <code>models/session.py</code> ?</p>",
  "<p>Done ! <a href=\"https://github.com/zulip/zulip/pull/29427\">PR</a></p>",
  "<p>Should i migrate the code to first use the new created<code>RealmSession</code> and <code>RealmSessionStore</code> instead of existing ones, then write the tests for those changes, for example modifying <code>zerver/tests/test_session.py</code> ? </p>\n<p>OR</p>\n<p>The new created <a href=\"https://github.com/abdelrahman725/zulip/blob/session-indexing/zerver/models/sessions.py\"><code>models/session.py</code></a> should have its own tests first ?</p>",
  "<p>I want to work on <a href=\"https://github.com/zulip/zulip/issues/29350\">Performance of rewriting attachment URLs</a> issue.</p>\n<ol>\n<li>Any more details would be appreciated</li>\n<li>How can i reproduce that <code>import</code> operation, to see things by myself first and then investigate.</li>\n</ol>",
  "<p>The \"import\" which is being referred to is <a href=\"https://zulip.readthedocs.io/en/latest/production/export-and-import.html#import-into-a-new-zulip-server\">https://zulip.readthedocs.io/en/latest/production/export-and-import.html#import-into-a-new-zulip-server</a></p>\n<p>You can replicate by adding a bunch of messages with attachments, running an <a href=\"https://zulip.readthedocs.io/en/latest/production/export-and-import.html#data-export\">export</a>, and then re-importing that as a new realm.</p>",
  "<p>I would do the former.  I don't think that standalone tests will have much value here, and most of the value of the tests will be testing how the new session code interacts with the rest of the codebase.</p>",
  "<blockquote>\n<p>During import, we check every message for every potential attachment rename</p>\n</blockquote>\n<p>why we do this ?</p>",
  "<p>What have you found out by looking at the code?</p>",
  "<p>I'm looking for the file which does that checking</p>",
  "<p>Take 5 minutes to do that.  If you're still having trouble finding it, tell me where you looked and why, and we'll pick it up from there.</p>",
  "<p>ok</p>",
  "<p>ok it's in <code>lib/import_realm.py</code></p>",
  "<p><code>fix_upload_links()</code> ?</p>",
  "<p>as I can see the <code>O(M \u00d7 N)</code> behaviour in the nested loop, and the description</p>",
  "<p>Right. I think in general, you shouldn't ask others for help with any question that's part of a project you're picking up that you answer yourself with &lt;15 minutes of work -- it's not a productive way to collaborate.</p>",
  "<p>ok, maybe I rushed into the question, will keep that in mind</p>",
  "<p>It feel like our Django/Python process startup time has been a bit slow of late, so I'm going to do a round of trying to debug why that is. Here's my test case, which basically starts up a Django process and then does something trivial:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ time ./manage.py print_initial_password iago@zulip.com &gt;/dev/null\n\nreal    0m2.890s\nuser    0m2.726s\nsys 0m0.156s\n</code></pre></div>",
  "<ul>\n<li>The first thing I notice while profiling it is that a big chunk of time is in <code>run_checks</code>, the Django system that runs checks during process startup, in particular, <code>check_resolver</code>, which presumably does some sort of DNS requests?</li>\n</ul>",
  "<p>That's a lot faster just skipping those:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ time ./manage.py print_initial_password iago@zulip.com --skip-checks &gt;/dev/null\n\nreal    0m1.121s\nuser    0m1.017s\nsys 0m0.096s\n</code></pre></div>\n<p>Maybe I have some crazy thing wrong with my DNS, but it shouldn't take 1.5s to verify that's working...</p>",
  "<p>That\u2019s for URL patterns, not DNS.</p>",
  "<p>Ahh, OK, so that makes sense, but those also might be checks that are completely useless for most management commands that aren't a server process.</p>",
  "<p>Do you have a profiler visualization tool you recommend? <code>snakeviz</code> feels pretty hard to read.</p>",
  "<p>I guess the <code>print_stats</code> function is about as usable.</p>",
  "<p>Notable details from profiling <code>--skip-checks</code>:</p>\n<ul>\n<li>181ms inside <code>/home/tabbott/zulip/./zerver/lib/upload/s3.py</code> even with the S3 backend not enabled. I expect this is probably \"importing boto is really expensive\". Though only 110ms are inside <code>/srv/zulip-py3-venv/lib/python3.10/site-packages/boto3/__init__.py</code>. </li>\n<li>136ms inside <code>/srv/zulip-py3-venv/lib/python3.10/site-packages/sqlalchemy/__init__.py</code>.</li>\n<li>87ms inside <code>/srv/zulip-py3-venv/lib/python3.10/site-packages/social_django/__init__.py</code>. </li>\n<li>50ms inside <code>/srv/zulip-py3-venv/lib/python3.10/site-packages/ldap/__init__.py</code></li>\n<li>51ms inside <code>/srv/zulip-py3-venv/lib/python3.10/site-packages/two_factor/plugins/phonenumber/apps.py</code></li>\n<li>25ms inside <code>/srv/zulip-py3-venv/lib/python3.10/site-packages/PIL/GifImagePlugin.py</code></li>\n</ul>",
  "<p>Some of that time is probably importing Python core stuff that something else would probably use instead, but to me that hints that if we could make it the case that some of those imports are lazy, such that modules like <code>sqlalchemy</code> that are only potentially used in a few processes were lazily imported, we probably could improve this significantly.</p>",
  "<ul>\n<li>Stripe's root module, <code>/srv/zulip-py3-venv/lib/python3.10/site-packages/stripe/__init__.py</code>, shows up as 900ms if one doesn't include <code>--skip-checks</code>, which seems notable, though again, that could be just that it's what imports a bunch of standard library stuff.</li>\n</ul>",
  "<p>These are the commands I'm using BTW:</p>\n<ul>\n<li><code>python -m cProfile -o /tmp/startup.prof ./manage.py print_initial_password iago@zulip.com &gt;/dev/null</code></li>\n<li><code>python -c 'import pstats; s = pstats.Stats(\"/tmp/startup.prof\"); s.sort_stats(pstats.SortKey.CUMULATIVE); s.print_stats()'</code></li>\n</ul>",
  "<p>It looks like we\u2019re almost ready for this ops-wise, so <a href=\"https://github.com/zulip/zulip/pull/29458\">#29458</a> is a draft for dropping support for Ubuntu 20.04 and Debian 11.</p>",
  "<p>I've investigated the <code>fix_upload_links</code>and  have some improvments in mind, but i have to test the execution time of it first to compare the differences.</p>",
  "<p>will keep you updated</p>",
  "<p>Yeah, all of the <code>manage.py</code> steps in <code>restart-server</code> do one explicit <code>./manage.py check</code> upfront and then pass <code>--skip-checks</code> to all of the subsequent ones.</p>\n<p>We could consider adjusting all of the supervisor processes to have <code>--skip-checks</code>.</p>",
  "<p>I would use <a href=\"https://github.com/benfred/py-spy\"><code>py-spy</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>py-spy record -o profile.svg -r 500 -- ./manage.py print_initial_password --skip-checks iago@zulip.com\n</code></pre></div>\n<p>Which produces:<br>\n<a href=\"/user_uploads/2/88/ha82d7qAJeQUT3TLQggNnhCq/profile.svg\">profile.svg</a></p>",
  "<p>For me, in my dev environment, baseline is 3.864s; with <code>--skip-checks</code>, it's 1.665, and with not importing the s3 backend, it drops to 1.292s:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git zerver/lib/upload/__init__.py zerver/lib/upload/__init__.py</span>\n<span class=\"gh\">index d8a03a7fa2..0142d39bb4 100644</span>\n<span class=\"gd\">--- zerver/lib/upload/__init__.py</span>\n<span class=\"gi\">+++ zerver/lib/upload/__init__.py</span>\n<span class=\"gu\">@@ -12,8 +12,6 @@ from django.utils.translation import gettext as _</span>\n<span class=\"w\"> </span>from zerver.lib.exceptions import ErrorCode, JsonableError\n<span class=\"w\"> </span>from zerver.lib.outgoing_http import OutgoingSession\n<span class=\"w\"> </span>from zerver.lib.upload.base import ZulipUploadBackend\n<span class=\"gd\">-from zerver.lib.upload.local import LocalUploadBackend</span>\n<span class=\"gd\">-from zerver.lib.upload.s3 import S3UploadBackend</span>\n<span class=\"w\"> </span>from zerver.models import Attachment, Message, Realm, RealmEmoji, ScheduledMessage, UserProfile\n\n\n<span class=\"gu\">@@ -53,8 +51,12 @@ def get_file_info(user_file: UploadedFile) -&gt; Tuple[str, str]:</span>\n\n<span class=\"w\"> </span># Common and wrappers\n<span class=\"w\"> </span>if settings.LOCAL_UPLOADS_DIR is not None:\n<span class=\"gi\">+    from zerver.lib.upload.local import LocalUploadBackend</span>\n<span class=\"gi\">+</span>\n<span class=\"w\"> </span>    upload_backend: ZulipUploadBackend = LocalUploadBackend()\n<span class=\"w\"> </span>else:\n<span class=\"gi\">+    from zerver.lib.upload.s3 import S3UploadBackend</span>\n<span class=\"gi\">+</span>\n<span class=\"w\"> </span>    upload_backend = S3UploadBackend()  # nocoverage\n\n<span class=\"w\"> </span># Message attachment uploads\n</code></pre></div>",
  "<p>I was trying to generate mock data for messages with  attachments using <code>./manage.py add_mock_conversation</code> but it failed with </p>\n<div class=\"codehilite\"><pre><span></span><code>   assert user_profile.bot_owner_id is not None\nAssertionError\n</code></pre></div>",
  "<p>However I managed to uploaded 500 attachments to messages in zulip dev, i hope that's enough to simulate large imports</p>",
  "<p>Yeah that plan to skip checks in production is probably a good direction... Though it would be nice if we can figure out why the checks are so expensive, I'm not aware of a reason it should be...</p>",
  "<p>The first forks are already on their way</p>\n<ul>\n<li><a href=\"https://redict.io/\">https://redict.io/</a></li>\n</ul>\n<p>others also have mentioned <a href=\"https://keydb.dev/\">KeyDB</a> as an alternative.</p>",
  "<p>btw during executin of <code>zerver/tests/test_import_export.py</code> <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/import_realm.py#L184\">checking for message attachment</a> always evaluates to <code>False</code>, so the main goal for <code>fix_upload_links</code> is never tested in <code>zerver/tests/test_import_export.py</code></p>",
  "<p>Does this mean Redis is getting kicked out of Debian main? That could impact our ability to install it via APT.</p>",
  "<p>I'm afraid it's still too early to see what the different distributions will do.</p>\n<p>Some discussions already started on the <a href=\"https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/XVFFKU2NYB2Q3BQUYNANSDNE4VCJQ6KF/\">Fedora ML</a> and I also came across some <a href=\"https://github.com/placeholderkv/placeholderkv/issues/8\">discussions</a> between the redict and the also new <a href=\"https://codeberg.org/redict/redict\">placeholderkv</a>  maintainers.</p>\n<p>My current <span aria-label=\"crystal ball\" class=\"emoji emoji-1f52e\" role=\"img\" title=\"crystal ball\">:crystal_ball:</span>  guess would be that most distros will keep redis 7.2 around until a viable replacement is available.</p>",
  "<p>Yeah, that makes sense; it is fairly stable software.</p>",
  "<p>Yeah you might want to start with a preparatory commit that does effective test setup for the problem, as usually this is the kind of thing you want to write using iteration of an automated test.</p>",
  "<p>Yes, and also i should increase the number of generated messages and attachments, as they are currently just up to 30, 1 respectively</p>",
  "<p>You probably don't need any more messages; quadratic behavior is very easy to verify.</p>",
  "<p>Hi <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> <br>\nI am a fourth-year undergraduate at IIT Kharagpur. I find this project, Optimize performance and scalability, challenging and would love to be able to contribute to it. Looking forward to the learning and challenges.</p>",
  "<p>It turned out i had to set those custom fields(<code>realm_id</code> and <code>ip_addres</code>, <code>user_id</code> has been already set  to <code>_auth_user_id</code>) in the session store data myself, so my question is <strong>when do you want the request object to save the <code>realm_id</code> in session data</strong> ?(e.g. in which middleware?)</p>",
  "<p>After my search efforts i found <a href=\"https://github.com/zulip/zulip/blob/main/zerver/middleware.py#L565\">HostDomainMiddleware</a> to be the 1st middleware where a request has access to  realm_id, right ?</p>\n<p>Is this where i should set <code>request.session[\"realm_id\"]</code> to <code>request_notes.realm</code> ?</p>",
  "<p>We should be saving the <code>realm_id</code> when creating sessions (<code>do_login</code> I think?)... and I guess it would not be a bad idea to add it to existing logged-in sessions when processing <code>/</code> requests with it unset, as well, so that we can rely on it being present a few weeks after making the change.</p>",
  "<p>ok</p>",
  "<p>yes <code>do_login</code> has access to realm</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1770478\">said</a>:</p>\n<blockquote>\n<p>as well, so that we can rely on it being present a few weeks after making the change</p>\n</blockquote>\n<p>sorry but can you explain what do you mean by this, i understood that we want logged-in session to have the realm_id as well</p>",
  "<p>It turns out that <a href=\"https://github.com/zulip/zulip/blob/main/zerver/decorator.py#L206\">process_client</a> gets called from <code>do_login</code> and also when processing <code>/</code> requests.<br>\nI knew that by printing following in that function:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">has_fetched_realm</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>one of the outputs  is  <code> / True</code> <br>\nWith that said I think it's a good place to save <code>realm_id</code> in the session data, to achieve both goals (i.e. for logging  in and already logged-in requests)</p>",
  "<p><strong>Another approach</strong> is to save <code>realm_id</code> once <a href=\"https://github.com/zulip/zulip/blob/main/zerver/decorator.py#L482\">here in do_login()</a>  and another <a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/home.py#L207\">here in home_real()</a></p>",
  "<p><strong>What is the better approach for zulip needs ?</strong></p>",
  "<p>Created a PR <a href=\"https://github.com/zulip/zulip/pull/29521\">#29521</a> for issue <a href=\"https://github.com/zulip/zulip/issues/28945\">#28945</a>.</p>\n<p>Use the <code>/json/messages/flags</code> instead of <code>/json/messages/flags/narrow</code> when we have fully fetched the current view.<br>\nUpdate messages on the basis of id instead of updating the entire narrow.</p>\n<p>If <code>message_lists.current.data.fetch_status.has_found_newest()</code>, then filter all the message ids on the basis of the anchor and only update those messages.</p>\n<p>Please Review.</p>",
  "<p><a href=\"https://www.linuxfoundation.org/press/linux-foundation-launches-open-source-valkey-community\">https://www.linuxfoundation.org/press/linux-foundation-launches-open-source-valkey-community</a><br>\n<a href=\"https://github.com/valkey-io/valkey\">https://github.com/valkey-io/valkey</a></p>",
  "<blockquote>\n<p>Industry participants, including Amazon Web Services (AWS), Google Cloud, Oracle, Ericsson, and Snap Inc. are supporting Valkey. They are focused on making contributions that support the long-term health and viability of the project so that everyone can benefit from it.</p>\n</blockquote>",
  "<p>Hi, has the issue been resolved or can I take it up?</p>",
  "<p>Ritik, there are 2 open pr's related this issue: but work related to <code>do_mark_stream_message_as_read</code> has not been done, you can read more about it <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1747991\">https://chat.zulip.org/#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1747991</a></p>",
  "<p>There are <a href=\"https://lwn.net/SubscriberLink/966631/6bf2063136effa1e/\">at least five forks</a> available. But I think we should get rid of Redis completely to simplify our architecture.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/141-kandra-ops/topic/user_uploads.20load.20on.20restart/near/1468532\">said</a>:</p>\n<blockquote>\n<p>The reason we have both memcached and Redis is not a good one. Someone was excited about using Redis\u2019s <a href=\"https://redis.io/commands/zadd/\">ZADD command</a> for rate limiting because it uses \u201conly\u201d O(log <em>n</em>) time per operation and O(<em>n</em>) space to maintain a sorted list of every access from a given client within the window. This is nonsense algorithmically, since it should be O(1) and O(1) (<a href=\"#narrow/stream/3-backend/topic/rate.20limiting/near/825676\">previous discussion</a>).</p>\n</blockquote>",
  "<p><span class=\"user-mention silent\" data-user-id=\"29754\">Mahhheshh</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1753064\">said</a>:</p>\n<blockquote>\n<p>but typecasting python <code>None</code> makes it a <code>\"None\"</code>, which violates, <code>`UniqueConstraint</code>.</p>\n</blockquote>\n<p>Won't it make sense to not just provide the subgroup in case it's None so that the column stays NULL?</p>",
  "<p>Yeah, and our category of use of \"cache that we are OK losing\" has a lot of overlap with memcached, and in some cases we're only not sticking things in the real durable database because it's a little more operational work (e.g. <a href=\"https://github.com/zulip/zulip/pull/29326\">#29326</a>)</p>",
  "<p>I think you need to spend more time reading the code and Django middleware and presenting decisions to made in a clear fashion. We're not here to do the project for you, but to make decisions.</p>",
  "<p>I had a long in-person chat with <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> and <span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span> about the design for this last week, and we came up with the following proposal that I think lets us do everything that we want.</p>\n<ul>\n<li>We create a <a href=\"#narrow/stream/3-backend/topic/set.20a.20group.20setting.20to.20multiple.20groups/near/1749761\">NamedUserGroup model</a> proposed above. Tracking this as <a href=\"https://github.com/zulip/zulip/pull/29554\">#29554</a>, which is probably the next step for this process.</li>\n<li>We start allowing group-valued settings to have a value that is an anomymous group, that would be stored in the database as a <code>UserGroup</code> but never referenced directly in the API; effectively they're just containers with a list of users and a list of subgroups. Opened <a href=\"https://github.com/zulip/zulip/issues/29557\">https://github.com/zulip/zulip/issues/29557</a> defining the semantics, and <a href=\"#narrow/stream/378-api-design/topic/groups.20redesign/near/1772449\">https://chat.zulip.org/#narrow/stream/378-api-design/topic/groups.20redesign/near/1772449</a> has some API design questions.</li>\n<li>In the <code>input_pull</code> UI for a setting, if one sets the value to a setting as specifically a single group ID that corresponds to a <code>NamedUserGroup</code>, then we would store that <code>NamedUserGroup</code> as the value of the group setting. But otherwise, we'd just send the server a <code>{direct_member_ids: [1, 3, 6], direct_subgroup_ids: [14, 17]}</code> type object corresponding to the pills.</li>\n</ul>\n<p>This approach would let us get all the functionality we want in this thread, and replaces a different messy thing (single-user groups) that we'd previously been imagining we had to build.</p>\n<p>I think this part of the <a href=\"https://github.com/zulip/zulip/pull/29557\">#29557</a> summarizes the benefits of this data/API model over what had been previously proposed:</p>\n<blockquote>\n<p>One of the big benefits of these setting-value groups being anonymous is we would not have to do any special live-update data synchronization logic to try to send clients details on one of these setting-value user groups only if the user has access to the setting whose value that is -- because we'd just always include this information in the <code>stream</code> event (or whatever) describing the object whose setting has that value.</p>\n<p>But it's nice for them to be groups, because then all of our fancy functions like <code>get_recursive_subgroups</code> and <code>get_recursive_group_members</code> can be reused for asking questions about which users have a given permission.</p>\n<p>Additionally, this design would replace and obsolete the proposal in <a href=\"https://github.com/zulip/zulip/pull/25928\">#25928</a>, since a single-user group would fit easily into this API model.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> FYI</p>",
  "<p>Posted in <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/groups.20redesign\">#api design &gt; groups redesign</a> on the API design decisions needed to formalize this plan.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"2187\">@Greg Price</span> <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> reading this is appreciated in case I missed anything important in my write-up.</p>",
  "<p>I guess I should add that another benefit of this design is that the handful of settings that already support group values don't require a bunch of new migration work, like the array-of-group-IDs approach would have.</p>",
  "<p>Cool, generally LGTM.</p>\n<p>In <a href=\"https://github.com/zulip/zulip/pull/29557\">#29557</a> I added a link at \"For atomic update correctness\" to <a href=\"#narrow/stream/378-api-design/topic/set.20a.20group.20setting.20to.20multiple.20groups/near/1738924\">this previous message</a> where I described why that aspect is important.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/29554\">#29554</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserGroup</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># \u2026</span>\n    <span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Realm</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NamedUserGroup</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Django automatically creates usergroup_ptr = models.OneToOneField(UserGroup, \u2026)</span>\n    <span class=\"n\">realm_for_sharding</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Realm</span><span class=\"p\">,</span> <span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s2\">\"realm\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># \u2026</span>\n</code></pre></div>\n<p>that <code>NamedUserGroup.realm_for_sharding</code> attribute looks redundant to me with <code>UserGroup.realm</code>. But I may be missing something.</p>",
  "<p>It does seem redundant but I think it is required. The way this ends up in SQL is <code>UserGroup</code> is a table and <code>NamedUserGroup</code> is a separate table that references it, though Django does a great job of hiding that complexity via creating a single model object unioning the attributes of both tables, which will contain a <code>realm</code> field.</p>\n<p>But the <code>NamedUserGroup</code> table has a unique index on the pair <code>(realm, name)</code>, and that index can be most cleanly defined nicely if it has a local <code>realm</code> column in the table itself. We'd also use that column for sharding the database by realm long term.</p>",
  "<p>Hmm I see, yeah.</p>",
  "<p>The <code>realm_for_sharding</code> name can be anything other than <code>realm</code>; <code>realm</code> itself would throw an exception, though maybe there's some way to declare it as taking precedence over the inherited field... it's an immutable field and will always equal the value on the other table, so it doesn't really matter which one we're using.</p>",
  "<p><a href=\"https://docs.djangoproject.com/en/5.0/topics/db/models/#field-name-hiding-is-not-permitted\">https://docs.djangoproject.com/en/5.0/topics/db/models/#field-name-hiding-is-not-permitted</a> suggests there is no way to avoid using a different Python name here. Seems OK to just do that.</p>",
  "<p>The <code>realm_for_sharding</code> name wouldn't appear in the API or database, so it should be easy to change.</p>",
  "<p>I've reproduced the <code>export/import</code> operation with <code>300</code> Messages (with attachments) and <code>694</code> attachments (No.messages should have been &gt; No.attachments though)</p>\n<p>With current approach the function makes <code>20,8200</code> iterations and has an execution time of  <code>0.084</code> seconds.</p>\n<p>After my changes it\u2019s reduced to <code>693</code> iterations and execution time of  <code>0.003 </code> seconds.</p>",
  "<p>Here <a href=\"https://github.com/zulip/zulip/pull/29561\">PR</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Performance.20of.20rewriting.20attachment.20URLs/near/1768313\">said</a>:</p>\n<blockquote>\n<p>a preparatory commit that does effective test setup for the problem</p>\n</blockquote>\n<p>Yes i should do this as well, i just decided to test my changes by doing an actual <code>export/import</code> !</p>",
  "<p>I have started working on this. I have got an idea about how to proceed with this and will ask any questions when needed.</p>",
  "<p>Yay! Sorry this took so long to get figured out, but I do like where we've ended up for how it will work, and this is one of those things where it can be a huge amount of effort to rework the system 2 years from now if we make the wrong choices.</p>",
  "<p>I recently implemented FlexSearch for eleventy driven (static site generator) website <a href=\"https://antithesis.com/\">https://antithesis.com/</a><br>\nPreviously I made it with Orama search, but FlexSearch gives smaller index size.<br>\nDepending on how do you want the search to work (I wanted fuzzy search and also substring in the middle to match)<br>\nIntegration of that isn't straightforward and a lot needs to be done and integrated</p>",
  "<p>A possible better alternative for statically generated website could be <a href=\"https://pagefind.app/\">https://pagefind.app/</a>, which is prefix based search</p>",
  "<p>I didn't like the quality, but it is somewhat straightforward integration, while for flex search we would need to parse dom tree and build an index manually</p>",
  "<p><span class=\"user-mention\" data-user-id=\"21836\">@Lauryn Menard</span> <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> <span class=\"user-mention\" data-user-id=\"19257\">@Alya Abbott</span></p>",
  "<p>then loading an index and writing the whole UX for search box isn't strighforward <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> then navigating to search results and highlight the match is also a task</p>\n<p>Sphinx search does a lot of things in a good way out of the box</p>",
  "<p>But at my company we are moving away from it</p>",
  "<p>Documentation generation, and menial tasks like integrating search with documentation, isn\u2019t our core product. We aren\u2019t going to develop a better experience ourselves, and crucially, <em>maintain</em> a better experience ourselves, than we\u2019d get by delegating this all to a solution that is someone\u2019s core product. We should use Sphinx, or something like it (<a href=\"https://starlight.astro.build/\">Starlight</a> from Astro might be good, I haven\u2019t tried it).</p>",
  "<p>wow I didn't know about starlight, is it static or they use server for some things like search?</p>",
  "<p>haha.... starlight uses <a href=\"https://pagefind.app/\">https://pagefind.app/</a></p>",
  "<p>yeah... I don't like search experience there at all, but I agree that in general it isn't the most critical area, and pagefind search does work in the majority of cases</p>",
  "<p>Right, it\u2019s static. Without opining on that assessment (having not tried it), if that is true, it sounds fine to me.</p>",
  "<p>Pagefind is optimized for low bandwidth usage, which seems like the right tradeoff and is in line with Starlight\u2019s <a href=\"https://starlight.astro.build/environmental-impact/\">priorities</a>.</p>",
  "<p>Sphinx is fine but I don't like the tooling; it comes with painful build times for our ReadTheDocs, and while /help/ is half the size, I think I'd rather try something modern and more likely to be built for speed.</p>",
  "<p>The fact that our /help/ updates with just a page reload and not a lot of delay is pretty important to the experience of folks like <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span> who spend a lot of time editing it.</p>",
  "<p>We\u2019ve talked about that speed argument: <a href=\"#narrow/stream/3-backend/topic/sphinx-autobuild/near/1276317\">https://chat.zulip.org/#narrow/stream/3-backend/topic/sphinx-autobuild/near/1276317</a>. <code>sphinx-autobuild</code> updates in seconds <em>without</em> a manual page reload, and I\u2019m sure Starlight does too, since that\u2019s table stakes for tooling from this decade.</p>",
  "<p>So we have two 0501 migrations in <code>main</code>; <code>0501_delete_dangling_usermessages.py</code> and <code>0501_mark_introduce_zulip_view_modals_as_read.py</code>.  They merge in <code>0502</code>:<br>\n<a href=\"/user_uploads/2/ef/usfyk3XjGZoKyUQ0gAbwGBi9/Screenshot-2024-04-03-at-12.06.11AM.png\">Screenshot-2024-04-03-at-12.06.11AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/ef/usfyk3XjGZoKyUQ0gAbwGBi9/Screenshot-2024-04-03-at-12.06.11AM.png\" title=\"Screenshot-2024-04-03-at-12.06.11AM.png\"><img src=\"/user_uploads/2/ef/usfyk3XjGZoKyUQ0gAbwGBi9/Screenshot-2024-04-03-at-12.06.11AM.png\"></a></div><p>The former exists in <code>8.x</code> as well as <code>main</code> -- but with a different history:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git show upstream/8.x:zerver/migrations/0501_delete_dangling_usermessages.py | rg -A1 dependencies\n    dependencies = [\n        (&quot;zerver&quot;, &quot;0496_alter_scheduledmessage_read_by_sender&quot;),\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ git show HEAD:zerver/migrations/0501_delete_dangling_usermessages.py | rg -A1 dependencies\n    dependencies = [\n        (&quot;zerver&quot;, &quot;0500_realm_zulip_update_announcements_stream&quot;),\n</code></pre></div>\n<p>This breaks upgrades from <code>8.3</code> to <code>main</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code># ~zulip/deployments/current/scripts/upgrade-zulip-from-git main\n2024-04-03 04:19:08,909 upgrade-zulip-from-git: Making local repository cache\n2024-04-03 04:19:55,755 upgrade-zulip-stage-2: Caching Zulip Git version...\n2024-04-03 04:19:56,079 upgrade-zulip-stage-2: Upgrading from 8.3 to 9.0-dev-1626-gc083d7c126, in /home/zulip/deployments/2024-04-03-04-19-08\n[...]\n2024-04-03 04:28:19,233 upgrade-zulip-stage-2: Stopping Zulip...\n\nZulip stopped successfully!\n2024-04-03 04:28:19,881 upgrade-zulip-stage-2: Applying database migrations...\nTraceback (most recent call last):\n  File &quot;/home/zulip/deployments/2024-04-03-04-19-08/./manage.py&quot;, line 151, in &lt;module&gt;\n    execute_from_command_line(sys.argv)\n  File &quot;/home/zulip/deployments/2024-04-03-04-19-08/./manage.py&quot;, line 116, in execute_from_command_line\n    utility.execute()\n  File &quot;/srv/zulip-venv-cache/493beae535fdb71678df3a1f8b1de7ac883d2113/zulip-py3-venv/lib/python3.10/site-packages/django/core/management/__init__.py&quot;, line 436, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File &quot;/srv/zulip-venv-cache/493beae535fdb71678df3a1f8b1de7ac883d2113/zulip-py3-venv/lib/python3.10/site-packages/django/core/management/base.py&quot;, line 412, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File &quot;/srv/zulip-venv-cache/493beae535fdb71678df3a1f8b1de7ac883d2113/zulip-py3-venv/lib/python3.10/site-packages/django/core/management/base.py&quot;, line 458, in execute\n    output = self.handle(*args, **options)\n  File &quot;/srv/zulip-venv-cache/493beae535fdb71678df3a1f8b1de7ac883d2113/zulip-py3-venv/lib/python3.10/site-packages/django/core/management/base.py&quot;, line 106, in wrapper\n    res = handle_func(*args, **kwargs)\n  File &quot;/srv/zulip-venv-cache/493beae535fdb71678df3a1f8b1de7ac883d2113/zulip-py3-venv/lib/python3.10/site-packages/django/core/management/commands/migrate.py&quot;, line 120, in handle\n    executor.loader.check_consistent_history(connection)\n  File &quot;/srv/zulip-venv-cache/493beae535fdb71678df3a1f8b1de7ac883d2113/zulip-py3-venv/lib/python3.10/site-packages/django/db/migrations/loader.py&quot;, line 327, in check_consistent_history\n    raise InconsistentMigrationHistory(\ndjango.db.migrations.exceptions.InconsistentMigrationHistory: Migration zerver.0501_delete_dangling_usermessages is applied before its dependency zerver.0500_realm_zulip_update_announcements_stream on database &#39;default&#39;.\nTraceback (most recent call last):\n  File &quot;/home/zulip/deployments/2024-04-03-04-19-08/scripts/lib/upgrade-zulip-stage-2&quot;, line 492, in &lt;module&gt;\n    subprocess.check_call(\n  File &quot;/usr/lib/python3.10/subprocess.py&quot;, line 369, in check_call\n    raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command &#39;[&#39;./manage.py&#39;, &#39;migrate&#39;, &#39;--noinput&#39;, &#39;--skip-checks&#39;]&#39; returned non-zero exit status 1.\n</code></pre></div>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/29587\">#29587</a> to address this.  Because of this bug, users are unable to upgrade to <code>zulip-cloud-current</code>, and thus import into Zulip Cloud.</p>",
  "<p>But more problematically, this should have ideally been caught in CI somehow.</p>",
  "<p>Well we only have an 8.0 upgrade test, not an 8.3 upgrade test.</p>",
  "<p>The complication with doing this in CI is that it's a function of both ends of a moving target -- both the <code>8.x</code> branch and the <code>main</code> branch.  No one commit is at fault for the broken state -- both <a href=\"https://github.com/zulip/zulip/commit/3db1733310ddd944c2e690ba673232345c928eec\">3db1733310ddd944c2e690ba673232345c928eec</a> and <a href=\"https://github.com/zulip/zulip/commit/cf8b9adad48dced388ad0cff9d5ab6ea5c326302\">cf8b9adad48dced388ad0cff9d5ab6ea5c326302</a> are.</p>",
  "<p>There's the further badness that security branches don't run CI, but that's mostly a separate issue.</p>",
  "<p>I thought we did discuss specifically that we needed to do the detail that you fixed in <a href=\"https://github.com/zulip/zulip/pull/29587\">#29587</a> during the security conversation; I guess that got lost in review.</p>",
  "<p>But yeah, it's not clear how to avoid this without adding more CI jobs and the costs that come with that.</p>",
  "<p>That's not the right PR link?</p>",
  "<p>Oh, parse failure.  Understood now.</p>",
  "<p>Yeah, edited to clarify for future readers, was kinda badly written.</p>",
  "<p>Right, my comment was meant to argue that Starlight is more likely to have subsecond update, which is considerably nicer than \"a few seconds\" update.</p>",
  "<p>OK it's good you've tested your algorithm, now I think you need to do some serious work on cleaning up that PR to be readable like the rest of the codebase before anyone can review it.</p>",
  "<p>current PR is not readable?</p>",
  "<p>i think i put good comments explaining what/why</p>",
  "<p>Your second commit fixes a typo in your first.  Please give <a href=\"https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html\">https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html</a> a read.</p>",
  "<p>ok, i will squash them into one commit then</p>",
  "<p>(deleted)</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/29608\">#29608</a> for <code>--skip-checks</code></p>",
  "<p>Yay! Should we also do the local imports approach for upload imports?</p>",
  "<p>Yeah.  Doesn't help our production use case, but should help smaller deploys.</p>",
  "<p>I've cleaned the PR,  it now has <strong>one commit</strong>.</p>\n<p>Regarding your review, my intention was not back-compatibility (although my comment might have indicated that, so i removed it).</p>\n<p>Basically i map each message to its attachments only if we are doing the typical export/import of a realm, else we use the brute force, why ? </p>\n<ol>\n<li>Because I assumed they are not as frequent as the typical one, wrong assumption ?</li>\n<li>In those imports ( which use  <a href=\"https://github.com/zulip/zulip/blob/main/zerver/data_import/import_util.py#L492\">build_message</a>) i think it's a little bit tricky to map each message to its attachments, and would require many changes.</li>\n</ol>",
  "<p>Had a few questions around availability of scalability of Zulip service. From the docs and code, I could understand that we can shard the tornado server per realm or at a user level as well. </p>\n<ol>\n<li>Is it possible to have multiple tornado servers for a single realm/user combination to ensure higher availability for a single realm/user? </li>\n<li>And also, is it possible to run multiple replicas of Django server and other components for a single realm to achieve higher availability? (Basically, is Django server stateless and requests can be served from any of the available instances?)</li>\n</ol>",
  "<p>Tornado servers maintain state in-memory, so a user can only be served by a single Tornado process.  Multiple Tornado servers are for scaling, not for HA.</p>\n<p>The Django service itself is stateless, but it relies on shared state via PostgreSQL, RabbitMQ, Memcached, and Redis.  So in practice having multiple nginx + uwsgi (Django) servers actually likely <em>decreases</em> availability if you still have single PostgreSQL, RabbitMQ, Memcached and Redis servers on another host(s)</p>",
  "<p>I am facing one problem. Django does not allow using <code>bulk_create</code> for the child model when using multitable inheritance.</p>\n<p>We currently use <code>bulk_create</code> while creating system groups during realm creation and we would also bulk create the objects during import and in the migration to copy the data from existing <code>UserGroup</code> objects.</p>",
  "<p>Well that\u2019s cowardly of it. Some context is given in the comments of <a href=\"https://github.com/django/django/commit/04240b23658f8935bbfebacccc23b5e47a1d6c22\">this commit</a>.</p>",
  "<p>It should be possible to do this in raw PostgreSQL using <code>INSERT\u2026RETURNING</code>. Or we can switch from multi-table inheritance to a manually maintained <code>OneToOneField</code>.</p>",
  "<p>This is not a serious suggestion, but <em>clearly</em> we should just use <a href=\"https://www.postgresql.org/docs/current/tutorial-inheritance.html\">PostgreSQL's table-level inheritance</a></p>",
  "<p>Regarding <a href=\"https://github.com/zulip/zulip/pull/29521\">#29521</a> <br>\nDid some testing to identify a reasonable breakpoint.</p>\n<p>500 messages:<br>\nUsing Narrow: 120 ms<br>\nUsing ids: 100ms</p>\n<p>200 messages:<br>\nUsing Narrow: 100 ms<br>\nUsing ids: 85ms</p>\n<p>50 messages:<br>\nUsing Narrow: 90 ms<br>\nUsing ids: 75 ms</p>\n<p>20 messages:<br>\nUsing Narrow: 70ms<br>\nUsing ids: 56 ms</p>\n<p>Using <code>do_mark_unread_by_narrow</code> consistently takes approx 100-120ms, whereas <code>do_mark_unread_by_ids</code> performs similarly for more than 200 messages. For less than 200 messages it performs slightly better (20-30 ms improvement). <br>\nSeems like 200 messages would be a correct estimate for a breakpoint.</p>",
  "<p>I've already read the commit discipline, but still wanted to share my thought, i will put the creation of the custom models  and the code migrations in a single commit, since all these changes are dependent on each other.</p>",
  "<p>Ok good news is that i've migrated almost all code to use the new custom <code>RealmSession</code> and <code>SessionStore</code>.</p>\n<p>The  the server and the web seem to work properly, i'm able to create new user, login and logout. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>In django shell i can see  new objects of <code>RealmSession</code> (wiht <code>realm_id</code> and <code>user_id</code>) get created and deleted correctly and  Django default <code>Session</code> is empty as it should be.</p>\n<p><code>delete_user_sessions</code> is working correctly as well.</p>",
  "<p>Now many <strong>Tests fail</strong> (as expected) as we are using the non-cached default SessionStore <strong>during Testing</strong> (defined in  <a href=\"https://github.com/zulip/zulip/blob/f4d109c289f614273b43b411cbd8d1fad128842e/zproject/test_extra_settings.py#L102\">test_extra_settings.py</a>) which uses the non-indexed default <code>Session</code> model, we do that to  make query counts consistent.</p>\n<p>Now how do you want this to be handled ?</p>",
  "<p>One approach is to still use that new custom <code>SessionStore</code> but disable its Cache during the tests.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/set.20a.20group.20setting.20to.20multiple.20groups/near/1775965\">said</a>:</p>\n<blockquote>\n<p>It should be possible to do this in raw PostgreSQL using <code>INSERT\u2026RETURNING</code>. Or we can switch from multi-table inheritance to a manually maintained <code>OneToOneField</code>.</p>\n</blockquote>\n<p>I am not really sure what we should prefer here out of these two.</p>\n<p>If we do switch from multi-table inheritance to manually maintained <code>OneToOneField</code>, we would not be able to access <code>named_user_group.direct_members.all()</code> (and similarly <code>direct_subgroups</code>) and we would instead need to do <code>named_user_group.user_group.direct_members.all()</code> where <code>user_group</code> is the <code>OneToOneField</code>.</p>",
  "<p>Greetings, everyone<br>\nI have submitted <a href=\"https://github.com/zulip/zulip/pull/29617\">PR</a> for <a href=\"https://github.com/zulip/zulip/issues/19529\">Issue#19520</a>. I will describe the issue and my implementation to get your feedback.<br>\nTim's comments on adding CUSTOM_EMAIL_SENT to prevent duplicate emails are summarized below.</p>\n<ul>\n<li>Create a <code>RealmAuditLog</code> entry when custom emails are sent to a given user; we can number it as <code>CUSTOM_EMAIL_SENT = 800</code> in <code>AbtractRealmAuditLog.</code>  With the full ID (email template's hash code) for the custom email included in the <code>extra_data</code> key. </li>\n<li>We can have the <code>send_custom_email</code> function exclude users with a RealmAuditLog entry for the current email's ID. We will want to do this exclusion carefully to ensure that logic like the <code>--marketing</code> option, which is designed to only email an address once even if they have multiple accounts for their email address, will avoid sending the email if any UserProfile with that <code>delivery_email</code> has such a RealmAuditLog entry.</li>\n</ul>\n<p>The current implementation of the send_custom_email function (distinct_email = True) in the pseudo-code below:<br>\nsend_custom_email(List&lt;UserProfile&gt; users, String email_template):</p>\n<ol>\n<li>if there are any users with duplicate email addresses, remove them. So the users are changed to users_distinct_emails</li>\n<li>send email(email_template) to users_distinct_emails.</li>\n</ol>\n<p>My PR changed send_custom_email's logic in the pseudo-code:</p>\n<p>(notice: we have a unique constraint on UserProfile(realm, delivery_email).</p>\n<ol>\n<li>if there are any users with duplicate email addresses, remove them. So the users are changed to users_distinct_emails</li>\n<li>keep a map of {user : [user with the same email]}</li>\n<li>for user in users_distinct_emails:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">find</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">past</span> <span class=\"n\">week</span><span class=\"s1\">'s RealmAuditLog by (user realm_id, user id, and email_template'</span><span class=\"n\">s</span> <span class=\"nb\">hash</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">no</span> <span class=\"n\">CUSTOM_SENT_EVENT</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n               <span class=\"n\">send</span> <span class=\"n\">an</span> <span class=\"n\">email</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">user</span>\n               <span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"n\">CUSTOM_SENT_EVENT</span> <span class=\"k\">for</span> <span class=\"n\">ALL</span> <span class=\"n\">users</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">user</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">email</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>With the change, as shown in the unit tests, the behavior is now described below.</p>\n<ul>\n<li>\n<p>If Aaron and Hamlet are called in send_custom_email, the server crashes after sending Aaron an email. Later, an email will be sent to Hamlet only when the API is called again with the same arguments. </p>\n</li>\n<li>\n<p>if hamlet_mit(mit realm), hamelet(example realm) , both with same email <a href=\"mailto:hamlet@zulip.com\">hamlet@zulip.com</a>, are called in send_custom_email, only one email is sent to <a href=\"mailto:hamlet@zulip.com\">hamlet@zulip.com</a>.</p>\n</li>\n<li>\n<p>if later, aaron(mit realm, <a href=\"mailto:aaron@zulip.com\">aaron@zulip.com</a>) and hamlet are called in send_custom_email again, only one email is sent to <a href=\"mailto:aaron@zulip.com\">aaron@zulip.com</a>.</p>\n</li>\n</ul>\n<p>Do you think the logic is correct to avoid resending the same email to the same address? I'm trying to do an end-to-end test by manually simulating a server failure. I am looking at the document and code to determine the test case. Please let me know what you think. <br>\nThanks!</p>",
  "<p>Got it. Thank you for response, Alex. Wondering if anyone in the community has tried to scale out Django servers with a sharded tornado server, that can help us achieve a higher availability.</p>",
  "<p>If we have concerns about query performance because the RealmAuditLog table can accumulate a lot of data, I have an alternate proposal that uses a new table and the changes are more isolated also.</p>\n<p>create CustomEmailLog table with columns (email_address, email_template_digest, sent_time, month_mod_2). The primary key is (email_address, email_template_digest). sent_time is the time the email is sent. It's sufficient for us to keep at most 2-month email sent logs, so month_mod_2 is the month%2 value. We use month_mod_2 as the partition key. Every month, we truncate a partition to maintain the CustomEmalLog table size.  We can maintain query performance while keeping the table size under control</p>\n<p>What do you think of this approach? <br>\nThanks!</p>",
  "<p>Zulip Cloud runs a more complicated sharded deployment.  You're welcome to drop an email to <a href=\"mailto:sales@zulip.com\">sales@zulip.com</a> to set up some time to talk about your HA needs and how they can best be addressed.</p>",
  "<p>I accidentally closed previous PR.</p>\n<p>Here the new <a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a>, more clean and clear ! with all my new changes ! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
  "<p>It's always possible to re-open a PR.  Opening a new one loses valuable context and comments, so it's almost never preferred.</p>",
  "<p>Left some comments on the new PR.</p>",
  "<p>I think needing to do those extra hops is not particularly expensive, but I worry about not being able to get back a unified model object in Python resulting in it being kinda a pain to work with with the manual <code>OneToOneField</code>.</p>",
  "<p>The existing database migrations shouldn't require any updates, since database migrations always work with the legacy models as of the time the migration was written regardless. </p>\n<p>So I guess effectively we'd be writing our own version of a <code>bulk_create_user_groups</code> method in SQL that works well enough to be used in the simplified case of <code>create_system_user_groups_for_realm</code>; if it's just that as the cost, and we can figure out how to write that in a sane way, I think that's probably preferable.</p>",
  "<p>I think a separate table is unnecessary; we don't send a large number of these custom emails (the average user gets &lt;5 a year, and I don't anticipate that changing).</p>",
  "<p>I could imagine that our import/export system might need tweaks to support inherited models, but that\u2019s at least under our control.</p>",
  "<p>Thanks for the review !</p>\n<p>Except for the one mentioned in your comment, i should make the suggested changes by amending the same commit, right?</p>",
  "<p>Yup.</p>",
  "<blockquote>\n<p>It also looks like you'll need to add some tests for complete coverage.</p>\n</blockquote>\n<p>Yes the coverage error points to <code>zerver/models/sessions.py</code> <strong>but what should i test for</strong> ?</p>",
  "<p><a href=\"https://zulip.readthedocs.io/en/latest/testing/philosophy.html\">https://zulip.readthedocs.io/en/latest/testing/philosophy.html</a> may be helpful to start.</p>",
  "<p>But in short, I'd want a series of end-to-end tests that each log in users for a couple accounts, in each case, at least one user inside the target set and at least one user outside, run the delete actions, and then verify they are no longer logged in. And then you should also run <code>test-backend --coverage zerver/tests/test_sessions.py</code> and then see what lives of code in your files don't have test coverage using the HTML report.</p>",
  "<p>Yeah, I think broadly something in the 100-200 range seems justified by that, thanks. (the exact performance will vary with the data, but that gives a good hint for breakpoints).</p>",
  "<p>I think it won't matter much what threshold we use, since most queries in practice are gonna be &lt;10 messages.</p>",
  "<p>I would also like to see tests where you log in from one IP, then make a request from a different IP (grep for <code>REMOTE_ADDR</code> in tests), and verify that the session has updated the IP address in the table.</p>",
  "<p>Looking at the changelog for interesting features, I note the following:</p>\n<ul>\n<li><a href=\"https://docs.djangoproject.com/en/5.0/releases/5.0/#database-computed-default-values\">https://docs.djangoproject.com/en/5.0/releases/5.0/#database-computed-default-values</a> may be useful for some new field additions? Not sure.</li>\n<li><a href=\"https://docs.djangoproject.com/en/5.0/releases/5.0/#more-options-for-declaring-field-choices\">https://docs.djangoproject.com/en/5.0/releases/5.0/#more-options-for-declaring-field-choices</a> might be helpful for making it feel nice to convert some of enumeration values.</li>\n<li><code>QuerySet.bulk_create()</code> and <code>QuerySet.abulk_create()</code> methods now set the primary key on each model instance when the <code>update_conflicts</code> parameter is enabled (if the database supports it).</li>\n<li>The new <code>UniqueConstraint.nulls_distinct</code> attribute allows customizing the treatment of NULL values on PostgreSQL 15+.</li>\n</ul>",
  "<p>Didn't see any obvious major incompatibilities, and it's exciting to see that a bunch of progress on ASGI support; makes clear there's significant active effort on that.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1779316\">said</a>:</p>\n<blockquote>\n<p>I would also like to see tests where you log in from one IP, then make a request from a different IP (grep for <code>REMOTE_ADDR</code> in tests), and verify that the session has updated the IP address in the table.</p>\n</blockquote>\n<p>Ok, but first my code should set that custom <code>ip_address</code> before testing, <strong>Do you have any place in mind (e.g some middleware ) in which you want the session to have the request's <code>ip_address</code> or i should make my investigation ?</strong></p>\n<p>Also i'm curious to know what is the purpose of having sessions with <code>ip_address</code> in the first place ? what are the benefits/use cases ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1779300\">said</a>:</p>\n<blockquote>\n<p>But in short, I'd want a series of end-to-end tests that each log in users for a couple accounts, in each case, at least one user inside the target set and at least one user outside, run the delete actions, and then verify they are no longer logged in. And then you should also run <code>test-backend --coverage zerver/tests/test_sessions.py</code> and then see what lives of code in your files don't have test coverage using the HTML report.</p>\n</blockquote>\n<p>How are these tests different from the ones in <code>zerver/tests/test_sessions.py</code>?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> </p>\n<blockquote>\n<p>Which query, and why?</p>\n</blockquote>\n<ol>\n<li>\n<p><code>HomeTest.test_home</code> and <code>HomeTest.test_num_queries_for_realm_admin</code> had previously a query count of <code>51</code>, now they have <code>52</code> </p>\n</li>\n<li>\n<p><code>LoginTest.test_register</code> had previously a query count of <code>104</code> now it has <code>105</code> </p>\n</li>\n</ol>\n<p>This the new query   : </p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">sql</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_realmsession\"</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\">  </span><span class=\"ss\">\"session_data\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'.eJxVjssOgjAQRf-la0P6kHbGnSZ-B5kp0xQFNQU2Gv9dMCx0e-45yX2phuYpN_MopeladVBGq90vZIpXua3L81HuF4lTtaGxOg_U9cdFPW3SX5lpzEsWwDuXyGsJ-4RkAnNwLK03nhkR0GjQLtauDq1AYhKOAAgG0RLY9U4R6ofvPfv-AC2POWM:1rvRwX:UYG1Mqsczpb3Tasx3rv2JZLC9elQjqyhT27IQE4t9mQ'</span><span class=\"p\">,</span>\n<span class=\"ss\">\"expire_date\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'2024-04-27T01:12:33.216983+00:00'</span><span class=\"p\">::</span><span class=\"n\">timestamptz</span><span class=\"p\">,</span>\n<span class=\"ss\">\"realm_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"ss\">\"user_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"ss\">\"ip_address\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_realmsession\"</span><span class=\"p\">.</span><span class=\"ss\">\"session_key\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'wp0gplatwh2bv9fj60l1tfnwiuskc659'</span>\n</code></pre></div>",
  "<p>So it seems like my migration triggers an extra query ? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> , now i should investigate to see if that extra query is indeed necessary</p>",
  "<p>(deleted)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>  comment about  <code>request.session[\"realm_id\"] = realm.id</code></p>\n<blockquote>\n<p>You should have an argument for why\u00a0<em>this</em>\u00a0change is the right change, not just that it seems to work.</p>\n</blockquote>\n<p><strong>It all depends on when we want the session to have the <code>realm_id</code></strong>, I think currently we should be interested in cases where user is <code>None</code> (e.g Anonymous login), because saving <code>realm_id</code> in the session for NOT <code>None</code> user is already handled in a <code>pre_save()</code> signal</p>",
  "<p>Sof if we want a more generic method we could save the <code>realm_id</code> and also the <code>ip_address</code> in \u00a0the session in <a href=\"https://github.com/zulip/zulip/blob/main/zerver/middleware.py#L565\">HostDomainMiddleware</a>, because it's the 1st middlware to fetch <code>realm</code> OR in a separate but subsequent middleware.</p>",
  "<p>(deleted)</p>",
  "<p>context : <a href=\"https://github.com/zulip/zulip/pull/29668/files/19aa7f49d972be0f4c901341daffef4e8b38e17a#diff-225a03cc89f5381a1460d330fc27d4f43ab84e37468450ac80fc68a43997b869\">session migration in my PR</a></p>\n<p>We want to copy all data from <code>django_session</code> to <code>zerver_realmsession</code> as performantly as possible.</p>\n<p>For testing i've filled <code>50k</code> rows in <code>django_session</code> (which has 3 columns) with dump but  similar to real data. </p>\n<p>query used : </p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">INSERT</span><span class=\"w\"> </span><span class=\"k\">INTO</span><span class=\"w\"> </span><span class=\"n\">zerver_realmsession</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">django_session</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>There is an obvious difference in execution time between with and without indexes :</p>\n<ul>\n<li>With Index (default)        <code>700 : 900 ms</code></li>\n<li>After Dropping indexes  <code>300 : 500 ms</code></li>\n</ul>\n<p><strong>My current doubt is whether that approach of (dropping, filling data then create back the indexes) is possible/reliable especially because this would affect a production db,  for example what about other queries trying to use these indexes in the same time in which those indexes are deleted.</strong> ?</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29742\">#29742</a>.</p>\n<p>The other heavyweight here is sqlalchemy.</p>",
  "<p>Which is pulled in primarily via <code>zerver.lib.narrow</code> and <code>zerver.lib.topic</code> -- the latter of which is imported in many places just for a constant.</p>",
  "<p>I think we can make <code>zerver.lib.topic</code> need to be imported in many fewer places if we rip the bandaid off and change this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    # The message&#39;s topic.\n    #\n    # Early versions of Zulip called this concept a &quot;subject&quot;, as in an email\n    # &quot;subject line&quot;, before changing to &quot;topic&quot; in 2013 (commit dac5a46fa).\n    # UI and user documentation now consistently say &quot;topic&quot;.  New APIs and\n    # new code should generally also say &quot;topic&quot;.\n    #\n    # See also the `topic_name` method on `Message`.\n    subject = models.CharField(max_length=MAX_TOPIC_NAME_LENGTH, db_index=True)\n</code></pre></div>\n<p>We can do this transition without a database migration:</p>\n<div class=\"codehilite\"><pre><span></span><code>topic = models.CharField(max_length=MAX_TOPIC_NAME_LENGTH, db_index=True, db_column=&quot;subject&quot;)\n</code></pre></div>\n<p>But I'm not sure that'd suffice, and likely it's faster to just moves those to <code>zerver.lib.topic_constants</code>...</p>",
  "<p>And that faster tweak would probably still feel like a cleaner interface?</p>",
  "<p>It's mostly not just for <code>TOPIC_NAME</code> -- there's a bunch else:</p>\n<div class=\"codehilite\"><pre><span></span><code>zerver/actions/message_edit.py\n54:from zerver.lib.topic import (\n\nzerver/actions/message_flags.py\n19:from zerver.lib.topic import filter_by_topic_name_via_message\n\nzerver/actions/message_send.py\n81:from zerver.lib.topic import participants_for_topic\n\nzerver/lib/bot_lib.py\n22:from zerver.lib.topic import get_topic_from_message_info\n\nzerver/lib/email_notifications.py\n34:from zerver.lib.topic import get_topic_resolution_and_bare_name\n\nzerver/lib/event_schema.py\n47:from zerver.lib.topic import ORIG_TOPIC, TOPIC_LINKS, TOPIC_NAME\n\nzerver/lib/events.py\n58:from zerver.lib.topic import TOPIC_NAME\n\nzerver/lib/generate_test_data.py\n9:from zerver.lib.topic import RESOLVED_TOPIC_PREFIX\n\nzerver/lib/message.py\n43:from zerver.lib.topic import MESSAGE__TOPIC, TOPIC_NAME, messages_for_topic\n\nzerver/lib/message_cache.py\n16:from zerver.lib.topic import DB_TOPIC_NAME, TOPIC_LINKS, TOPIC_NAME\n\nzerver/lib/narrow.py\n61:from zerver.lib.topic import (\n\nzerver/lib/outgoing_webhook.py\n20:from zerver.lib.topic import get_topic_from_message_info\n\nzerver/lib/test_classes.py\n90:from zerver.lib.topic import RESOLVED_TOPIC_PREFIX, filter_by_topic_name_via_message\n\nzerver/lib/url_encoding.py\n6:from zerver.lib.topic import get_topic_from_message_info\n\nzerver/lib/user_topics.py\n13:from zerver.lib.topic import topic_match_sa\n\nzerver/views/message_fetch.py\n27:from zerver.lib.topic import DB_TOPIC_NAME, MATCH_TOPIC, topic_column_sa\n\nzerver/views/message_flags.py\n22:from zerver.lib.topic import user_message_exists_for_topic\n\nzerver/views/message_send.py\n21:from zerver.lib.topic import REQ_topic\n\nzerver/views/scheduled_messages.py\n18:from zerver.lib.topic import REQ_topic\n\nzerver/views/streams.py\n70:from zerver.lib.topic import (\n</code></pre></div>",
  "<p><code>get_topic_from_message_info</code> wouldn't fit cleanly into a <code>constants</code> package.</p>",
  "<p>I see, so maybe better would be to move the SQLAlchemy stuff to <code>zerver.lib.topic_sqlalchemy</code>.</p>",
  "<p>Or maybe some better name for that?</p>",
  "<p>Yeah, pulling the SA stuff into its own package feels almost cleaner.  Or I think all three of those could fit into <code>zerver.lib.narrow</code> reasonably:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">topic_match_sa</span><span class=\"p\">(</span><span class=\"n\">topic_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ColumnElement</span><span class=\"p\">[</span><span class=\"n\">Boolean</span><span class=\"p\">]:</span>\n    <span class=\"c1\"># _sa is short for SQLAlchemy, which we use mostly for</span>\n    <span class=\"c1\"># queries that search messages</span>\n    <span class=\"n\">topic_cond</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s2\">\"subject\"</span><span class=\"p\">,</span> <span class=\"n\">Text</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">(</span><span class=\"n\">literal</span><span class=\"p\">(</span><span class=\"n\">topic_name</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">topic_cond</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_resolved_topic_condition_sa</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ColumnElement</span><span class=\"p\">[</span><span class=\"n\">Boolean</span><span class=\"p\">]:</span>\n    <span class=\"n\">resolved_topic_cond</span> <span class=\"o\">=</span> <span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s2\">\"subject\"</span><span class=\"p\">,</span> <span class=\"n\">Text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">RESOLVED_TOPIC_PREFIX</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">resolved_topic_cond</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">topic_column_sa</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ColumnElement</span><span class=\"p\">[</span><span class=\"n\">Text</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s2\">\"subject\"</span><span class=\"p\">,</span> <span class=\"n\">Text</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Yeah, that seems like a fine approach.</p>",
  "<p>Generally you just add the new indexes before you delete the old ones, so there's always a working index.</p>",
  "<p>Hm.  I think that leads to a circular import by way of <code>zerver.lib.user_topics</code> \u2194 <code>zerver.lib.narrow</code></p>",
  "<p>So maybe that argues for its own tiny module. No real harm in that approach.</p>",
  "<p>This is a new table you're inserting into, which isn't used before.  We can just make the indexes after copying the data in.</p>",
  "<p>Though since the new table is just the old table plus a couple columns, we could also ... rename the table instead, and then add those columns?</p>",
  "<p>That's going to cause some problems for Zulip Cloud, but it's going to be faster for everyone else, who stop / migrate / start the service.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29745\">#29745</a> seems, uh, useful, given <a href=\"https://github.com/zulip/zulip/pull/29608\">#29608</a></p>",
  "<p>Combined, we go from:</p>\n<div class=\"codehilite\"><pre><span></span><code> ./manage.py runtornado 9800 | ts -s &quot;%.S&quot;\n04.148992 Tornado server (re)started on port 9800\n</code></pre></div>\n<p>...to:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./manage.py runtornado 9800 --skip-checks | ts -s &quot;%.S&quot;\n01.316646 Tornado server (re)started on port 9800\n</code></pre></div>",
  "<p>Sweet, that will be very visibly nice for developers.</p>",
  "<p>(deleted)</p>",
  "<p>(deleted)</p>",
  "<p>Just renaming the table is clever and simple !<br>\nbut since you\u2019re saying that it causes problems i should stick with the previous approach.</p>\n<p>Yea i totally forgot it\u2019s a new table that\u2019s not used before, so no queries need it yet.</p>",
  "<p>As a side node, it's helpful to leave messages, even if you change your mind and decide that they're wrong -- other people may have had your same thought process, so leaving them there may help them come to the same realizations you did.  Please don't delete messages just because.</p>",
  "<p>Ok, sorry, i sent the new one</p>",
  "<p>Good news ! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span><br>\nI thought i should only drop indexes that i'm filling their corresponding fields, but for some reason when i dropped all indexes in the destination table <code>zerver_realmsession</code>, it's even more efficient with an execution time ranged from <code>80 : 200</code> ms !</p>",
  "<p>btw i'm using that approach because according to <a href=\"https://www.postgresql.org/docs/current/populate.html#POPULATE-RM-INDEXES\">this postgress doc</a> : </p>\n<blockquote>\n<p>Creating an index on pre-existing data is quicker than updating it incrementally as each row is loaded</p>\n</blockquote>",
  "<p>We don't even have to drop the indexes, we can simply <strong>omit</strong>  them in the migration file, copy data in next migration then the 3rd migration is for adding the indexes.</p>",
  "<p>ok this is not possible as migration files have to match the models definition.</p>",
  "<p>I guess the other thing we should test is queue worker startup times -- since they don't process any URLs at all, there's probably a lot of code that's unreachable from them.</p>",
  "<p>The startup time is less of an issue for those because they're not dropping requests, but we can give it a quick look.</p>",
  "<p>Update - I have been working on this and would probably open a PR tommorrow or on Thursday.</p>",
  "<p>Yeah, the main benefit would be just making restarts a bit faster, and maybe reduce baseline memory usage for workers too, since importing less stuff potentially translates to less memory consumption.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29754\">#29754</a> is I think the direction to go for those.  Which is a long-needed split anyways.</p>",
  "<p>Looks like you reformatted with Black instead of Ruff?</p>",
  "<p>Mmm, I think I need to update my editor hook</p>",
  "<p>Yeah that's a great change; agree it's been a TODO for quite a while.</p>",
  "<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./manage.py process_queue --skip-checks --queue_name user_activity 2&gt;&amp;1 | ts -s &quot;%.S&quot;\n02.599821 2024-04-16 19:28:46.224 INFO [process_queue] Worker 0 connecting to queue user_activity\n</code></pre></div>\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./manage.py process_queue --skip-checks --queue_name user_activity 2&gt;&amp;1 | ts -s &quot;%.S&quot;\n00.881231 2024-04-16 19:28:37.998 INFO [process_queue] Worker 0 connecting to queue user_activity\n</code></pre></div>\n<p>Obviously, savings will differ by queue, but it should be notable for most workers.</p>",
  "<p>Awesome!</p>",
  "<p>My suggestions are now reflected in my <a href=\"https://github.com/zulip/zulip/pull/29668/files#diff-3c6891cfce88002501eb4ab5e0e7a2d6314e9820e4733af44428df1d06919220\">PR</a></p>\n<p>I've tested that new data migration file localy and it works fine, data is successfully copied over to the destination table.</p>\n<p>But  i still have some doubts about managing the transactions</p>",
  "<p>Updated <a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a>, it reflects the suggested changes from the comments.<br>\nBut still lacks testing, and saving the <code>ip_address</code> in the session</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29721\">#29721</a> is now passing with the current Git versions of Django 5.0.x (with <a href=\"https://docs.djangoproject.com/en/5.0/releases/5.0.5/\">5.0.5 expected May 6</a>, though I made a gentle <a href=\"https://code.djangoproject.com/ticket/35361#comment:12\">suggestion to nudge it forward</a>) and django-stubs 5.0.x (<a href=\"https://github.com/typeddjango/django-stubs/issues/2020\">not in the breath-holding phase</a>, but <a href=\"https://github.com/typeddjango/django-stubs/issues/1493#issuecomment-2053676569\">making good progress</a>). Maybe that\u2019s good enough to consider merging it now? Depends on how soon we want to take advantage of 5.0.x features, I guess.</p>",
  "<p>The first launch of <code>run-dev</code> has become much noisier than it used to be. I haven\u2019t visited the app at all here; these internal <code>/api/v1/remotes/server/analytics</code> requests happen automatically and one of them fails.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp gp-VirtualEnv\">(zulip-py3-venv)</span> <span class=\"gp\">vagrant@dcf0f1ca5e9d:/srv/zulip$ </span>./manage.py<span class=\"w\"> </span>populate_db\n<span class=\"go\">2024-04-18 02:16:06.103 INFO [bmemcached.protocol] Flushing memcached</span>\n<span class=\"go\">2024-04-18 02:16:07.966 INFO [] Clearing memcached cache after migrations</span>\n<span class=\"go\">Successfully populated test database.</span>\n<span class=\"gp gp-VirtualEnv\">(zulip-py3-venv)</span> <span class=\"gp\">vagrant@dcf0f1ca5e9d:/srv/zulip$ </span>tools/run-dev\n\n<span class=\"go\">Starting Zulip on:</span>\n\n<span class=\"go\">    http://localhost:9991/</span>\n\n<span class=\"go\">Internal ports:</span>\n<span class=\"go\">   9991: Development server proxy (connect here)</span>\n<span class=\"go\">   9992: Django</span>\n<span class=\"go\">   9993: Tornado</span>\n<span class=\"go\">   9994: webpack</span>\n\n<span class=\"go\">Tornado server (re)started on port 9993</span>\n<span class=\"go\">2024-04-18 02:16:48,643 INFO: process_fts_updates: Processed 1000 rows catching up</span>\n\n<span class=\"go\">2024-04-18 02:16:51.745 INFO [process_queue] 13 queue worker threads were launched</span>\n<span class=\"go\">2024-04-18 02:16:51.867 INFO [zerver.worker.deferred_work] Updating push bouncer with metadata on behalf of realm 11</span>\n<span class=\"go\">2024-04-18 02:16:51.969 INFO [zr] 127.0.0.1       GET     200  82ms (db: 10ms/8q) (+start: 5ms) /api/v1/remotes/server/analytics/status (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:51.970 INFO [zr] 127.0.0.1       GET     200  79ms (db: 28ms/9q) (+start: 7ms) /api/v1/remotes/server/analytics/status (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.258 INFO [zr] 127.0.0.1       POST    200  89ms (db: 22ms/37q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.266 INFO [zr] 127.0.0.1       POST    400  92ms (db: 79ms/6q) /api/v1/remotes/server/analytics (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.266 INFO [zr] status=400, data=b'{\"result\":\"error\",\"msg\":\"Data is out of order.\",\"code\":\"BAD_REQUEST\"}\\n', uid=zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8</span>\n<span class=\"go\">2024-04-18 02:16:52.267 WARN [django.server] \"POST /api/v1/remotes/server/analytics HTTP/1.1\" 400 70</span>\n<span class=\"go\">2024-04-18 02:16:52.343 INFO [zerver.worker.deferred_work] deferred_work processed push_bouncer_update_for_realm event (476ms)</span>\n<span class=\"go\">2024-04-18 02:16:52.344 INFO [zerver.worker.deferred_work] Updating push bouncer with metadata on behalf of realm 11</span>\n<span class=\"go\">2024-04-18 02:16:52.368 INFO [zr] 127.0.0.1       GET     200  13ms (db: 5ms/5q) /api/v1/remotes/server/analytics/status (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.474 INFO [zr] 127.0.0.1       POST    200  73ms (db: 16ms/30q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.528 INFO [zerver.worker.deferred_work] deferred_work processed push_bouncer_update_for_realm event (184ms)</span>\n<span class=\"go\">2024-04-18 02:16:52.529 INFO [zerver.worker.deferred_work] Updating push bouncer with metadata on behalf of realm 11</span>\n<span class=\"go\">2024-04-18 02:16:52.557 INFO [zr] 127.0.0.1       GET     200  17ms (db: 6ms/5q) /api/v1/remotes/server/analytics/status (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.691 INFO [zr] 127.0.0.1       POST    200  66ms (db: 12ms/30q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.744 INFO [zerver.worker.deferred_work] deferred_work processed push_bouncer_update_for_realm event (214ms)</span>\n<span class=\"go\">2024-04-18 02:16:52.744 INFO [zerver.worker.deferred_work] Updating push bouncer with metadata on behalf of realm 11</span>\n<span class=\"go\">2024-04-18 02:16:52.775 INFO [zr] 127.0.0.1       GET     200  17ms (db: 5ms/5q) /api/v1/remotes/server/analytics/status (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.922 INFO [zr] 127.0.0.1       POST    200  74ms (db: 26ms/30q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:52.977 INFO [zerver.worker.deferred_work] deferred_work processed push_bouncer_update_for_realm event (232ms)</span>\n<span class=\"go\">2024-04-18 02:16:52.978 INFO [zerver.worker.deferred_work] Updating push bouncer with metadata on behalf of realm 11</span>\n<span class=\"go\">2024-04-18 02:16:53.004 INFO [zr] 127.0.0.1       GET     200  16ms (db: 6ms/5q) /api/v1/remotes/server/analytics/status (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:53.151 INFO [zr] 127.0.0.1       POST    200  77ms (db: 23ms/30q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:53.203 INFO [zerver.worker.deferred_work] deferred_work processed push_bouncer_update_for_realm event (225ms)</span>\n<span class=\"go\">2024-04-18 02:16:53.204 INFO [zerver.worker.deferred_work] Updating push bouncer with metadata on behalf of realm 12</span>\n<span class=\"go\">2024-04-18 02:16:53.231 INFO [zr] 127.0.0.1       GET     200  17ms (db: 6ms/5q) /api/v1/remotes/server/analytics/status (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:53.376 INFO [zr] 127.0.0.1       POST    200  77ms (db: 26ms/30q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:420f0488-e6ad-46f6-9b4e-bd327f21abb8 via ZulipServer/9.0-dev+git)</span>\n<span class=\"go\">2024-04-18 02:16:53.438 INFO [zerver.worker.deferred_work] deferred_work processed push_bouncer_update_for_realm event (233ms)</span>\n<span class=\"go\">frontend:</span>\n<span class=\"go\">  frontend (webpack 5.91.0) compiled successfully in 8855 ms</span>\n</code></pre></div>",
  "<p><code>populate_db</code> calls <code>maybe_enqueue_audit_log_upload</code> six times:</p>\n<ul>\n<li>from <code>do_create_realm(string_id=\"zulip\", \u2026)</code></li>\n<li>from <code>do_change_user_role(iago, UserProfile.ROLE_REALM_ADMINISTRATOR, acting_user=None)</code></li>\n<li>from <code>do_change_user_role(desdemona, UserProfile.ROLE_REALM_OWNER, acting_user=None)</code></li>\n<li>from <code>do_change_user_role(shiva, UserProfile.ROLE_MODERATOR, acting_user=None)</code></li>\n<li>from <code>do_change_user_role(polonius, UserProfile.ROLE_GUEST, acting_user=None)</code></li>\n<li>from <code>do_create_realm(string_id=\"analytics\", \u2026)</code></li>\n</ul>\n<p>There\u2019s no deduplication. Also the <code>deferred_work</code> worker races with <code>initialize_push_notifications</code> to start two concurrent uploads, of which the second fails.</p>",
  "<p>Cc <span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> (<a href=\"https://github.com/zulip/zulip/pull/28008\">#28008</a>), <span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> (<a href=\"https://github.com/zulip/zulip/pull/28110\">#28110</a>).</p>",
  "<p>Cool, yeah that's probably fine for our main branch.</p>",
  "<p>I definitely feel <code>run-dev</code> has slowed down and fails randomly on changes somethimes.</p>",
  "<p>I think <code>populate_db</code> itself likely needs a setting to just entirely disable <code>maybe_enqueue_audit_log_upload</code> while it's running. I think we should just disable the bouncer in that tool via local settings overrides, like we do for a few other settings.</p>",
  "<p>I think it's possibly separately worth looking at the performance of that -- I wouldn't a priori have expected it to be 30 database queries to process the post to <code>/api/v1/remotes/server/analytics</code>.</p>",
  "<p>OK, with that change, it now looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ run-dev\n\nStarting Zulip on:\n\n    http://localhost:9991/\n\nInternal ports:\n   9991: Development server proxy (connect here)\n   9992: Django\n   9993: Tornado\n   9994: webpack\n\nUsing custom settings from zproject/custom_dev_settings.py.\nTornado server (re)started on port 9993\n2024-04-18 16:16:50,275 INFO: process_fts_updates: Processed 1000 rows catching up\n\n2024-04-18 16:16:53.309 INFO [process_queue] 13 queue worker threads were launched\n2024-04-18 16:16:53.399 INFO [zr] 127.0.0.1       GET     200  49ms (db: 10ms/8q) /api/v1/remotes/server/analytics/status (zulip-server:ceb977ab-df73-46c1-b0d7-e7ec1f3c2012 via ZulipServer/9.0-dev+git)\n2024-04-18 16:16:53.578 INFO [zr] 127.0.0.1       POST    200  65ms (db: 23ms/37q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:ceb977ab-df73-46c1-b0d7-e7ec1f3c2012 via ZulipServer/9.0-dev+git)\nfrontend:\n  frontend (webpack 5.91.0) compiled successfully in 7016 ms\n</code></pre></div>",
  "<p>I'm not entirely sure where some of those blank lines come from, but maybe we should put <code>http://localhost:9991/</code> on the same line as \"Starting Zulip on\"?</p>",
  "<p>I think this feels somewhat better; the URL stands out since it's in cyan text:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ run-dev\n\nStarting Zulip on http://localhost:9991/\n\nInternal ports:\n   9991: Development server proxy (connect here)\n   9992: Django\n   9993: Tornado\n   9994: webpack\n\nUsing custom settings from zproject/custom_dev_settings.py.\nTornado server (re)started on port 9993\n\n2024-04-18 16:24:46.517 INFO [process_queue] 13 queue worker threads were launched\n2024-04-18 16:24:46.652 INFO [zr] 127.0.0.1       GET     200  37ms (db: 8ms/7q) /api/v1/remotes/server/analytics/status (zulip-server:ceb977ab-df73-46c1-b0d7-e7ec1f3c2012 via ZulipServer/9.0-dev+git)\n2024-04-18 16:24:46.759 INFO [zr] 127.0.0.1       POST    200  48ms (db: 9ms/30q) /api/v1/remotes/server/analytics [can_push=True/2 realms] (zulip-server:ceb977ab-df73-46c1-b0d7-e7ec1f3c2012 via ZulipServer/9.0-dev+git)\nfrontend:\n  frontend (webpack 5.91.0) compiled successfully in 6350 ms\n</code></pre></div>",
  "<p>Ultimately the slowness is completely dominated by <code>webpack</code> taking ~5-7s to run even on a very powerful system. I suspect what's been making that slower is the steady increase in how much of our project is TypeScript.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29780\">https://github.com/zulip/zulip/pull/29780</a></p>",
  "<p>webpack\u2019s slowness shouldn\u2019t be about how much TypeScript we have. It parses our TypeScript with Babel just like our JavaScript, and isn\u2019t trying to type-check it.</p>",
  "<p>Did we get anywhere with trying to swap it out for rspack?</p>",
  "<p>I\u2019ve been trying faster replacements periodically and getting farther each time.</p>",
  "<p>I will not be able to open a PR today, will try to do it tommorrow. Just wanted to discuss the migration strategy once here till then.</p>\n<p>So, what I am doing currently is -</p>\n<ul>\n<li>A commit which adds <code>NamedUserGroup</code> table as follows</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">NamedUserGroup</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Added this field here as mypy does not allow accessing `usergroup_ptr` field if this is not added here manually.</span>\n    <span class=\"n\">usergroup_ptr</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span>\n        <span class=\"n\">auto_created</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n        <span class=\"n\">parent_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">serialize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">to</span><span class=\"o\">=</span><span class=\"n\">UserGroup</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">\"named_user_group\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">named_group_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"n\">MAX_NAME_LENGTH</span><span class=\"p\">,</span> <span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">named_group_description</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s2\">\"description\"</span><span class=\"p\">)</span>\n    <span class=\"n\">named_group_is_system_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s2\">\"is_system_group\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">named_group_can_mention_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">UserGroup</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">RESTRICT</span><span class=\"p\">,</span> <span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s2\">\"can_mention_group_id\"</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">realm_for_sharding</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s2\">\"zerver.Realm\"</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s2\">\"realm\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Cannot add the same field names present in <code>UserGroup</code> and need to add these to save the data for<br>\nexisting groups. Not sure about the names though, we can probably make them better.</p>\n<ul>\n<li>Then some commits to update the code to use <code>NamedUserGroup</code> objects.</li>\n<li>A commit adding migration to copy the data of existing <code>UserGroup</code> objects to <code>NamedUserGroup</code> table.</li>\n<li>Commit to add removing the <code>name</code>, <code>description</code>, etc. columns from <code>UserGroup</code> and renaming <code>named_group_name</code>, <code>named_group_description</code>, etc. in <code>NamedUserGroup</code>.</li>\n</ul>\n<p>There is not much code using the <code>named_group_name</code>, <code>named_group_description</code> fields before the commit to rename them (only a couple of places where groups are created), so not much disadvantage in using them.</p>",
  "<p>Would be good to hear, if we can use a different approach here.</p>",
  "<p>In working on the rendered Markdown refactor in <a href=\"https://github.com/zulip/zulip/pull/29756\">#29756</a>, <a href=\"https://github.com/zulip/zulip/pull/29756#discussion_r1571439356\">I found that</a> quoted messages containing only a single fenced item--a code block, a KaTeX block, or a spoiler--receive additional markup around them: a containing <code>&lt;p&gt;</code>, which the browser appears to error handle with <code>&lt;p&gt;&lt;/p&gt;</code> inside the <code>&lt;blockquote&gt;</code> element. That's lamentable, but a <code>&lt;br&gt;</code> tag also gets inserted, which introduces additional space beneath the quoted fenced item.</p>",
  "<p>Here's the raw HTML response returned by the API for the quote of a standalone code block message:</p>",
  "<div class=\"codehilite\"><pre><span></span><code>&lt;p&gt;&lt;span class=&quot;user-mention silent&quot; data-user-id=&quot;8&quot;&gt;Cordelia, Lear&#39;s daughter&lt;/span&gt; &lt;a href=&quot;#narrow/stream/9-devel/topic/single-line.20messages/near/129&quot;&gt;said&lt;/a&gt;:&lt;/p&gt;\\n&lt;blockquote&gt;\\n&lt;p&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;I am a single-line code block.\\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;\\n&lt;/p&gt;\\n&lt;/blockquote&gt;`\n</code></pre></div>",
  "<p>I can also quote that code block to show the effect I'm trying to describe:</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"26369\">Karl Stolley</span> <a href=\"#narrow/stream/3-backend/topic/extra.20markup.20on.20quoted.20fences/near/1784079\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>&lt;p&gt;&lt;span class=&quot;user-mention silent&quot; data-user-id=&quot;8&quot;&gt;Cordelia, Lear&#39;s daughter&lt;/span&gt; &lt;a href=&quot;#narrow/stream/9-devel/topic/single-line.20messages/near/129&quot;&gt;said&lt;/a&gt;:&lt;/p&gt;\\n&lt;blockquote&gt;\\n&lt;p&gt;&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;I am a single-line code block.\\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;\\n&lt;/p&gt;\\n&lt;/blockquote&gt;`\n</code></pre></div><br>\n</p>\n</blockquote>",
  "<p>You can see the error-corrected markup in the browser inspector like this:</p>\n<p><a href=\"/user_uploads/2/e2/JhTa7xOPbBBArkotRSKGX6J-/Screenshot-2024-04-19-at-10.32.24AM.png\">Screenshot-2024-04-19-at-10.32.24AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/e2/JhTa7xOPbBBArkotRSKGX6J-/Screenshot-2024-04-19-at-10.32.24AM.png\" title=\"Screenshot-2024-04-19-at-10.32.24AM.png\"><img src=\"/user_uploads/2/e2/JhTa7xOPbBBArkotRSKGX6J-/Screenshot-2024-04-19-at-10.32.24AM.png\"></a></div>",
  "<p>I've spent some time looking at <code>fenced_code.py</code>, but I'm still not certain as to where this treatment of (presumably) new lines is introducing the extra markup seen here.</p>",
  "<p>The <code>fenced_code.py</code> nesting algorithm is extremely buggy. In this case, what\u2019s happening is that the inner code block is converted to HTML, that HTML result is replaced with a placeholder <code>\u2402wzxhzdk:0\u2403</code> to be replaced later, and then the outer code block is re-processed as Markdown, at which time <code>\u2402wzxhzdk:0\u2403</code> looks like a sufficiently cromulent paragraph to deserve its own <code>&lt;p&gt;</code> tags.</p>",
  "<p>Wow, that's weird. But I appreciate the explanation. At least the empty paragraphs (or at least how the browser corrects them to that) don't occupy any vertical space, but it's the break tag that actually holds the box open</p>",
  "<p>This <a href=\"https://github.com/Python-Markdown/markdown/issues/53\">related upstream issue</a> has been open for eleven years.</p>",
  "<p>Python-Markdown is not a good library.</p>",
  "<p>That's disappointing. But I guess at least this isn't something we're introducing ourselves</p>",
  "<p>It\u2019s still our fault that we\u2019re initiating that re-processing; the whole <code>process_contents=True</code> thing is our invention.</p>",
  "<p>Ultimately I don't think there's something worth doing here beyond replacing the library; there's lots of messy but not important quirks like this that come with the Python-Markdown architecture that are not worth solving individually.</p>",
  "<p>Yeah that approach sounds correct to me; using <code>db_column</code> in that initial state so that we don't have to rename the columns on <code>NamedUserGroup</code> is definitely the right approach.</p>",
  "<p>Ultimately even if we fix new markup generated by the current processor, our CSS still needs to handle the old messages, at least until we can work out a migration to process all previous messages.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"30142\">@Bedo Khaled</span> I think you should proceed with writing a good test suite; generally that'll help you find a lot of problems that would otherwise be found by reviewers.</p>",
  "<p>Sure. Fortunately there's nothing amiss with the CSS here...it's that <code>&lt;br&gt;</code> tag goofing things up. Once that's gone, margin-collapsing, etc. will take over and things will display correctly (as when quoting a Markdown-only message that itself has been quoted)</p>",
  "<p>We can potentially try to get rid of those in <code>rendered_markdown.ts</code> while we're editing the HTML for spoilers anyway, if it feels worth it to you.</p>",
  "<p>That could be worth a fixup at some point, so I've made a note of it, but since it doesn't really impact the information-density project (it just looks weird when it happens), it's probably not worth the effort for now.</p>",
  "<p>Ok</p>",
  "<p>Thanks <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>  for your review !</p>\n<p>I've updated my <a href=\"https://github.com/zulip/zulip/pull/29561\">PR</a> according to the suggestions.<br>\nIt's now more simpler, i had to change only <code>import_realm.py</code></p>",
  "<p>I really hate it when i miss out simpler approaches <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> !</p>",
  "<p>Hi there, I made this PR a while ago and was wondering if you think it would be a worthwhile change: <a href=\"https://github.com/zulip/docker-zulip/pull/440\">https://github.com/zulip/docker-zulip/pull/440</a></p>\n<p>Any comments or feedback is appreciated, thanks!</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/29817\">#29817</a>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1779316\">said</a>:</p>\n<blockquote>\n<p>I would also like to see tests where you log in from one IP, then make a request from a different IP (grep for <code>REMOTE_ADDR</code> in tests), and verify that the session has updated the IP address in the table.</p>\n</blockquote>\n<p>Ok, i decided to write that test before actually implementing the functionality it's testing, here : </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">def</span> <span class=\"nf\">test_session_ip_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">user_profile</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">example_user</span><span class=\"p\">(</span><span class=\"s2\">\"hamlet\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">login_user</span><span class=\"p\">(</span><span class=\"n\">user_profile</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIn</span><span class=\"p\">(</span><span class=\"s2\">\"_auth_user_id\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">RealmSession</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">())</span>\n        <span class=\"c1\"># check if session has saved the IP address</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">RealmSession</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ip_address</span><span class=\"p\">,</span> <span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># make a request with different IP</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_get</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">REMOTE_ADDR</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.2\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># check if session has updated the IP address in the table</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">RealmSession</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user_profile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ip_address</span><span class=\"p\">,</span> <span class=\"s2\">\"127.0.0.2\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>in <a href=\"https://github.com/zulip/zulip/blob/main/zerver/tests/test_sessions.py\">test_sessions.py</a> Why do we use <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/test_classes.py#L768\">login_user</a> ? instead of the actual function that is being used <a href=\"https://github.com/zulip/zulip/blob/main/zerver/decorator.py#L463\"><code>do_login()</code></a> ?</p>\n<p>Also setting <code>self.client.session[\"ip_address\"] = \"127.0.0.1\"</code> whether in the test case or in <code>login_user</code> doesn't get reflected in the <code>session_data</code> passed to <code>create_model_instance</code>, what am i missing</p>",
  "<p>What really bothers me is that i've already successfully set those custom fields in the session data in a middleware and it works fine <strong>but they can not be set in tests</strong> !</p>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"91\" href=\"/#narrow/stream/91-code-review/topic/docker-zulip.3A.20add.20option.20to.20disable.20outgoing.20proxy\">#code review &gt; docker-zulip: add option to disable outgoing proxy</a> by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>.</p>",
  "<p>Moving this here for better visibilty.</p>",
  "<p>thanks :)</p>",
  "<p>I'm not sure what the trade-offs are around this; we'd need to be careful in the documentation to detail how it's a security risk to disable it. It might be simpler to have a setting that lets you declare a set of host/ports to exclude from the proxy?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"30142\">@Bedo Khaled</span> are you saving the session object? I can imagine a world where the session middleware is auto-saving changes in some way that differs between test and not.</p>",
  "<p>This looks great! Going to need to think a bit about how to do the migrations in high availability, and I think the some of the complicated <code>import_realm</code> code is unnecessary, but I don't have other concerns.</p>",
  "<p>so you're saying you'd rather see a string value where, if present, it configures the smokescreen allowed ACL list to those entries, and if absent, it gives the current default behaviour?</p>",
  "<p>makes sense to me</p>",
  "<p>that will make it harder for people to use it wrong</p>",
  "<p>This seems like <a href=\"https://github.com/zulip/zulip/pull/20490\">#20490</a> is the right direction, and to make that exposed in Docker</p>",
  "<p>makes sense</p>",
  "<p>so youre saying if i were to just edit the smokescreen.conf in the docker-zulip <a href=\"http://entrypoint.sh\">entrypoint.sh</a>, that's not the ideal solution in your mind and the ideal solution would involve making this configurable right in the zulip repository?</p>",
  "<p>Yeah.</p>",
  "<p>Yeah that's what I'm thinking as well.</p>",
  "<blockquote>\n<p>I think it won't matter much what threshold we use, since most queries in practice are gonna be &lt;10 messages.</p>\n</blockquote>\n<p>Yeah, in that case it'll be a significant improvement to use ids. I have set the break point, please review <a href=\"https://github.com/zulip/zulip/pull/29521\">#29521</a>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1786286\">said</a>:</p>\n<blockquote>\n<p>are you saving the session object</p>\n</blockquote>\n<p><code>RealmSession</code> object is auto-saved whether in tests or not,  the problem is with session data that gets passed to <code>create_model_instance()</code>, setting this data in the middleware using <code>request.session[key]=value</code> is not reflected in tests,   but <code>create_model_instance()</code> gets called in all cases, and also setting <code>self.client.session[key]= value</code> directly in the test case itself is not working in all test  cases, the session is not updated with that key value pair</p>",
  "<p>So</p>",
  "<p>That's why i'm asking why do we even use that function, that's not used in the real case</p>",
  "<p>Again my argument for choosing <code>HostDomainMiddleware</code> is it's the first middleware where we have fetched the <code>realm_id</code>, I chose a middleware to be generic, it works for logins and anonymous logins (which is called spectator right ?) and also works for already logged-in users</p>",
  "<p>ok after debugging, in tests :   <code>HostDomainMiddleware</code> is  not even called for<code>self.login_user()</code> but is called for other request (e.g. <code>self.client(\"/\") </code>)</p>",
  "<p>Since we would allow only <code>NamedUserGroup</code> to be set as subgroups, I updated the <code>get_recursive_subgroups</code> function as below. Just posting it here for visibility</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">get_recursive_subgroups</span><span class=\"p\">(</span><span class=\"n\">user_group</span><span class=\"p\">:</span> <span class=\"n\">UserGroup</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">QuerySet</span><span class=\"p\">[</span><span class=\"n\">UserGroup</span><span class=\"p\">]:</span>\n    <span class=\"n\">cte</span> <span class=\"o\">=</span> <span class=\"n\">With</span><span class=\"o\">.</span><span class=\"n\">recursive</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">cte</span><span class=\"p\">:</span> <span class=\"n\">UserGroup</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">user_group</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">))</span>\n        <span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span>\n            <span class=\"n\">cte</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">NamedUserGroup</span><span class=\"p\">,</span> <span class=\"n\">direct_supergroups</span><span class=\"o\">=</span><span class=\"n\">cte</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"o\">.</span><span class=\"n\">group_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cte</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">UserGroup</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">cte</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"o\">.</span><span class=\"n\">group_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_cte</span><span class=\"p\">(</span><span class=\"n\">cte</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>The SQL that it generates is -</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">WITH</span><span class=\"w\"> </span><span class=\"k\">RECURSIVE</span><span class=\"w\"> </span><span class=\"ss\">\"cte\"</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usergroup\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"ss\">\"group_id\"</span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usergroup\"</span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usergroup\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">14</span>\n\n<span class=\"w\">    </span><span class=\"k\">UNION</span>\n\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_namedusergroup\"</span><span class=\"p\">.</span><span class=\"ss\">\"usergroup_ptr_id\"</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"ss\">\"group_id\"</span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_namedusergroup\"</span>\n<span class=\"w\">    </span><span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_groupgroupmembership\"</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_namedusergroup\"</span><span class=\"p\">.</span><span class=\"ss\">\"usergroup_ptr_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_groupgroupmembership\"</span><span class=\"p\">.</span><span class=\"ss\">\"subgroup_id\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"ss\">\"cte\"</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_groupgroupmembership\"</span><span class=\"p\">.</span><span class=\"ss\">\"supergroup_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"cte\"</span><span class=\"p\">.</span><span class=\"ss\">\"group_id\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usergroup\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usergroup\"</span><span class=\"p\">.</span><span class=\"ss\">\"realm_id\"</span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usergroup\"</span>\n<span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"ss\">\"cte\"</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usergroup\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"cte\"</span><span class=\"p\">.</span><span class=\"ss\">\"group_id\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Ahh, because that's an internal to the test suite \"make me a cookie\" function, not actually going through the login flow -- makes sense though could be a bit surprising or suggest that you're hooking in the wrong place.</p>",
  "<p>I was setting the cookie in the tests only as a hacky workaround, but i think this is  <strong>wrong</strong> and not representative of the the functionality i wrote.<br>\n<strong>We are using middleware to set  those custom variables,  So what tests should verify is that those variables are getting saved correctly because of the middleware, so middleware should be in the flow of the login in tests, do you get my point ?</strong></p>",
  "<p>With that said, i will simply call <code>self.client_get(\"/\")</code> after <code>self.login_user()</code>, to make the request passes through the middleware</p>",
  "<p>And it worked <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>Ubuntu 24.04 was released today. We expect Zulip <code>main</code> to fully support it, but 8.x is missing the Django patch for the <code>SafeMIMEText.set_payload()</code> crash when sending email (<a href=\"https://github.com/zulip/zulip/pull/29681\">#29681</a>). I\u2019m not sure if this is worth rushing out a release, but maybe we should make some kind of announcement.</p>",
  "<p>What is the failure mode trying to run it on 24.04? Just wondering what the bug reports might look like.</p>\n<p>We did frame it as \"technology preview\" or something in 8.x, so I think it's probably OK to procrastinate doing a release.</p>",
  "<p>We do have a couple dozen things accumulated in the \"backport candidate\" label, and the last release was a month ago, so it would be somewhat normal for us to do one.</p>",
  "<p>Some of our outgoing email templates include non-ASCII Unicode, so they\u2019ll fail to send, with tracebacks that look like the one in <a href=\"https://code.djangoproject.com/ticket/35361\">https://code.djangoproject.com/ticket/35361</a>.</p>",
  "<p>Posted a couple comments. Also would be good for you to do a detailed post on how you've tested it, as there may be a couple things I should check beyond that.</p>",
  "<p>Hmm, that's a pretty weird failure mode, so yeah, might be worth doing it in the next week or two.</p>",
  "<p>This seems fine. I do like the new <code>get_recursive_strict_subgroups</code> function for the goal of being able to return the named group type when that's handy.</p>",
  "<p>So I guess these are the next steps for this plan, which largely revolve around changing the API, this first of which would be an API change without any changes in the data model:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/set.20a.20group.20setting.20to.20multiple.20groups/near/1772447\">said</a>:</p>\n<blockquote>\n<ul>\n<li>We start allowing group-valued settings to have a value that is an anomymous group, that would be stored in the database as a <code>UserGroup</code> but never referenced directly in the API; effectively they're just containers with a list of users and a list of subgroups. Opened <a href=\"https://github.com/zulip/zulip/issues/29557\">https://github.com/zulip/zulip/issues/29557</a> defining the semantics, and <a href=\"#narrow/stream/378-api-design/topic/groups.20redesign/near/1772449\">https://chat.zulip.org/#narrow/stream/378-api-design/topic/groups.20redesign/near/1772449</a> has some API design questions.</li>\n<li>In the <code>input_pull</code> UI for a setting, if one sets the value to a setting as specifically a single group ID that corresponds to a <code>NamedUserGroup</code>, then we would store that <code>NamedUserGroup</code> as the value of the group setting. But otherwise, we'd just send the server a <code>{direct_member_ids: [1, 3, 6], direct_subgroup_ids: [14, 17]}</code> type object corresponding to the pills.</li>\n</ul>\n</blockquote>",
  "<p>And I think <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/groups.20redesign\">#api design &gt; groups redesign</a> has the plan for how that will work.</p>",
  "<p>I'm very excited about the progress on this!</p>",
  "<p>Yes. Will start working on the api migration next.</p>",
  "<p>I think we should remove the 24.04 for time being:<br>\n<a href=\"/user_uploads/2/9/KbEW63GHy6t_z2y3R3zKJorH/Screenshot-from-2024-04-27-09-39-54.png\">Screenshot-from-2024-04-27-09-39-54.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/9/KbEW63GHy6t_z2y3R3zKJorH/Screenshot-from-2024-04-27-09-39-54.png\" title=\"Screenshot-from-2024-04-27-09-39-54.png\"><img src=\"/user_uploads/2/9/KbEW63GHy6t_z2y3R3zKJorH/Screenshot-from-2024-04-27-09-39-54.png\"></a></div><p>for the reason I posted in <a class=\"stream-topic\" data-stream-id=\"49\" href=\"/#narrow/stream/49-development-help/topic/Ubuntu.2024.2E04\">#development help &gt; Ubuntu 24.04</a> ?</p>",
  "<p>I have addressed the comments and explained how i have done the performance tests.</p>",
  "<p>I guess we can start with changing the <code>members</code> field to <code>direct_members</code> as we discussed before.</p>",
  "<p>It's supported if you install directly rather than using Vagrant, I guess.</p>",
  "<p>But yeah, it's unfortunate Vagrant doesn't have a 24.04 build yet; I'd have expected they'd be the kind of platform that would have builds ready for release day.</p>",
  "<p>I would procrastinate changing that for the existing endpoints, since I think it will require compatibility code for mobile and has no functional benefits.</p>",
  "<p>I tried direct installation. It fails with:</p>\n<div class=\"codehilite\"><pre><span></span><code>(zulip-py3-venv) prakhar@hp:~/Zulip/zulip$ ./tools/run-dev\n\nStarting Zulip on:\n\n    http://localhost:9991/\n\nInternal ports:\n   9991: Development server proxy (connect here)\n   9992: Django\n   9993: Tornado\n   9994: webpack\n\nTraceback (most recent call last):\n  File &quot;/home/prakhar/Zulip/zulip/./tools/webpack&quot;, line 164, in &lt;module&gt;\n    build_for_dev_server(args.host, args.port, args.minify, args.disable_host_check)\n  File &quot;/home/prakhar/Zulip/zulip/./tools/webpack&quot;, line 80, in build_for_dev_server\n    import pyinotify\n  File &quot;/srv/zulip-py3-venv/lib/python3.12/site-packages/pyinotify.py&quot;, line 71, in &lt;module&gt;\n    import asyncore\nModuleNotFoundError: No module named &#39;asyncore&#39;\nTornado server (re)started on port 9993\n</code></pre></div>",
  "<p><a href=\"https://docs.python.org/3.11/library/asyncore.html\">https://docs.python.org/3.11/library/asyncore.html</a> says:</p>\n<blockquote>\n<p>Deprecated since version 3.6, will be removed in version 3.12:\u00a0The\u00a0<a href=\"https://docs.python.org/3.11/library/asyncore.html#module-asyncore\"><code>asyncore</code></a>\u00a0module is deprecated (see\u00a0<a href=\"https://peps.python.org/pep-0594/#asyncore\">**PEP 594**</a>\u00a0for details). Please use\u00a0<a href=\"https://docs.python.org/3.11/library/asyncio.html#module-asyncio\"><code>asyncio</code></a>\u00a0instead.</p>\n</blockquote>",
  "<p>Moving back to my older installation for now.</p>",
  "<p>This is the issue reported, and it's open since June 2023: <a href=\"https://github.com/seb-m/pyinotify/issues/204\">https://github.com/seb-m/pyinotify/issues/204</a></p>",
  "<p>updated <a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a></p>",
  "<p>Added 4 test cases : </p>\n<ol>\n<li>saving and changing  <code>ip_address</code> for authenticated user</li>\n<li>saving and changing <code>ip_address</code> for anonymous user.</li>\n<li>check if <code>realm_id</code> is saved correctly for both anonymous and authenticated users</li>\n<li>testing <code>SessionStore.create_model_instance()</code> (only because it's missing in the test coverage report)</li>\n</ol>",
  "<p>Fixing in <a href=\"https://github.com/zulip/zulip/pull/29885\">#29885</a>.</p>",
  "<p>Fascinating \u2014 thanks <span class=\"user-mention silent\" data-user-id=\"26369\">Karl Stolley</span> for looking into this, and <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> for the diagnosis!</p>\n<p>This symptom has been visible since forever, but as far as I'm aware nobody had previously dug into the cause of it.</p>\n<p>I've filed <a href=\"https://github.com/zulip/zulip-flutter/pull/641\">#F641</a> for eventually papering over this in the Flutter app, just as we intend to eventually do in web. (It's milestoned \"post-launch\", reflecting that this isn't a priority.)</p>",
  "<blockquote>\n<p>It would be nice if Zulip starts to support using AVIF-images in inline-previews (see\u00a0<a href=\"https://github.com/zulip/zulip/issues/9081\">#9081</a>) which are getting traction on (some) websites. AVIF is designed to supersede WebP, JPEG, PNG and GIF and is supported by all major browsers nowadays (source:\u00a0<a href=\"https://caniuse.com/?search=AVIF\">https://caniuse.com/?search=AVIF</a>\u00a0).</p>\n</blockquote>\n<p>Thoughts on this? The caniuse chart looks good to me and it sounds like it's a new state of affairs since we last looked at the set of supports formats, so it seems plausible to me we should enable it.</p>",
  "<p>So just updating this thread that we've now merged <a href=\"https://github.com/zulip/zulip/pull/29521\">#29521</a> (more efficient <code>do_increment_logging_stat</code>) as well as <a href=\"https://github.com/zulip/zulip/pull/29027\">#29027</a> (the web app using a more efficient endpoint for \"mark as unread\" when it knows it's just a small number of specific messages -- the bulk endpoint is only needed for rare cases like \"mark as unread\" in a combined feed to mark hundreds/thousands of messages unread). </p>\n<p><span class=\"user-mention\" data-user-id=\"2187\">@Greg Price</span> I'm not sure it is worth the tracking cost of filing an issue on zulip-flutter for the equivalent of <a href=\"https://github.com/zulip/zulip/pull/29027\">#29027</a>? It's somewhat of a micro-optimization, but FYI in case you think we shouyld add one..</p>",
  "<p>The <code>do_increment_logging_stat</code> optimization does seem significant for mark-as-read, at least; here's typical log lines for my account on that endpoint:</p>\n<div class=\"codehilite\"><pre><span></span><code>37ms (db: 15ms/5q) /json/messages/flags [add read/2]\n25ms (db: 6ms/5q) /json/messages/flags [add read/1]\n16ms (db: 4ms/5q) /json/messages/flags [add read/1]\n16ms (db: 4ms/5q) /json/messages/flags [add read/1]\n25ms (db: 5ms/5q) /json/messages/flags [add read/1]\n18ms (db: 5ms/5q) /json/messages/flags [add read/1]\n15ms (db: 3ms/5q) /json/messages/flags [add read/1]\n39ms (db: 17ms/5q) /json/messages/flags [add read/1]\n28ms (db: 7ms/5q) /json/messages/flags [add read/1]\n22ms (db: 8ms/5q) /json/messages/flags [add read/1]\n21ms (db: 5ms/5q) /json/messages/flags [add read/2]\n31ms (db: 7ms/5q) /json/messages/flags [add read/1]\n21ms (db: 6ms/5q) /json/messages/flags [add read/1]\n36ms (db: 8ms/5q) /json/messages/flags [add read/2]\n28ms (db: 6ms/5q) /json/messages/flags [add read/1]\n</code></pre></div>\n<p>Here's pre-change:</p>\n<div class=\"codehilite\"><pre><span></span><code>35ms (db: 10ms/7q) /json/messages/flags\n21ms (db: 4ms/7q) /json/messages/flags\n21ms (db: 3ms/7q) /json/messages/flags\n21ms (db: 5ms/7q) /json/messages/flags\n26ms (db: 8ms/7q) /json/messages/flags\n24ms (db: 7ms/7q) /json/messages/flags\n22ms (db: 3ms/7q) /json/messages/flags\n22ms (db: 6ms/7q) /json/messages/flags\n39ms (db: 8ms/7q) /json/messages/flags\n68ms (db: 14ms/7q) /json/messages/flags\n30ms (db: 6ms/7q) /json/messages/flags\n29ms (db: 9ms/7q) /json/messages/flags\n21ms (db: 3ms/7q) /json/messages/flags\n33ms (db: 7ms/7q) /json/messages/flags\n</code></pre></div>\n<p>So that's notable progress!</p>",
  "<p>I think if we wanted to look at opportunities for further optimization, they'd need to involve changing the actual core logic to do it all in a single SQL statement that does the lock/edit/commit sequence without extra RTTs.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1738516\">said</a>:</p>\n<blockquote>\n<p>Another thing that's a bit fishy, looking at the logs, is that I think the presence of the <code>batch_size</code> (of 2000) is causing Django to do 3 queries for what I would have thought would be a single <code>UPDATE</code> operation:</p>\n<div class=\"codehilite\"><pre><span></span><code>query = (\n    UserMessage.select_for_update_query()\n    .filter(user_profile=user_profile)\n    .extra(where=[UserMessage.where_unread()])[:batch_size]\n)\n# This updated_count is the same as the number of UserMessage\n# rows selected, because due to the FOR UPDATE lock, we&#39;re guaranteed\n# that all the selected rows will indeed be updated.\n# UPDATE queries don&#39;t support LIMIT, so we have to use a subquery\n# to do batching.\nupdated_count = UserMessage.objects.filter(id__in=query).update(\n    flags=F(&quot;flags&quot;).bitor(UserMessage.flags.read),\n)\n</code></pre></div>\n<p>turns into this:</p>\n<p><div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">BEGIN</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"flags\"</span><span class=\"p\">,</span>\n<span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span>\n<span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">ASC</span><span class=\"w\"> </span><span class=\"k\">FOR</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"k\">OF</span>\n<span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"flags\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">WHERE</span>\n<span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nb\">Bit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"n\">is_set</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">010</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">COMMIT</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"message_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_usermessage\"</span><span class=\"p\">.</span><span class=\"ss\">\"user_profile_id\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span>\n<span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"k\">alias</span><span class=\"o\">=</span><span class=\"k\">default</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
  "<p>I don't feel particularly motivated to push on that right now without clear evidence that it's important, but figured I'd post those notes for posterity.</p>",
  "<p>...that's not actually taking a <code>FOR UPDATE</code> lock, if those logs are correct?</p>",
  "<p>Oh, I needed to scroll sideways.  There it is.</p>",
  "<p>I\u2019d want to do a little more research on this; MDN still <a href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#avif_image\">recommends preparing fallback images</a>; looking at the date-relative listing on <a href=\"https://caniuse.com/?search=AVIF\">CanIUse</a>, Edge only very recently supports this, and Safari just a tad before that. So it seems reasonable to expect that older Macs and iOS devices would be a big choke point worth considering here.</p>",
  "<p>I feel like those would be more notable if we were going to start shipping our own AVIF images.  If the question is \"should we treat AVIF images as something we may want to treat as images, and plop an <code>&lt;img src=\"...\"&gt;</code> in there for the browser to look at\" then the bar seems much lower.</p>",
  "<p>Like, if folks are posting links to AVIF images, not doing any preview on them is worse than trying to do a preview, and some subset of browsers may not render it.</p>",
  "<p>Yeah, and I guess once we do thumbnailing, we can make the thumbnails have whatever fallbacks we feel are appropriate.</p>",
  "<p>Do we currently have plumbing in place to do that? Presumably there would need to be some infrastructure in place to generate, say, a fallback PNG from a user-uploaded AVIF?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1795699\">said</a>:</p>\n<blockquote>\n<p>So just updating this thread that we've now merged <a href=\"https://github.com/zulip/zulip/pull/29521\">#29521</a> (more efficient <code>do_increment_logging_stat</code>) as well as <a href=\"https://github.com/zulip/zulip/pull/29027\">#29027</a> (the web app using a more efficient endpoint for \"mark as unread\" when it knows it's just a small number of specific messages -- the bulk endpoint is only needed for rare cases like \"mark as unread\" in a combined feed to mark hundreds/thousands of messages unread). </p>\n<p><span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span> I'm not sure it is worth the tracking cost of filing an issue on zulip-flutter for the equivalent of <a href=\"https://github.com/zulip/zulip/pull/29027\">#29027</a>? It's somewhat of a micro-optimization, but FYI in case you think we shouyld add one..</p>\n</blockquote>\n<p>(I believe <a href=\"https://github.com/zulip/zulip/pull/29521\">#29521</a> and <a href=\"https://github.com/zulip/zulip/pull/29027\">#29027</a> are interchanged in this message)</p>\n<p>Yeah, I think an issue for that would be helpful, thanks. It seems like something it'd be good for us to do; and I think the tracking cost is pretty low if we file such issues right while it's fresh in mind (because we've just done, or are doing, the web equivalent) \u2014 in particular lower than it would be to remember or re-discover them later.</p>",
  "<p>In the sample timing you found at the start of the thread:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1738509\">said</a>:</p>\n<blockquote>\n<p>I've been noticing a bit of lag doing mark-as-unread actions sometimes on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>. Looking at logs, <code>/json/messages/flags/narrow</code> actions by my account generally take 50-115ms to complete, even in cases where it's literally just a couple messages that were targeted. Sample timing section is <code>107ms (db: 40ms/11q)</code>.</p>\n<p>The change-flags-for-a-specific-set-of-message-IDs endpoint is significantly faster for 1-2 message actions, with a sloe timing section from logs being <code>69ms (db: 27ms/7q)</code>.</p>\n</blockquote>\n<p>that's a 38ms difference, which is enough to be quite noticeable.</p>",
  "<p>Yeah, it's a little better than that, because the 69ms also went down about 25% with the other PR in this thread.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip-flutter/issues/652\">https://github.com/zulip/zulip-flutter/issues/652</a> for the Flutter tracking issue.</p>",
  "<p>No, but such an image processing pipeline probably our most impactful future infrastructure project, so I expect we'll invest in it when we can apply enough focus to complete the transition to it.</p>",
  "<p>This is the coverage report for <code>zerver/models/sessions.py</code> highliting in red what is missing from tests :<br>\n<a href=\"/user_uploads/2/4/ru7_TiX0S7mIokCoFajQZAJA/Screenshot-from-2024-05-09-16-53-15.png\">Screenshot-from-2024-05-09-16-53-15.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/4/ru7_TiX0S7mIokCoFajQZAJA/Screenshot-from-2024-05-09-16-53-15.png\" title=\"Screenshot-from-2024-05-09-16-53-15.png\"><img src=\"/user_uploads/2/4/ru7_TiX0S7mIokCoFajQZAJA/Screenshot-from-2024-05-09-16-53-15.png\"></a></div>",
  "<p>I'm really not sure what i should test for that highlighted code, should it be exlucded/skipped instead ?</p>",
  "<p>Anyone available for a review ?</p>",
  "<p>my approach is explained in the PR description btw.</p>",
  "<p>There's a point release coming out today, so reviews are still a bit slow.</p>",
  "<p>sorry, what is a point release ? a new zulip release you mean ?</p>",
  "<p>Yes. 8.4.</p>",
  "<p>Fixed the issue related to include anchors mentioned in <a href=\"https://github.com/zulip/zulip/pull/29521#discussion_r1594430934\">#29521 (comment)</a>  in <a href=\"https://github.com/zulip/zulip/pull/30047\">#30047</a>.</p>",
  "<p>Just a quick bump on this topic (pun intended). Has there been any progress on a Topic model?</p>",
  "<p>No but <span class=\"user-mention\" data-user-id=\"28120\">@Rohan Gudimetla</span> is doing GSoC this summer and has been getting a lot of experience with simpler migrations that would be good preparation for working on this.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> is probably the right reviewer for this.</p>",
  "<p>Do you understand why that code is not being run in the test suite?</p>",
  "<p>I could see good reasons, like that first function may just be called during initialization and not later, in which case a <code>nocoverage</code> comment explaining that would be appropriate. </p>\n<p>That second function might not be called because we're using a different session engine in <code>zproject/test_settings.py</code>. If so, I'd want to understand why before deciding what to do.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1798673\">said</a>:</p>\n<blockquote>\n<p>That second function might not be called because we're using a different session engine in</p>\n</blockquote>\n<p>Yes, during tests we are using the non-cached version of that session store defined in <code>zproject/test_extra_settings.py</code> : </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Disable caching on sessions to make query counts consistent</span>\n<span class=\"n\">SESSION_ENGINE</span> <span class=\"o\">=</span> <span class=\"s2\">\"zerver.models.nocache_sessions\"</span>\n</code></pre></div>",
  "<p>So it makes sense for those <code>save</code> and <code>delete</code> to be missing from the test coverage</p>",
  "<p>Given they are very simple functions not worth a test harness, I'd add <code>nocoverage</code> comments but also make sure the comments/docstrings make clear how one would manually test that code path.</p>",
  "<p>updated <a href=\"https://github.com/zulip/zulip/pull/29668\">pr</a></p>",
  "<p>i think the data migration file is an important one that needs the most attention</p>",
  "<p>As discussed in <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/Support.20user.20group.20deactivation\">#design &gt; Support user group deactivation</a>, we want to allow deactivating user groups.</p>\n<p>It was discussed there that we should add a <code>deactivated</code> field. I just wanted to confirm whether we should add the field in <code>NamedUserGroup</code> or <code>UserGroup</code> model. I guess <code>NamedUserGroup</code> model is fine since we would allow only to deactivate named user groups.</p>",
  "<p>Cleaned this up with some more copy to merge.</p>",
  "<p>I'm working on <a href=\"https://github.com/zulip/zulip/pull/29987\">#29987</a>, and wanted to manually test the difference between the <code>/support</code> page for Zulip Cloud vs self-hosted. Going through the codebase, I see that we use <code>settings.CORPORATE_ENABLED</code> to check for that, but when doing manual testing on different realm plans via the <code>./manage.py\u00a0populate_billing_realms</code> command. I see that flag to be true for both self-hosted and Zulip Cloud realms. Am I missing something here?</p>",
  "<p>We use a  different subdomain for displaying billing pages for remote servers / realms while <code>settings.CORPORATE_ENABLED</code> is used to display pages on the self hosted server's domain.</p>",
  "<p>Oh! That made me realize that <code>is_self_hosting_management_page</code> is not the check we should have for <code>deactivated</code> state. It should be <code>settings.CORPORATE_ENABLED</code>. <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> am I correct?</p>\n<p>Since <code>is_self_hosting_management_page</code> is based on,</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">is_self_hosting_management_subdomain</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"n\">subdomain</span> <span class=\"o\">=</span> <span class=\"n\">get_subdomain</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">subdomain</span> <span class=\"o\">==</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SELF_HOSTING_MANAGEMENT_SUBDOMAIN</span>\n</code></pre></div>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/30107\">#30107</a></p>",
  "<p>So, if I understand this correctly, we should be using <code>settings.CORPORATE_ENABLED</code> for <code>/support</code> since that would be something the user would access from their own self-hosted server's domain. But we don't have a way to test that in the dev environment manually?</p>",
  "<p>Yes, we can access it locally by setting <code>CORPORATE_ENABLED</code> to <code>false</code>.</p>",
  "<p>Noted, thanks!</p>",
  "<p>Yes that's correct, we should check if corporate is enabled.</p>",
  "<p>I want to work on this <a href=\"https://github.com/zulip/zulip/issues/29349\">issue</a>, it's somehow smiliar to a previous one i worked one, two questions : </p>\n<ol>\n<li>what does <code>THUMBNAIL_IMAGES</code> do ?</li>\n<li>can somone give me an example of the expected outcome, escaped path should be changed when <code>THUMBNAIL_IMAGES=True</code> but what is an escaped path?</li>\n</ol>",
  "<p>Continuing <a href=\"https://github.com/zulip/zulip/pull/30168#discussion_r1610153152\">this discussion</a>-</p>\n<p>How do we want to validate URLs in <code>typed_endpoint</code> view? <code>PATCH /realm</code> endpoint was recently updated to use <code>typed_endpoint</code> and the <code>jitsi_server_url</code> setting is updated using that endpoint. </p>\n<p>We previously used <code>check_url</code> or <code>check_capped_url</code> in <code>validators.py</code> which uses <a href=\"https://docs.djangoproject.com/en/5.0/ref/validators/#urlvalidator\"><code>URLValidator</code></a> from django. Pydantic provides some <a href=\"https://docs.pydantic.dev/2.3/usage/types/urls/\">url types</a>, but I am not sure the validation there matches with what is done by <code>URLValidator</code> in django.</p>",
  "<p>Continuing <a href=\"https://github.com/zulip/zulip/pull/30168#discussion_r1610144695\">this</a> -</p>\n<p>While updating <code>jitsi_server_url</code> using <code>PATCH /realm</code> endpoint, we expect a JSON value. I just wanted to confirm whether it is required since the url is a type of a string and we do not require JSON value for other string settings.</p>",
  "<p>As mentioned in the documentation, none of pydantic's <code>URL types</code> require Top Level Domains, whereas Django's <code>URLValidator</code> checks that. We would need to take that into account when deciding which validator to use.</p>",
  "<p>Could we a Pydantic URL type but then also run <code>URLValidator</code> as an <code>AfterValidator</code>? I guess we'd want to confirm the Pydantic validator is strictly less strict than the Django one just to make it easy to reason about.</p>",
  "<p>Would appreciate any clarification on this !</p>",
  "<ol>\n<li>THUMBNAIL_IMAGES does nothing currently.  It was for a beta thumbnailing system which was removed, and we're working on the replacement for it.</li>\n<li>\"escaped path\" means \"URI-escaped.\"  You should turn on <code>THUMBNAIL_IMAGES</code> and send a URL to an image, and look at the HTML it produces.</li>\n</ol>",
  "<p>I don't think that's intentional. That API endpoint is not even documented or used by other clients, so probably should just be fixed.</p>",
  "<p>Caveat to point (1) -- it currently does nothing, <em>functionally</em>.  It does cause a behaviour change, currently, where it makes image URLs point to <code>/thumbnail?...</code>, even though those just go through Camo, or not, with no user-visible difference.</p>",
  "<p>Yeah, <code>NamedUserGroup</code> is correct.</p>",
  "<p>I am not going to have time to review this one in the next week, realistically <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>.</p>",
  "<p>Wanted to discuss about how to update setting from one anonymous group to other.</p>\n<p>What we do currently is we call <a href=\"https://github.com/zulip/zulip/blob/a6d211245341a041f02f0f166dc3756a863ed163/zerver/lib/user_groups.py#L279\"><code>access_user_group_for_setting</code></a> to validate the IDs passed in request which then calls <a href=\"https://github.com/zulip/zulip/blob/a6d211245341a041f02f0f166dc3756a863ed163/zerver/lib/user_groups.py#L245\"><code>update_or_create_user_group_for_setting</code></a>.</p>\n<p>In <code>update_or_create_user_group_for_setting</code>, we just update the existing <code>UserGroup</code> object with new members and subgroups. So, what happens in such case is that the <code>UserGroup</code> is already updated and then we call <code>do_change_user_group_permission_setting</code> which now only is only responsible audit log entry and sending event. The task of updating the <code>UserGroup</code> object and audit log entry is not done inside an atomic transaction and that can be problematic. So, we might need to update the code to do both the things in a transaction.</p>\n<p>One solution could be to just wrap the <code>access_user_group_for_setting</code> inside the transaction. Another solution could be if we do not update the <code>UserGroup</code> object in  <code>update_or_create_user_group_for_setting</code> and instead just validate the IDs there and update the <code>UserGroup</code> object in <code>do_change_user_group_permission_setting</code>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/mark-as-unread.20performance/near/1795700\">said</a>:</p>\n<blockquote>\n<p>The <code>do_increment_logging_stat</code> optimization does seem significant for mark-as-read, at least</p>\n</blockquote>\n<p>Here's the data from Zulip Cloud, now that it's deployed there (with a 6 hour window):</p>\n<p><a href=\"/user_uploads/2/b6/4l6zM0BRsyun7p-p4VEKVNsk/Screenshot-2024-05-29-at-12.15.32PM.png\">Screenshot-2024-05-29-at-12.15.32PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/b6/4l6zM0BRsyun7p-p4VEKVNsk/Screenshot-2024-05-29-at-12.15.32PM.png\" title=\"Screenshot-2024-05-29-at-12.15.32PM.png\"><img src=\"/user_uploads/2/b6/4l6zM0BRsyun7p-p4VEKVNsk/Screenshot-2024-05-29-at-12.15.32PM.png\"></a></div><p>Which is like a 10ms reduction in p50 and p75, which is quite nice.</p>",
  "<p>The data is noisier here (so I increased the window size to 24h), but you can also see some nice gains from the push bouncer endpoint:<br>\n<a href=\"/user_uploads/2/84/Ktyn9CCC2Yu9POrx9NqSqQlR/Screenshot-2024-05-29-at-12.19.55PM.png\">Screenshot-2024-05-29-at-12.19.55PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/84/Ktyn9CCC2Yu9POrx9NqSqQlR/Screenshot-2024-05-29-at-12.19.55PM.png\" title=\"Screenshot-2024-05-29-at-12.19.55PM.png\"><img src=\"/user_uploads/2/84/Ktyn9CCC2Yu9POrx9NqSqQlR/Screenshot-2024-05-29-at-12.19.55PM.png\"></a></div>",
  "<p>I think best practice would be the option where we do <code>access_user_group_for_setting</code> inside the same transaction, since a future version of the code might want to take a lock for the duration of the work anyway.</p>",
  "<p>Ok, I just noticed the view function itself is wrapped inside a transaction and we use <code>@transaction.atomic(savepoint=False)</code> for <code>do_change_user_group_permission_setting</code>, so that should handle the above mentioned case as expected.</p>",
  "<p>So, I have observed it frequently over the years that sometimes czo initial load times are very high like 2 ~ 5 minutes where it is just processing the initial <code>GET</code> request on <code>https://chat.zulip.org/</code> while something like GitHub loads instantly. </p>\n<p>There is some sort of relation with me being in a new place or on a new network connection but I feel bad about the experience regardless.</p>",
  "<p>I was experiencing it yesteday but can't reproduce right now.</p>",
  "<p>This is likely network plus the payloads being known to be quite large. We've discussed this before, but not worked on it in a while, but the <code>/</code> payload includes an inefficiently compressed data set of the full set of subscribers in each stream, and that ends up being huge as a result.</p>\n<p>It's on my radar as a thing we need to fix at some point, but lower priority than other protocol changes motivated by loading performance.</p>",
  "<p>We're doing some analytics cleanup to make the int -&gt; bigint transition easier, as analytics tables are among the largest ones we're touching.</p>\n<p><a href=\"https://github.com/zulip/zulip/pull/30277\">#30277</a> trims <code>active_users_log:is_bot:day</code>, which is unused, and also the ignored row types out of the equivalent zilencer tables.</p>",
  "<p>The next question is if we need both <code>active_users_audit</code> and <code>active_users</code>.</p>",
  "<p>We currently have:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"c1\"># Number of users stats</span>\n        <span class=\"c1\"># Stats that count the number of active users in the UserProfile.is_active sense.</span>\n        <span class=\"c1\"># 'active_users_audit:is_bot:day' is the canonical record of which users were</span>\n        <span class=\"c1\"># active on which days (in the UserProfile.is_active sense).</span>\n        <span class=\"c1\"># Important that this stay a daily stat, so that 'realm_active_humans::day' works as expected.</span>\n        <span class=\"n\">CountStat</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"active_users_audit:is_bot:day\"</span><span class=\"p\">,</span>\n            <span class=\"n\">sql_data_collector</span><span class=\"p\">(</span>\n                <span class=\"n\">UserCount</span><span class=\"p\">,</span> <span class=\"n\">check_realmauditlog_by_user_query</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"s2\">\"is_bot\"</span><span class=\"p\">)</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">CountStat</span><span class=\"o\">.</span><span class=\"n\">DAY</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"c1\"># A sanity check on 'active_users_audit:is_bot:day'. Is only</span>\n        <span class=\"c1\"># an approximation, e.g. if a user is deactivated between the</span>\n        <span class=\"c1\"># end of the day and when this stat is run, they won't be</span>\n        <span class=\"c1\"># counted. However, is the simpler to inspect by hand.</span>\n        <span class=\"n\">CountStat</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"active_users:is_bot:day\"</span><span class=\"p\">,</span>\n            <span class=\"n\">sql_data_collector</span><span class=\"p\">(</span>\n                <span class=\"n\">RealmCount</span><span class=\"p\">,</span> <span class=\"n\">count_user_by_realm_query</span><span class=\"p\">(</span><span class=\"n\">realm</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">UserProfile</span><span class=\"p\">,</span> <span class=\"s2\">\"is_bot\"</span><span class=\"p\">)</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">CountStat</span><span class=\"o\">.</span><span class=\"n\">DAY</span><span class=\"p\">,</span>\n            <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"n\">TIMEDELTA_MAX</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n</code></pre></div>",
  "<p><code>active_users_audit:is_bot:day</code> is currently also a UserCount, and we only use it to roll up to a RealmCount.  The question is if there's any utility to keeping <code>active_users</code> as well, since it's known to be a lie.</p>",
  "<p>OK, we also use the UserCount of <code>active_users_audit:is_bot:day</code> to roll up <code>realm_active_humans::day</code>, which is \"of the users who were marked as 15-day-active, limit it down to users that were humans and non-disabled at the time\"?</p>",
  "<p>So that needs to be rewritten a query which does the realmauditlog walk which <code>check_realmauditlog_by_user_query</code> currently does.</p>",
  "<p>Yeah, that sounds correct to me.</p>",
  "<p>Thoughts on if we still want <code>active_users</code>?</p>",
  "<p>I feel pretty confident in the quality of the <code>active_users_audit</code> data set and we have good reasons to prefer its methodology, so I don't feel much reason to keep that one.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/commit/f595f4f7f2f4e924e435c2975e91965ddb3a3140\">f595f4f7f2f4e924e435c2975e91965ddb3a3140</a> may provide some helpful context: Originally, that was the thing we graphed, and the more accurate versions were added later.</p>",
  "<p>OK, <a href=\"https://github.com/zulip/zulip/pull/30277\">#30277</a> has been repushed to do those changes.</p>",
  "<p>Great! Just reviewed, looks good aside from one detail noted as a thing we should document in comments.</p>",
  "<p>While waiting for review, i decided to proceed with the following as suggested in the PR review : </p>\n<ol>\n<li>Fetch the matching session keys</li>\n<li>Bulk-delete all of the matching sessions from the database using the filter</li>\n<li>Bulk-delete all of the matching sessions from the cache using the session keys</li>\n</ol>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>  suggested doing that in a separate commit but i thought it wouldn't hurt anyway</p>",
  "<p>so <a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a> is updated now</p>",
  "<p>When exporting and importing data, how do we keep quote-and-reply messages from breaking? Specifically, I'm trying to understand at what step in the import / export process do we take care of the host URL component of the /near/ links from each reply messages? I assume these types of messages don't get to be imported / exported literally string by string, because if they were, the /near/ link in reply messages could redirect to the old server</p>",
  "<p>I'm working on an issue improving how Slack threads are converted into Zulip messages. Cross-linking between topics is the big thing in this feature. So, I'm trying to figure out how to properly create and export reply messages with /near/ link.</p>\n<p>Currently, I've only worked around <code>conver_slack_data.py</code>, and I only have some idea how Zulip exports messages. So, any pointers on the <code>do_export_realm()</code> or <code>do_import_realm()</code> regarding how we handle /near/ link messages would be very helpful.</p>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"92\" href=\"/#narrow/stream/92-learning/topic/exporting.20.26.20importing.20messages.20with.20.2Fnear.2F.20link\">#learning &gt; exporting &amp; importing messages with /near/ link</a> by <span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span>.</p>",
  "<p>I just realized that it could probably be constructed manually since the <code>do_convert_data</code> command to convert the slack export is done on the importing server...</p>\n<p>it doesn't really answer my question though, so I think i'll just keep the topic open.</p>",
  "<p>turns out /near/ links doesn't need the host URL part for it to work function, so I think I can just left that part empty (<a class=\"stream-topic\" data-stream-id=\"7\" href=\"/#narrow/stream/7-test-here/topic/test.20.2Fnear.2F.20link.20format\">#test here &gt; test /near/ link format</a> ) when creating messages with reply links for the Slack export conversion. </p>\n<p>Still curious as to how we handle messages migrated from server with different domain name / URL since replies with /near/ link to other URL will still redirect the user to that URL and not the current host URL. </p>\n<p>Questions blocking my work  has already been answered, so only \"trivial\" question remain here.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30223\">Pieter K</span> has marked this topic as resolved.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30223\">Pieter K</span> <a href=\"#narrow/stream/3-backend/topic/.E2.9C.94.20exporting.20.26.20importing.20messages.20with.20.2Fnear.2F.20link/near/1815168\">said</a>:</p>\n<blockquote>\n<p>Still curious as to how we handle messages migrated from server with different domain name / URL since replies with /near/ link to other URL will still redirect the user to that URL and not the current host URL. </p>\n</blockquote>\n<p>Yeah, good question. Probably on either export or import we should be looking for within-Zulip links (with or without /near/) in messages and rewriting those either to point to the new host, or to be relative links (like <code>/#narrow/\u2026</code>). I don't know if we're currently doing that.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/29198\">#29198</a>, we added an optional KaTeX server to the Zulip installation, which greatly improves the efficiency of KaTeX rendering, at the cost of a bit of memory footprint.</p>",
  "<p>Before the 9.0 release, I was thinking we should decide if we want to keep it as optional, and if so, whether if we want to do something like auto-detecting whether to run it based on available memory.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29198/commits/5a808498efb56663a7b4e551288a46cc6d5edc52\">https://github.com/zulip/zulip/pull/29198/commits/5a808498efb56663a7b4e551288a46cc6d5edc52</a> explains that the memory footprint of the KaTeX server is about 60MB, which is significant, but small compared to a single Python queue worker process, which are a few 100s of MB.</p>",
  "<p>So one theory is we could have it be enabled if you're in the memory range where we run queue workers independently.</p>",
  "<p>Notably, while this release upgrades dependencies and thus might increase memory footprint for that reason, we've deleted one queue worker (<code>invites</code>) and probably are deleting a second one (<code>user_presence</code>), so probably we'll still be ahead on net memory usage.</p>",
  "<p><code>fix_message_rendered_content</code> is the function that goes through and attempts to rewrite lots of things, like mentions.</p>",
  "<p>Either it does this properly (and has tests for doing so), or it'd be the place that we'd need to add code to fix this if it doesn't.</p>",
  "<p>I don't see any evidence of rewriting message IDs, so likely this is just a bug/incompleteness in that logic.</p>",
  "<p>Great!</p>",
  "<p>60MB really does not feel like much overhead compared to all of the other moving parts of the system; I am not convinced it's worth the effort.</p>\n<p>I think for the effort, and additional support complexity, there are likelier lower hanging fruit for 60MB.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span> has marked this topic as unresolved.</p>",
  "<p>As I read it, <span class=\"user-mention silent\" data-user-id=\"30223\">Pieter K</span>'s question here wasn't about the message IDs (though those should probably also get rewritten!), but about the hostname/authority part of the URL.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/exporting.20.26.20importing.20messages.20with.20.2Fnear.2F.20link/near/1816042\">said</a>:</p>\n<blockquote>\n<p><code>fix_message_rendered_content</code> is the function that goes through and attempts to rewrite lots of things, like mentions.</p>\n</blockquote>\n<p>I don't think <code>fix_message_rendered_content</code> handles /near/ links. If we were to add this functionality on the importing side, I imagine it could be done in the same manner <code>fix_message_rendered_content</code> finds mentions using BeautifulSoup. Although a similar process could probably be implemented on the exporting side, I guess it depends on which process is currently \"heavier,\" export or import.</p>\n<p>I'll try taking a look at how / if our tests handle cases like this and report here..</p>",
  "<p>In other words, you're thinking we should just turn it on for all installations? Seems OK to me as a plan.</p>",
  "<p>Yeah, my proposal is that we leave it as-is, on for all installs.</p>",
  "<p>But the current default is that the server is disabled by default, so we're saving the 60MB on most installations. I'd be OK with making it on by default for all installations.</p>",
  "<p>We don't know the original hostname/URL at import time, so probably cleanest would be for that sort of rewriting to happen at export time, if it's required. But I don't think that should usually be required; the Markdown processor is responsible for doing that step:</p>\n<div class=\"codehilite\"><pre><span></span><code>def rewrite_local_links_to_relative(db_data: Optional[DbData], link: str) -&gt; str:\n    &quot;&quot;&quot;If the link points to a local destination (e.g. #narrow/...),\n    generate a relative link that will open it in the current window.\n    &quot;&quot;&quot;\n\n    if db_data:\n        realm_url_prefix = db_data.realm_url + &quot;/&quot;\n        if link.startswith((realm_url_prefix + &quot;#&quot;, realm_url_prefix + &quot;user_uploads/&quot;)):\n            return link[len(realm_url_prefix) :]\n\n    return link\n</code></pre></div>\n<p>such that the HTML in messages we have in the database will be relative links if to the current server.</p>",
  "<p>Oh.  I clearly misremembered that it'd been merged as default-on. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>I think it'd just need:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git puppet/zulip/manifests/app_frontend_base.pp puppet/zulip/manifests/app_frontend_base.pp</span>\n<span class=\"gh\">index a02e373b5f..0ffedf67d6 100644</span>\n<span class=\"gd\">--- puppet/zulip/manifests/app_frontend_base.pp</span>\n<span class=\"gi\">+++ puppet/zulip/manifests/app_frontend_base.pp</span>\n<span class=\"gu\">@@ -167,7 +167,7 @@ class zulip::app_frontend_base {</span>\n<span class=\"w\"> </span>    include zulip::smokescreen\n<span class=\"w\"> </span>  }\n\n<span class=\"gd\">-  $katex_server = zulipconf('application_server', 'katex_server', false)</span>\n<span class=\"gi\">+  $katex_server = zulipconf('application_server', 'katex_server', true)</span>\n<span class=\"w\"> </span>  $katex_server_port = zulipconf('application_server', 'katex_server_port', '9700')\n\n<span class=\"w\"> </span>  if $proxy_host != '' and $proxy_port != '' {\n</code></pre></div>",
  "<p>OK, it's a little bit more than that.  PR incoming.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/30345\">#30345</a>.</p>",
  "<p>As part of <a href=\"https://github.com/zulip/zulip/pull/29667\">#29667</a>, I have created a new <code>has:followed</code> operator that returns messages in topics that the user has followed.</p>\n<p>Here's the query:</p>\n<div class=\"codehilite\"><pre><span></span><code>SELECT message_id, flags\nFROM zerver_usermessage\nJOIN zerver_message ON zerver_usermessage.message_id = zerver_message.id\nWHERE user_profile_id = 33\nAND EXISTS (\n    SELECT 1\n    FROM zerver_usertopic\n    WHERE zerver_usertopic.user_profile_id = 33\n    AND zerver_usertopic.visibility_policy = 3\nAND upper(zerver_usertopic.topic_name) = upper(zerver_message.subject)\n    AND zerver_usertopic.recipient_id = zerver_message.recipient_id\n)\nORDER BY message_id DESC\nLIMIT 50;\n</code></pre></div>\n<p>Here's the EXPLAIN ANALYZE output</p>\n<div class=\"codehilite\"><pre><span></span><code>                                                                                             QUERY PLAN\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Limit  (cost=265.27..265.28 rows=1 width=12) (actual time=1.442..1.449 rows=50 loops=1)\n   -&gt;  Sort  (cost=265.27..265.28 rows=1 width=12) (actual time=1.440..1.443 rows=50 loops=1)\n         Sort Key: zerver_usermessage.message_id DESC\n         Sort Method: top-N heapsort  Memory: 29kB\n         -&gt;  Nested Loop  (cost=256.96..265.26 rows=1 width=12) (actual time=0.311..1.399 rows=170 loops=1)\n               -&gt;  Nested Loop  (cost=256.67..264.45 rows=1 width=4) (actual time=0.301..0.964 rows=170 loops=1)\n                     -&gt;  HashAggregate  (cost=1.00..1.01 rows=1 width=142) (actual time=0.023..0.026 rows=3 loops=1)\n                           Group Key: upper((zerver_usertopic.topic_name)::text), zerver_usertopic.recipient_id\n                           Batches: 1  Memory Usage: 24kB\n                           -&gt;  Seq Scan on zerver_usertopic  (cost=0.00..1.00 rows=1 width=142) (actual time=0.015..0.017 rows=3 loops=1)\n                                 Filter: ((user_profile_id = 30) AND (visibility_policy = 3))\n                                 Rows Removed by Filter: 2\n                     -&gt;  Bitmap Heap Scan on zerver_message  (cost=255.66..263.42 rows=2 width=27) (actual time=0.200..0.305 rows=57 loops=3)\n                           Recheck Cond: ((recipient_id = zerver_usertopic.recipient_id) AND (upper((subject)::text) = upper((zerver_usertopic.topic_name)::text)))\n                           Heap Blocks: exact=157\n                           -&gt;  BitmapAnd  (cost=255.66..255.66 rows=2 width=0) (actual time=0.184..0.184 rows=0 loops=3)\n                                 -&gt;  Bitmap Index Scan on zerver_message_recipient_id_5a7b6f03  (cost=0.00..5.62 rows=179 width=0) (actual time=0.013..0.013 rows=221 loops=3)\n                                       Index Cond: (recipient_id = zerver_usertopic.recipient_id)\n                                 -&gt;  Bitmap Index Scan on zerver_message_realm_upper_subject  (cost=0.00..249.78 rows=52 width=0) (actual time=0.160..0.160 rows=57 loops=3)\n                                       Index Cond: (upper((subject)::text) = upper((zerver_usertopic.topic_name)::text))\n               -&gt;  Index Scan using zerver_usermessage_user_profile_id_message_id_4936d0df_uniq on zerver_usermessage  (cost=0.29..0.81 rows=1 width=12) (actual time=0.002..0.002 rows=1 loops=170)\n                     Index Cond: ((user_profile_id = 30) AND (message_id = zerver_message.id))\n Planning Time: 0.901 ms\n Execution Time: 1.578 ms\n(24 rows)\n</code></pre></div>\n<p>Any suggestions for optimizing the query?</p>",
  "<p>The query plan from a data base with ~no data in it is fundamentally useless to know how it will perform when there is significant data.  Essentially, there is low constant overhead to using an index, so full table scans always win out on tables with a tiny number of rows.</p>",
  "<p>I had populated the db using <code>manage.py populate_db -n5000</code>. How many rows would I require to start seeing significant overhead?</p>",
  "<p>We'll, I can tell from that plan that you have 3 UserTopic rows total. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p><code>populate_db</code> only adds rows for some set of things</p>",
  "<p>Oh lol. Is it possible for you to test it on production?</p>",
  "<p>Tested this on my account on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>:</p>\n<div class=\"codehilite\" data-code-language=\"PostgreSQL SQL dialect\"><pre><span></span><code><span class=\"n\">zulip</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">EXPLAIN</span><span class=\"w\"> </span><span class=\"k\">ANALYZE</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">message_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span>\n<span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"mf\">.</span><span class=\"n\">message_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"mf\">.</span><span class=\"n\">id</span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7</span>\n<span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"k\">EXISTS</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"mf\">1</span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">zerver_usertopic</span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7</span>\n<span class=\"w\">    </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">visibility_policy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3</span>\n<span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"n\">upper</span><span class=\"p\">(</span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">topic_name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">upper</span><span class=\"p\">(</span><span class=\"n\">zerver_message</span><span class=\"mf\">.</span><span class=\"n\">subject</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">recipient_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"mf\">.</span><span class=\"n\">recipient_id</span>\n<span class=\"p\">)</span>\n<span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">message_id</span><span class=\"w\"> </span><span class=\"k\">DESC</span>\n<span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mf\">50</span><span class=\"p\">;</span>\n\n\n<span class=\"w\"> </span><span class=\"k\">Limit</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">22036.69..22036.82</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">50</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">12</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">1760.514..1760.526</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">50</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"n\">Sort</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">22036.69..22044.32</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">3052</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">12</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">1760.512..1760.519</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">50</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"n\">Sort</span><span class=\"w\"> </span><span class=\"k\">Key</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"mf\">.</span><span class=\"n\">message_id</span><span class=\"w\"> </span><span class=\"k\">DESC</span>\n<span class=\"w\">         </span><span class=\"n\">Sort</span><span class=\"w\"> </span><span class=\"k\">Method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">heapsort</span><span class=\"w\">  </span><span class=\"n\">Memory</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">27</span><span class=\"n\">kB</span>\n<span class=\"w\">         </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"n\">Nested</span><span class=\"w\"> </span><span class=\"n\">Loop</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">212.77..21935.31</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">3052</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">12</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">1.781..1751.411</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">22092</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"w\">               </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"n\">Nested</span><span class=\"w\"> </span><span class=\"n\">Loop</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">212.19..2674.88</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">4951</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">1.729..384.689</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">22093</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"n\">HashAggregate</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">211.76..214.72</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">296</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">30</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">1.429..2.263</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">575</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                           </span><span class=\"k\">Group</span><span class=\"w\"> </span><span class=\"k\">Key</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">upper</span><span class=\"p\">((</span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">topic_name</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"nb\">text</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">recipient_id</span>\n<span class=\"w\">                           </span><span class=\"n\">Batches</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"w\">  </span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">Usage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">169</span><span class=\"n\">kB</span>\n<span class=\"w\">                           </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"n\">Bitmap</span><span class=\"w\"> </span><span class=\"n\">Heap</span><span class=\"w\"> </span><span class=\"n\">Scan</span><span class=\"w\"> </span><span class=\"k\">on</span><span class=\"w\"> </span><span class=\"n\">zerver_usertopic</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">8.66..210.27</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">298</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">30</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">0.146..1.121</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">575</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                                 </span><span class=\"k\">Recheck</span><span class=\"w\"> </span><span class=\"n\">Cond</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7</span><span class=\"p\">)</span>\n<span class=\"w\">                                 </span><span class=\"k\">Filter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">visibility_policy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">)</span>\n<span class=\"w\">                                 </span><span class=\"k\">Rows</span><span class=\"w\"> </span><span class=\"n\">Removed</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"k\">Filter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">5</span>\n<span class=\"w\">                                 </span><span class=\"n\">Heap</span><span class=\"w\"> </span><span class=\"n\">Blocks</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"o\">=</span><span class=\"mf\">90</span>\n<span class=\"w\">                                 </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"n\">Bitmap</span><span class=\"w\"> </span><span class=\"k\">Index</span><span class=\"w\"> </span><span class=\"n\">Scan</span><span class=\"w\"> </span><span class=\"k\">on</span><span class=\"w\"> </span><span class=\"n\">zerver_mutedtopic_user_profile_id_4f8a692c</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">0.00..8.59</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">574</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">0.061..0.062</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">582</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                                       </span><span class=\"k\">Index</span><span class=\"w\"> </span><span class=\"n\">Cond</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"k\">Index</span><span class=\"w\"> </span><span class=\"n\">Scan</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">zerver_message_recipient_upper_subject_sender</span><span class=\"w\"> </span><span class=\"k\">on</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">0.43..8.30</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">25</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">0.144..0.653</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">38</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">575</span><span class=\"p\">)</span>\n<span class=\"w\">                           </span><span class=\"k\">Index</span><span class=\"w\"> </span><span class=\"n\">Cond</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">recipient_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">recipient_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"p\">((</span><span class=\"n\">subject</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"nb\">text</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">upper</span><span class=\"p\">((</span><span class=\"n\">zerver_usertopic</span><span class=\"mf\">.</span><span class=\"n\">topic_name</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"nb\">text</span><span class=\"p\">)))</span>\n<span class=\"w\">               </span><span class=\"o\">-&gt;</span><span class=\"w\">  </span><span class=\"k\">Index</span><span class=\"w\"> </span><span class=\"n\">Scan</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage_user_profile_id_71a38b2c30f35402_uniq</span><span class=\"w\"> </span><span class=\"k\">on</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">cost</span><span class=\"o\">=</span><span class=\"mf\">0.57..60.25</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">18</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">12</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"o\">=</span><span class=\"mf\">0.061..0.061</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"o\">=</span><span class=\"mf\">1</span><span class=\"w\"> </span><span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mf\">22093</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"k\">Index</span><span class=\"w\"> </span><span class=\"n\">Cond</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">message_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"mf\">.</span><span class=\"n\">id</span><span class=\"p\">))</span>\n<span class=\"w\"> </span><span class=\"n\">Planning</span><span class=\"w\"> </span><span class=\"nb\">Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">32.120</span><span class=\"w\"> </span><span class=\"n\">ms</span>\n<span class=\"w\"> </span><span class=\"n\">Execution</span><span class=\"w\"> </span><span class=\"nb\">Time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">1760.661</span><span class=\"w\"> </span><span class=\"n\">ms</span>\n<span class=\"p\">(</span><span class=\"mf\">22</span><span class=\"w\"> </span><span class=\"k\">rows</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>200ms doing the same query a second time, so presumably a lot of the time was reading rows into cache.</p>",
  "<p>I would not call that a great query plan, but it seems satisfactory, and probably we're not going to do much better without adding new database indexes / helper tables to support queries like that.</p>",
  "<p>hi this discussion is regarding 3 part of <a href=\"https://github.com/zulip/zulip/issues/30049\">https://github.com/zulip/zulip/issues/30049</a><br>\nI am not sure how to implement this  more specifially want to know, how can we find out if welcome bot does not understand a message the second time , so we can send a different reaction</p>",
  "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"6\" href=\"/#narrow/stream/6-frontend/topic/finding.20out.20if.20weclome.20bot.20does.20not.20understand.20a.20message\">#frontend &gt; finding out if weclome bot does not understand a message</a> by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>.</p>",
  "<p>So I don't think the issue specifies a well to tell. Moved this to <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a>, since all of the code for this feature is in the server.</p>",
  "<p>I think a satisfactory answer could be just to check whether the conversation already contains at least 2 messages from Welcome Bot.</p>",
  "<p>Well in that case </p>\n<p>in <code>zerver\\lib\\onboarding.py</code><br>\n<code>send_welcome_bot_response</code> (<code>SendMessageRequest</code> as parameter) is triggered when user chats with welcome bot<br>\nwhich in turn calls<br>\n<code>select_welcome_bot_response</code>(<code>human_response_lower:str</code> as parameter) </p>\n<p>is it possible to figure out number of messages welcome bot has sent before , using any of these parameters</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"29664\">nikhil singh</span> We need to make database query.</p>",
  "<p>Thanks for the response can you link me some relevant documentation I'm having a hard time figuring out on my own</p>",
  "<p>hello folks <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> !</p>\n<p>i've started working on <a href=\"https://github.com/zulip/zulip/issues/21544\">Improve IPv6 rate-limiting by bucketing</a> issue, and submitted a <a href=\"https://github.com/zulip/zulip/pull/30446\">PR</a></p>\n<p>i'ts not complete yet as i have to figure out the appropriate size (time window) for each of the new imposed buckets, i'm curious to hear your thoughts on this !</p>\n<p><strong>Also i have created an interesting and hopefully helpful diagram as a reference :</strong> <br>\n<a href=\"/user_uploads/2/19/6V37KAyJbtKI8jULmDdL7_gm/Screenshot-from-2024-06-16-21-41-33.png\">Screenshot-from-2024-06-16-21-41-33.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/19/6V37KAyJbtKI8jULmDdL7_gm/Screenshot-from-2024-06-16-21-41-33.png\" title=\"Screenshot-from-2024-06-16-21-41-33.png\"><img src=\"/user_uploads/2/19/6V37KAyJbtKI8jULmDdL7_gm/Screenshot-from-2024-06-16-21-41-33.png\"></a></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"22341\">Prakhar Pratyush</span> <a href=\"#narrow/stream/3-backend/topic/Determining.20if.20welcome.20bot.20has.20already.20replied/near/1827515\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"29664\">nikhil singh</span> We need to make database query.</p>\n</blockquote>\n<p>Thanks,<br>\nI figured out the query part , but Im still in doubt, how to figure out if it is the first time user has sent a message that welcome bot understands.</p>\n<p>I small work around I did was checking if the bot responds wit <code>bot_commands()</code><br>\nreference : <a href=\"https://github.com/zulip/zulip/pull/30278/commits/30664692a7cd7f9dd2fdaadba23ce62b57b4adcb\">https://github.com/zulip/zulip/pull/30278/commits/30664692a7cd7f9dd2fdaadba23ce62b57b4adcb</a></p>\n<p>now we know if the message sent is understood but is it also possible to know if it is the first time bit did not understand something</p>",
  "<p>Also it was mentioned in the linked article of that issue that  : </p>\n<blockquote>\n<p>A /48 is usually the largest prefix given to a single site.</p>\n</blockquote>\n<p>So why does the issue description mention imposing a bucket at  <code>/32</code> ?</p>",
  "<p>Hey! I\u2019m just wondering if this got investigated more</p>",
  "<p>It's not going to make the 9.0 release, which is where most of the focus is at the moment.</p>",
  "<p>But it's something that, I think, is quite interesting to us in general.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"29664\">nikhil singh</span> has marked this topic as resolved.</p>",
  "<p>Thanks <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span>  for the review.</p>\n<p>One thing that always bugged me is setting the fields in  session, by doing the following as suggested (which also seems reasonable to me)  </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># These conditionals ensure that we don't do a session write unless necessary.</span>\n<span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"ip_address\"</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">\"REMOTE_ADDR\"</span><span class=\"p\">]:</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">\"ip_address\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">\"REMOTE_ADDR\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"realm_id\"</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">realm</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">:</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">\"realm_id\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">realm</span>\n</code></pre></div>\n<p><strong>Triggers <code>5</code> extra queries !</strong> in <code>zerver.tests.test_signup.LoginTest.test_register</code> which are the following : </p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"o\">#</span><span class=\"mi\">92</span>\n<span class=\"k\">sql</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"k\">DELETE</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_realmsession\"</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_realmsession\"</span><span class=\"p\">.</span><span class=\"ss\">\"session_key\"</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">'cnmz1kpe7q66dkqpndxc0jrzbndtym8e'</span><span class=\"p\">)</span>\n<span class=\"k\">time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">000</span>\n\n<span class=\"o\">#</span><span class=\"mi\">93</span>\n<span class=\"k\">sql</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_userprofile\"</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"ss\">\"last_login\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'2024-06-19T14:42:07.203320+00:00'</span><span class=\"p\">::</span><span class=\"n\">timestamptz</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_userprofile\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">24</span>\n<span class=\"k\">time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span>\n\n<span class=\"o\">#</span><span class=\"mi\">94</span>\n<span class=\"k\">sql</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_client\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_client\"</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_client\"</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_client\"</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'website'</span><span class=\"w\"> </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">21</span>\n<span class=\"k\">time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span>\n\n<span class=\"o\">#</span><span class=\"mi\">95</span>\n<span class=\"k\">sql</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_userprofile\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.......</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_userprofile\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">21</span>\n<span class=\"k\">time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span>\n\n<span class=\"o\">#</span><span class=\"mi\">96</span>\n<span class=\"k\">sql</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"k\">UPDATE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_realmsession\"</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"ss\">\"session_data\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'some value'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"expire_date\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'2024-07-03T14:42:07.210504+00:00'</span><span class=\"p\">::</span><span class=\"n\">timestamptz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"realm_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"user_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">\"ip_address\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_realmsession\"</span><span class=\"p\">.</span><span class=\"ss\">\"session_key\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'qnqsx9pt8lvu5i1yznjwg6p5rwdsk2b3'</span>\n<span class=\"k\">time</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">001</span>\n</code></pre></div>",
  "<p>Huh.  That looks ... not-right.  That looks like it's effectively deleting the session and making a new one -- which is not a thing which adding some additional fields to the session should trigger.</p>\n<p>We do want to delete and re-create the session on login, to prevent session hijacking.  This smells like in tests, we may be incorrectly <em>not</em> doing that, unless other properties of the session are also changing?</p>",
  "<p>As discussed in <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/Support.20user.20group.20deactivation\">#design &gt; Support user group deactivation</a>, we do not allow deactivating groups which are used as subgroups or used for setting. I have implemented this in <a href=\"https://github.com/zulip/zulip/pull/30504\">#30504</a> <a href=\"https://github.com/zulip/zulip/pull/30504/commits/b1e194d693ece52c68823a1964a73532eff532eb#diff-5fe2fd467528b9af1b4b0d2f9aecb6c73bae3a73c4491339dcb26b81996e051aR118\">here</a>.</p>\n<p>I wanted to discuss about how to handle race conditions here.</p>\n<p>For the subgroups part , we would want to make sure that a group being deactivated does not race with that group being used as a subgroup. I think this is handled well currenlty, as we use <code>select_for_update</code> when accessing the group for deletion and when fetching groups to be used as subgroups and if both requests come together one of them will fail.</p>\n<p>For settings, we do not use <code>select_for_update</code> when fetching group rows to be used for settings. Just wanted to confirm that we can do so and that would be enough to handle the race conditions.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/30142/commits/9a59c53670008fbfc539d3a981d8034620794589#r1649500646\">https://github.com/zulip/zulip/pull/30142/commits/9a59c53670008fbfc539d3a981d8034620794589#r1649500646</a>, we're looking at adding an additional use for the <code>message.type</code> database column originally defined in <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/message.20type.20parameter.2C.20.2324960\">#api design &gt; message type parameter, #24960</a>. I'll post there for discussion about whether this is a good use for the field. But for here, I'd like to ask the question of what sort of database index on <code>message.type</code> is most appropriate.</p>\n<p><a href=\"https://github.com/zulip/zulip/pull/30142\">#30142</a> proposes a <code>(realm, type)</code> index. Since I think we are very unlikely to want to do a query filtering on just those messages that are of the NORMAL/default type, I was thinking we could make it a much smaller index by doing a <code>WHERE type != NORMAL</code> filter on the index. Thoughts?</p>\n<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> FYI.</p>",
  "<p>Yeah, that index is pretty much useless, stats-wise, if we include <code>NORMAL</code> in it.</p>\n<p>Is PostgreSQL smart enough to use the partial index if we query for <code>type = 17</code> when the index is over <code>type != 1</code>?</p>",
  "<p>Not sure, but if it doesn\u2019t, we could also try querying for <code>type != 1 AND type = 17</code>.</p>",
  "<p>Should be easy to verify with <code>EXPLAIN ANALYZE</code></p>",
  "<p>I think that should be sufficient; then the operations of \"Use group X for setting Y\" and \"Deactivate group X\" must be serialized with respect to each other, and whichever operation happens second would presumably fail.</p>",
  "<p>So <a href=\"https://github.com/zulip/zulip/pull/29794\">#29794</a> is a report of problems where our <code>puppet</code> logic for deciding how much memory to allocate to Zulip servers is getting the server's total, not the amount allocated to the container, and thus producing bad results. I posted this on the thread:</p>\n<blockquote>\n<p>One idea would be a <code>zulip.conf</code> setting to override the memory detected for the server -- so you can say \"treat this server as having only 8GB of RAM for calculating how much to use for your services\". I don't think we want a direct setting to change the default process count; there's already one to adjust <code>uwsgi_processes</code> directly though, and manually set that plus <code>queue_worker_multoprocess</code> is probably the best workaround.</p>\n</blockquote>",
  "<p>But I also wonder if the problem is deeper than that; for Docker, our container doesn't even contain the postgres/memcached services, and so the logic around how to allocate memory that we have in <code>puppet</code> is probably basically nonsensical in that context?</p>",
  "<p>This is probably not a thing we'll have time for addressing in 9.0.</p>",
  "<p>hmm, is anyone interested in this ? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
  "<p>left some comments and <a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a> is now updated !</p>",
  "<p>It's definitely of interest but it's a particularly busy time as we work towards the 9.0 release, so I'm unable to focus on threads unrelated to it.</p>",
  "<p>I think it'd be easy to change the bucketing size during review regardless, so I'd not let waiting for an answer to that query block progress.</p>",
  "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># These conditionals ensure that we don't do a session write unless necessary.</span>\n<span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"ip_address\"</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">\"REMOTE_ADDR\"</span><span class=\"p\">]:</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">\"ip_address\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">\"REMOTE_ADDR\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"realm_id\"</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">realm</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">:</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">\"realm_id\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request_notes</span><span class=\"o\">.</span><span class=\"n\">realm</span>\n</code></pre></div>\n<p>Ok, this block of code (which honestly looks so innocent <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>) is also causing a lot of Stripe tests to fail, i don't why, but something tells me that <code>HostDomainMiddleware</code> is the wrong place to save the <code>ip</code> and <code>realm_id</code> in session</p>",
  "<p>Should <code>ipv6/prefix</code> apply also to <a href=\"https://github.com/zulip/zulip/blob/main/zproject/default_settings.py#L288\">sends_email_by_ip</a> ?</p>",
  "<p>I'm not sure I understand the question, but I'd expect every IP-based rate limit to want to be IPv6-aware.</p>",
  "<p>You likely need to check <code>request.user.is_authenticated</code> or that middleware will apply even to unauth requests.</p>",
  "<p>What i mean is that single IPv6 shouldn't   be rate-limited separatly, instead each range (determined by the prefix) should belong to different bucket</p>",
  "<p>now <a href=\"https://github.com/zulip/zulip/blob/main/zproject/default_settings.py#L288\">sends_email_by_ip</a> is a special case which limits email-triggering request by IP to be up to 5 per day.</p>\n<p>Should <code>sends_email_by_ip</code> change to handle different buckets of ipv6 OR it's sufficient/safe to stick to block by single IPv6 in this case ?</p>",
  "<p>I thought we wanted to set those values for anonymous requests as well !</p>\n<p>I think it's good time to take a step back and review our own use cases/requirments, Are we interested in  anonymous sessions that have <code>ip_address</code> and <code>realm_id</code>?</p>",
  "<p>Oh, yeah it would be reasonable to do that for anonymous requests.</p>",
  "<p>So maybe the problem is just in the <code>corporate/</code> billing system, which involves a separate accounts system associated with self-hosted organizations and in particular does not have <code>realm_id</code>s.</p>",
  "<p>I think you probably just want your code to support saving <code>None</code> for that case.</p>",
  "<p>I should add that <code>request.session[\"realm_id\"] = request_notes.realm</code> looks wrong -- don't you want to save <code>.realm_id</code> / <code>.realm.id</code>?</p>",
  "<p>That's probably actually your bug.</p>",
  "<p>I'm pretty sure a single computer can have multiple IPv6 addresses, and that motivates the suggestion to bucket <code>/32</code>. But perhaps you should do some of your own research on best practices for how to do rate-limiting by IPv6 for background.</p>",
  "<p>Hmm? /32 is a larger block than /48, not a smaller one.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> <a href=\"#narrow/stream/3-backend/topic/IPv6.20rate.20limiting/near/1841312\">said</a>:</p>\n<blockquote>\n<p>Hmm? /32 is a larger block than /48, not a smaller one.</p>\n</blockquote>\n<p>Yes, i know</p>",
  "<p>Also i don\u2019t understand the motivation behind imposing a rate limit on /32, when /48 is the largest prefix given as mentioned in the article.</p>",
  "<p>Sorry, wasn't meaning to comment on the <code>/32</code> value being correct, just that we definitely need to bucket, not \"block by single IPv6\" as proposed in the thing I was replying to.</p>",
  "<p>The issue (<a href=\"https://github.com/zulip/zulip/pull/21544\">#21544</a>) suggests bucketing by /64, /48, and /32. Bedo\u2019s question is why /32.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/30278#discussion_r1659008647\">https://github.com/zulip/zulip/pull/30278#discussion_r1659008647</a> we're using this query to find if a message was already sent by welcome bot in DMs with user.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">realm_id</span><span class=\"o\">=</span><span class=\"n\">realm_id</span><span class=\"p\">,</span>\n            <span class=\"n\">sender_id</span><span class=\"o\">=</span><span class=\"n\">welcome_bot</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n            <span class=\"n\">recipient__type_id</span><span class=\"o\">=</span><span class=\"n\">human_user_id</span><span class=\"p\">,</span>\n            <span class=\"n\">content__icontains</span><span class=\"o\">=</span><span class=\"n\">bot_commands</span><span class=\"p\">(),</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>zulip=&gt; explain analyze SELECT 1 AS &quot;a&quot; FROM &quot;zerver_message&quot; INNER JOIN &quot;zerver_recipient&quot; ON (&quot;zerver_message&quot;.&quot;recipient_id&quot; = &quot;zerver_recipient&quot;.&quot;id&quot;) WHERE (UPPER(&quot;zerver_message&quot;.&quot;content&quot;::text) LIKE UPPER(&#39;%`apps`, `profile`, `theme`, `channels`, `topics`, `message formatting`, `keyboard shortcuts`, `help`.%&#39;) AND &quot;zerver_message&quot;.&quot;realm_id&quot; = 2 AND &quot;zerver_recipient&quot;.&quot;type_id&quot; = 10 AND &quot;zerver_message&quot;.&quot;sender_id&quot; = 5) LIMIT 1;\n                                                                            QUERY PLAN\n------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Limit  (cost=0.14..18.00 rows=1 width=4) (actual time=0.031..0.031 rows=0 loops=1)\n   -&gt;  Nested Loop  (cost=0.14..18.00 rows=1 width=4) (actual time=0.030..0.030 rows=0 loops=1)\n         -&gt;  Seq Scan on zerver_recipient  (cost=0.00..1.64 rows=2 width=4) (actual time=0.006..0.010 rows=2 loops=1)\n               Filter: (type_id = 10)\n               Rows Removed by Filter: 78\n         -&gt;  Index Scan using zerver_message_realm_sender_recipient on zerver_message  (cost=0.14..8.17 rows=1 width=4) (actual time=0.009..0.009 rows=0 loops=2)\n               Index Cond: ((realm_id = 2) AND (sender_id = 5) AND (recipient_id = zerver_recipient.id))\n               Filter: (upper(content) ~~ &#39;%`APPS`, `PROFILE`, `THEME`, `CHANNELS`, `TOPICS`, `MESSAGE FORMATTING`, `KEYBOARD SHORTCUTS`, `HELP`.%&#39;::text)\n Planning Time: 23.432 ms\n Execution Time: 0.081 ms\n(10 rows)\n</code></pre></div>\n<p>I think we need to avoid sequential scan on <code>Recipient</code> table ?</p>",
  "<p>FYI <span class=\"user-mention\" data-user-id=\"29664\">@nikhil singh</span></p>",
  "<p>I'd expect in a larger database, and <code>sender</code> index to work.</p>",
  "<p>Oh this part looks weird: <code>recipient__type_id=human_user_id,</code>, you should be doing a <code>recipient=</code> query.</p>",
  "<p><code>recipient=human_user.recipient_id</code> should fix your table scan.</p>",
  "<p>I don't know where I got /32's from.  I think we only need to go up to /48.</p>",
  "<p>Yeah, the lack of other services absolutely would skew whatever estimates may have existed (which I've never looked closely at , FWIW).</p>\n<p>But I also think we're not looking pre-9.0.</p>",
  "<p>I looked at serveral PRs migrating from <code>@has_request_variables</code> to <code>@typed_endpoint</code> but still not sure when <code>Pydantic.Json[]</code> should be imposed on the parameter ?</p>",
  "<p>Sorry for my mistyping, it's indeed <code>.realm.id</code></p>",
  "<p>After some debugging, any attempt in any middleware (i even created a separate custom one for this purpose) to save <code>realm_id</code> or <code>ip_address</code> in the session, triggers those <code>5</code> extra queries which i really have no idea why, so yes it's not only <code>realm_id</code>, it happens with any field.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/delete_user_sessions.20performance/near/1770478\">said</a>:</p>\n<blockquote>\n<p>We should be saving the <code>realm_id</code> when creating sessions (<code>do_login</code> I think?)... and I guess it would not be a bad idea to add it to existing logged-in sessions when processing <code>/</code> requests with it unset, as well, so that we can rely on it being present a few weeks after making the change.</p>\n</blockquote>\n<p>I will switch to this suggestion from before, i will save those fields in <a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/home.py#L172\">views.home_real</a>.<br>\nI think it's still somehow generic (less generic than a middleware though) my only concern is that would this function be called for every request we are interested in ? i.e. for every request we want those fields to be saved in its session ?</p>",
  "<p><span class=\"user-mention\" data-user-id=\"29998\">@Kenneth R</span> probably can give his thinking on the topic to start.</p>",
  "<p>I guess there's actually a product question hidden here: Do we want the IP address used for the initial login, or the one used for the last request (which will presumably vary)?</p>",
  "<p>We might want to think about naming the parameter based on which of those we're computing.</p>",
  "<p>Current implementation is not particularly for initial login nor last request, it's for <code>/</code> requests</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> We use <code>Json</code> for parameters that are expected to be <code>Json</code> encoded. You can look at the <code>.yaml</code> file to see which parameters require <code>Application/Json</code>. When using <code>REQ</code> we were using  <code>json_validator</code> to parse and validate the data.</p>",
  "<p>Pydantic's <code>Json</code> parses the encoded Json string and validates it against the type mentioned.</p>",
  "<p>We generally use <code>Json</code> in REST Apis to ensure uniformity as each language implements <code>Arrays/ Objects/ Hashmaps/</code> differently, in order for seamless cross language communication we encode the data into a <code>Json string</code>.</p>",
  "<p>When converting endpoints what you should be looking for is if the existing endpoint uses <code>json_validator</code>. If you're still unsure, you can check the <code>.yaml</code> file for that endpoint.</p>",
  "<p>I get it now, Thanks <span class=\"user-mention silent\" data-user-id=\"29998\">Kenneth R</span> !</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/30337\">#30337</a>, we're adding <code>transaction.atomic(savepoint=False)</code> decorator to <code>add_subscription_backend</code> view.</p>\n<p>Now, In tests where we make POST requests to this view and receive error responses that results in rolling back the entire test transaction.</p>\n<p>One possible solution is to wrap the POST requests to this view in tests with <code>with transaction.atomic():</code> -- this will help us to avoid rolling back the entire test transaction. (This is the PR's current approach)</p>\n<p>Any better way to handle this ?</p>",
  "<p>Another way would be to use <code>ZulipTransactionTestCase</code>but we use the current approach in the PR at other places in our code, so I didn't try the other -- and the <code>ZulipTransactionTestCase</code> approach would require us to make sure to minimize leakage.</p>",
  "<blockquote>\n<p>but we use the current approach in the PR at other places in our code</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Test when invalid user group is supplied; transaction needed for</span>\n<span class=\"c1\"># error handling</span>\n<span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">():</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_delete</span><span class=\"p\">(</span><span class=\"s2\">\"/json/user_groups/1111\"</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assert_json_error</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"s2\">\"Invalid user group\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>I don't love the set of options here. I think that pattern is fine in moderation, but if we're doing that in 50+ places for a single function, I think we need to have a test helper function take care of it.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> suggested to use <code>db_default</code> <a href=\"https://github.com/zulip/zulip/pull/29191#discussion_r1668005753\">here</a> for <code>web_channel_default_view</code> in <code>UserBaseSettings</code>. See <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/Left.20sidebar.20channel.20click.20behaviour.20setting.20.2330565\">#api design &gt; Left sidebar channel click behaviour setting #30565</a> </p>\n<p>Django documentation - <a href=\"https://docs.djangoproject.com/en/5.0/ref/models/fields/#db-default\">https://docs.djangoproject.com/en/5.0/ref/models/fields/#db-default</a></p>",
  "<p>One concern here, as raised in the comments of this stack overflow <a href=\"https://stackoverflow.com/questions/77665050/what-does-the-new-field-db-default-of-django-5-imply-should-we-use-it-by-def\">answer</a>, is that:</p>\n<blockquote>\n<p>The perceived difference is that if you only set the db_default your models wont get populated on creation with the default value. Furthermore other rescources that access your database also use this default instead of default that only enforces this on the django ORM level.\" I'm not sure I understand correctly that. If I define a field like\u00a0<code>size = models.IntegerField(db_default=2)</code>\u00a0on my model but do not provide a value for\u00a0<code>size</code>\u00a0when I create an instance of my model, the value of\u00a0<code>size</code>\u00a0will be\u00a0<code>None</code>\u00a0and not\u00a0<code>2</code>? - Yes</p>\n</blockquote>",
  "<p>We use <code>UserBaseSettings</code> in a loop in <code>create_user.py</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">settings_name</span> <span class=\"ow\">in</span> <span class=\"n\">UserBaseSettings</span><span class=\"o\">.</span><span class=\"n\">property_types</span><span class=\"p\">:</span>\n</code></pre></div>\n<p>which means, If I understand the above correctly, is that <code>web_channel_default_view</code> will be <code>None</code> here instead of the default value we would otherwise want it to be. So, looks like we are better off using <code>default</code> in this case.</p>",
  "<p>With that change</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">realm_id</span><span class=\"o\">=</span><span class=\"n\">realm_id</span><span class=\"p\">,</span>\n            <span class=\"n\">sender_id</span><span class=\"o\">=</span><span class=\"n\">welcome_bot</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n            <span class=\"n\">recipient_id</span><span class=\"o\">=</span><span class=\"n\">human_user_recipient_id</span><span class=\"p\">,</span>\n            <span class=\"n\">content__icontains</span><span class=\"o\">=</span><span class=\"n\">commands</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>I populated the database with 3000 messages, the query plan was:</p>\n<div class=\"codehilite\"><pre><span></span><code>                                                                                             QUERY PLAN\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Limit  (cost=0.28..4.31 rows=1 width=4) (actual time=0.068..0.069 rows=0 loops=1)\n   -&gt;  Index Scan using zerver_message_realm_id_849a39c8 on zerver_message  (cost=0.28..4.31 rows=1 width=4) (actual time=0.065..0.066 rows=0 loops=1)\n         Index Cond: (realm_id = 2)\n         Filter: ((recipient_id = 119) AND (sender_id = 5) AND (upper(content) ~~ &#39;%`APPS`, `PROFILE`, `THEME`, `CHANNELS`, `TOPICS`, `MESSAGE FORMATTING`, `KEYBOARD SHORTCUTS`, `HELP`.%&#39;::text))\n Planning Time: 0.821 ms\n Execution Time: 0.113 ms\n(6 rows)\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>, do you think the right approach here is to run <code>explain analyze</code> for the query on CZO and update the comment on <a href=\"https://github.com/zulip/zulip/pull/30278#discussion_r1668576722\">the PR</a> accordingly (which index it uses) ?</p>",
  "<p>FYI: <span class=\"user-mention\" data-user-id=\"29664\">@Nikhil Singh</span></p>",
  "<p>That query plan is bad but it's probably bad statistics in the dev environment, not a problem with the SQL. Probably <code>VACUUM ANALYZE</code> might help the development environment simulate better. </p>\n<p>Can you give the actual SQL to run? I don't know a good way to get Django to tell me what the SQL would be for a <code>QuerySet</code> to pass into <code>EXPLAIN ANALYZE</code>.</p>",
  "<p>Oh, my idea was to use both <code>default</code> and <code>db_default</code>.</p>",
  "<p>So we'd set identical defaults in Django and in the database.</p>",
  "<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"ss\">\"a\"</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_message\"</span><span class=\"w\"> </span><span class=\"k\">WHERE</span>\n<span class=\"p\">(</span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"ss\">\"zerver_message\"</span><span class=\"p\">.</span><span class=\"ss\">\"content\"</span><span class=\"p\">::</span><span class=\"nb\">text</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"s1\">'%`apps`, `profile`, `theme`, `channels`, `topics`, `message formatting`, `keyboard shortcuts`, `help`.%'</span><span class=\"p\">)</span>\n<span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_message\"</span><span class=\"p\">.</span><span class=\"ss\">\"realm_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_message\"</span><span class=\"p\">.</span><span class=\"ss\">\"recipient_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">119</span>\n<span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">\"zerver_message\"</span><span class=\"p\">.</span><span class=\"ss\">\"sender_id\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>You need to replace the <code>realm_id</code>, <code>recipient_id</code> (Any human user's recipient_id) and <code>sender_id</code>(welcome bot ID)</p>",
  "<p>Is there a reason we are specifically doing it for this field?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/db_default.20vs.20default.20for.20Django.20models/near/1851327\">said</a>:</p>\n<blockquote>\n<p>Oh, my idea was to use both <code>default</code> and <code>db_default</code>.</p>\n</blockquote>\n<p>Updated the PR with that.</p>",
  "<p>Am i the only one who experienced Bad Gateway in the browser just a few minutes ago ?</p>",
  "<p><a href=\"/user_uploads/2/ae/cikh4Epq6teeItKvV_PCfLZR/E5FACFC9-FD1D-42AD-93EA-C6CB46A9647A.jpg\">E5FACFC9-FD1D-42AD-93EA-C6CB46A9647A.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/ae/cikh4Epq6teeItKvV_PCfLZR/E5FACFC9-FD1D-42AD-93EA-C6CB46A9647A.jpg\" title=\"E5FACFC9-FD1D-42AD-93EA-C6CB46A9647A.jpg\"><img src=\"/user_uploads/2/ae/cikh4Epq6teeItKvV_PCfLZR/E5FACFC9-FD1D-42AD-93EA-C6CB46A9647A.jpg\"></a></div>",
  "<p>There was a somewhat bumpy upgrade see <a class=\"stream-topic\" data-stream-id=\"415\" href=\"/#narrow/stream/415-chat.2Ezulip.2Eorg/topic/experiments\">#chat.zulip.org &gt; experiments</a>. Checking <a class=\"stream-topic\" data-stream-id=\"8\" href=\"/#narrow/stream/8-commits/topic/zulip.20.2F.20chat.2Ezulip.2Eorg\">#commits &gt; zulip / chat.zulip.org</a> is a good way to see if we're likely doing a <a href=\"http://chat.zulip.org\">chat.zulip.org</a> upgrade at a given moment.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5140\">Aman (amanagr)</span> <a href=\"#narrow/stream/3-backend/topic/db_default.20vs.20default.20for.20Django.20models/near/1851357\">said</a>:</p>\n<blockquote>\n<p>Is there a reason we are specifically doing it for this field?</p>\n</blockquote>\n<p><code>db_default</code> is new, it wasn't an option until the upgrade to Django 5 a couple months ago. I think we might want to use it more broadly?</p>",
  "<p>Confirmed this uses the <code>zerver_message_realm_sender_recipient</code> index and is extremely fast.</p>",
  "<p>I noticed when printing SQL statements while debugging a test that we seem to be fetching all foreign keys on <code>bot_owner</code> when fetching a <code>UserProfile</code> object in various code helper functions in <code>zerver/models/users.py</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>def get_user_profile_by_id(user_profile_id: int) -&gt; UserProfile:\n    return UserProfile.objects.select_related(\n        &quot;realm&quot;,\n        &quot;realm__can_access_all_users_group&quot;,\n        &quot;realm__can_access_all_users_group__named_user_group&quot;,\n        &quot;bot_owner&quot;,\n    ).get(id=user_profile_id)\n</code></pre></div>\n<p>Does anyone remember why? I imagine we might need a few fields, like <code>role</code>, to check permissions for whether bots can send certain types of messages, but the vast majority of the owner's properties should be irrelevant.</p>",
  "<p>Makes sense to me since we run queries outside of Django sometimes.</p>",
  "<p>It's not about that -- it's mainly about preventing errors when creating the object type during the few seconds between when the migration is run and when the code is updated in a Zulip Cloud deployment.</p>",
  "<p>With just <code>default</code> set when adding a new row on the user table, for example, creating new users will 500 during that interim, but with <code>db_default</code> it won't.</p>\n<p>Obviously this is a much bigger problem on a table like <code>Message</code> than <code>UserProfile</code>.</p>",
  "<p>I see. So, unless we want <code>db_default</code> and <code>default</code> to different in a field, we should always define both of them for any field that can use it.</p>",
  "<p>I think so. There may be some detail we're missing.</p>",
  "<p>Okay, added to my TODO for later.</p>",
  "<p>Is this only necessary because the <code>@transaction.atomic</code> decorator is on the top view function?  We don't have to do this <em>everywhere</em> we roll back transactions currently, AFAIK?</p>",
  "<p><code>git log</code> says <a href=\"https://github.com/zulip/zulip/commit/3e09a219299a40e8edc73b8fba222604010822f2\">3e09a219299a40e8edc73b8fba222604010822f2</a>:</p>\n<blockquote>\n<p>models: Pass realm and bot_owner as args to select_related.</p>\n<p>This commit updates the select_related calls in queries to get<br>\nUserProfile objects in get_user, get_user_by_delivery_email,<br>\nget_user_profile_by_id, get_user_profile_by_id_in_realm and<br>\nget_user_profile_by_api_key functions to pass \"realm\" and<br>\n\"bot_owner\" as arguments to select_related call.</p>\n<p>These functions are used in different parts of code to get<br>\nthe UserProfile object and realm is accessed using the user<br>\nobject at many places.</p>\n<p>\"bot_owner\" field is also used in some places like to check<br>\nwhether a bot can access a stream, to check whether a user<br>\ncan change modify another user, in webhooks code to send the<br>\nmessage to the bot owner, and in tests as well. There can be<br>\nsome places where the bot owner is not required and in most<br>\nsuch cases the code would only be accessed for human users,<br>\nwhich means the bot_owner will be null for these cases and<br>\nwould avoid complexity and performance issues.</p>\n<p>Note that previously, no arguments were passed to select_related<br>\nand thus only realm field was fetched during the query.</p>\n</blockquote>",
  "<p>Yeah I guess the thing we could do is switch to asking for <code>bot_owner__foo</code> for the handful of fields we need, rather than fetching the whole object. I don't remember what options Django offers for that.</p>",
  "<p>Yeah I'm a bit confused as to the scope of when this technique is relevant, and we probably should figure that out in case we're accidentally papering over some real problem.</p>",
  "<p>Is the trick being used here is that the <code>with transaction.atomic</code> in the test itself is using a savepoint, and that can be rolled back without the test transaction being rolled back?</p>",
  "<p>Anyway it's possible that <code>with self.captureOnCommitCallbacks(execute=True):</code> is the technique we should be using rather than these hacky transactions.</p>",
  "<p>So the <code>can_create_users</code> permission (whether a user can create other user accounts via the API) is something we want to restrict heavily in Zulip Cloud to require support approval for anti-abuse reasons.</p>\n<p>Is there a policy reason we don't have that permission default to enabled for owners, or otherwise be web-administrable for self-hosted systems?</p>",
  "<p>Is it a rule of thumb to always use <code>is False</code> or <code>is True</code> when checking <code>bool</code> variables ?</p>",
  "<p>Because <a href=\"https://github.com/zulip/zulip/blob/4d34a902c9c2c7df87ded0ce5a05df7ccf052c97/zerver/models/custom_profile_fields.py\">here</a> <code>not</code> is the one being used for <code>allow_deactivated</code> which is <code>bool</code></p>",
  "<p>Don\u2019t use <code>is True</code> or <code>is False</code> unless the type is more complicated than <code>bool</code>, e.g., you need to distinguish <code>False</code> from <code>None</code>.</p>",
  "<p>oka</p>",
  "<p>It is probably a good idea to merge this for 9.0-beta1.</p>",
  "<p>I'll try to look, but I'm trying to push hard on thumbnails right now</p>",
  "<p>Yeah I may look tomorrow or we can see who gets to it Monday, don't distract yourself from thumbnailing.</p>",
  "<p>I merged <a href=\"https://github.com/zulip/zulip/pull/30840\">#30840</a>, which modernizing the Python 3 typing syntax that we use. You may find your changes fail tests when rebasing them; in theory the linter fixers should work. But mostly the changes are pretty straightforward:</p>\n<ul>\n<li><code>List</code> =&gt; <code>list</code></li>\n<li><code>Union[foo, bar]</code> =&gt; <code>foo | bar</code></li>\n<li><code>Optional[foo]</code> =&gt; <code>foo</code> | None`</li>\n</ul>",
  "<p>Does it mean that we can also start using Python 3.10+ features like pattern matching?</p>",
  "<p>That\u2019s been allowed since <a href=\"https://github.com/zulip/zulip/pull/29458\">#29458</a>; you don\u2019t need to wait for a mass migration of old code to start writing better new code.</p>",
  "<p>I fixed the CI in <a href=\"https://github.com/zulip/zulip/pull/30345\">#30345</a> by replacing <code>/home/zulip/deployments/current/static/webpack-bundles/katex_server.js</code> \u2192 <code>/home/zulip/prod-static/webpack-bundles/katex_server.js</code>. Was there anything else to do here?</p>",
  "<p>I think very possibly no.</p>",
  "<p>I can tweak the docs and merge soon, thanks!</p>",
  "<p>Thank you, <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span>!</p>",
  "<p>Can someone explain what are the benefits of migrating to that modern Python 3 typing syntax ?</p>",
  "<p>Having to do fewer iterations of \"gaaah, forgot to add <code>Dict</code> to the <code>from typing import ...</code> line\"</p>",
  "<p>Fewer imports from <code>typing</code> (<code>list</code> is a builtin); fewer brackets to balance; less confusion about <a href=\"https://zulip.readthedocs.io/en/latest/testing/mypy.html#use-optional-and-none-correctly\">what <code>Optional</code> means</a>; alignment with the upstream direction.</p>",
  "<p>See also the rationales for <a href=\"https://peps.python.org/pep-0585/\">PEP 585</a> and <a href=\"https://peps.python.org/pep-0604/\">PEP 604</a>.</p>",
  "<p>OK I expect we'll have time to look at this after 9.0, but I've not attention for just about anything not making the release.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/30957\">#30957</a> has the following question:</p>\n<blockquote>\n<p>I was trying to set up outgoing email and I finally discovered the problem was that the Django smtp module was trying to use STARTTLS instead of regular TLS. Django's email module uses two different settings to control that behavior:\u00a0<code>EMAIL_USE_TLS</code>\u00a0and\u00a0<code>EMAIL_USE_SSL</code>\u00a0(not the most intuitive). To use TLS from the start instead of STARTTLS, set\u00a0<code>EMAIL_USE_SSL</code>\u00a0to True.</p>\n<p>This should be documented both in the docs and in the settings file.</p>\n<p>I can open a PR for this if it's OK.</p>\n</blockquote>",
  "<p>I feel like we had another report along these lines a while ago.</p>",
  "<p>Ahh yes, this is <a href=\"https://github.com/zulip/zulip/pull/30292\">#30292</a></p>",
  "<p>OK posted asking if <a href=\"https://github.com/zulip/zulip/pull/30292\">#30292</a> fixed this for them, or there's feedback on what we can improve further.</p>",
  "<p>Is it possible this change somehow broken KaTeX in the development environment? It seems broken in my instance right now; I've done no investigation yet.</p>",
  "<p>(Seems to work on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>, so likely to be dev-only, whatever the problem is)</p>",
  "<p>Yeah, it can\u2019t possibly work in development.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/30971\">#30971</a></p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/30446\">PR</a> is now updated and effectively blocks IPV6 by <code>/64</code>.<br>\nMy previous changes were wrong, in short, i didn't parse the correct prefix from the IP.</p>",
  "<p>I have updated news, I have read this research paper<a href=\"https://essay.utwente.nl/96014/1/van%20Heijningen_BA_EEMCS.pdf\">Exploring The State of Rate Limiting in IPv6</a>, with a date of <code>July 7, 2023</code>.</p>\n<p>I will summarize some key points from that research:</p>\n<ol>\n<li>\n<p>Scarcity of academic papers about this topic, it's under-researched.</p>\n</li>\n<li>\n<p>The open-source space clearly knows a little about the impact that IPv6 can have on rate limiting. As is shown by us not being able to find a single open-source web server that does anything more than per-IP rate limiting for IPv6 by default.</p>\n</li>\n<li>\n<p>As per public <code>NGINX</code> documentation, default rate limiting behaviour by default on IPv6 is per-IP. However the key variable in <code>limit_req_zone</code> can be modified to allow blocking for <code>/64</code>, or larger, Zulip does use <code>NGINIX</code> and I assume you choose to put the rate-limiting implementation on <code>Zulip</code> backend zerver instead of <code>NGINX</code> to have more customization and control I guess ? rather than just a configuration, right ?</p>\n</li>\n<li>\n<p>rate limit should at least be done per <code>/64</code> block, this is how arguably the industry leader <code>Cloudflare</code> implements it. This is reasonable, as per <code>RFC</code> spec a minimum of a /64 block should be assigned per end user.</p>\n</li>\n<li>\n<p>Making this limit higher, like <code>/48</code> might cause some issues for real users, as it was found that many of the same <code>/48</code> blocks are used by hundreds if not thousands of end users. On top of that, while <code>per-/48</code> blocking is too strict, it is also useless against an attacker who is motivated enough to acquire an <code>ASN</code> number. Which gives them access to a <code>/32</code> or more in many RIR regions. Effectively giving them <code>2^16</code> usable addresses <code>per-/48</code> rate limiting.</p>\n</li>\n<li>\n<p>Given difficulty to obtain a new IPv6 prefix to use, whether that is through an ISP or through a RIR via an <code>ASN</code>. We think the best approach to prevent abuse is to monitor for either <code>/56</code>, <code>/48</code> or <code>/32</code> blocks that suddenly have a large spike in requests, and then permanently block that range. Thus requiring the attacker to obtain a new IPv6 address range. System administrators can decide the whitelist of block the range based on previous traffic data, associated ASN, request rate and types of requests to determine if this is an attack or benign user traffic/growth. This should stop most attackers who does not have access to a botnet, that, combined with blocking <code>per-/64</code> seems to be most reasonable.<br>\nThis approach does have the flaw of if an attacker knows about this implementation, he can just simply scale up his <code>DDoS</code> attack slowly, thus not showing any suspicion.</p>\n</li>\n</ol>",
  "<p>Is it worth implementing the approach suggested in  point <code>6</code> taking point <code>5</code> into account ?<br>\n<strong>How much % of Zulip requests use <code>IPV6</code> ?</strong></p>",
  "<p>Just adding a backlink that this got more discussion in <a class=\"stream-topic\" data-stream-id=\"9\" href=\"/#narrow/stream/9-issues/topic/updating.20multiple.20settings\">#issues &gt; updating multiple settings</a>, and is now tracked as <a href=\"https://github.com/zulip/zulip/pull/30995\">#30995</a>.</p>",
  "<p>I imagine the percent of requests that are IPv6 varies a lot with installation; I'm sure there are some self-hosted systems where it might be 100%.</p>",
  "<p>But I guess for many forms of rate-limiting, we care most about Zulip Cloud.</p>",
  "<p>what does self-hosted mean like on premise?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/IPv6.20rate.20limiting/near/1894598\">said</a>:</p>\n<blockquote>\n<p>we care most about Zulip Cloud.</p>\n</blockquote>\n<p>which has <code>chat.zulip.org</code> right ?</p>",
  "<p>No.  Zulip Cloud is <a href=\"http://zulip.com\">zulip.com</a>, and hosts *.zulipchat.com; <a href=\"http://chat.zulip.org\">chat.zulip.org</a> is entirely separate.</p>",
  "<p>And yes, \"self-hosted\" mostly means \"on-premise\" but is generally a more accurate term since many folks may have a ec2 host or something which isn't exactly \"on\" their \"premises.\"</p>",
  "<p>Hey, wondering whether it's possible to add some custom metadata when creating a new zulip message? (doesn't necessarily have to go into the UI as long as it's possible to retrieve via the API) E.g. perhaps something similar to custom profile fields <a href=\"https://zulip.com/help/custom-profile-fields\">https://zulip.com/help/custom-profile-fields</a> </p>\n<p>Doesn't look like there is anything in the API, but wondering whether it's possible at least in theory in the backend? </p>\n<p>My usecase is that I'm importing messages into Zulip from elsewhere, and I'd like to keep track of the original message ID in zulip, so it's easier to make the import process idempotent. I could keep track of ids in some external file/database, but if it's possible to do it in Zulip, it's gonna make it a bit easier :)</p>",
  "<p>We don't have any custom metadata fields on messages, no.  You could ... hack something into the message history, by making the initial content be the remote-message-id, and then editing it into the real content?</p>\n<p>But I think it's probably going to be easier to use an external mapping table, honestly.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10349\">@Mateusz Mandera</span> were we planning to delete the <code>user_presence</code> queue worker in favor of just processing those writes directly in Django? I seem to recall that was a thing we were considering with the new presence architecture just to reduce memory and complexity.</p>",
  "<p>Yeah, I think <a href=\"#narrow/stream/378-api-design/topic/presence.20rewrite/near/1588833\">https://chat.zulip.org/#narrow/stream/378-api-design/topic/presence.20rewrite/near/1588833</a> was the main message giving an elaboration on the reasons to do it. </p>\n<p>I don't think it was discussed much beyond that, but it seemed like a good plan and we deferred it to avoid complicating the recent major changes to this system further.</p>",
  "<p>OK. Probably less important than <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/presence.20data.20cutoffs\">#api design &gt; presence data cutoffs</a>, but likely also not a lot of work. I think we should plan to do this, for 9.1 if we can't get it into 9.0, since it reduces memory usage. We may want it soon just because the new thumbnailing worker adds some memory usage.</p>",
  "<p>From what it looks like, <a href=\"https://valkey.io/\">Valkey</a> would be the best way forward unless Redis is being eliminated.</p>",
  "<p>Looks like that's one of the five forks discussed in the LWN article <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> linked above:<br>\n<a href=\"https://lwn.net/SubscriberLink/966631/6bf2063136effa1e/\">https://lwn.net/SubscriberLink/966631/6bf2063136effa1e/</a></p>",
  "<p>Yes it is.<br>\n<a href=\"https://thenewstack.io/valkey-will-not-just-be-a-redis-retread/\">https://thenewstack.io/valkey-will-not-just-be-a-redis-retread/</a><br>\nhas a nice summary on the whole development since it's inception.</p>\n<p>And from what I've seen Fedora will <a href=\"https://fedoraproject.org/wiki/Changes/Replace_Redis_With_Valkey\">Replace Redis With Valkey</a> in version 41, and other Distributions also starting down the same route</p>\n<ul>\n<li><a href=\"https://build.opensuse.org/request/show/1182574\">Suse</a></li>\n<li><a href=\"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1068342\">Debian</a></li>\n</ul>",
  "<p>Hmm, I tried exporting a Zulip realm in my dev server and import it back again in the same machine after doing <code>./manage.py populate_db</code>to reset the db. I found that all near-links are broken because during import we remapped a bunch of foreign keys but didn't do any reformatting for messages with near-links in them. So, the near-links in messages still point to the old message id, channel id etc. </p>\n<p>In this example, you can see that the channel ID has been remapped from 223 to 271 during import, which breaks a near-link. This near-link used to work in the original realm before it was exported and imported back again.<br>\n<a href=\"/user_uploads/2/9/LcFMNo94XomPNYZnwuis_QZf/image.png\">remapping during import process</a><br>\n<a href=\"/user_uploads/2/d5/_D9DQQyVwPKy-KVBJtlDbAQF/image.png\">near-link broken from remapping</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/9/LcFMNo94XomPNYZnwuis_QZf/image.png\" title=\"remapping during import process\"><img data-original-dimensions=\"1771x491\" src=\"/user_uploads/thumbnail/2/9/LcFMNo94XomPNYZnwuis_QZf/image.png/840x560.webp\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/d5/_D9DQQyVwPKy-KVBJtlDbAQF/image.png\" title=\"near-link broken from remapping\"><img data-original-dimensions=\"1895x1050\" src=\"/user_uploads/thumbnail/2/d5/_D9DQQyVwPKy-KVBJtlDbAQF/image.png/840x560.webp\"></a></div>",
  "<p>Here's another example with a more familiar Realm:</p>\n<h3>Before Export (original realm)</h3>\n<p>The near-link messages works<br>\n<a href=\"/user_uploads/2/3a/HECJYNDpqdxkAdJqJEv5APz3/before-export.webm\">before-export.webm</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/2/3a/HECJYNDpqdxkAdJqJEv5APz3/before-export.webm\" title=\"before-export.webm\"><video preload=\"metadata\" src=\"/user_uploads/2/3a/HECJYNDpqdxkAdJqJEv5APz3/before-export.webm\"></video></a></div><h3>Imported</h3>\n<p>The same near-link messages are broken<br>\n<a href=\"/user_uploads/2/4d/1A403dYliThEUBSv50Xq3jOi/after-import.webm\">after-import.webm</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/2/4d/1A403dYliThEUBSv50Xq3jOi/after-import.webm\" title=\"after-import.webm\"><video preload=\"metadata\" src=\"/user_uploads/2/4d/1A403dYliThEUBSv50Xq3jOi/after-import.webm\"></video></a></div>",
  "<p>Just bumping this Nix discussion. Since the <code>subdirectory</code> blocker seems to be resolved, are we working towards this for the next major release after 9.0?</p>",
  "<p>Great. Given that we use OS-vendor packages for redis, probably there's nothing active for us to do on this point other than use that once it works its way into the distributions we support.</p>",
  "<p>Yeah I think this is known.</p>",
  "<p>I don't see an issue for it. What we need to do is pass <code>fix_message_rendered_content</code> the renumbering map for message IDs used by the <code>re_map_foreign_keys</code> class of function. It may be a bit annoying to manage because of how sharding of message imports are done.</p>",
  "<p>Read the code surrounding <code>import_message_data</code>; I think you should be able to do a prep PR fixing this and then be able to use it for your Slack import improvement efforts. (I think it's known only in the sense that I feel like we talked about it in relation to that Slack import threading project before).</p>",
  "<p>Ah, okay. Now that I re-read this discussion, I noticed that you've already pointed out this issue <a href=\"#narrow/stream/3-backend/topic/exporting.20.26.20importing.20messages.20with.20.2Fnear.2F.20link/near/1816044\">here</a>. </p>\n<p>I'll add the fix for this as a prep commit in <a href=\"https://github.com/zulip/zulip/pull/30166\">#30166</a></p>",
  "<p>submitted <a href=\"https://github.com/zulip/zulip/pull/31100\">#31100</a> to track the near-link remapping during import issue</p>",
  "<p>As we use the docker version here, we will most likely swap our Redis container with Valkey sooner, so we can let you know if we run into any unforeseen issues while doing so.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/31120\">#31120</a> </p>\n<p>This pull request is to demonstrate the issues with the <code>to</code> parameter when converting to typed_endpoint.</p>\n<p>The OpenApi schema requires <code>to</code> to be a Json encoded <code>str | int | list[int] list[str]</code>. But, the existing implementation also accepts a raw string. We also use a raw string in many of the test cases(that are failing right now due to the conversion). </p>\n<p>Allowing the endpoint to accept a raw string fixes these errors but raises an error with OpenApi tests which requires <code>to</code> to accept only <code>Json</code>.</p>",
  "<p>One solution would be to skip this particular endpoint in the OpenApiTests ?</p>",
  "<p>How can i trigger the following endpoints  of <a href=\"https://github.com/zulip/zulip/blob/a43c0693b7ee065390f00612f9f685e899ef3959/zerver/views/auth.py\">zerver/views/auth.py</a> in dev ?</p>\n<ul>\n<li><code>remote_user_sso()</code></li>\n<li><code>get_email_and_realm_from_jwt_authentication_request()</code></li>\n<li><code>remote_user_jwt()</code></li>\n<li><code>jwt_fetch_api_key()</code></li>\n<li><code>api_fetch_api_key()</code></li>\n<li><code>json_fetch_api_key()</code></li>\n</ul>",
  "<p>Also it's worth mentioning that <code>Sign up with Google</code>, <code>Sign up with Example</code> and <code>Sign up with Apple</code> don't work in dev and raise an error, Is this expected ?</p>",
  "<p>And no email is sent to me upon signing up with email</p>",
  "<p>Details on this ? Was there any attack mitigation done by the rate limiter ? <br>\n<a href=\"https://x.com/tabbott3/status/1736865108561977827\">https://x.com/tabbott3/status/1736865108561977827</a></p>",
  "<p>The mitigation was done upstream of the Django rate-limiter -- the performance of our rate-limiter is very insufficient for the request rates in a serious DOS.</p>",
  "<p>We are designing a tool to update already sent <a class=\"stream-topic\" data-stream-id=\"1\" href=\"/#narrow/stream/1-announce/topic/Zulip.20updates\">#announce &gt; Zulip updates</a> messages.</p>\n<p>Previous discussion: <a class=\"stream-topic\" data-stream-id=\"438\" href=\"/#narrow/stream/438-release-management/topic/zulip_updates.20items.20of.20note\">#release management &gt; zulip_updates items of note</a> (PR: <a href=\"https://github.com/zulip/zulip/pull/31118\">#31118</a>)</p>\n<p>Currently, <code>check_update_message</code> doesn't allow bots to edit message.</p>\n<p>Should we make changes to allow bots to edit messages ? Was it for some security reasons to not allow bots, or just because the need has never arisen till now?</p>",
  "<p>I'm pretty sure the error messages explain you need to do configuration for those. See <a href=\"https://zulip.readthedocs.io/en/latest/development/authentication.html\">https://zulip.readthedocs.io/en/latest/development/authentication.html</a>.</p>",
  "<p>Where is the code that limitation? I would have thought bots could; I'm pretty sure I've seen some sort of integration that does so.</p>",
  "<p>I wonder if what's failing in this code path is the <code>access_message</code> check -- because the system bot may not actually have access to this message that it sent.</p>",
  "<p>Yes, <code>access_message</code> check.</p>\n<p>Also, a small tweak here to not use bot's realm:</p>\n<div class=\"codehilite\"><pre><span></span><code>        # We render the message using the current user&#39;s realm; since\n        # the cross-realm bots never edit messages, this should be\n        # always correct.\n        # Note: If rendering fails, the called code will raise a JsonableError.\n        rendering_result = render_incoming_message(\n            message,\n            content,\n            user_profile.realm,\n            mention_data=mention_data,\n        )\n</code></pre></div>\n<p>and <code>message_content_edit_limit_seconds</code> relaxation in this case.</p>",
  "<blockquote>\n<p>; I'm pretty sure I've seen some sort of integration that does so.</p>\n</blockquote>\n<p>Okay, I'll check. They must not be using <code>check_update_message</code> directly then.</p>",
  "<blockquote>\n<p>Is this only necessary because the\u00a0<code>@transaction.atomic</code>\u00a0decorator is on the top view function?</p>\n</blockquote>\n<p>We are adding <code>@transaction.atomic(savepoint=False)</code> decorator to different view or action functions as needed (for <code>send_event</code> -&gt; <code>send_event_on_commit</code>).</p>\n<p>Now when an error is raised in such a function it rolls back the test's transaction. Earlier we had no <code>transaction.atomic</code> decorator no those functions so error raised was not disturbing test's transaction.</p>",
  "<p>One thing I noticed today is we already have functions with that decorator but the tests are passing without error. It is because in those tests we don't perform any DB operation after the transaction is rolled back due to error.</p>\n<p>For example, in <code>main</code>, run this test with one line change and the test will fail:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>   def test_api_with_mirrordummy_user(self) -&gt; None:\n<span class=\"w\"> </span>       self.login(\"iago\")\n<span class=\"w\"> </span>       desdemona = self.example_user(\"desdemona\")\n<span class=\"w\"> </span>       change_user_is_active(desdemona, False)\n\n<span class=\"w\"> </span>       desdemona.is_mirror_dummy = True\n<span class=\"w\"> </span>       desdemona.save(update_fields=[\"is_mirror_dummy\"])\n\n<span class=\"w\"> </span>       # Cannot deactivate a user which is marked as \"mirror dummy\" from importing\n<span class=\"w\"> </span>       result = self.client_post(f\"/json/users/{desdemona.id}/reactivate\")\n<span class=\"w\"> </span>       self.assert_json_error(\n<span class=\"w\"> </span>           result, \"Cannot activate a placeholder account; ask the user to sign up, instead.\"\n<span class=\"w\"> </span>       )\n<span class=\"gi\">+     UserProfile.objects.count()</span>\n</code></pre></div>",
  "<p>I picked this test randomly so I'll verify if this is the case with all such functions or not.</p>",
  "<p>I wonder whether savepoints are the right solution for this in the test suite? We really don't want to use them in production, but I can't recall whether the problems with them would impact tests. </p>\n<p>Something like <code>@transaction.atomic(savepoint=settings.TEST_SUITE)</code> is at least code we could write if that would let the test suite do rollbacks where needed. I feel very uncertain about this class of proposal though.</p>",
  "<p>Turning really subtle transaction bugs into really subtle transaction bugs that only happen in production seems like a good plan to be uncertain about.</p>",
  "<p>Trying to understand the context here\u2014is <a href=\"https://github.com/zulip/zulip/pull/30337\">#30337</a> the wrong link?</p>",
  "<p>Maybe we\u2019re talking about <a href=\"https://github.com/zulip/zulip/pull/30504\">#30504</a>?</p>",
  "<p><a href=\"https://github.com/zulip/zulip/commit/d92eb77c98407e18bf0832129179ba67624a4de3\">d92eb77c98407e18bf0832129179ba67624a4de3</a> was part of <a href=\"https://github.com/zulip/zulip/pull/39337\">#39337</a> but was merged as a prefix, so the PR only shows the last commit.</p>",
  "<blockquote>\n<p>Now, In tests where we make POST requests to this view and receive error responses that results in rolling back the entire test transaction.</p>\n</blockquote>\n<p>This doesn\u2019t match my understanding of how any of the forms of Django\u2019s transactions work.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">():</span>\n    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query1</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">():</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query2</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"c1\"># here query1 is visible but not query2</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">():</span>\n    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query1</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">(</span><span class=\"n\">durable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Django disallows that and raises RuntimeError, although it</span>\n        <span class=\"c1\"># has an exemption if the outer transaction is the one from</span>\n        <span class=\"c1\"># TestCase, in which case this works like the above</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">():</span>\n    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query1</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">(</span><span class=\"n\">savepoint</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query2</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"c1\"># here both query1 and query2 are visible</span>\n        <span class=\"k\">pass</span>\n</code></pre></div>",
  "<p>Oh, my understanding is wrong.</p>\n<blockquote>\n<p><code># here both query1 and query2 are visible</code></p>\n</blockquote>\n<p>Actually, Django (\u2265 1.7) puts the connection in an error state where all queries raise <code>TransactionManagementError</code>, until the actual rollback happens at the end of the outer atomic block.</p>",
  "<p>That makes me a little less concerned about playing <code>savepoint=False</code> games in production; a production-only <code>TransactionManagementError</code> is bad but not arbitrarily bad, I guess.</p>",
  "<p>When testing the execution time for some endpoint on my machine and it takes <code>1 min</code> for example, does it take the same amount in production when that endpoint runs in zulip remote server ? taking into account the conditions are similar (same number of users, same number of streams, etc..) ?</p>",
  "<p>If you have the same database contents and the same deployment settings and the same memory and the same CPU and the same network, then potentially.</p>\n<p>I'm also not clear if by \"local\" you mean \"using <code>./tools/run-dev</code>\" in which case the answer is even more likely no, since there are several debugging layers which slow down performance (e.g. enabling hot-reload).</p>",
  "<p>Oh, and \"same database contents\" also has to include that the server has the same query plans because it has generated the same statistics from them.</p>\n<p>Your question kinda boils down to \"what can impact performance\" which is ... a very broad question. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<p>As discussed in <a class=\"stream-topic\" data-stream-id=\"243\" href=\"/#narrow/stream/243-mobile-team/topic/shrinking.20the.20initial.20load\">#mobile-team &gt; shrinking the initial load</a> (<a href=\"#narrow/stream/243-mobile-team/topic/shrinking.20the.20initial.20load/near/1907256\">context</a>, <a href=\"#narrow/stream/243-mobile-team/topic/shrinking.20the.20initial.20load/near/1907263\">benchmarks</a>, <a href=\"#narrow/stream/243-mobile-team/topic/shrinking.20the.20initial.20load/near/1907276\">discussion</a>), we're currently having the server compress its responses with the equivalent of <code>gzip -1</code>, and it'd be useful to crank that setting up.</p>\n<p>Doing so will make the app's data take less time to download, speeding up start time (on all platforms), at the cost of some CPU on the server. Options range from very cheap and clearly worth it, to more expensive and not so clear.</p>",
  "<p>Here's an experiment, where I took an <a href=\"https://chat.zulip.org/api/register-queue\">/api/register-queue</a> response from <a href=\"http://chat.zulip.org\">chat.zulip.org</a> and compressed it on my desktop:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ( TIMEFORMAT=$&#39;time: %3Rs wall&#39;; for i in {1..9}; do time s=$(&lt;register2.json gzip -$i | wc -c); p=$(perl -e &#39;printf &quot;%5.1f%%&quot;, (100 * (&#39;&quot;$s&quot;&#39; / 1735534 - 1))&#39;); echo &quot;gzip -$i: $p ($s)&quot;; echo; done )\ntime: 0.078s wall\ngzip -1:   0.0% (1735534)\n\ntime: 0.076s wall\ngzip -2:  -2.8% (1687804)\n\ntime: 0.081s wall\ngzip -3:  -4.2% (1663174)\n\ntime: 0.096s wall\ngzip -4:  -7.2% (1609811)\n\ntime: 0.111s wall\ngzip -5:  -9.3% (1573484)\n\ntime: 0.146s wall\ngzip -6: -10.1% (1560497)\n\ntime: 0.172s wall\ngzip -7: -11.5% (1536507)\n\ntime: 0.239s wall\ngzip -8: -12.8% (1513160)\n\ntime: 0.253s wall\ngzip -9: -13.1% (1507389)\n</code></pre></div>",
  "<p>So for example I think <code>gzip -3</code> seems clearly worth the cost \u2014 it takes very little more CPU than <code>gzip -1</code> does, and saves a good few percent off the time to download the data.</p>",
  "<p>Eyeballing, probably 5 is about the sweet spot. We could probably do a fancier cost/benefit analysis.</p>",
  "<p>For how to apply whatever tuning we choose, <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> described it <a href=\"#narrow/stream/243-mobile-team/topic/shrinking.20the.20initial.20load/near/1907276\">here</a> \u2014 see <a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_comp_level\">documentation</a>.</p>",
  "<p>Tangentially, we can pre-gzip our static assets with higher compression settings, and <a href=\"https://docs.nginx.com/nginx/admin-guide/web-server/compression/#sending-compressed-files\">nginx can serve those</a> instead of re-compressing on the fly.</p>",
  "<p>Your eyeballs may be misleading you; much of what\u2019s being measured at the lower levels there is the time to fork+exec <code>gzip</code> (and <code>wc</code>).</p>\n<p>(Edit: probably not \u201cmost\u201d.)</p>",
  "<p>Out of 78 milliseconds? That'd be a pretty slow fork/exec.</p>\n<p>Even on the slower desktop I'm sitting at today, that accounts for 5ms:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ time s=$(&lt;/dev/null gzip -1 | wc -c)\n\ntime: 0.005s wall (0.003s u, 0.003s s)\n</code></pre></div>",
  "<p>Repeating this experiment on my <code>page_params</code> from CZO, which includes the subscriber matrix, I see a very odd non-monotonicity in the compressed size.</p>\n<div class=\"codehilite\"><pre><span></span><code>gzip -1:   0.0% (3836818)\ngzip -2:  -7.3% (3558216)\ngzip -3:  -7.7% (3539640)\ngzip -4:  -1.2% (3791765)\ngzip -5:  -2.2% (3752704)\ngzip -6:  -2.5% (3739512)\ngzip -7:  -3.1% (3716316)\ngzip -8:  -3.8% (3692018)\ngzip -9:  -4.0% (3683956)\n</code></pre></div>",
  "<p>Maybe <code>gzip -4</code> and higher is really bad at numbers\u2026?</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>seq<span class=\"w\"> </span><span class=\"m\">1000000</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>gzip<span class=\"w\"> </span>-3<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-c\n<span class=\"go\">1715594</span>\n<span class=\"gp\">$ </span>seq<span class=\"w\"> </span><span class=\"m\">1000000</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>gzip<span class=\"w\"> </span>-4<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-c\n<span class=\"go\">2161922</span>\n</code></pre></div>",
  "<p>Weird!</p>\n<p>Well, maybe <code>gzip -3</code> is the right answer, then.</p>",
  "<p>I think first, we should look at changing tests that seem to be taking advantage of the undocumented behavior unintentionally. For example, this test clearly does not intend to change the encoding of <code>to</code> between the two calls:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"k\">def</span> <span class=\"nf\">test_stream_message_mirroring</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mit_user</span><span class=\"p\">(</span><span class=\"s2\">\"starnine\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"s2\">\"Verona\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">do_change_can_forge_sender</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api_post</span><span class=\"p\">(</span>\n            <span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"/api/v1/messages\"</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"channel\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"n\">orjson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"s2\">\"Verona\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"sender\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mit_email</span><span class=\"p\">(</span><span class=\"s2\">\"sipbtest\"</span><span class=\"p\">),</span>\n                <span class=\"s2\">\"client\"</span><span class=\"p\">:</span> <span class=\"s2\">\"zephyr_mirror\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"topic\"</span><span class=\"p\">:</span> <span class=\"s2\">\"announcement\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"content\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Everyone knows Iago rules\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"forged\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"n\">subdomain</span><span class=\"o\">=</span><span class=\"s2\">\"zephyr\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assert_json_success</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n        <span class=\"n\">do_change_can_forge_sender</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api_post</span><span class=\"p\">(</span>\n            <span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"/api/v1/messages\"</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"channel\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Verona\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"sender\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mit_email</span><span class=\"p\">(</span><span class=\"s2\">\"sipbtest\"</span><span class=\"p\">),</span>\n                <span class=\"s2\">\"client\"</span><span class=\"p\">:</span> <span class=\"s2\">\"zephyr_mirror\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"topic\"</span><span class=\"p\">:</span> <span class=\"s2\">\"announcement\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"content\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Everyone knows Iago rules\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"forged\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"n\">subdomain</span><span class=\"o\">=</span><span class=\"s2\">\"zephyr\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assert_json_error</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"s2\">\"User not authorized for this query\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>So please do a prep PR with that cleanup, and we can merge those fixes, which just improve the test suite, and then look at what remains.</p>",
  "<p>It may be that we will need a test to verify the raw string behavior still works for compatibility, but then it's potentially just a small number of tests that need that, and we can control that with a parameter to <code>self.api_post</code> to skip validation for just that one call, which is nicely localized and safe.</p>",
  "<p>Disabling OpenAPI validation for the whole endpoint seems problematic and best avoided.</p>",
  "<p>Hmm, I suspect the correct answer here is that we should be using <code>transaction.atomic(durable=True)</code>, not <code>savepoint=False</code> for those outer view-function transactions, which we don't expect to be composed inside another production transaction.</p>",
  "<p>We likely only want to use <code>savepoint=False</code> on the small number of lower-level <code>actions</code> methods that are sometimes called inside another transaction intentionally. </p>\n<p>At least, my understanding of the situation is that <code>durable=True</code> does not have the same problems with rollback inside the test suite that <code>savepoint=False</code> does.</p>\n<p>I think there's been a bit of cargo-culting of <code>savepoint=False</code>, and we might want to take the time to audit all the uses of that and add comments noting where they're called inside another transaction as comments, and switch those where that is not a thing to use <code>durable=True</code> instead.</p>",
  "<p>I think bots would be directly using the Zulip API to edit messages; their code would not be in ours codebase.</p>",
  "<p>Cross-realm bots are different; there's just the 3 of them, and we have no prior art of them using that code path.</p>",
  "<p>It should be possible to plumb the realm through that code path to support using a cross-realm bot there. But we might also want to look at finishing <a href=\"https://github.com/zulip/zulip/pull/17520\">https://github.com/zulip/zulip/pull/17520</a> instead, since this is not an urgent need.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/nginx.20gzip.20settings/near/1908005\">said</a>:</p>\n<blockquote>\n<p>Tangentially, we can pre-gzip our static assets with higher compression settings, and <a href=\"https://docs.nginx.com/nginx/admin-guide/web-server/compression/#sending-compressed-files\">nginx can serve those</a> instead of re-compressing on the fly.</p>\n</blockquote>\n<p><a href=\"https://github.com/zulip/zulip/pull/31203\">#31203</a> for a quick stab at this -- it reduces initial JS + CSS by 22%.</p>\n<table>\n<thead>\n<tr>\n<th>Compression</th>\n<th>Initial pageload JS + CSS bytes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gzip 1</td>\n<td>1422872</td>\n</tr>\n<tr>\n<td>gzip 3</td>\n<td>1337990</td>\n</tr>\n<tr>\n<td>gzip 9</td>\n<td>1170759</td>\n</tr>\n<tr>\n<td>zopfli 15</td>\n<td>1108267</td>\n</tr>\n</tbody>\n</table>",
  "<p>We need to not put the precompressed objects into our release tarballs, however.</p>",
  "<p>I mean, we could, but it's wasted space.</p>",
  "<p>Hmm, why is it wasted space to put them into the release tarballs?</p>",
  "<p>Suddenly, anonymous requests no longer save a session, whether using the default django session or the new custom session</p>",
  "<p>Testing this in both <code>main</code> and the PR branch</p>",
  "<p>Did a recent PR do this ? Is this expected ?</p>",
  "<p>Ok, for some reason it works now, no idea how; especially that I was testing this in<code>main</code></p>",
  "<p>Anyways, <a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a> is now updated and the conflicts are resolved</p>",
  "<p>They're duplicated information which won't compress well</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/local.20performance.20vs.20cloud.20performance/near/1907693\">said</a>:</p>\n<blockquote>\n<p>I'm also not clear if by \"local\" you mean \"using <code>./tools/run-dev</code>\"</p>\n</blockquote>\n<p>Yes, that's what I meant</p>",
  "<p>Generaly a remote cloud server for Zulip should have more CPU power than a normal end-user PC, right?</p>",
  "<p>It's possible to <a href=\"https://zulip.readthedocs.io/en/latest/production/requirements.html\">run Zulip on a single-processor machine with 2GB of RAM</a>.</p>\n<p>I suspect your development machine is bigger than that.</p>",
  "<p>It's definitely yes</p>",
  "<p>So in short it's not a yes/no question, it depends on many variable things</p>",
  "<p>That's pretty much all of profiling and performance analysis, yup. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
  "<blockquote>\n<p>At least, my understanding of the situation is that\u00a0<code>durable=True</code>\u00a0does not have the same problems with rollback inside the test suite that\u00a0<code>savepoint=False</code>\u00a0does.</p>\n</blockquote>\n<p>This should result in a RunTime error because for <a href=\"https://docs.djangoproject.com/en/5.0/topics/db/transactions/#django.db.transaction.atomic\"><code>durable = True</code></a>:</p>\n<blockquote>\n<p>If the\u00a0<code>atomic</code>\u00a0block is nested within another it raises a\u00a0<code>RuntimeError</code>.</p>\n</blockquote>\n<p>Here the test's transaction is the outer transaction ? Let me check...</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/31212\">#31212</a>:</p>\n<blockquote>\n<p>The default compression level is 1; increasing this to 3 takes a small amount more CPU time (single-digit ms on multi-MB transfers), but results in a small but noticeable (4-7%) percentage better compression in JSON content.</p>\n<p>Assuming a 25 megabit connection (the current average data rate for cell phones in the U.S.), a 2MB file which is shrunk an additional 4% saves approximately 25 milliseconds of transfer time; thus the additional few milliseconds of CPU-time is well worth the cost. For faster connections (e.g. 100 megabit), the tradeoff is more or less a wash.</p>\n</blockquote>",
  "<p>And I guess we still need the uncompressed copy as well, because not every client can process them? Might be worth checking the size, if it's just +3%, might not be worth complexity to avoid.</p>",
  "<p>The test transaction is excluded from the durable check.</p>",
  "<p>nginx does have the ability to uncompress the compressed version and stream that to clients who don't support gzip, which lets you not store the original.</p>",
  "<p>But that's in the More Magic realm, since you're serving files from a path which doesn't exist on disk, which might surprise folks.</p>",
  "<p>+3% on the total 107 MB tarball?  It's not going to cause that.</p>",
  "<p>Yeah I guess it's ~+1%? I think it's worth just shipping in the tarball, then; given that with Python dependencies included, downloading a server release is hundreds of megabytes, adding a once-per-upgrade megabyte to save end users of that system 300KB every time they fetch the web app uncached is gonna be a good trade.</p>",
  "<p>OK, then <a href=\"https://github.com/zulip/zulip/pull/31203\">#31203</a> is good for a review.  I'd appreciate eyes on the webpack config part -- I'm worried that it will build those gzip versions even for <code>./tools/run-dev</code>, but I don't know how to check that.</p>",
  "<p>Based on the adjacent plugins, this certainly sounds like it'll run in development. </p>\n<p>Probably if there's something less hacky than <code>threshold: production ? 100000000 : 1</code> (only compress files up to than 1GB in production, and up to 1 byte in development)?</p>",
  "<p>That said, the development environment IS a pretty good simulation of relative performance. On average, if a change makes something 3x faster in development than it was before, it will often be in the range of 2-4x faster in production. It very much depends on the production configuration, especially for things dependant on round-trip-time count, where it might really matter on how far the Zulip server is from its database on the network.</p>",
  "<p>Merged, and deploying that here, so we should be able to do any end-to-end verification that the change is in fact behaving as intended. I think if so, we can backport to 9.x; there's really not a lot of risk in changing this <code>gzip</code> setting beyond \"The configuration option has a typo and crashes <code>nginx</code>\".</p>",
  "<p>This removal is now deployed on <a href=\"http://chat.zulip.org\">chat.zulip.org</a>.</p>",
  "<p>Just bumping the question here.</p>",
  "<p>One thing to note is that we still have a <code>user_presence</code> queue visible in <code>rabbitmqctl list_queues</code>, as well as the <code>invites</code> one we removed earlier this year. I'm not sure that has any real cost, and we don't have a trivial way to get rid of those, but figured I'd mention it.</p>",
  "<p>Probably we want to live with this for a while before looking at backporting the commit, even though it does reduce memory usage, so I think we should not schedule this change for 9.1.</p>",
  "<p>No change in the presence endpoint response time:<br>\n<a href=\"/user_uploads/2/e/Cqaxwj7LR6fVNE911p3L0Zlg/Screenshot-2024-08-01-at-2.22.14PM.png\">Screenshot-2024-08-01-at-2.22.14PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/e/Cqaxwj7LR6fVNE911p3L0Zlg/Screenshot-2024-08-01-at-2.22.14PM.png\" title=\"Screenshot-2024-08-01-at-2.22.14PM.png\"><img data-original-dimensions=\"3308x1536\" src=\"/user_uploads/thumbnail/2/e/Cqaxwj7LR6fVNE911p3L0Zlg/Screenshot-2024-08-01-at-2.22.14PM.png/840x560.webp\"></a></div>",
  "<p>That's correct!</p>\n<p><a href=\"https://github.com/django/django/blob/b478cae00643d6730746f2614792b35a7d3187ff/django/db/transaction.py#L185C1-L193C14\">Related code:</a></p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"p\">(</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">durable</span>\n    <span class=\"ow\">and</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">atomic_blocks</span>\n    <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">atomic_blocks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">_from_testcase</span>   <span class=\"o\">&lt;-------</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"A durable atomic block cannot be nested within another atomic block.\"</span>\n    <span class=\"p\">)</span>\n</code></pre></div>",
  "<p>I'll move forward with this approach:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/make.20add_subscription_backend.20atomic/near/1908205\">said</a>:</p>\n<blockquote>\n<p>Hmm, I suspect the correct answer here is that we should be using <code>transaction.atomic(durable=True)</code>, not <code>savepoint=False</code> for those outer view-function transactions, which we don't expect to be composed inside another production transaction.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/make.20add_subscription_backend.20atomic/near/1908210\">said</a>:</p>\n<blockquote>\n<p>We likely only want to use <code>savepoint=False</code> on the small number of lower-level <code>actions</code> methods that are sometimes called inside another transaction intentionally.</p>\n</blockquote>",
  "<p>Sounds good, glad we figured that out! We should probably write some documentation about the strategy somewhere after finishing the sweeps too, for posterity.</p>",
  "<p>I'm working on reducing reliance on stream names and moving to <code>stream_id</code> instead, on the frontend. One place this came up was <code>page_params.narrow_stream</code> which is a stream name. What would it take to support stream id instead? Can I just add it to the result of <code>detect_narrowed_window</code> and <code>build_page_params_for_home_page_load</code>? Should I keep the stream name for back compatibility? I haven't worked much in this layer (or touched the backend much) so wanted to double check what best practice would be.</p>",
  "<p>So what is the current state of this ? Since the messages here are 1 year old I don't want to read possibly obsolete messages/numbers</p>",
  "<p>I want to work on <a href=\"https://github.com/zulip/zulip/pull/27835\">#27835</a><br>\nBased on the PR description, it's enough to optimize <a href=\"https://github.com/zulip/zulip/blob/30e20734d30a975d7cf913a1568ab6cf93d1ed76/zerver/actions/message_send.py#L1611\">get_recipients_for_user_creation_events()</a> only for now, right ?</p>",
  "<p>Also how to reproduce that?</p>",
  "<p>I tried sending DM from a guest account, but the <code>nested loops</code> block didn't execute</p>",
  "<p>I've opened <a href=\"https://github.com/zulip/zulip/pull/31276\">#31276</a> to stop redirecting API requests and allowing them through NGINX and then handling them with a new middleware. It took me a while to learn and figure everything out and finding the solution for this. </p>\n<p>Would love some feedback on the current implementation/direction :)</p>",
  "<p>It's definitely a lot better; maybe not lightning fast. Probably nothing accessible to work on with further profiling in advance.</p>",
  "<p>I want to understand this, can you elaborate more ? or rephrase ?</p>",
  "<p>Now HTTP requests  get redirected by django instead of Nginix ?</p>",
  "<p><a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/Your.20API.20Shouldn.27t.20Redirect.20HTTP.20to.20HTTPS\">#api design &gt; Your API Shouldn't Redirect HTTP to HTTPS</a> has more on this</p>",
  "<p>But we're just outright rejecting HTTP calls in Django now</p>",
  "<p>Ok I've reproduced this, can <span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> explain what exactly does this function do ?</p>\n<p>The func says: </p>\n<blockquote>\n<p>This function returns a dictionary with data about which users would<br>\n    receive stream creation events due to gaining access to a user.</p>\n</blockquote>\n<p>What are <code>receive stream creation events due to gaining access to a user</code>? and more importantly why is this relevant when sending a DM ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/stream/3-backend/topic/Optimize.20get_recipients_for_user_creation_events/near/1912702\">said</a>:</p>\n<blockquote>\n<p>Based on the PR description, it's enough to optimize <a href=\"https://github.com/zulip/zulip/blob/30e20734d30a975d7cf913a1568ab6cf93d1ed76/zerver/actions/message_send.py#L1611\">get_recipients_for_user_creation_events()</a> only for now, right ?</p>\n</blockquote>\n<p><code>get_accessible_user_ids</code> which is mentioned in the PR doesn't seem to be triggered also when a limited guest send a DM</p>",
  "<p>There is a typo in the comment there, it should be <code>receive user creation events due to gaining access to a user</code>.</p>",
  "<p>A limited guest can access a user if they follow either one of the two conditions below -</p>\n<ul>\n<li>They are subscriber of at least one stream that the limited guest is subscribed to.</li>\n<li>They have participated in a DM or group DM with limited guest.</li>\n</ul>\n<p>So, this function is basically sends events to the limited guests about the users which they will now again access to as a result of receiving a DM (or group DM).</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/stream/3-backend/topic/Optimize.20get_recipients_for_user_creation_events/near/1914343\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/stream/3-backend/topic/Optimize.20get_recipients_for_user_creation_events/near/1912702\">said</a>:</p>\n<blockquote>\n<p>Based on the PR description, it's enough to optimize <a href=\"https://github.com/zulip/zulip/blob/30e20734d30a975d7cf913a1568ab6cf93d1ed76/zerver/actions/message_send.py#L1611\">get_recipients_for_user_creation_events()</a> only for now, right ?</p>\n</blockquote>\n<p><code>get_accessible_user_ids</code> which is mentioned in the PR doesn't seem to be triggered also when a limited guest send a DM</p>\n</blockquote>\n<p>That was updated in <a href=\"https://github.com/zulip/zulip/pull/28213\">#28213</a>.</p>",
  "<p>Thanks for the clarification !</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/Optimize.20get_recipients_for_user_creation_events/near/1914414\">said</a>:</p>\n<blockquote>\n<p>The users which they will now again access to</p>\n</blockquote>\n<p>And that state of access gained is saved or it's determined on every DM sent ?</p>",
  "<p><code>get_recipients_for_user_creation_events</code> is still optimizable right ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/stream/3-backend/topic/Optimize.20get_recipients_for_user_creation_events/near/1914493\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> <a href=\"#narrow/stream/3-backend/topic/Optimize.20get_recipients_for_user_creation_events/near/1914414\">said</a>:</p>\n<blockquote>\n<p>The users which they will now again access to</p>\n</blockquote>\n<p>And that state of access gained is saved or it's determined on every DM sent ?</p>\n</blockquote>\n<p>The code is used to send events, so the clients update the data that they had from <code>/register</code> response. Next time when client queries for <code>/register</code> they will have the updated data.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/stream/3-backend/topic/Optimize.20get_recipients_for_user_creation_events/near/1914494\">said</a>:</p>\n<blockquote>\n<p><code>get_recipients_for_user_creation_events</code> is still optimizable right ?</p>\n</blockquote>\n<p>I am not sure. While opening the issue, the plan was to remove use of <code>get_accessible_user_ids</code>, which is already done and then see if we can optimize it more after <a href=\"https://github.com/zulip/zulip/pull/25713\">#25713</a>. But you can see if we can optimize it further.</p>",
  "<p>I think we want to convert link like the second example here into <code>[foo](https://foo.com)</code> instead of <code>https://foo.com|foo</code> no?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># This is at data_import/slack_message_conversion.py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_link_format</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    1. Converts '&lt;https://foo.com&gt;' to 'https://foo.com'</span>\n<span class=\"sd\">    2. Converts '&lt;https://foo.com|foo&gt;' to 'https://foo.com|foo'</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">has_link</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"n\">LINK_REGEX</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">):</span>\n        <span class=\"n\">converted_text</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">has_link</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">converted_text</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">has_link</span>\n</code></pre></div>",
  "<p><a href=\"/user_uploads/2/8a/O0K87DN1f9MfaeAIpEidpUPf/image.png\">Slack</a><br>\n<a href=\"/user_uploads/2/1e/GbvP7ge-FSwAkmI98jbh61HE/image.png\">imported to Zulip</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/8a/O0K87DN1f9MfaeAIpEidpUPf/image.png\" title=\"Slack\"><img data-original-dimensions=\"1241x658\" src=\"/user_uploads/thumbnail/2/8a/O0K87DN1f9MfaeAIpEidpUPf/image.png/840x560.webp\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/1e/GbvP7ge-FSwAkmI98jbh61HE/image.png\" title=\"imported to Zulip\"><img data-original-dimensions=\"1241x632\" src=\"/user_uploads/thumbnail/2/1e/GbvP7ge-FSwAkmI98jbh61HE/image.png/840x560.webp\"></a></div>",
  "<p>I'll include a fix for this in <a href=\"https://github.com/zulip/zulip/pull/31311\">#31311</a></p>",
  "<p>Yeah, that's very strange.  Looks like a bug dating all the way back to the original Slack conversion support for links in  <a href=\"https://github.com/zulip/zulip/commit/b583f1f0ff080e5c394c08ba1faae898fe85d9d1\">b583f1f0ff080e5c394c08ba1faae898fe85d9d1</a></p>",
  "<p>Just an update that <a href=\"https://github.com/zulip/zulip/pull/31310\">#31310</a> was quite a smooth migration of a bunch of call points thanks to this strategy.</p>",
  "<p>Yeah I think this calculation is something that <a href=\"https://github.com/zulip/zulip/pull/25713\">#25713</a> would make a lot easier. So maybe we should hold off until that progresses further. <span class=\"user-mention\" data-user-id=\"28120\">@Rohan Gudimetla</span> are you working on the next steps of the <a href=\"https://github.com/zulip/zulip/pull/25713\">#25713</a> migration? If so, we can link the thread about that one in this conversation.</p>",
  "<p>Probably the commit message and/or code comments in that PR should make that clear.</p>",
  "<p>I\u2019ve read the linked post, it is clear now</p>",
  "<p>Compatibility is not important for this undocumented feature, which appears to not work in <code>main</code> right now. The way to access it is this sort of thing: <code>http://localhost:9991?stream=devel&amp;topic=foo</code> -- note the lack of a <code>#</code>. It's intended for a single-conversation Zulip embed window.</p>",
  "<p>So my recommendation would be to do the most straightforward conversion to using stream IDs, maybe including renaming it to <code>?channel=17</code>, to migrate your code path as desired.</p>",
  "<p>But ultimately it's a thing that we're not investing in, and if/when we do, we'll likely want to rework it in various ways, such as to remove the existing encoding in favor of just passing a complete narrow in the request.</p>",
  "<p>(A use case would be a \"pop out this conversation in a new window\" feature, a la old school gchat)</p>",
  "<p>Sure, but PRs should have those links / explain themselves without needing to have a conversation like this one.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"24937\">@Joseph Ho</span> can you explain the strategy in this PR somewhat more? I'm not sure why we want to do this rather than just returning an error from <code>nginx</code> on port 80.</p>",
  "<p>I'll try updating the commit messages and PR to futher clarify the details. But I decided to return the error in Django so that we can return an error message that follows our standard error schema. Since there is also the possibility of an auto key revoker, I figured it might be better configured if we had a middleware in Django to handle the requests.</p>",
  "<p>I guess it is possible for NGINX to return an error message following:</p>\n<div class=\"codehilite\" data-code-language=\"Nginx configuration file\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\"># Error page directive for a 404 error</span>\n<span class=\"w\">        </span><span class=\"k\">error_page</span><span class=\"w\"> </span><span class=\"mi\">404</span><span class=\"w\"> </span><span class=\"s\">/custom_404.json</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">location</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s\">/custom_404.json</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kn\">internal</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kn\">default_type</span><span class=\"w\"> </span><span class=\"s\">application/json</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kn\">return</span><span class=\"w\"> </span><span class=\"mi\">404</span><span class=\"w\"> </span><span class=\"s\">'</span><span class=\"p\">{</span><span class=\"kn\">\"error\":</span><span class=\"w\"> </span><span class=\"s\">\"Not</span><span class=\"w\"> </span><span class=\"s\">Found\",</span><span class=\"w\"> </span><span class=\"s\">\"status\":</span><span class=\"w\"> </span><span class=\"mi\">404</span><span class=\"s\">,</span><span class=\"w\"> </span><span class=\"s\">\"message\":</span><span class=\"w\"> </span><span class=\"s\">\"The</span><span class=\"w\"> </span><span class=\"s\">requested</span><span class=\"w\"> </span><span class=\"s\">resource</span><span class=\"w\"> </span><span class=\"s\">was</span><span class=\"w\"> </span><span class=\"s\">not</span><span class=\"w\"> </span><span class=\"s\">found</span><span class=\"w\"> </span><span class=\"no\">on</span><span class=\"w\"> </span><span class=\"s\">this</span><span class=\"w\"> </span><span class=\"s\">server.\"</span><span class=\"err\">}</span><span class=\"s\">'</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Didn't know that, interesting.</p>",
  "<p>Some of the commit messages seem not-quite-right -- <a href=\"https://github.com/zulip/zulip/commit/475a25e739b45d656e389e62965d618dd9d10281\">475a25e739b45d656e389e62965d618dd9d10281</a> for instance implies that it's changing <code>send_event</code> to <code>send_event_on_commit</code> but in actuality it's adding a transaction.</p>",
  "<p>Why do we even have <code>send_event</code> at all?  There's no time we should be doing that inside of a transaction.</p>",
  "<p>Or we should be naming that <code>send_event_unsafe_pinky_sweak_i_need_it</code></p>",
  "<p>We should be doing this rejection from Django, so that we can add logic later to revoke the keys.  We should not be hand-coding JSON into our nginx config.</p>",
  "<p>In that commit the main intention was to \"send event on commit\" which will happen only when the <code>notify_remove_scheduled_message</code> is inside a transaction otherwise it's equivalent to <code>send_event</code>.</p>\n<p>One reasoning could be to keep this change in the same commit when I changed <code>send_event</code> to <code>send_event_on_commit</code> in <code>notify_remove_scheduled_message</code> like I did in the last commit, but I feel sometimes the commit gets difficult to review if the <code>notify...</code> function is used in a few places and action function requires more refactoring than just adding <code>transaction.atomic</code>.</p>",
  "<blockquote>\n<p>Why do we even have\u00a0<code>send_event</code>\u00a0at all?</p>\n</blockquote>\n<p>While using the <code>/typing</code> endpoint, we don't do any db queries, so <code>send_event</code> instead of <code>send_event_on_commit</code> makes more sense in that case.</p>",
  "<p>Left a review.  I left a lot of notes on the commit message -- not because it's bad, but because I think you can do better.</p>",
  "<p><code>send_event_on_commit</code> is equivalent to <code>send_event</code> when not in a transaction.</p>",
  "<p>From <a href=\"https://docs.djangoproject.com/en/5.0/topics/db/transactions/#django.db.transaction.on_commit\">https://docs.djangoproject.com/en/5.0/topics/db/transactions/#django.db.transaction.on_commit</a></p>\n<blockquote>\n<p>If you call\u00a0<code>on_commit()</code>\u00a0while there isn\u2019t an open transaction, the callback will be executed immediately.</p>\n</blockquote>",
  "<p>Yeah</p>",
  "<p>But my point being that we should just the function that does it <code>send_event</code>, and that thing should defer sending the event if it's in a transaction.  We shouldn't make callers think about if they should be correct or not.</p>",
  "<p>I was just talking about the function names when I said \"makes more sense\" above.</p>",
  "<p>Ah, OK.</p>",
  "<p>Your proposal sounds good but <strong>I think</strong> I saw a case where we want to immediately send an event inside a transaction. I will take a look today and confirm. In that case we should do this, I agree:</p>\n<blockquote>\n<p>Or we should be naming that\u00a0<code>send_event_unsafe_pinky_sweak_i_need_it</code></p>\n</blockquote>",
  "<p>I was refactoring <code>webhook/slack_incoming.py</code> to use some of the Slack reformatting functions we have over at   <code>data_import/slack_message_conversion.py</code> as part of <a href=\"https://github.com/zulip/zulip/pull/31311\">#31311</a>. It looks like there are some cases that the regex over at <code>data_import/slack_message_conversion.py</code> cannot handle:</p>\n<ul>\n<li><strong>Formatted strings containing emojis</strong>, e.g., <code>*1\ufe0f\u20e3 Use the '/task' command*</code></li>\n<li><strong>Formatted strings separated by exactly one white space,</strong> e.g., <code>*foo* *bar*</code>. This likely happens because the <code>*foo*</code> match includes the white space right after it, so  when trying to match for the <code>*bar*</code> string, the first capture group in <code>SLACK_BOLD_REGEX</code><strong>&gt;</strong> (<code>(^|[ -(]|[+-/]|[:-?]|\\{|\\[|\\_|\\||\\^|~)</code>) fail to detect anything. </li>\n<li><strong>Formatted strings after a new line</strong>. We don't have to worry about this in Slack export because new lines will be in the form of \"\\n\". However, processed Slack text (think of <code>render_block</code> &amp; <code>render_attachment</code> in <code>slack_incoming.py</code>) that needs reformatting will have newlines without using \"\\n\".</li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>new tests for the cases above</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>FAIL: test_has_newline (zerver.tests.test_slack_message_conversion.SlackMessageConversion)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 125, in test_has_newline\n    self.assertEqual(text, expected_message)\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n  abc\n\n- *randomtext*\n+ **randomtext**\n\n\n\n======================================================================\nFAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;valid_bold_test_2&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- *1\ufe0f\u20e3 Use the `/task` command*\n+ **1\ufe0f\u20e3 Use the `/task` command**\n\n\n======================================================================\nFAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;unsupported_valid_bold&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- **foo** *bar*\n+ **foo** **bar**\n</code></pre></div>\n</div></div>",
  "<p>On the other hand, the reformatting process in <code>slack_incoming.py</code> can handle all the cases mentioned above but cannot handle some cases that the process in <code>slack_message_conversion.py</code> can, such as:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>using regex from slack_incoming.py</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Markdown mapping</span>\n<span class=\"k\">def</span> <span class=\"nf\">convert_to_zulip_markdown</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ZerverFieldsT</span><span class=\"p\">],</span>\n    <span class=\"n\">added_channels</span><span class=\"p\">:</span> <span class=\"n\">AddedChannelsT</span><span class=\"p\">,</span>\n    <span class=\"n\">slack_user_id_to_zulip_user_id</span><span class=\"p\">:</span> <span class=\"n\">SlackToZulipUserIDT</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]:</span>\n    <span class=\"n\">mentioned_users_id</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"([^\\w]|^)\\*(?!\\s+)([^\\*\\n]+)(?&lt;!\\s)\\*((?=[^\\w])|$)\"</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">\"\\1**\\2**\\3\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">convert_markdown_syntax</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">SLACK_STRIKETHROUGH_REGEX</span><span class=\"p\">,</span> <span class=\"s2\">\"~~\"</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"([^\\w]|^)[_](?!\\s+)([^\\_\\n]+)(?&lt;!\\s)[_]((?=[^\\w])|$)\"</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">\"\\1*\\2*\\3\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n\n   <span class=\"c1\"># ... rest of the code</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>test_slack_message_conversion using regex function from slack_incoming.py</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>FAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;invalid_italic_test&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- mid_word_, @*italics*\n+ mid_word_, @_italics_\n\n\n======================================================================\nFAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;valid_bold_test&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- (**text**} and normal :* bold*.\n+ (**text**} and normal :** bold**.\n\n\n======================================================================\nFAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;invalid_bold_test&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- *mid*word ***word***\n+ *mid*word **word**\n\n\n======================================================================\nFAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;no_conversion&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- ****word****\n+ ***word***\n\n\n======================================================================\nFAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;valid_bold_and_italic_conversion_2&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- **test bold and italic message**\n+ ***test bold and italic message***\n</code></pre></div>\n</div></div>",
  "<p>In <a href=\"https://github.com/zulip/zulip/pull/31311\">#31311</a>, I added a fix to handle some cases that <code>slack_message_conversion.py</code> couldn't manage. These are:</p>\n<ul>\n<li>Formatted string after new line</li>\n<li>Formatted string containing emoji</li>\n</ul>\n<p>But this fix comes at a trade-off, so this leaves us with two remaining unsupported cases:</p>\n<ul>\n<li>Formatted strings separated by exactly one white space</li>\n<li>Formatted string with containing whitespace immediately after * or _ or ~. e.g <code>* bold*</code></li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>test_message_conversion_fixtures</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>FAIL: test_message_conversion_fixtures (zerver.tests.test_slack_message_conversion.SlackMessageConversion) (slack_message_conversion=&#39;valid_bold_test&#39;)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 52, in test_message_conversion_fixtures\n    self.assertEqual(converted_text, test[&quot;conversion_output&quot;])\n  File &quot;/srv/zulip/zerver/tests/test_slack_message_conversion.py&quot;, line 20, in assertEqual\n    raise AssertionError(\nAssertionError: Actual and expected outputs do not match; showing diff.\n- (**text**} and normal :*     bold*.\n+ (**text**} and normal :**bold**.\n</code></pre></div>\n</div></div>",
  "<p>We can probably optimize the regex further to also consider the two remaining cases, but it's quite a tricky \"whack-a-mole\" problem that I think can be left out of <a href=\"https://github.com/zulip/zulip/pull/31311\">#31311</a> for now. The two remaining unsupported cases seem rare and unusual, especially the second one since it's technically impossible to be generated by Slack. Slack will just truncate any extra white spaces inside formatted text when exported.<br>\n<a href=\"/user_uploads/2/28/KmVlLvEVkhu_DKIjcfMb0N07/image.png\">bold with white spaces</a><br>\n<a href=\"/user_uploads/2/2/kpPt56oKOdFiax8J9Y9akc95/image.png\">exorted</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/28/KmVlLvEVkhu_DKIjcfMb0N07/image.png\" title=\"bold with white spaces\"><img data-original-dimensions=\"528x249\" src=\"/user_uploads/thumbnail/2/28/KmVlLvEVkhu_DKIjcfMb0N07/image.png/840x560.webp\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/2/kpPt56oKOdFiax8J9Y9akc95/image.png\" title=\"exorted\"><img data-original-dimensions=\"325x56\" src=\"/user_uploads/thumbnail/2/2/kpPt56oKOdFiax8J9Y9akc95/image.png/840x560.webp\"></a></div>",
  "<p>yes, I am working on it, I'll open the PRs in a few days (I got busy with some other things).</p>",
  "<p>My thought has been that we'd delete <code>send_event</code> or call it something like <code>send_event_unsafe</code> once we finish migrating, but because there can be complications with switching (involving <code>test_events</code> tests expecting a different event order, or whatnot), I've been pretty happy with doing this incrementally where we audit each code path as we do it.</p>",
  "<p>We will want to do the same audit with the <code>queue_json_publish</code> functions too, once we finish this.</p>",
  "<p>So as noted in <a class=\"stream-topic\" data-stream-id=\"2\" href=\"/#narrow/stream/2-general/topic/tools.2Fprovision.20performance\">#general &gt; tools/provision performance</a>, this is one of the most impactful things that we could do to optimize performance of provisioning; now that we have 564 migrations, it's really quite slow to provision when we need to reset the database.</p>",
  "<p>I think the analysis above still applies. We need to audit for more migrations missing <code>elidable=True</code>, which I guess I'll do now since it's quick, but then the big bulk of the work will be figuring out how much we can optimize these.</p>",
  "<p>Maybe the right strategy is to start with doing squashing for the smaller projects: there's 130 migrations between them, and likely a lot less weird things to work through.</p>",
  "<p>Did a test run of <code>./tools/rebuild-test-database</code>, took about 96s, so that's a useful baseline.</p>",
  "<p>I guess a challenge with this is potential circular dependencies.</p>",
  "<p>Some of these dependencies may be spurious in the squashed context, though. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>class Migration(migrations.Migration):\n    atomic = False\n\n    dependencies = [\n        (&quot;confirmation&quot;, &quot;0013_alter_realmcreationkey_id&quot;),\n        (&quot;contenttypes&quot;, &quot;0002_remove_content_type_name&quot;),\n        (&quot;zerver&quot;, &quot;0552_remove_realm_private_message_policy&quot;),\n    ]\n\n    operations = [\n        AddIndexConcurrently(\n            model_name=&quot;confirmation&quot;,\n            index=models.Index(\n                fields=[&quot;content_type&quot;, &quot;object_id&quot;], name=&quot;confirmatio_content_80155a_idx&quot;\n            ),\n        ),\n    ]\n</code></pre></div>\n<p>I think this migration has no real reason to depend on <code>zerver</code> migrations for an empty database. I think it's the migration after that cares, because we don't want a bigint/int misalignment perhaps?</p>\n<div class=\"codehilite\"><pre><span></span><code>class Migration(migrations.Migration):\n    dependencies = [\n        (&quot;confirmation&quot;, &quot;0014_confirmation_confirmatio_content_80155a_idx&quot;),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=&quot;confirmation&quot;,\n            name=&quot;object_id&quot;,\n            field=models.PositiveBigIntegerField(db_index=True),\n        ),\n    ]\n</code></pre></div>",
  "<p>I guess I can see what happens if I delete those dependencies in the squashed <code>confirmation</code> migration.</p>",
  "<p>Looks like there's just that one potential circular dependency to work around.</p>",
  "<p>After rereading the discussion above, I took a quick look at this question:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span> <a href=\"#narrow/stream/3-backend/topic/Django.20squashmigrations/near/865414\">said</a>:</p>\n<blockquote>\n<p>I wonder how complicated the implementation is. It's possible that the most efficient way to handle at least some of these limitations is to actually improve the generic <code>squashmigrations</code> code.</p>\n</blockquote>\n<p>The driver of squashmigrations is <a href=\"https://github.com/django/django/blob/b99c608ea10cabc97a6b251cdb6e81ef2a83bdcf/django/db/migrations/optimizer.py\">this MigrationOptimizer class</a>, with a loop I don't fully understand the logic of but it's not much code.</p>\n<p>The bulk of the implementation is in <code>reduce</code> methods on the various Operation subclasses.</p>",
  "<p>For example for this situation:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Django.20squashmigrations/near/865407\">said</a>:</p>\n<blockquote>\n<p>But I think it's also just not that smart; e.g. it won't squash the AlterField to change a default in a model into its <code>CreateModel</code> entry.</p>\n</blockquote>\n<p>the relevant logic is <a href=\"https://github.com/django/django/blob/b99c608ea10cabc97a6b251cdb6e81ef2a83bdcf/django/db/migrations/operations/models.py#L233-L245\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">CreateModel</span><span class=\"p\">(</span><span class=\"n\">ModelOperation</span><span class=\"p\">):</span>\n    <span class=\"c1\"># \u2026</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">operation</span><span class=\"p\">,</span> <span class=\"n\">app_label</span><span class=\"p\">):</span>\n        <span class=\"c1\"># \u2026</span>\n        <span class=\"k\">elif</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">operation</span><span class=\"p\">,</span> <span class=\"n\">FieldOperation</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name_lower</span> <span class=\"o\">==</span> <span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"n\">model_name_lower</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># \u2026</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">operation</span><span class=\"p\">,</span> <span class=\"n\">AlterField</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span>\n                    <span class=\"n\">CreateModel</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                        <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                            <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"n\">field</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">else</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n                            <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span>\n                        <span class=\"p\">],</span>\n                        <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">,</span>\n                        <span class=\"n\">bases</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bases</span><span class=\"p\">,</span>\n                        <span class=\"n\">managers</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">managers</span><span class=\"p\">,</span>\n                    <span class=\"p\">),</span>\n                <span class=\"p\">]</span>\n</code></pre></div>\n<p>Which looks to me like it ought to work, actually. So if that doesn't work then it may be a bug there that we can just fix.</p>",
  "<p>(And that whole AlterField case hasn't changed since 2016, so it's not that that was added since 2020.)</p>",
  "<p>Alternatively the reason <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> observed an AlterField failing to squash into a CreateModel may have been something else, like some operation in between getting in the way.</p>\n<p>It's possible there's something conceptually wrong in the way that loop in MigrationOptimizer is approaching things \u2014 I timed out after a few minutes on trying to understand what its conceptual model even is. If so, fixing that would probably be too big a project to be worth it for us.</p>",
  "<p>I think it may have to do with declared dependencies on other migrations, not sure yet.</p>",
  "<p>At least for <code>confirmation</code>, it successfully squashed most of the operations, but ended up with a leaked one just after the first migration that depended on a <code>zerver</code> migration.</p>",
  "<p>OK I now have <code>confirmation</code>'s 15 migrations squashed down to just two CreateModels in the squash migration, plus migration 0015, which has a real dependence on newer <code>zerver</code>. I had to do two hacks:</p>\n<ul>\n<li>Temporarily changed <code>CreateIndex</code> to <code>CreateIndexConcurrently</code> in a migration to have it squash into the <code>CreateModel</code> properly. I don't see why this would be required, and maybe it wasn't, because the following was likely the actual problem.</li>\n<li>Squashed the <code>CreateModel</code> and <code>DeleteModel</code> for the short-lived <code>EmailChangeStatus</code> proxy model. The <a href=\"https://github.com/django/django/commit/a81282a512e706011747ec4cd1a990bae167edc6#diff-6a90a27392d9fcde626b4965f274ffdbc485699da0f1c2b781129cc4c3e6337e\">Django commit</a> that introduced the logic preventing squashing create/delete of proxy models doesn't explain why it did it, but it sounds like the issue is not relevant for us regardless.</li>\n</ul>",
  "<p>Next bug is that it appears <code>AddConstraint</code> is not supported by the optimizer.</p>",
  "<p>OK, that <code>AddConstraint</code> bug and its dual with <code>RemoveConstraint</code> seem to have been the main issue. Having fixed that, <code>zilencer</code> and <code>analytics</code> and <code>confirmation</code> all happily squash to a single migration.</p>",
  "<p>With <code>zilencer</code>, I encountered a couple things that can't be squashed; reordered them to the end so everything else could be.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Django.20squashmigrations/near/1919651\">said</a>:</p>\n<blockquote>\n<p>Next bug is that it appears <code>AddConstraint</code> is not supported by the optimizer.</p>\n</blockquote>\n<p>It looks like support for that and RemoveConstraint were added quite recently:<br>\n<a href=\"https://github.com/django/django/commit/8b7ddd1b621e1396cf87c08faf11937732f09dcd\">https://github.com/django/django/commit/8b7ddd1b621e1396cf87c08faf11937732f09dcd</a><br>\n<a href=\"https://code.djangoproject.com/ticket/34534\">https://code.djangoproject.com/ticket/34534</a></p>",
  "<p>Yeah, that is the same code I ended up writing.</p>",
  "<p>That's out in <a href=\"https://docs.djangoproject.com/en/5.1/releases/5.1/\">https://docs.djangoproject.com/en/5.1/releases/5.1/</a>, released last week.</p>",
  "<p>Though they appear to not have mentioned that fix in the changelog.</p>",
  "<p>Finished <code>zilencer</code>. A few issues with <code>zerver</code>:</p>\n<ul>\n<li>Is <code>zerver/migrations/0529_fts_bigint_id.py</code> supposed to be elidable?</li>\n<li>Can <code>0302_case_insensitive_stream_name_index.py</code> be converted to a Django-aware index? </li>\n<li>Same question with <code>zerver/migrations/0295_case_insensitive_email_indexes.py</code></li>\n<li>How to navigate the <code>pub_date</code> and <code>bigint</code> multi-stage migrations.</li>\n</ul>",
  "<ul>\n<li>It tries to copy <code>zerver/lib/migrate.py</code> code from a couple <code>SeparateOperationsAndState</code> steps, which doesn't work. Probably these can be replaced with their <code>StateOperations</code> if things squash properly, with appropriate testing.</li>\n<li><code>fts_sql</code> may need to be temporarily removed from <code>0001_initial</code> and added back in manually so it does not block optimization.</li>\n</ul>",
  "<p>OK I've determined a set of techniques to at least squash zerver migration <code>0001</code> to be less silly.</p>",
  "<p>I've opened <a href=\"https://github.com/zulip/zulip/pull/31338\">#31338</a> with what I've been able to do for this. It:</p>\n<ul>\n<li>Squashes all migrations but one in <code>analytics</code>, <code>confirmation</code>, <code>corporate</code>, and <code>zilencer</code>.</li>\n<li>Squashes <code>zerver</code> migrations through 0237, just before the first road bump noted above (namely, the <code>UserMessage</code> transition of its <code>id</code> field to <code>BigIntegerField</code>).</li>\n</ul>\n<p>I think this more or less exhausts my available time for working on this area. Based on my testing, there is a LOT more performance to gain from getting <code>zerver</code> fully squashed.</p>",
  "<p>I think before we can merge <a href=\"https://github.com/zulip/zulip/pull/31338\">#31338</a>, I'd really like to figure out how to create a SQL dump of <code>zulip_test</code> before and after this branch and compare the database layout completely, to make sure there isn't anything awry.</p>",
  "<p>Using <code>time ./tools/rebuild-test-database</code> to create clean <code>zulip_test</code> databases, I think I can just make those and compare. Main risk is ordering stuff making it really annoying, but I suspect with some clever use of <code>git</code> I can manage that.</p>",
  "<p>Okay cool, it seems like not migrating this right now seems okay then, since it's not really being used right now.</p>",
  "<p>OK doing that diffing, I find various differences:</p>\n<ul>\n<li>The IDs for tables in <code>django_contenttype</code> are different, due to reordering of <code>CreateModel</code> entries. I don't think this is important, but probably could be avoided by hand-reordering myself. Structurally, this is just data.</li>\n<li>Several sequence names are renamed; basically for those tables that have been renamed, the squashed migration names the sequence as though it never had been renamed. For example, <code>zulip.zerver_realmalias_id_seq</code> =&gt; <code>zulip.zerver_realmdomain_id_seq</code>, and <code>zulip.zerver_botuserstatedata_id_seq</code> =&gt; <code>zulip.zerver_botstoragedata_id_seq</code></li>\n<li>A few table field orders change, because more of the fields exist before the reverse foreign keys get added. Seems harmless.</li>\n<li>A dozen or two constraints and indexes are renamed, like <code>zerver_archivedattachment_path_id_b556fcf2_uniq</code> to <code>zerver_archivedattachment_path_id_key</code>. Probably we should add the <code>name</code> parameter to those to avoid this divergence, since it seems potentially annoying.</li>\n<li>Actual data differs, both tables like <code>django_migrations</code> and of course every time with timestamps in it is different.</li>\n</ul>",
  "<p>Hmm, I'm not sure we can actually control the constraint names in the migration system; the <code>ForeignKey</code> model field type doesn't have a parameter for it. Here's a sample diff:</p>\n<div class=\"codehilite\"><pre><span></span><code> ALTER TABLE ONLY zulip.zilencer_remoteserverbillinguser\n-    ADD CONSTRAINT zilencer_remoteserverbillinguser_remote_server_id_6de479ed_fk FOREIGN KEY (remote_server_id)\nREFERENCES zulip.zilencer_remotezulipserver(id) DEFERRABLE INITIALLY DEFERRED;\n+    ADD CONSTRAINT zilencer_remoteserve_remote_server_id_6de479ed_fk_zilencer_ FOREIGN KEY (remote_server_id)\nREFERENCES zulip.zilencer_remotezulipserver(id) DEFERRABLE INITIALLY DEFERRED;\n</code></pre></div>",
  "<p>I think maybe specifically for the category of foreign key constraints, we don't care what they're called?</p>",
  "<p>AFAIK we don't.</p>",
  "<p>Do we care about Django sequence field names on random small tables? I think that's the only other detail above that might require action.</p>",
  "<p>I think probably in the unlikely event that we eventually do write code that looks at that, we can write SQL to look up the sequence name.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Django.20squashmigrations/near/1919768\">said</a>:</p>\n<blockquote>\n<ul>\n<li>A dozen or two constraints and indexes are renamed, like <code>zerver_archivedattachment_path_id_b556fcf2_uniq</code> to <code>zerver_archivedattachment_path_id_key</code>. Probably we should add the <code>name</code> parameter to those to avoid this divergence, since it seems potentially annoying.</li>\n</ul>\n</blockquote>\n<p>Those hash-based (or are they random?) names are annoying \u2014 if <code>name</code> is what it takes to get readable names for the indexes, that sounds great.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Django.20squashmigrations/near/1919759\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Squashes <code>zerver</code> migrations through 0237, just before the first road bump noted above (namely, the <code>UserMessage</code> transition of its <code>id</code> field to <code>BigIntegerField</code>).</li>\n</ul>\n</blockquote>\n<p>So IIUC the obstacle here is that 0238, 0239, 0240, 0241 are a complicated sequence of migrations that were needed in order to migrate that field while online.</p>\n<p>For an empty database with nothing concurrently writing to it, does the total effect of those four reduce to something simple like a pair of AlterField operations? (One each for <code>usermessage</code> and <code>archivedusermessage</code>.)</p>\n<p>If so then perhaps a way forward would be to write that squashed migration manually, and then rerun the optimizer from there.</p>",
  "<p>(I think we wouldn't actually want to commit that squashed migration as its own standalone migration, because then installations upgrading past there would run the squashed migration. But we could manually squash it into the preceding squashed migration that starts from an empty database, and commit that.)</p>",
  "<p>I think the total effect likely does look something like that, but I wasn't comfortable attempting that without having figured out a testing process. I guess now that I have that, it is possible we can push through the rest.</p>",
  "<p>But I'm a bit out of time that I can spend on this <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Django.20squashmigrations/near/1919768\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Several sequence names are renamed; basically for those tables that have been renamed, the squashed migration names the sequence as though it never had been renamed. For example, <code>zulip.zerver_realmalias_id_seq</code> =&gt; <code>zulip.zerver_realmdomain_id_seq</code>, and <code>zulip.zerver_botuserstatedata_id_seq</code> =&gt; <code>zulip.zerver_botstoragedata_id_seq</code></li>\n</ul>\n</blockquote>\n<p>Tests are currently failing because we apparently do hardcode those old names:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rg -C5 zerver_realmalias_id_seq\nzerver/lib/import_realm.py\n457-    return [item[&quot;id&quot;] for item in data[table]]\n458-\n459-\n460-def idseq(model_class: Any) -&gt; str:\n461-    if model_class == RealmDomain:\n462:        return &quot;zerver_realmalias_id_seq&quot;\n463-    elif model_class == BotStorageData:\n464-        return &quot;zerver_botuserstatedata_id_seq&quot;\n465-    elif model_class == BotConfigData:\n466-        return &quot;zerver_botuserconfigdata_id_seq&quot;\n467-    elif model_class == UserTopic:\n</code></pre></div>",
  "<p>But I think that can be fixed.</p>",
  "<p>Pushed back a commit to fix that.</p>",
  "<p>Sweet, glad we had a test for that!</p>",
  "<p>Next bug is that the <code>preserve_default</code> option is apparently not supported by the squashing tool, so fixing that.</p>",
  "<p>I guess that was not detected by diffing the database, because the default only exists in Django's application layer.</p>",
  "<p>Fixed and pushed. (Was just dropping <code>default=</code> values for those with <code>preserve_default=False</code>)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Django.20squashmigrations/near/1919675\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Is <code>zerver/migrations/0529_fts_bigint_id.py</code> supposed to be elidable?</li>\n<li>Can <code>0302_case_insensitive_stream_name_index.py</code> be converted to a Django-aware index?</li>\n<li>Same question with <code>zerver/migrations/0295_case_insensitive_email_indexes.py</code></li>\n</ul>\n</blockquote>\n<p>I think these probably need to be resolved and cleaned up in a prep PR before we can attempt pushing forward with the <code>zerver</code> squash.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31338\">#31338</a> is passing CI, but probably <span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> or <span class=\"user-mention\" data-user-id=\"12178\">@Alex Vandiver</span> should review it.</p>",
  "<p>Postgres 12 reaches EOL in November; it's also no longer supported in newly released Django 5.1. I think that means we should drop support for it in <code>main</code>.</p>",
  "<p>Sound good to me.  Do we keep supporting it in 9.x?  That means we can't upgrade Django to 5.1 in Zulip Server 9.x.</p>",
  "<p>I think there's no reason to remove support in 9.x; it'll keep working until the end of the year. We can include a reminder about the fact that folks can upgrade to modern postgres in a release announcement or something.</p>",
  "<p>My point was that if we want to keep supporting PostgreSQL 12 in Zulip Server 9.x, it means we can't take a Django upgrade into 9.x.</p>\n<p>But I guess we generally don't backport major Django version upgrades, so that's fine.</p>",
  "<p>Yeah, because we don't generally backport Django major version upgrades, that should be fine.</p>",
  "<p>I was thinking of starting to work on <a href=\"https://github.com/zulip/zulip/pull/25713\">#25713</a> with the first two points:</p>\n<blockquote>\n<ul>\n<li>Possibly adding a\u00a0<code>group_size</code>\u00a0field to the\u00a0<code>DirectMessageGroup</code>\u00a0table, or a\u00a0<code>direct_message_group_size</code>\u00a0field to the\u00a0<code>Recipient</code>\u00a0table, so that code that wants to do something special based on group size doesn't need to query\u00a0<code>Subscription</code>, with a backfill migration.</li>\n<li>Decide whether there's any other data we might want to add to the\u00a0<code>DirectMessageGroup</code>\u00a0for convenience of access while we're working on this -- potential field ideas include\u00a0<code>first_message_id</code>,\u00a0<code>last_message_id</code>,\u00a0<code>total_messages</code>.</li>\n</ul>\n</blockquote>\n<p>I guess for the <code>group_size</code> I would be adding it to the <code>DirectMessageGroup</code>.</p>\n<p>Regarding the fields - <code>first_message_id</code>,\u00a0<code>last_message_id</code>,\u00a0<code>total_messages</code>, I understand that <code>first_message_id</code> would be useful in determining whether conversation exists, I am not sure of remaining fields uses.</p>\n<p>Also, are we looking at any other fields apart from these?</p>",
  "<p>I think probably what we'll want is a subset of those fields.</p>",
  "<p>So it's worth talking about the potential use cases for those fields, and also what would be involved in maintaining them. The <code>last_message_id</code> field is the only one that would be used in the existing API, allowing us to reimplement this part of the <a href=\"https://zulip.com/api/register-queue\"><code>register_queue</code> API</a>:</p>\n<blockquote>\n<p>recent_private_conversations: (object)[]</p>\n<p>Present if recent_private_conversations is present in fetch_event_types.</p>\n<p>An array of dictionaries containing data on all direct message and group direct message conversations that the user has received (or sent) messages in, organized by conversation. This data set is designed to support UI elements such as the \"Direct messages\" widget in the web application showing recent direct message conversations that the user has participated in.</p>\n<p>\"Recent\" is defined as the server's discretion; the original implementation interpreted that as \"the 1000 most recent direct messages the user received\".</p>\n<p>max_message_id: integer</p>\n<p>The highest message ID of the conversation, intended to support sorting the conversations by recency.</p>\n<p>user_ids: (integer)[]</p>\n<p>The list of users other than the current user in the direct message conversation. This will be an empty list for direct messages sent to oneself.</p>\n</blockquote>",
  "<p><code>get_recent_private_conversations</code> in <code>zerver/lib/message.py</code> is the function computing that; it has a couple downsides: It's expensive, and it returns potentially incomplete data basically for performance reasons.</p>",
  "<p>So I think we would want a <code>last_message_id</code> field. There's basically two costs to adding such a thing:</p>\n<ul>\n<li>It needs to be updated whenever we send a message, which adds extra work to a hot code path that we want to be really fast. The work itself is trivial, though, since the newly sent message will always be the new latest, so it's just a write.</li>\n<li>We need to check if it needs to be updated when DMs are deleted. This is probably pretty cheap, since it'd be a direct index lookup to get the correct value each time.</li>\n</ul>",
  "<p>I feel fairly confident we want a <code>group_size</code> field; it's static for a given group, cheap to store, and will just make it easy for any logic that cares about the size of the group to be simple. This probably would not be exposed to the API. </p>\n<p>So maybe the first PR to do would be to add that, with a backfill migration to calculate it from <code>Subscription</code> for all the existing <code>DirectMessageGroup</code> objects.</p>",
  "<p>I'm a little of the feeling that if we're doing <code>last_message_id</code>, we might as well calculate <code>first_message_id</code> and <code>total_messages</code>, since it's likely to be fairly cheap and the same code paths would need to think about updating it and could do so in the same database query:</p>\n<ul>\n<li>Sending a message.</li>\n<li>Deleting messages.</li>\n<li>Message retention policy deletes.</li>\n</ul>",
  "<p>But I think it could be reasonable to defer a PR to calculate those until after we've migrated the <code>Recipient </code>data structures, so we only need to do a single pass through the <code>Message</code> table to backfill it.</p>",
  "<p>Whereas <code>group_size</code> is likely to be directly relevant to doing the data structure transition: Any code that currently tries to distinguish 1:1 DMs from group DMs will want that.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Backend.20changes.20to.20support.20personal.20display.20options.20for.201.3A1/near/1920931\">said</a>:</p>\n<blockquote>\n<ul>\n<li>The work itself is trivial, though, since the newly sent message will always be the new latest, so it's just a write.</li>\n</ul>\n</blockquote>\n<p>Not necessarily -- two messages in the same DirectMessageGroup could race.  We may need to lock the DirectMesageGroup before inserting the Message row.</p>",
  "<p>Opened  <a href=\"https://github.com/zulip/zulip/pull/31259\">#31259</a> to fix the tests to use <code>Json</code> encoded <code>to</code>.<br>\nOpened <a href=\"https://github.com/zulip/zulip/pull/31357\">#31357</a> to convert <code>message_send</code> to <code>typed_endpoint</code>, which also skips the <code>Application/Json</code> check only for the <code>to</code> param for this particular endpoint.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Backend.20changes.20to.20support.20personal.20display.20options.20for.201.3A1/near/1920935\">said</a>:</p>\n<blockquote>\n<p>I feel fairly confident we want a <code>group_size</code> field; it's static for a given group, cheap to store, and will just make it easy for any logic that cares about the size of the group to be simple. This probably would not be exposed to the API. </p>\n<p>So maybe the first PR to do would be to add that, with a backfill migration to calculate it from <code>Subscription</code> for all the existing <code>DirectMessageGroup</code> objects.</p>\n</blockquote>\n<p>The <code>group_size</code> would be especially useful for <a href=\"https://terpimost.github.io/zulip-sidebar/\">the proposed set of DM icons</a> that will show as many dots as are in the group</p>",
  "<p>I guess there's a question of whether we want to merge the <code>zerver</code> squashmigration in its incomplete state, or plan to push forward with getting all the way to current. The main downside of merging it now is that we'll have another potential database shape to consider in future work here.</p>",
  "<p>Well, the web app can trivially calculate that from the list of user IDs that is present where these are referenced in the API, so I'm not sure whether we'd end up sending the group size in the API anyway vs. expecting clients to calculate them if they need them. The main benefit of having that in a database table is that one can do a SQL query for \"all the 1:1 DMs\" without a complex set of joins.</p>",
  "<p>I think it's worth getting it moderately more ship-shape.  I don't think we need to necessarily get it all of the way to current, though.</p>",
  "<p>OK let me see if I can push a bit further; I feel like now that I've figured out the technique, maybe I can make it go.</p>",
  "<p>Over the past day there has been a lot of development on the <a href=\"https://github.com/zulip/zulip/pull/31276#pullrequestreview-2234343633\">review</a> for <a href=\"https://github.com/zulip/zulip/pull/31276\">#31276</a></p>\n<p>We're currently using enum behind our <code>ErrorCode</code> class where we are solely using it only for the error names. Now one of <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> concerns was that inserting a new error code into the middle of our list of error codes would cause clients that rely on IDs of our enumorators to break. However this would mean that we are explicitly getting the ID with <code>ErrorCode.error_name.id</code>. Looking into how we raise errors and the structure of <code>JsonableError</code></p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">NoSuchWidgetError</span><span class=\"p\">(</span><span class=\"n\">JsonableError</span><span class=\"p\">):</span>\n             <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">ErrorCode</span><span class=\"o\">.</span><span class=\"n\">NO_SUCH_WIDGET</span>\n             <span class=\"n\">data_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'widget_name'</span><span class=\"p\">]</span>\n\n             <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">widget_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                 <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">widget_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">widget_name</span>\n\n             <span class=\"nd\">@staticmethod</span>\n             <span class=\"k\">def</span> <span class=\"nf\">msg_format</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n                 <span class=\"k\">return</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"No such widget: </span><span class=\"si\">{widget_name}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">JsonableError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(((</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_fields</span><span class=\"p\">),</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>We are very well just using the error code names rather than IDs when returning Json error. I'm just confused if I am missing something from this.</p>",
  "<p>Nope, you're not missing something -- I was.  I incorrectly remembered that we used the internal IDs.</p>",
  "<p>See <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span>'s and <span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span>'s comments on that thread, which are correct.</p>",
  "<p>There are some separate take-aways from that topic (namely, better docs on the enum, and possibly some lint enforcement that we don't rely on ids) but those changes are unrelated to that PR.  You can safely insert your new ErrorCode into the list wherever makes sense.</p>",
  "<p>Yeah I saw the comments and wanted to clarify on everything there. From what I understand, the best course of action is to add back the lost comment \"An enumeration whose members are used strictly for their names.\" for now?</p>",
  "<p>That's certainly one part of it.</p>\n<p>You should add that as a separate commit.</p>",
  "<p>Will do <span aria-label=\"saluting face\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"saluting face\">:saluting_face:</span></p>",
  "<p>I encourage you to include (in the commit message) a reference to how it was accidentally removed in <a href=\"https://github.com/zulip/zulip/commit/6ae5be6e75e7000dcd1855b378239491646a13c9\">6ae5be6e75e7000dcd1855b378239491646a13c9</a>, so that it's clear it's re-adding a previous comment, not a spec change.</p>",
  "<p>Okay I've addressed all the reviews and edited the commit message to have a clear emphasis on the motivation and problem we're aiming to solve. However I'm not able to do anything about <span class=\"user-mention silent\" data-user-id=\"699\">Anders Kaseorg</span> comment. I just don't have a production environment to write and test changes to production config.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31276\">#31276</a></p>",
  "<p>Yeah, I think this is an area where doing the best we can with manageable effort is reasonable.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/30446/commits\">PR</a> updated , it effectively blocks by <code>/64</code> only for now, I think it's wise to review  this ASAP, especially as it's security related.</p>\n<p>I will then dedicate a follow up PR to address other prefixes like <code>/48</code> and any improvments needed for the rate-limiter</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/IPv6.20rate.20limiting/near/1905263\">said</a>:</p>\n<blockquote>\n<p>he performance of our rate-limiter is very insufficient for the request rates in a serious DOS.</p>\n</blockquote>\n<p>So what's making it <code>insufficient</code> ? What are its current issues ?</p>\n<p>That insufficiency is from the implementation <a href=\"https://www.domaintools.com/resources/blog/rate-limiting-with-redis/\">Rate Limiting with Redis</a>  it's inspired from ? or something else ?</p>",
  "<p>So I played with that a while, and it's kinda a nightmare of deleting steps and needing to re-add them at the end. After some reflection, I am convinced the outcome of successfully doing that will be the same as if we just redid <code>manage.py makemigrations</code> to make a new initial migration. and the turning it into a squash migration and adding back in the <code>RunSQL</code> code that isn't present in Django. So I'm attempting that technique.</p>",
  "<p>The result is definitely fast; <code>tools/rebuild-test-database</code> now runs in 42s, of which only 20s are running migrations.</p>",
  "<p>Using my testing method, it looks like we'll get a logically equivalent database after the few bug fixes I identified looking through it.</p>",
  "<p>This change is a bit puzzling, since the SQL that we had both pre-patch and post-patch is the same. </p>\n<div class=\"codehilite\"><pre><span></span><code>-CREATE STATISTICS zulip.zerver_message_realm_recipient ON recipient_id, realm_id FROM zulip.zerver_message;\n+CREATE STATISTICS zulip.zerver_message_realm_recipient ON realm_id, recipient_id FROM zulip.zerver_message;\n</code></pre></div>",
  "<p>I assume that must just commute and the database is allowed to reorder them randomly.</p>",
  "<p>Yep, from <a href=\"https://www.postgresql.org/docs/current/sql-createstatistics.html\">the docs</a>:</p>\n<blockquote>\n<p>The name of a table column to be covered by the computed statistics. This is only allowed when building multivariate statistics. At least two column names or expressions must be specified, and their order is not significant.</p>\n</blockquote>",
  "<p>OK <a href=\"https://github.com/zulip/zulip/pull/31338\">#31338</a> is updated with those changes. Needs a bit more review/fiddling, but I'm signing off for the night.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Backend.20changes.20to.20support.20personal.20display.20options.20for.201.3A1/near/1920935\">said</a>:</p>\n<blockquote>\n<p>So maybe the first PR to do would be to add that, with a backfill migration to calculate it from <code>Subscription</code> for all the existing <code>DirectMessageGroup</code> objects.</p>\n</blockquote>\n<p>opened <a href=\"https://github.com/zulip/zulip/pull/31390\">#31390</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Backend.20changes.20to.20support.20personal.20display.20options.20for.201.3A1/near/1920939\">said</a>:</p>\n<blockquote>\n<p>But I think it could be reasonable to defer a PR to calculate those until after we've migrated the <code>Recipient</code> data structures</p>\n</blockquote>\n<p>So I guess this would be the <a href=\"https://github.com/zulip/zulip/issues/25713\">next step</a>?</p>\n<blockquote>\n<p>Adding support for some 1:1 DMs to be represented using DirectMessaegGroup objects. I think the best way for this to work is to allow an online migration by adjusting all of our code interacting with 1:1 DM Recipient objects to first look up if there is a DirectMessageGroup for that pair of users, and if there is, use that (i.e. assume things are fully migrated). Otherwise, fall back to looking in the legacy place. Some auditing will be required before we can commit to this class of plan -- the other option would be to first fully backfill the DirectMessageGroup table, without moving message data.</p>\n</blockquote>",
  "<p>A DDOS can commonly be hundreds of thousands of requests <em>per second</em>.  Zulip Cloud runs 40 Django workers at once.  For a DDOS with 100k requests per second, each request would have to be serviced by a Django process in 0.4ms.</p>\n<p>Django cannot even <em>process a request</em> that fast, much less make a request to a separate service, receive a reply, and send one back.  That's to say nothing of the time overheads in getting the request through uwsgi and nginx as well, which each provide their own overhead and potential bottlenecks.</p>\n<p>Tools to mitigate DDOS attacks also want to be at the <em>top</em> of your stack, closest to the traffic, and not all of the way down in the application.  Otherwise, you've giving them access to consume resources of your entire stack, potentially hitting bottlenecks in <em>those</em> even before the requests get to the application.  For instance, if nginx were the bottleneck, it doesn't matter how many 429's Django returns -- nobody else is going to get through to Django to get their legitimate requests through.</p>\n<p>In short, it's the wrong tool for the job.</p>",
  "<p><code>test_get_messages_with_nonexistent_group_dm</code> is failing with this PR; strange.</p>",
  "<p>Yep, I think so.</p>",
  "<p>I was curious if this \"re-<code>makemiogrations</code>\" technique was attested elsewhere, and found <br>\n<a href=\"https://forum.djangoproject.com/t/doc-update-describe-steps-for-manually-squashing-migrations/20624\">https://forum.djangoproject.com/t/doc-update-describe-steps-for-manually-squashing-migrations/20624</a> and <a href=\"https://code.djangoproject.com/ticket/32827\">https://code.djangoproject.com/ticket/32827</a></p>\n<p>So it's good to see that other folks have done this without any particular weird hiccups.</p>",
  "<p>I think all of my comments non the on-<code>zerver</code> migrations still hold</p>",
  "<p>We have the following action functions getting called in a loop:</p>\n<ul>\n<li><code>do_regenerate_api_key</code> -- See <a href=\"https://github.com/zulip/zulip/blob/be9d879682bc61a6d6232a2bacb36e8a2501b92a/zerver/management/commands/logout_all_users.py#L58\">logout_all_users</a></li>\n<li><code>do_change_full_name</code>-- See <a href=\"https://github.com/zulip/zulip/blob/be9d879682bc61a6d6232a2bacb36e8a2501b92a/zerver/management/commands/bulk_change_user_name.py#L35\">bulk_change_user_name</a></li>\n</ul>\n<p>Is it acceptable to create such a large number of db transactions and registering <code>transaction.on_commit</code> callbacks at a time, specially for the <code>logout_all_users</code> case ?</p>\n<p>I think we should write a function in parallel to do this in batches ?</p>",
  "<p>I think it's pretty safe to do one transaction per user for those loops. The alternative would be an extremely long transaction, which carries with it some risk of deadlocking and ceasing to make progress.</p>\n<p>Both are rarely used management commands, so I don't think any special attention is needed to optimize how quickly they complete.</p>",
  "<p>Update: </p>\n<p><code>send_event</code> to <code>send_event_on_commit</code> transition is now complete.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>grep<span class=\"w\"> </span><span class=\"s2\">\"send_event(\"</span><span class=\"w\"> </span>zerver/\n\nzerver/actions/message_flags.py:<span class=\"w\">    </span>send_event<span class=\"o\">(</span>user_profile.realm,<span class=\"w\"> </span>event,<span class=\"w\"> </span><span class=\"o\">[</span>user_profile.id<span class=\"o\">])</span>\nzerver/actions/presence.py:<span class=\"w\">    </span>send_event<span class=\"o\">(</span>user_profile.realm,<span class=\"w\"> </span>event,<span class=\"w\"> </span>user_ids<span class=\"o\">)</span>\nzerver/actions/typing.py:<span class=\"w\">    </span>send_event<span class=\"o\">(</span>realm,<span class=\"w\"> </span>event,<span class=\"w\"> </span>user_ids_to_notify<span class=\"o\">)</span>\nzerver/actions/typing.py:<span class=\"w\">    </span>send_event<span class=\"o\">(</span>sender.realm,<span class=\"w\"> </span>event,<span class=\"w\"> </span>user_ids_to_notify<span class=\"o\">)</span>\nzerver/tests/test_events.py:<span class=\"w\">            </span>send_event<span class=\"o\">(</span>\nzerver/tests/test_retention.py:<span class=\"w\">        </span>send_event<span class=\"o\">(</span>realm,<span class=\"w\"> </span>event,<span class=\"w\"> </span><span class=\"o\">[{</span><span class=\"s2\">\"id\"</span>:<span class=\"w\"> </span>cordelia.id<span class=\"o\">}</span>,<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"s2\">\"id\"</span>:<span class=\"w\"> </span>hamlet.id<span class=\"o\">}])</span>\nzerver/tornado/django_api.py:def<span class=\"w\"> </span>send_event<span class=\"o\">(</span>\nzerver/tornado/django_api.py:<span class=\"w\">    </span>transaction.on_commit<span class=\"o\">(</span>lambda:<span class=\"w\"> </span>send_event<span class=\"o\">(</span>realm,<span class=\"w\"> </span>event,<span class=\"w\"> </span>users<span class=\"o\">))</span>\n</code></pre></div>\n<p>The remaining can be converted to <code>send_event_unsafe</code> or anything we want to name it. We can use <code>send_event_on_commit</code> at these places too but <strong>it doesn't sound good namewise</strong> as they don't need to be inside a db transaction.</p>",
  "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>grep<span class=\"w\"> </span><span class=\"s2\">\"queue_json_publish(\"</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-l\n<span class=\"w\">      </span><span class=\"m\">30</span>\n</code></pre></div>",
  "<p>I did the bit of cleanup for those other comments. Pushed an updated version, which I intend to merge.</p>",
  "<p>I'm not trying to squash the handful of migrations merged in the last few days; seems not worth it. Overall the cost is something like 0.1s per migration, so it's only at scale that they add up.</p>",
  "<p>(And the first one doesn't have operations that directly squash, I think).</p>",
  "<p>There's probably a couple of seconds to be gained by squashing migrations in upstream projects; <code>django.contrib.auth</code> and <code>social_django</code>. The former seems like it could be a useful thing to contribute upstream; Django hasn't had a new migration since 2020 there.</p>",
  "<p>Filed <a href=\"https://code.djangoproject.com/ticket/35707\">https://code.djangoproject.com/ticket/35707</a> upstream for the Django one. That seems like a case where a lot of projects would benefit from the output being cleaned up.</p>",
  "<p>OK, marked <a href=\"https://github.com/zulip/zulip/pull/31338\">#31338</a> to merge once CI passes again. A nice benefit of this cleanup is that CI times should be down significantly for the main CI jobs.</p>",
  "<p>Can someone investigate <a href=\"https://github.com/zulip/docker-zulip/issues/423\">https://github.com/zulip/docker-zulip/issues/423</a>?</p>\n<p>The report is a bit confusing, since it doesn't show precisely what they think is a broken symlink, and I'm not sure if it's an actual problem or not.</p>",
  "<p>This looks like the same issue I brought up a while ago: <a class=\"stream-topic\" data-stream-id=\"31\" href=\"/#narrow/stream/31-production-help/topic/docker-zulip.20backup.20problem\">#production help &gt; docker-zulip backup problem</a></p>",
  "<p>Our design spec for thumbnailing included setting the content-type to <code>application/octet-stream</code> in the case that content-type claimed to be an image but we failed to parse its headers as such.</p>\n<p>We currently leave the content-type unchanged in these cases.  Should we change to overriding the content-type to <code>application/octet-stream</code>?</p>",
  "<p>I'm not sure what the full implications of that are, but probably? I wonder if it's worth checking how other image-processing systems like GitHub handle that kind of case.</p>\n<p>The trade-off would be, I suppose, is what happens with an image that <code>libvips</code> can't parse but your browser can?</p>",
  "<p>If we keep it marked as an image content-type, even though it won't be thumbnailed, a user could still click on it and view in their browser?</p>",
  "<p>Yeah.  Keeping it as-is is mostly a trade-off if we think we know better than browsers.  If we override it, then users may have a slightly better experience (a file download) than a weird broken image link of some sort.  But we might also force a download on a weird format corner case that libvips doesn't handle, but browsers do.</p>",
  "<p>There's probably always going to be some weird formats with that property.</p>",
  "<p>Yeah.  I expect that browsers will be faster to pick up support for weird edge cases, and perhaps be more forgiving at handling bad data?</p>",
  "<p>So maybe leaving the images as the type we were told they were is best?</p>",
  "<p>Yeah I think we can leave this as-is pending future evidence that we're doing it wrong.</p>",
  "<p>In <a href=\"https://github.com/zulip/zulip/issues/31261\">https://github.com/zulip/zulip/issues/31261</a>, someone is reporting that the pgdg upstream repository doesn't have an installable pgroonga package.</p>",
  "<p>When I tried to investigate, an oddity is that <a href=\"https://apt.postgresql.org/pub/repos/apt/pool/\">https://apt.postgresql.org/pub/repos/apt/pool/</a> seems to be missing its <code>16</code> directory.</p>",
  "<p><a href=\"https://wiki.postgresql.org/wiki/Apt\">The postgres wiki</a> gives a couple options for where to report bugs... but I'm a bit surprised that it might be possible for that repository to have been broken for postgres 16 (released about a year ago) since a month ago and it not having been fixed by now.</p>",
  "<p>That\u2019s not a bug. The <code>pool</code> directory is not part of the public interface of an APT repository, unless the <code>Packages</code> file instructs the client to look there.</p>",
  "<p>And PGroonga is a separate project that does not live at <a href=\"http://apt.postgresql.org\">apt.postgresql.org</a>.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31486\">#31486</a></p>",
  "<p>Oh I somehow had though the <code>postgresql-16-pgdg-pgroonga</code> packages (with <code>pgdg</code> in the name) were distributed by upstream postgres.</p>",
  "<p>For <code>message_flags.py</code>, I wonder if we would be better served sending events on commit in each loop through the transaction, and deprecating the <code>\"all\"</code> flag:</p>\n<div class=\"codehilite\"><pre><span></span><code>        with transaction.atomic(durable=True):\n            query = (\n                UserMessage.select_for_update_query()\n                .filter(user_profile=user_profile)\n                .extra(where=[UserMessage.where_unread()])[:batch_size]  # noqa: S610\n            )\n            # This updated_count is the same as the number of UserMessage\n            # rows selected, because due to the FOR UPDATE lock, we&#39;re guaranteed\n            # that all the selected rows will indeed be updated.\n            # UPDATE queries don&#39;t support LIMIT, so we have to use a subquery\n            # to do batching.\n            updated_count = UserMessage.objects.filter(id__in=query).update(\n                flags=F(&quot;flags&quot;).bitor(UserMessage.flags.read),\n            )\n\n            event_time = timezone_now()\n            do_increment_logging_stat(\n                user_profile,\n                COUNT_STATS[&quot;messages_read::hour&quot;],\n                None,\n                event_time,\n                increment=updated_count,\n            )\n            do_increment_logging_stat(\n                user_profile,\n                COUNT_STATS[&quot;messages_read_interactions::hour&quot;],\n                None,\n                event_time,\n                increment=min(1, updated_count),\n            )\n\n            count += updated_count\n            if updated_count &lt; batch_size:\n                break\n\n    event = asdict(\n        ReadMessagesEvent(\n            messages=[],  # we don&#39;t send messages, since the client reloads anyway\n            all=True,\n        )\n    )\n    send_event(user_profile.realm, event, [user_profile.id])\n</code></pre></div>",
  "<p>But I think the others are all correct; so we should figure out a replacement name for the base <code>send_event</code>.</p>",
  "<p>Maybe something like <code>send_event_rollback_unsafe</code>? I feel like that's stand out as something you're not going to randomly cargo-cult call. I think that correctly scopes what is unsafe about it -- that it will happen even if a transaction is rolled back.</p>",
  "<p>I've released 9.1-1 which addresses the half that report which is in <code>docker-zulip</code>, and updated the commit message in <a href=\"https://github.com/zulip/zulip/pull/31444\">#31444</a> to be clearer about why it's relevant.</p>",
  "<p><a href=\"https://zulip.com/api/mark-all-as-read\">https://zulip.com/api/mark-all-as-read</a> is deprecated, we'll remove the above discussed code. So, I think it's fine to leave it as it is ?</p>",
  "<p><code>send_event_rollback_unsafe</code> sounds good to me.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/Docker.20backups/near/1934834\">said</a>:</p>\n<blockquote>\n<p>I've released 9.1-1 which addresses the half that report which is in <code>docker-zulip</code>, and updated the commit message in <a href=\"https://github.com/zulip/zulip/pull/31444\">#31444</a> to be clearer about why it's relevant.</p>\n</blockquote>\n<p>Seems like version 9.1-1 broke docker compose deploy with following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Setting Zulip secrets ...\nGenerating Zulip secrets ...\ngenerate_secrets: No new secrets to generate.\nSecrets generation succeeded.\nZulip secrets configuration succeeded.\nActivating authentication backends ...\nSetting key &quot;AUTHENTICATION_BACKENDS&quot;, type &quot;array&quot; in file &quot;/etc/zulip/settings.py&quot;.\nAdding authentication backend &quot;EmailAuthBackend&quot;.\nAuthentication backend activation succeeded.\nExecuting Zulip configuration ...\nSetting key &quot;EMAIL_HOST&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;EMAIL_HOST_USER&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;EMAIL_PORT&quot;, type &quot;integer&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;EMAIL_USE_SSL&quot;, type &quot;bool&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;EMAIL_USE_TLS&quot;, type &quot;bool&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;EXTERNAL_HOST&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;MEMCACHED_LOCATION&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;RABBITMQ_HOST&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;RABBITMQ_USER&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;RATE_LIMITING&quot;, type &quot;bool&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;REDIS_HOST&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;REDIS_PORT&quot;, type &quot;integer&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;REMOTE_POSTGRES_SSLMODE&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nSetting key &quot;ZULIP_ADMINISTRATOR&quot;, type &quot;string&quot; in file &quot;/etc/zulip/settings.py&quot;.\nError accessing Zulip secrets; manage.py in production must be run as the zulip user.\nError in the Zulip configuration. Exiting.\n</code></pre></div>",
  "<p>Hm.  IIRC I didn't update <code>latest</code> so this should have limited impact.  Today's a holiday for me, so I'll take a look tomorrow.  Thanks for the report!</p>",
  "<p>UID of the zulip user seem to have changed in the image. It used to be 1000 but now it is 1001. There is a ubuntu user with uid 1000.</p>",
  "<p>For organisation level settings part of <a href=\"https://github.com/zulip/zulip/pull/25929\">#25929</a>, I'm thinking of changing the settings name from:</p>\n<p><code>can_create_groups_group</code> -&gt; <code>can_create_groups_user_group</code>.</p>\n<p><code>can_manage_all_groups_group</code> -&gt; <code>can_manage_all_groups_user_group</code></p>",
  "<p>although <code>_group</code> is the suffix for all other similar settings, I feel in this case <code>groups_group</code> is harder to read compared to <code>groups_user_group</code>.</p>\n<p>cc. <span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> since you've been working the most in this area</p>",
  "<p>For <a href=\"https://github.com/zulip/zulip/pull/25929\">#25929</a>, in terms of breaking down the PR for the <code>Organization-level settings</code> part.</p>\n<p>I'm thinking it might be good to have the backend changes and the UI changes for both settings in the same PR but just create review checkpoints to make sure it's not a lot to review at once.</p>",
  "<p>In order to have different, smaller PRs, there is a possibility to just create the backend settings and map the edit policy in the view to the settings on the backend and keep the UI same. </p>\n<p>But I'm not sure if it's worth the effort to set that mapping up if my immediate task after the backend settings is going to be the UI anyways.</p>",
  "<p>Group level settings are named  like <code>can_manage_group</code> and <code>can_mention_group</code>, so maybe <code>can_manage_all_groups</code> may also be fine.</p>",
  "<p>Yeah, that actually sounds better. <code>can_manage_all_groups</code> and <code>can_create_all_groups</code></p>",
  "<p>It's easy to review just the backend or frontend in a given commit regardless, since they're naturally divided by what files are touched. The main reason to split would be if one part can be merged without the other.</p>",
  "<p>So I'd probably do them together in one PR; you can look at Sahil's recent work for a bunch of examples.</p>",
  "<p>I'm not sure the create one needs \"all\" in its name?</p>",
  "<p>Yeah it's fine to not upgrade a deprecated endpoint here. Guessing we'll get to delete it after the mobile app cuts over to Flutter.</p>",
  "<p>I want to bump this thread up to see what the next steps are for this issue.</p>",
  "<p>Any update on fixing the 9.1-1 image? It is unusable at the moment.</p>",
  "<p>Hm.  The issue is that:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>docker<span class=\"w\"> </span>run<span class=\"w\"> </span>-it<span class=\"w\"> </span>--rm<span class=\"w\"> </span>zulip/docker-zulip:9.1-0<span class=\"w\"> </span>grep<span class=\"w\"> </span><span class=\"s1\">':100.:'</span><span class=\"w\"> </span>/etc/passwd\n<span class=\"go\">zulip:x:1000:1000::/home/zulip:/bin/bash</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>docker<span class=\"w\"> </span>run<span class=\"w\"> </span>-it<span class=\"w\"> </span>--rm<span class=\"w\"> </span>zulip/docker-zulip:9.1-1<span class=\"w\"> </span>grep<span class=\"w\"> </span><span class=\"s1\">':100.:'</span><span class=\"w\"> </span>/etc/passwd\n<span class=\"go\">ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash</span>\n<span class=\"go\">zulip:x:1001:1001::/home/zulip:/bin/bash</span>\n</code></pre></div>",
  "<p>This is <a href=\"https://bugs.launchpad.net/cloud-images/+bug/2005129\">https://bugs.launchpad.net/cloud-images/+bug/2005129</a></p>",
  "<p>I've started building a 9.1-2 which strips out the <code>ubuntu</code> user before creating the <code>zulip</code> user.</p>",
  "<p>Hmm, annoying that Ubuntu is moving in the direction of requiring an <code>ubuntu</code> user in their images; I feel like that's a security surface area concern for any container that doesn't intend to use the \"ubuntu\" user.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"22702\">@Jussi Talaskivi</span>: I just pushed 9.1-2.  Give that a whirl?</p>",
  "<p>Gah, I should have kicked the tires myself more thoroughly.  It still has a <code>ubuntu</code> user.</p>",
  "<p>OK, I see why.  One more build.</p>",
  "<p>We will not be able to merge the PR without it including changes to the production code; it does not do what its commit message advertises, without it.</p>\n<p>You should update <code>puppet/zulip/templates/nginx/zulip-enterprise.template.erb</code> with parallel changes to the dev droplet's config.</p>\n<p>We can spin up a DigitalOcean droplet for you to test the change on, after you do so.</p>",
  "<p>Pushed <a href=\"https://github.com/zulip/zulip/pull/31564\">#31564</a> to clean up the <code>staging</code> reference to HTTP -&gt; HTTPS.</p>",
  "<p>Left some comments on the PR about wordings.</p>",
  "<p>OK, 9.1-3 is out and does fix the issue.</p>",
  "<p>Once you confirm this fixes for you, I'll repoint <code>latest</code>.</p>",
  "<p>We're starting to look into this more seriously, now that it seems they've clarified their license and added postgres replication support to the library, which is important for us to want to adopt it for production use.</p>",
  "<p>Taking some notes on what we'll need to do to investigate this.</p>",
  "<p>The main function for full-text search in Zulip is <code>_by_search_tsearch</code> in <code>zerver/lib/narrow.py</code>; that's where we actually construct the SQL for using the <code>search_tsvector</code> index to search for keywords. It's only about 50 lines of (very dense) code.</p>\n<p>There's a bundle of complexity in <code>ts_locs_array</code> that is around making sure we get the right output back: We don't just want which messages match, but within each message, an array of start/end locations for where the actual matches are, which we use for highlighting.</p>",
  "<p>We already have support for a second search backend via the <code>USING_PGROONGA</code> code path:</p>\n<div class=\"codehilite\"><pre><span></span><code>    def by_search(self, query: Select, operand: str, maybe_negate: ConditionTransform) -&gt; Select:\n        if settings.USING_PGROONGA:\n            return self._by_search_pgroonga(query, operand, maybe_negate)\n        else:\n            return self._by_search_tsearch(query, operand, maybe_negate)\n</code></pre></div>",
  "<p>So <span class=\"user-mention silent\" data-user-id=\"10349\">Mateusz Mandera</span>, I think the first thing to try would be to add a parallel <code>USING_PARADEDB</code> parameter that attempts to use their backend for the search part.</p>",
  "<p>The other big piece of infrastructure that makes up the existing search engine is how we maintain the search indexes, and that is <code>./puppet/zulip/files/postgresql/process_fts_updates</code>.</p>\n<p>Now, Postgres supports automatically updating the search indexes at the time a message is sent. For latency reasons as measured like 10 years ago, we have a more complex architectural thing using triggers of having sending/editing a message add a row to an <code>fts_update_log</code> table, and that <code>process_fts_updates</code> worker is responsible for actually updating the search index using the content in the message.</p>",
  "<p>So we might want to look at what the actual latency impact is and whether we can get away with not doing that deferral, before cargo-culting that strategy. It might be that the index update code is fast enough with <code>pg_bm25</code> that we wouldn't need that.</p>",
  "<p>The other architectural thing that we will very likely want to change while touching this is that the existing indexes is defined like this:</p>\n<p><code>\"zerver_message_search_tsvector\" gin (search_tsvector) WITH (fastupdate=off)</code></p>\n<p>We likely want any future search index to take advantage of <code>realm</code> now being a denormalized column in the table, so probably it's worth adding any new indexes that way; that would eliminate a current bug in Zulip Cloud.</p>",
  "<p>I think those are probably the main details to know about the current system. We'll want to figure out how to measure the impact of changes, but probably something rough like \"hand-testing 20 queries on <a href=\"http://chat.zulip.org\">chat.zulip.org</a> with each backend\" is probably going to be good enough for analyzing performance, and running it here is probably also going to be the main way we validate whether its stemming decisions (etc) feel good, though we'll want to do some manual QA around that as well.</p>",
  "<p>9.1-3 is working correctly for me.</p>",
  "<p>Except the backup is still not working:<br>\nFileNotFoundError: [Errno 2] No such file or directory: '/usr/lib/postgresql/14/bin/pg_dump'</p>",
  "<p>I ran it with:<br>\n$ podman exec -ti zulip-pod-zulip su zulip -c \"/home/zulip/deployments/current/manage.py backup --output=/data/backups/zulip-backup.tar.gz\"</p>",
  "<p>Installing postgresql-client-14 package in the container seems to fix the issue.</p>",
  "<p>I think may need help with setting <code>realm_id</code> and <code>ip_address</code> in the session store.</p>",
  "<p>The postgresql-client-14 package should be included in the image. Multiple versions of the client may be installed simultaneously.</p>",
  "<p>OK, the bug is <a href=\"https://github.com/zulip/zulip/pull/31581\">#31581</a></p>",
  "<p>Which makes fixing this kinda require packaging 9.2.</p>",
  "<p>OK let's see if we can get a 9.2 out; there's plenty of good stuff in there.</p>",
  "<p>I'll do a backport PR shortly.</p>",
  "<p>We're attempting to make conversions from Slack and other systems be more self-service, without having to use command-line tools to perform the import.</p>\n<p>Uploaded Slack exports (which are .zip files containing .json files) can be moderately large (100s of MB), and other systems (which may include attachments) are even larger.  We need someplace to store these files as they're uploaded, until a backend worker process can process the import.</p>\n<p>The natural place is in a directory under<code>~/uploads/files/</code> or <code>s3://the-uploads-bucket</code> depending on the storage backend.  This is mildly complicated by the fact that we need to write automated purging tools for wherever they end up, since for servers with open realm creation, the only thing necessary to perform this upload is a validated email address, and we don't want unused zipfiles to just take up space forever.</p>\n<p>My default is going to use <code>conversion/&lt;PreregistrationRealm.id&gt;/</code>; Mattermost and RocketChat can have the whole directory for their data, and slack can save it as <code>slack.zip</code>.  Modulo that we'll need to solve how to support filename encoding for Mattermost/RocketChat, since S3 can't store arbitrary filenames.</p>",
  "<p>That seems plausible. I think we use a top-level directory <code>avatars</code> bucket, not the main uploads bucket, for data exports, which is most parallel? And maybe <code>import</code> would be a better name than <code>conversion</code>; not sure.</p>",
  "<p>The exports are stored there because they want to be world-readable.  As discussed previously elsewhere (I'm on mobile and can't find it at the moment, but see <a href=\"https://github.com/zulip/zulip/pull/21725\">#21725</a>), this is a misfeature, and also not a property we care about for uploads.</p>",
  "<p>Import is a better name, yeah, because we want to potentially also use this for self-hosted migrations.</p>",
  "<p>Yeah, doing it in the uploads bucket seems good. Since that currently has integer realm IDs as its top-level directory structure, it should be fairly cleanly separated.</p>",
  "<p>From <a href=\"https://github.com/zulip/zulip/pull/25929\">#25929</a>,</p>\n<p>For Org level - group creation permissions, admins can configure the setting and owners is an option. Once the option has been set to owners, do we still let admins change that permission? </p>\n<p>If yes, I'm not sure how <code>owners</code> option is useful if the admins can change it anyways.</p>",
  "<p>mentioning <span class=\"user-mention\" data-user-id=\"19257\">@Alya Abbott</span> directly since you mentioned you might not be checking <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/stream/3-backend\">#backend</a> that often.</p>",
  "<p>Issue: <a href=\"https://github.com/zulip/zulip/pull/31201\">#31201</a></p>\n<p>Automate the process of exporting private user data in organizations where admins don't own the data.</p>\n<p>As <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"https://github.com/zulip/zulip/issues/31201#issuecomment-2343796502\">mentioned</a>, <a href=\"https://github.com/zulip/zulip/pull/21725\">#21725</a> has some work to improve the export system.</p>\n<p>It majorly:</p>\n<ul>\n<li>provides a way to store exports in a dedicated S3 bucket. By default, they are uploaded to <code>S3_AVATAR_BUCKET</code>.</li>\n<li>Adds a new <code>RealmExport</code> model to record exports. Currently, we use <code>RealmAuditLog</code> to store data related to exports.</li>\n</ul>\n<p>Posting it here to just confirm (since the PR is a bit old) that there's no change in the plan &amp; we still want to add a new <code>RealmExport</code> model.</p>\n<p>I think, we should work on adding a <code>RealmExport</code> table and then <a href=\"https://github.com/zulip/zulip/pull/31201\">#31201</a>. The \"separate S3 bucket\" part, we can do as a follow-up ?</p>",
  "<p>I think the separate S3 bucket part is probably the most solidly written, so in some way the closest to being mergeable.  IIRC Tim reviewed the PR when it was just that part, and thought it looked pretty ready to merge.</p>\n<p>It will obviously need a rebase and some fixing up for some changes to the <code>zerver/lib/upload</code> system since then.</p>",
  "<p>IMHO the RealmExport table still makes sense (in whatever order).</p>",
  "<p>Okay, I'll extract out the first 6 commits in a separate PR. Rebase + Manual Testing.</p>",
  "<p>Hm -- we may want <code>s3://bucket-name/import/1234/convert/slack.zip</code> because the output of the Slack conversion is going to be a <em>Zulip</em> import, which also needs somewhere to live.  Hence perhaps wanting to use <code>s3://bucket-name/import/1234/realm.json</code> (and adjacent files) for that.</p>",
  "<p>Sounds reasonable to me as a plan.</p>",
  "<p>I guess I'm not sure how much we'll want to be using tar archives rather than individual files for this, but that concept seems reasonable.</p>",
  "<p>This is a setting we likely only want owners to be able to change. The \"how users join the organization\" section works that way, so you can likely follow that pattern for configuration.</p>",
  "<p>Specifically for \"Who can manage all user groups\"; \"who can create user groups\" is not as sensitive.</p>",
  "<p>Mmm, true.  Storing the tarball is likely more efficient and easier in terms of not having to worry about filename character support.</p>",
  "<p>I'll try the backup with 9.2 image when it is available.</p>",
  "<p>Got it, I'll adjust it accordingly.</p>",
  "<p>Makes sense to me.</p>",
  "<p>Just wanted to clarify another small point for <a href=\"https://github.com/zulip/zulip/pull/25929\">#25929</a>, group management will include group deletion too? Is that assumption correct?</p>\n<p>Or will that be controlled by the <code>can_create_groups</code> (Group creation) setting?</p>",
  "<p>Group deletion should be configurable per group, so definitely not <code>can_create_groups</code>. I think it makes sense to consider deleting a group as part of management rather than splitting it out.</p>",
  "<p>I just pushed 9.2, and worked for me with a <code>docker compose</code> variant of the <code>podman</code> command you wrote above.</p>",
  "<p>Backup now works for me with 9.2-0 image and Postgres 14.</p>",
  "<p>Hey yall !</p>\n<p>Just saw docker-zulip has be released as <code>9.2-0</code>. I have two questions:</p>\n<ol>\n<li>Why use this <code>-</code> rather than <code>.</code> (make it semver ?) (it breaks my renovate automatic crawling <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> )</li>\n<li>Where can I find a patch note (ish) of what's new/changed in a docker version ?</li>\n</ol>\n<p>Thanks !</p>",
  "<p>Glad to hear it.  <code>latest</code> has been pushed to match, so I think this is resolved.</p>",
  "<p>I think we should rip out the Docker image's \"built-in\" backup and suggest the standard <code>./manage.py backup</code>, but that's a task for another day.</p>",
  "<p>We inherited the versioning scheme.  I think the goal is that it's more explicit about packaging updates vs application updates (\u00e0 la Debian package naming) but I don't know that that's sufficient value vs semver.</p>",
  "<p>For application version updates, the <a href=\"https://zulip.readthedocs.io/en/latest/overview/changelog.html#zulip-server-9-2\">standard Zulip changelog applies</a>.</p>",
  "<p>For packaging updates, I've beenm keeping the <a href=\"https://github.com/zulip/docker-zulip/blob/main/kubernetes/chart/zulip/CHANGELOG.md\">k8s chart changelog</a> updated.</p>",
  "<p>Moving the following conversation regarding <a href=\"https://github.com/zulip/zulip/pull/31624\">#31624</a> from a group DM:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> said:</p>\n<p>Regarding the boto client caching, I vaguely remember our having caching on the <code>S3Client</code> object and it being removed at some point. <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> do you remember that?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> said:</p>\n<p>Maybe, but git history will recall better than I</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"22341\">Prakhar Pratyush</span> said:</p>\n<p>This <a href=\"https://github.com/zulip/zulip/commit/214bd4ed88f6fb245dfa018fc00cbee5258e8169\">https://github.com/zulip/zulip/commit/214bd4ed88f6fb245dfa018fc00cbee5258e8169</a> ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> said:</p>\n<p>Yeah.  Maybe check if that means that new commit makes any sense</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"22341\">Prakhar Pratyush</span> said:</p>\n<p>The caching will help <code>get_signed_upload_url</code>. </p>\n<p>The commit message:</p>\n<div class=\"codehilite\"><pre><span></span><code>The `get_signed_upload_url` code is called for every S3 file upload\nrequest, and is thus in the hot path.  The boto3 client caching\noptimization is thus potentially useful as a performance optimization.\n</code></pre></div>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> said:</p>\n<p>OK, I think given the analysis the new commit probably does make sense if and only if it's still accurate we're calling that function in the hot path.</p>",
  "<p>I've updated the PR to include changes to the production code and resolved the comments about wording.</p>",
  "<p>The PR (<a href=\"https://github.com/zulip/zulip/pull/31596\">#31596</a>) for <a href=\"https://github.com/zulip/zulip/pull/25929\">#25929</a> is ready except for one point now. The failing tests in the PR fail because of the scenario in the question.</p>\n<p>Default for <code>can_manage_group</code> is nobody. Default for <code>can_manage_all_groups</code> is owners. This leads to a scenario where a non-owner member after creating a group with the defaults will not be able to edit anything about the group just after creating it. Should we add an exception for the group creator to let them control their group?</p>",
  "<p>This wasn't a problem when the create and manage settings were combined with each other. Since, if they could create it, they could edit it immediately after. If an admin changed that combined permission, the group creator might lose the permissions to manage their group, but since they would not be able to create a group now, we won't have the scenario where the user is unable to do anything about the group just after creating it.</p>",
  "<p>I think we want the default for <code>can_manage_group</code> setting to be \"Group creator\" but we decided to just have it set to \"Nobody\" for now because the UI for representing the anonymous groups was not ready. So, the problem should be solved, once we have the UI ready.</p>",
  "<p>Got it, thanks. Do we have an existing issue for that?</p>",
  "<p>No, there isn't any issue specifically for changing the default, but <a href=\"https://github.com/zulip/zulip/pull/25929\">#25929</a> mentions the default for <code>can_manage_group</code> as \"Group creator\".</p>",
  "<p>Got it. I\u2019m wondering whether we should implement that before the org level group settings (I\u2019m not sure of the effort for that ui at this point) or should we settle on an intermediate solution for now for this problem in org level group permissions</p>",
  "<p>Would the group creator still be able to add/remove members from the group? If so, that's no worse than what we have always had for channels, so would be fine as an intermediate state, I think.</p>",
  "<p>Yes, group creator would have all the permissions that fall under managing the group in the intermediate state, including deleting the group.</p>",
  "<p>Verified that <code>get_signed_upload_url</code> is currently used in <code>serve_file</code> which is a hot path. So, the cache still makes sense.</p>",
  "<p>We currently define the default in <code>GroupPermissionSetting</code> object for each setting and then those objects are used when creating the user group, stream or realm. We have a <code>default_group_name</code> field in <code>GroupPermissionSetting</code> which is set to the system group name.</p>",
  "<p>But there can be cases where we want the default for a setting to be something other than system groups. One of them would be setting the default for <code>can_manage_group</code> to the user who created the group.</p>\n<p>And as an other example, <a href=\"https://github.com/zulip/zulip/pull/25938\">#25938</a> describes the default for \"Who can join this group\" setting to be set to the value of \"Who can manage all groups\" realm-level setting. How do we want to handle such cases? We can set the defaults without referring to the <code>default_group_name</code> for some settings but I guess would be better to use the same framework.</p>",
  "<p>Like for the group creator user, we discussed about setting the <code>default_group_name</code> to a special string like \"group_creator\" and then the function which set the defaults will handle this string differently from the system user group names. For other cases, like this one where the default will be value of some other setting, we can have a special string like the setting name.</p>\n<p>Any feedback on the approach or some other suggestions?</p>",
  "<p>The first version of the UI is ready <a href=\"https://github.com/zulip/zulip/pull/31527\">#31527</a> and I guess might be merged soon.</p>\n<p>But I think we can still proceed with adding the org-level setting. Currently for streams as well, we do not allow stream creator to edit the name, setting, etc., though some users have been requesting the feature to allow at least stream creator to edit them.</p>",
  "<p>Sounds good!</p>",
  "<p>That sounds like a good starting approach to me, not sure how many of these cases we anticipate.</p>\n<p>There's another option where we can have an argument accept a function which returns a user group. In that case, those functions will be present at different places instead of being centralised in one function. But I think that might be better to use if we expect a lot of these special cases.</p>",
  "<p>I think <code>group_creator</code> is certainly a good option for that setting. We can maybe use something like <code>realm_setting:can_manage_all_groups</code> as a syntax for the value of a realm-level setting.</p>",
  "<p>I am not sure how often we would have these special cases, but yeah we can figure it out as we go on to add more settings.<br>\n<code>realm_setting:can_manage_all_groups</code> syntax sounds good for now.</p>",
  "<p><span class=\"user-mention\" data-user-id=\"10242\">@Sahil Batra</span> , for <a href=\"https://github.com/zulip/zulip/pull/31596#discussion_r1767845542\">comment</a>, </p>\n<blockquote>\n<p>This might lead to confusion where a user cannot see in the UI that the group creator permission but the creator actually has the permission.<br>\nWe can target to complete the work for setting the default for\u00a0<code>can_manage_group</code>\u00a0quickly and enable it (it is only enabled in development currently).</p>\n</blockquote>\n<p>Is there any existing work for <code>group_creator</code> or would it be better work it in this PR (<a href=\"https://github.com/zulip/zulip/pull/31596\">#31596</a>).</p>",
  "<p>From <a href=\"https://github.com/zulip/zulip/pull/31596#discussion_r1767827885\">comment</a> by <span class=\"user-mention silent\" data-user-id=\"10242\">Sahil Batra</span> :</p>\n<p>Currently, according to the current logic, we do not let non-admins and non-moderators manage a group even if they are in the group belonging to <code>can_manage_all_groups</code>. Since we have an explicit group for <code>can_manage_all_groups</code>, should we respect that setting out-and-out and not deny a user to manage a group even if they're not an admin or moderator?</p>",
  "<p>Not yet. But the new UI work has been merged, so we can probably work on this next.</p>",
  "<p>Just to be clear, non-admns and non-moderators can manage a group if they belong to <code>can_manage_all_groups</code> and are also a member of the group to be managed. I was thinking whether we should just remove the restriction of being member of the group to be managed since the setting allows managing all user groups.</p>",
  "<p>Got it, in that case, I can start work on just the group_creator part as you described it in <a href=\"#narrow/stream/3-backend/topic/defaults.20other.20than.20system.20groups.20for.20settings/near/1943974\">https://chat.zulip.org/#narrow/stream/3-backend/topic/defaults.20other.20than.20system.20groups.20for.20settings/near/1943974</a>. If I can work it in <a href=\"https://github.com/zulip/zulip/pull/31596\">#31596</a> in time, all well, otherwise we can just have it as an immediate followup. Wdyt?</p>",
  "<p>Sounds good.</p>",
  "<p>Is this the setting replacing <code>user_group_edit_policy</code>, which defaults to members?</p>",
  "<p>I think we need to be careful here; we don't want to suddenly have members be able to manage user groups that they are not a member of. Probably the right answer is that <code>can_manage_all_groups</code> should be generated with a default/initial value that's no bigger than administrators. The <code>user_group_edit_policy</code> meant \"Who can manage groups they're in\", which is a very different meaning than \"Who can manage groups regardless of membership?\".</p>",
  "<p>Yeah, good point. Default values for new realm can be adjusted, but there will be a lot of realms with that setting set to members already which will migrated to its equivalent system group. This change might become a surprise for them.</p>",
  "<p>For the group creator part, I have one question. We may end up in a scenario where there is no group creator for a user_group, when the user group is created with acting_user as None. Do we want to default to <code>NOBODY</code> system group in that case?</p>",
  "<p>OTOH, do we want to have this default in the backend or would just having a frontend default be enough? </p>\n<p><a href=\"#narrow/stream/101-design/topic/Group.20creator.20default/near/1945550\">https://chat.zulip.org/#narrow/stream/101-design/topic/Group.20creator.20default/near/1945550</a></p>",
  "<p>I think would be good to have it for backend as well.</p>\n<p>We would always have a group creator while creating group using the API, and I don't think there is a management command to create user group. And someone trying to create a group by calling the function using shell, will face an error can handle it by themself.</p>",
  "<p>Yeah, we discussed about setting default to a value which gives less privilege than before.</p>",
  "<p>What we want to avoid is behavior changing, especially in a dangerous way, when we do migrations after reworking the data model. By far the most dangerous thing we could do is to convert the default behavior of \"members of a group can add members of the group\" into \"anyone in the organization can add members to the group\"  by just using the \"equivalent value\" for a setting with a completely different meaning.</p>",
  "<p>What we may need to do is be careful about the order in which we merge changes; we might want to be able to set a \"who can add others to this group\" to the group itself in cases where the organization-level <code>user_group_edit_policy</code> setting is \"members\", to provide backwards-compatibility.</p>",
  "<p>I think there will be situations where groups are being synced from a system like LDAP; but I'm not sure if that would actually create groups or just control the membership of groups that are hooked up.</p>",
  "<p>Can we do something like just keep the old setting for now till we add all the targeted settings for group management like we did for <code>can_manage_group</code>?</p>\n<p>We can keep merging the new settings in main by setting default as <code>Nobody</code> and hiding them in the UI, so that all permissionss are controlled by the <code>user_group_edit_policy</code> and then when have all the new settings ready, we can just remove the old setting and enable the new settings in UI with commits for migrations and setting the defaults.</p>",
  "<p>Yeah, that's potentially a workable plan.</p>",
  "<p>The thing that's annoying is we'd have to have both types of security checks coexist, or just have the new setting not hooked up (just present but dead in the API and UI).</p>",
  "<p>The other option is to try to merge the setting for \"who can add others to this group\" at the same time as that transition.</p>",
  "<p>I'm not entirely aware of how it was taken care for <code>can_manage_group</code>, but would there be a possibility where we go for the safest option first i.e. not let non-group members who are not admins or mods manage the group. Then when we are adding the setting for <code>\"who can add others to this group\"</code> we can change the setting accordingly to provide backwards compatibility.</p>",
  "<p>Checking <a href=\"https://github.com/zulip/zulip/blob/89d29ae5690c2371f67ee1596d5c06c495418f43/zproject/backends.py#L952\">sync_groups_from_ldap</a>. It doesn't seem like we are creating groups.</p>",
  "<p>So to reiterate what I'm understanding, if we end up in a situation with no creator, we will not default to NOBODY and instead just fail and raise an error.</p>",
  "<p>For <code>can_manage_group</code> we only show the setting in UI only in development currently and the default is set to \"Nobody\" group, so that setting does not affect the permissions unless someone changes the setting using API to something other than \"Nobody\" group. But yeah having both types of security checks is certainly annoying.</p>\n<p>So we can give permission to members only if they are member of the group and then can change this later.</p>\n<p>Just to clarify, we plan to later not have this restriction for neither the realm level setting nor any group-level setting if the setting is set to <code>role:members</code> system group and we would just allow users in the group to do that specific task, since we would already have make the permissions flexible enough  by providing group-level setting.</p>",
  "<p>Got it, so we'll keep the behaviour highlighted in the <a href=\"https://github.com/zulip/zulip/pull/31596#discussion_r1767827885\">comment</a> same for now and change it later!</p>",
  "<p>I was working on \"Who can join this group\" setting, so for that also we want the same behavior for member users that only user which are group members will be allowed.</p>",
  "<p>That seems OK for now; we can always change it later if we add such a syncing feature. But it seems good to scope that sort of logic as part of building a thing that would use that capability, not do it preemptively now.</p>",
  "<p>I think we've probably had some sort of regression in Django process startup time. Currently, <code>manage.py list_realms</code> takes about 4.5s to finish, and that's basically just warming up a process to do a single cheap database query.</p>",
  "<p>We should probably do some sort of profiling on that to see where the time is going; I'm pretty sure it was a lot lower after the last time we did a profiling round.</p>",
  "<p>I wonder if we just regressed the S3 libraries import detail.</p>",
  "<p>Hmm, doesn't seem be obviously that. One thing I do note is a lot of time in <code>pyasn1</code>.</p>",
  "<p>But I guess most of that runtime is checks. I wonder if we should think about switching those to be off-by-default, and just enabled where we want them.</p>",
  "<p>Are those checks from that <code>apns1</code> library's import time, or from us invoking it at our import time?</p>\n<p>Either way, it'd be good to get them out of import time. If we can't move them out of runtime entirely (in favor of development-time, as a form of test), they should happen lazily when they first become relevant. Or else explicitly, as part of the code called from a \"main\" function of a process that is going to need them.</p>",
  "<p>(One language-design choice which Dart made and I appreciate is that there <em>is</em> no such thing as code that runs at import time. If you write something like <code>final thing = someComputation();</code> at top level in a source file, what that compiles to is that <code>thing</code> gets lazily initialized \u2014 so that <code>someComputation</code> gets called \u2014 the first time you access it, and then memoized for future accesses.</p>\n<p>I think the designers of Dart had experienced seeing big sprawling codebases with lots of libraries by lots of different people where different parts of the codebase let on-startup execution slip in here and there because it feels like the easiest way to deal with some small problem they have, and it adds up to a mess that takes longer and longer to start up.)</p>",
  "<p>It's happening at our import time. I'm not sure what module is responsible for importing it; the profile output I was looking at felt hard to browse that out of.</p>",
  "<p>We already start all of our server processes with <code>--skip-checks</code> (<a href=\"https://github.com/zulip/zulip/commit/48b925931e2fd9bf99eb899ddce75f35d6b876f7\">48b925931e2fd9bf99eb899ddce75f35d6b876f7</a>)</p>",
  "<p><code>can_manage_group</code> setting also does not restrict the permission to only group members. So, do we also want to change that?</p>",
  "<p>Yeah, the thing that made me notice this was the <code>manage.py showmigrations</code> call inside <code>get_migration_status</code> -- was just noticing that this part of <code>provision</code> was very slow.</p>",
  "<p>So maybe I should just add <code>skip_checks=True</code> to our various places that we call management commands from within another, or use the <code>call_command</code> function.</p>",
  "<p>This gives you a flame graph:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>py-spy\npy-spy<span class=\"w\"> </span>record<span class=\"w\"> </span>-o<span class=\"w\"> </span>profile.svg<span class=\"w\"> </span>--<span class=\"w\"> </span>./manage.py<span class=\"w\"> </span>list_realms\n</code></pre></div>",
  "<p>Yeah I was using that, but the individual entries in the SVG feel hard to interpret.</p>",
  "<p>It helps to search for <code>&lt;module&gt;</code>.</p>\n<ul>\n<li>15% of the time is <code>zproject.default_settings</code> \u2192 <code>django_auth_ldap</code> \u2192 <code>ldap</code>. </li>\n<li>15% of the time is <code>zerver.actions.realm_settings</code> \u2192 <code>corporate.lib.stripe</code> \u2192 <code>stripe</code>.</li>\n<li>12% of the time is <code>zproject.computed_settings</code> \u2192 <code>boto3</code>.</li>\n<li>10% of the time is <code>corporate.views.remote_billing_page</code> \u2192 <code>zilencer.views</code> \u2192 <code>dns.resolver</code>.</li>\n<li>5% of the time is <code>zerver.lib.thumbnail</code> \u2192 <code>bs4</code> and <code>pyvips</code>.</li>\n</ul>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31729\">#31729</a> for the bit of passing <code>--skip-checks</code> in some internal places in <code>provision</code>.</p>",
  "<p>Presumably we'd import <code>ldap</code> from <code>zproject/backends.py</code> if we moved it out of settings. We probably could with some effort make the LDAP import only happen if it's going to be used; might be worth it it's <code>ldap</code> itself that's expensive, not just some dependency of <code>ldap</code> that we need for other things.</p>",
  "<p>For <code>stripe</code>, we could try to make the development environment default to not having the billing system included.</p>",
  "<p>Is <code>dns.resolver</code> itself is 10% of the time, or is it just the first place we import something else that's big?</p>",
  "<p>I think the main regression is probably that we're importing <code>boto3</code> again; upthread I think we'd make it only get imported if you're using that backend.</p>",
  "<p>I don't think it's this code in <code>computed_settings.py</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>S3_KEY = get_secret(&quot;s3_key&quot;)\nS3_SECRET_KEY = get_secret(&quot;s3_secret_key&quot;)\nif S3_KEY is not None and S3_SECRET_KEY is not None and S3_REGION is None:\n    import boto3\n\n    S3_REGION = boto3.client(&quot;s3&quot;).meta.region_name\n</code></pre></div>",
  "<p>Could it be <code>from mypy_boto3_s3.service_resource import Object</code> in <code>zerver/lib/export.py</code> end up importing it?</p>",
  "<p>I happened to have <code>s3_key = testing</code> and <code>s3_secret_key = testing</code> in my <code>dev-secrets.conf</code> for some reason.</p>",
  "<p>The flame graph shows the entire call chain, so speculation isn\u2019t needed there; I\u2019m just summarizing.</p>",
  "<p>The rightmost modules I noted are taking up essentially all the time of what I listed.</p>",
  "<p>Do you understand why <code>dns.resolver</code> would be so expensive to import? I didn't think DNS was that complicated.</p>",
  "<p>That one we can likely cut by just doing the import inside the one function that uses it, I think?</p>",
  "<p>But it's also quite surprising to me that it'd be expensive.</p>",
  "<p>Possibly a GC got triggered while importing it. It\u2019s not as prominent on a profile where I disabled GC.</p>",
  "<p>OK, that makes sense. So the main opportunity I see from the standpoint of being used in a very narrow subset of our code is <code>ldap</code>, which is 20% of the time in my profile.</p>",
  "<p>So if we could cause it to not be imported if it's not being used, that could save a lot of startup time cost.</p>",
  "<p>What's annoying is that LDAP configuration system requires importing some stuff from LDAP in <code>/etc/zulip/settings.py</code>.</p>",
  "<p>So maybe the path here involves the preparatory work we'd talked about for moving <code>/etc/zulip/settings.py</code> to <code>toml</code> format: Taking those settings and putting them in a separate <code>/etc/zulip/ldap_settings.py</code>, that can be only used if you've enabled the LDAP backend.</p>",
  "<p><a href=\"https://web.mit.edu/andersk/Public/zulip/list_realms.svg\">Flame graph</a> with GC disabled and the importlib frames filtered out.</p>",
  "<p>OK I do see that <code>zerver/lib/export</code> code path importing part of <code>boto</code> for that single type.</p>",
  "<p>LDAP doesn't look huge there; so maybe that was GC in my sample too. 0.7% in yours.</p>",
  "<p>I see basically 3 good opportunities in that last flame graph:</p>\n<ul>\n<li><code>boto3</code> is like 3% from that one <code>mypy</code> extensions import in <code>zerver/lib/export.py</code>.</li>\n<li><code>stripe</code> is 21%.</li>\n<li><code>zerver/openapi/openapi.py</code> is 5%; maybe we could limit those imports to when we're going to use them? Not sure.</li>\n</ul>",
  "<p>I expect only the <code>boto3</code> thing is an easy fix.</p>",
  "<p>Kinda makes me think we might be better off focusing on upgrading our Python version <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>.</p>",
  "<p>There's also</p>\n<ul>\n<li>4% importing <code>pyvips</code></li>\n<li>and 3% importing <code>bs4</code> (aka BeautifulSoup)</li>\n</ul>\n<p>both from <code>zerver/lib/thumbnails.py</code>.</p>\n<p>Those would be fairly straightforward to adjust so the import only happens when we first use something that needs it. For example in <code>rewrite_thumbnailed_images</code>, we'd import <code>bs4</code> and then lazily initialize <code>html_formatter</code> (which is used only by that function); then that's the only uses of <code>bs4</code> in that file.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/Python.20process.20startup.20time/near/1948031\">said</a>:</p>\n<blockquote>\n<p>For <code>stripe</code>, we could try to make the development environment default to not having the billing system included.</p>\n</blockquote>\n<p>This seems like a good change, and would make a big difference.</p>",
  "<p>Awkward that just <code>import stripe</code> apparently takes most of a second. That goes into our startup time in production, right?</p>\n<p>I think there's got to be things the Stripe people are doing wrong there and ought to fix. But probably not easy to get them to do so.</p>",
  "<p>Yeah surely they could have it lazily load parts of their system that aren't in use yet.</p>",
  "<p><a href=\"https://github.com/stripe/stripe-python/issues\">https://github.com/stripe/stripe-python/issues</a> is well-tended, so would be reasonable to put in a bug report.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"2187\">Greg Price</span> <a href=\"#narrow/stream/3-backend/topic/Python.20process.20startup.20time/near/1948094\">said</a>:</p>\n<blockquote>\n<p>Those would be fairly straightforward to adjust so the import only happens when we first use something that needs it. For example in <code>rewrite_thumbnailed_images</code>, we'd import <code>bs4</code> and then lazily initialize <code>html_formatter</code> (which is used only by that function); then that's the only uses of <code>bs4</code> in that file.</p>\n</blockquote>\n<p><code>bs4</code> we also use in a couple other code paths, but I agree this should be possible and is probably worth doing.</p>",
  "<p>Importing <code>stripe</code> lazily takes a bit of work but is possible: <a href=\"https://github.com/zulip/zulip/pull/31731\">#31731</a>.</p>",
  "<p>Yeah, that seems not very messy especially given the benefit!</p>",
  "<p>Main unfortunate bits are:</p>\n<ul>\n<li><code>corporate/views</code> is a bit choppy. I guess this is a place where we'd kinda need some hack to support lazy-importing modules implementing views, which might be possible with some evil indirection but probably wouldn't be preferable.</li>\n<li>Risk of people accidentally violating the new invariant.</li>\n</ul>",
  "<p>It looks like it\u2019d be easy to lazily load all those webhooks (5%).</p>",
  "<p>Yeah I was going to ask if we can do that; seems worth it if it's simple to do so.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31733\">#31733</a></p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31734\">#31734</a> for boto3.</p>",
  "<p>In addition to <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/LLM.20conversation.20summaries\">#design &gt; LLM conversation summaries</a> and <a class=\"stream-topic\" data-stream-id=\"378\" href=\"/#narrow/stream/378-api-design/topic/LLM.20summaries\">#api design &gt; LLM summaries</a>, I think there's a question of how we want to do the Zulip Server internals implementation of an LLM integration.</p>",
  "<p>I imagine we'll want to, if possible, use an OSS third-party model that can be self-hosted, and then have a server-level setting of the form <code>AI_SUMMARY_MODEL_URL</code> that defaults to <code>None</code> and controls whether the feature is enabled as well as how to reach it.</p>",
  "<p>But I guess there's the somewhat thorny question of whether we want to just write code against a specific model's API, which is likely trivial, or pull in one of those multi-model libraries like <code>langchain</code> that probably add a bunch of gunk to the system but make it a configuration change rather than a code change to adjust what model one is using.</p>",
  "<p><a href=\"https://github.com/BerriAI/litellm\">LiteLLM</a> might be the right kind of thing.</p>",
  "<p>Yeah that seems like a fine option to start with.</p>",
  "<p>OK, cool, with those things merged, <code>manage.py list_realms --skip-checks</code> sometimes clocks in under 1s on my system, which it definitely never did before. (Checks are very high variance)</p>",
  "<p>Regarding <a href=\"https://github.com/zulip/zulip/pull/29380#issuecomment-2010731437\">#29380 (comment)</a>:</p>\n<blockquote>\n<p>Carefully reviewing all the code around live-update events for messages. I suspect that for example, the \"I did an emoji reaction on message ID x\" event is sent to all users with a\u00a0<code>UserMessage</code>\u00a0for the message, without filtering for being still subscribed. We likely will need to create a shared helper for doing the\u00a0<code>send_event</code>\u00a0calculations for this purpose that gets called from\u00a0<code>notify_reaction_update</code>\u00a0and friends.</p>\n</blockquote>\n<p>Just to confirm: Do we no longer plan to live update reactions in \"Reactions\" view for messages which are in unsubscribed channels ? (Message was initially in a subscribed stream)</p>\n<p>I think, it's fine to NOT live-update in this case? The only exception would be usermessages with <code>historical</code> flag because:</p>\n<blockquote>\n<p>To ensure that reactions do live-update for any user who has actually participated in reacting to a message, we add a<br>\n\"historical\" UserMessage row for any user who reacts to message, subscribing them to future notifications, even if they are not<br>\n subscribed to the stream.</p>\n</blockquote>\n<p>Also, </p>\n<blockquote>\n<p>I think the correct logic would be to just use\u00a0<code>subscriber_ids_with_stream_history_access</code>?</p>\n</blockquote>\n<p><code>subscriber_ids_with_stream_history_access</code> returns an empty  <code>set</code> for channels with protected history. So, we can't just use <code>subscriber_ids_with_stream_history_access</code>.</p>",
  "<ul>\n<li><code>submessage</code> is buggy. In a public channel, users don't receive the live updates if the poll / todo was sent before they joined. -- Fixing it.</li>\n</ul>",
  "<p>I would like to automate the setup of a realm. I am using ./manage.py with create_realm, which works good. But, if I would like to override one of the organisation settings in the creation, like setting <code>invite_required</code> to <code>false</code>, instead of the default (<code>true</code>), is there a way to do that with manage.py ? I can see that I can use the settings flag and point to a settings module, but is that the way to do it? If so, how do I create this settings  module?</p>",
  "<p>The <code>--settings</code> command-line flag is not specific to <code>create-realm</code> -- it's for overriding the <code>/etc/zulip/setting.py</code> file with a different path, which is rather not what you're looking for.</p>",
  "<p>We don't have a command-line way to adjust the settings on a realm.  It's not hard to do via <code>./manage.py shell</code>, but if you're trying to automate it, you may need to write your own small management command to do so.</p>\n<p>I think we'd also take a patch to <code>create_realm</code> to call <code>do_set_realm_property</code> with some set of user-supplied arguments.  I think the complicated part there is doing the right type coercion for a generic property.</p>",
  "<p>I guess we have <code>Realm.property_types</code>?</p>",
  "<p>One fix would be to add all of those properties as automatically-generated optional command-line flags, but that'd make the help pretty unwieldly.</p>",
  "<p>Ah ok, I understand, I will look into it in more details. Thanks.</p>",
  "<p>We don't currently have a goal of doing live-update systematically for content in channels you're not subscribed to; in some ways that's no different from looking at a channel that you've never been subscriber to, and one can't really manage that without sending live updates for every public channel on the server regardless of subscriptions.</p>",
  "<p>But if we see an easy way to send live-updates for messages that a user received while they were subscribed, and the user still has access to the message, it'd be nice to do that.</p>",
  "<p>I just wouldn't want to make these basic operations significantly slower to do an expensive access-control check involving a lot of extra database queries in non-protected history channels for this sort of live-update detail.</p>",
  "<p>I don't think the help being unwieldy is a big deal; it's not like this command gets use for much else.</p>",
  "<p>No, it's a much more explicit setting. The previous model was just working around there being no way to delegate permissions whatsoever.</p>",
  "<p>I wanted to flag <a href=\"https://github.com/zulip/docker-zulip/issues/454\">https://github.com/zulip/docker-zulip/issues/454</a> as a thing that may want a resolution from us. I'm not investigated, as I'm doing a triage pass.</p>",
  "<p>I guess the remaining opportunities noted above were <code>openapi</code>, <code>pyvips</code>, <code>bs4</code>?</p>",
  "<p>As reported in <a href=\"https://github.com/zulip/docker-zulip/issues/394\">https://github.com/zulip/docker-zulip/issues/394</a>, it's kinda annoying for the Docker image that we have <code>LOCAL_UPLOADS_DIR = \"/home/zulip/uploads\"</code> hardcoded in <code>prod_settings_template.py</code>, rather than a commented setting with the default value in <code>default_settings.py</code>. Is there a reason not to change that?</p>",
  "<p>One could in theory do that for the other dozen or so settings that are not uncommented, but this one is kinda special in that its presence disables the S3 integration unconditionally.</p>",
  "<p>But maybe it's worth doing a sweep of the dozen or so non-required settings that are like this.</p>",
  "<p>Ok. So I guess that restriction for allowing only group members, is something we are doing for migration purposes to maintain the same permission that we had before.</p>\n<p>And then would probably remove this restriction in future.</p>",
  "<p>I would be a real good addon,  to have that possibility for automation.</p>",
  "<p>Defaulting in <code>default_settings.py</code> wouldn't change how Docker would have to handle it -- it'd still have to set <code>LOCAL_UPLOADS_DIR = None</code> to override the default.</p>",
  "<p>After my PR <a href=\"https://github.com/zulip/zulip/pull/31168\">Faster stream creation</a>, My changes were to make :</p>\n<ul>\n<li>\n<p><code>bulk_access_users_by_email</code> has the same <code>select_related</code> which <code>access_user_by_email</code> uses.</p>\n</li>\n<li>\n<p><code>bulk_access_users_by_id</code> has the same <code>select_related</code> which  <code>access_user_by_id</code> uses.</p>\n</li>\n</ul>\n<p>but now they both have the exact same <code>select_related</code> filter, I think this change is made by <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> , Why ?</p>",
  "<p>Can you post the actual code here?</p>",
  "<p>Hmm, yeah. It's possible the actual bug here is using this setting's presence to decide which storage backend to use.</p>",
  "<p>My changes : <br>\n<code>bulk_access_users_by_email</code> uses , which is used by <code>access_user_by_email</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"realm\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"realm__can_access_all_users_group\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"realm__can_access_all_users_group__named_user_group\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"realm__direct_message_initiator_group\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"realm__direct_message_initiator_group__named_user_group\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"realm__direct_message_permission_group\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"realm__direct_message_permission_group__named_user_group\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bot_owner\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</code></pre></div>\n<p>while <code>bulk_access_users_by_id</code> uses, which is used by <code>access_user_by_id</code> : </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"s2\">\"realm\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"realm__can_access_all_users_group\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"realm__can_access_all_users_group__named_user_group\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bot_owner\"</span><span class=\"p\">,</span>\n</code></pre></div>",
  "<p>now both use the first filter</p>",
  "<p>Well, does this code path need to access <code>realm__direct_message_permission_group</code>? Generally we don't want to fetch more data than we need.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_user_base_query_set/near/1949496\">said</a>:</p>\n<blockquote>\n<p>Generally we don't want to fetch more data than we need.</p>\n</blockquote>\n<p>Yes, that's why I'm asking</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_user_base_query_set/near/1949496\">said</a>:</p>\n<blockquote>\n<p>Well, does this code path need to access <code>realm__direct_message_permission_group</code></p>\n</blockquote>\n<p>Let me check</p>",
  "<p>We had a while where people were cargo-culting every group-valued setting onto queries, some of which got cleaned up.</p>",
  "<p>But I would guess we only need those fields in the message-send code paths, and that's why the extra things were removed.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_user_base_query_set/near/1949501\">said</a>:</p>\n<blockquote>\n<p>that's why the extra things were removed.</p>\n</blockquote>\n<p>My question is the opposite, I'm asking why extra fields were added and not removed</p>",
  "<p>A quick review on <a href=\"https://github.com/zulip/zulip/pull/31763\">#31763</a> would be helpful.</p>",
  "<p><strong>So I changed <code>bulk_access_users_by_id</code> to use  only:</strong> </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">select_related</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"realm\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"realm__can_access_all_users_group\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"realm__can_access_all_users_group__named_user_group\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bot_owner\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_user_base_query_set/near/1949496\">said</a>:</p>\n<blockquote>\n<p>Well, does this code path need to access <code>realm__direct_message_permission_group</code>?</p>\n</blockquote>\n<p>So I think no, it doesn't need, neither it needs all the other <code>realm__direct_message*</code>,  How do I know ?</p>\n<p>Well, I ran the backend tests, no errors and no extra queries are executed, the whole point of using <code>.select_related()</code> is to fetch all related fields in foregin tables in advance and only once, in order to avoid fetching them from db once for every iteration while looping over objects</p>",
  "<p>So my question was why did you change <code>bulk_access_users_by_id</code> to use that longer <code>select_related</code>version, Maybe I'm missing something ?</p>",
  "<p>Reviewed.</p>",
  "<p>Does the bulk-subscribe API endpoint potentially trigger DMs to users?</p>",
  "<p><a href=\"/user_uploads/2/c7/Bn_Dc6oUS2eQ-_WwVavIfRpo/Screenshot-from-2024-09-26-22-25-53.png\">Screenshot from 2024-09-26 22-25-53.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/c7/Bn_Dc6oUS2eQ-_WwVavIfRpo/Screenshot-from-2024-09-26-22-25-53.png\" title=\"Screenshot from 2024-09-26 22-25-53.png\"><img data-original-dimensions=\"1108x285\" src=\"/user_uploads/thumbnail/2/c7/Bn_Dc6oUS2eQ-_WwVavIfRpo/Screenshot-from-2024-09-26-22-25-53.png/840x560.webp\"></a></div>",
  "<p>I think that's the only setting where I could imagine that code path needing it. You can probably test by just removing the prefetch and seeing if database query counts change.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/stream/3-backend/topic/get_user_base_query_set/near/1949554\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/2/c7/Bn_Dc6oUS2eQ-_WwVavIfRpo/Screenshot-from-2024-09-26-22-25-53.png\">Screenshot from 2024-09-26 22-25-53.png</a></p>\n</blockquote>\n<p>This is from <a href=\"http://chat.zulip.org\">chat.zulip.org</a>, So I think yes ?</p>",
  "<p>Yeah, so that's probably why. It might be possible to remove it in that notification bot, the sender, could probably not require that group to be accessed, but you'd need to read the send-message code path to be certain.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_user_base_query_set/near/1949555\">said</a>:</p>\n<blockquote>\n<p>You can probably test by just removing the prefetch and seeing if database query counts change.</p>\n</blockquote>\n<p>That's what I've done as explained above, But Is my test enough ?</p>",
  "<p>No, I would actually read the code for how the message-send code path checks those settings.</p>",
  "<p>You must mean this <a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/streams.py#L704\">send_messages_for_new_subscribers</a> ?</p>",
  "<p>So I've tracked <a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/streams.py#L628\">subscribers</a> which both <code>bulk_access_users_by_email</code> and <code>bulk_access_users_by_id</code> eventually produce, That <code>subscribers</code> variable  is used in two places in the current endpoint : </p>\n<ol>\n<li><a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/streams.py#L705\">bulk_add_subscriptions</a>, as <code>users</code></li>\n<li><a href=\"https://github.com/zulip/zulip/blob/main/zerver/views/streams.py#L704\">send_messages_for_new_subscribers</a> as <code>subscribers</code></li>\n</ol>\n<p>Neither of these two places access <code>realm__direct_message*</code> fields</p>",
  "<p>Yeah and I also have checked <code>remove_subscriptions_backend</code></p>",
  "<p>So as far as I can see, I don't think there is a reason  to add <code>realm__direct_message*</code> fields in the <code>select_related</code> in both <code>bulk_access_users_by_email</code> and <code>bulk_access_users_by_id</code></p>",
  "<p>I'm thinking of picking up <a href=\"https://github.com/zulip/zulip/issues/31458\">#31458</a>. I've poked around a bit and I guess the main change would be in <code>server_initialization.py</code>. Other areas that might need to be adjusted are probably import/export. I wonder if there are any subtle details that I need to watch out for when making these changes</p>",
  "<p><a href=\"#narrow/stream/3-backend/topic/notification.20bot.20icon/near/1949926\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/notification.20bot.20icon\">#design &gt; notification bot icon</a> by <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span>.</p>",
  "<p>You'll want to make sure that the avatar is correctly served with the right caching headers.  If we're serving it via a URL, that URL should be under <code>STATIC_URL</code> and be content-address-hashed so we serve it with long-lived immutable caching headers.  We'll likely want to do this by adding a new <code>avatar_source</code> which means \"take from disk\", or maybe we'll just decided to hard-code the list of email addresses separately.</p>",
  "<p>Oh, and there's some more context in a private channel.  Let me extract that.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> said:</p>\n<blockquote>\n<p>Tim, can you explain why having a separate avatar source for on-disk is better than using our existing upload path?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> said:</p>\n<blockquote>\n<p>Main reasons on my mind is that it's a pain to do the upload path in a migration file, and also when we move to having one copy of each system bot per realm, I'm not sure we want to upload it 50k times.</p>\n<p>I could be wrong about what's easier.</p>\n<p>Whereas it seems like it might be a pretty minimal bit of code to just hardcode the welcome bot avatar URL.</p>\n<p>I think it would look something like this?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>diff --git a/zerver/lib/avatar.py b/zerver/lib/avatar.py\nindex a53b163e5a..519edd3330 100644\n--- a/zerver/lib/avatar.py\n+++ b/zerver/lib/avatar.py\n@@ -75,6 +75,9 @@ def get_avatar_field(\n         hash_key = user_avatar_base_path_from_ids(user_id, avatar_version, realm_id)\n         return get_avatar_url(hash_key, medium=medium)\n\n+    if email == settings.WELCOME_BOT:\n+        return &quot;/static/images/welcome-bot.png&quot;\n+\n     return get_gravatar_url(email=email, avatar_version=avatar_version, medium=medium)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> said:</p>\n<blockquote>\n<p>Sure, I guess.  Modulo that we want it to use <code>STATIC_URL</code> so it hits our CDN.</p>\n<p>Also we ideally want it to use a hashed path so that we can set long-lived caching headers on it</p>\n<p>Which we get for free with uploads</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> said:</p>\n<blockquote>\n<p>Yeah, it's a bit of work to do that properly, but the trade-off is that Cloud doesn't need to deal with thousands of copies of the 3 avatar image(s) for system bots (email gateway bot will have the same problem).</p>\n</blockquote>",
  "<p>Correct. In the new model, one should just be declaring the actual set of users with a given permission, since that's far easier to for end users to understand.</p>",
  "<p>You can test this end-to-end yourself. Print the database queries used when adding another user to a channel where it will subscribe them before and after your change. This shouldn't be a thing you need to ask for so many rounds of help with verifying.</p>\n<p>(We might have tests that assert the query count already -- easy to find out if you just remove all the <code>select_related</code> and see what tests fail)</p>",
  "<p>I think there is potentially real security exposure to users from clicking OneNote links. But given it'd be opened by the OS, those links could be generated without collaboration from Zulip.</p>\n<p><a href=\"https://unit42.paloaltonetworks.com/payloads-in-malicious-onenote-samples/\">https://unit42.paloaltonetworks.com/payloads-in-malicious-onenote-samples/</a></p>\n<p>So I don't see a security reason not to do that tweak. Am I missing something?</p>",
  "<p>It looks like that article is about malware inside OneNote files. I'm not sure if the effect of the malware is different if the file is opened in the browser (like I'm guessing the <code>https://...</code> part of the link would do) or in the OneNote desktop app.</p>",
  "<p>Looks like our current behavior:<br>\n<a href=\"#narrow/stream/7-test-here/topic/Greg/near/1950318\">https://chat.zulip.org/#narrow/stream/7-test-here/topic/Greg/near/1950318</a></p>\n<p>is that we accept a miscellaneous list of schemes including <code>mailto</code>, <code>tel</code>, and <code>nntp</code>. But not <code>about</code>, <code>onenote</code> (even when the URL <em>is</em> a valid URL, unlike the ones this issue is about), or <code>nonsense</code>.</p>",
  "<p>I agree there isn't a security reason not to permit these. Most people's devices will have no idea what to do to open a <code>onenote:</code> link (just like <code>nntp:</code>), in which case they're definitely harmless. And if you've configured your browser to open such links in a particular app, it's not Zulip's job to protect you from running across such links.</p>",
  "<p>I'd be a bit more reluctant about making them <em>auto</em>link, when these \"URLs\" just appear in plain text rather than in Markdown link syntax.</p>\n<p>We could do it but it'd be an ugly hack \u2014 we certainly don't want to take an arbitrary scheme-shaped prefix like this, because then something like</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>Take a look at this link:https://example/thing\n</code></pre></div>\n<p>, where the sender just left out a space, would go to the bogus <code>link:https://example/thing</code> (which isn't even a valid URL, for the same reason these OneNote links aren't) instead of the intended <code>https://example/thing</code>.</p>",
  "<p>Yeah, that seems like a reasonable plan.</p>",
  "<p>I'm currently thinking the right first step engineering-wise is probably a little API tool using that library, with an interface like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>./summarize-topic [options] https://chat.zulip.org/#narrow/stream/3-backend/topic/LLM.20summaries\n</code></pre></div>\n<p>Possibly living in zulip/zulip for ease of distribution, but the point is we'd be able to do lots of experiments on prompt/model/formatting of what gets sent to the model without dealing with most of the security or other complexity involved with making a finished prototype.</p>",
  "<p>Ok I've ran the backend tests before and after changes, The following fields in the <code>select_related</code> are <strong>the only ones</strong> which removing them cause the db queries count to increase : </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"s2\">\"realm\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"realm__can_access_all_users_group\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"realm__can_access_all_users_group__named_user_group\"</span><span class=\"p\">,</span>\n</code></pre></div>",
  "<p>This is true for both <code>bulk_access_users_by_email</code>\u00a0and\u00a0<code>bulk_access_users_by_id</code></p>",
  "<p>And I've tested this end-to-end while subscriping users to a channel, I inspected the db queries that appear in terminal logs : </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>POST<span class=\"w\">    </span><span class=\"m\">200</span><span class=\"w\"> </span>226ms<span class=\"w\"> </span><span class=\"o\">(</span>mem:<span class=\"w\"> </span>23ms/83<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span>md:<span class=\"w\"> </span>22ms/9<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span>db:<span class=\"w\"> </span>47ms/75q<span class=\"o\">)</span><span class=\"w\"> </span>/json/users/me/subscriptions\n</code></pre></div>",
  "<p>That <code>75</code> queries count doesn't change whether before or after my changes<strong>, which means that those extra fields we are fetching are not needed</strong></p>",
  "<p>Thanks for forwarding this. I'll claim the issue once I get a good grasp of things.</p>",
  "<p>Filed a <a href=\"https://github.com/zulip/zulip/pull/31789\">PR</a>, removing the unnecessary fields and addressing <a href=\"https://github.com/zulip/zulip/pull/31168#discussion_r1720474579\">your request</a> from the PR</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31763#discussion_r1779282427\">https://github.com/zulip/zulip/pull/31763#discussion_r1779282427</a></p>\n<blockquote>\n<p>I don't think we want to remove this logic; if you react to a message in a public stream you're previewing but not subscribed to, we want you to get the reaction, and removing this logic breaks that.</p>\n</blockquote>\n<p>Related to this:</p>\n<p>Currently we send event to users who were previously subscribed (hence usermessage rows are available ) and later unsubscribed, do we want to continue that behavior or we should send event to unsubscribed users only if they have the usermessage rows with <code>historical</code> flag ? (starred + reacted messages in unsubscribed streams)</p>",
  "<p>I think we want to do if and only if the user still has current access to the message in question. (Guest users are not guaranteed to have access to messages in public channels, for example).</p>",
  "<p>Basically we can treat the <code>UserMessage</code> row (historical or no) as a hint that the user is significantly more likely than other users to have the message cached in their browser or otherwise the message be relevant to them.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31789\">PR</a> updated based on the suggestion</p>",
  "<p>Reviewed. Please also make sure you always update the PR with GitHub comments explaining its status when asking for further feedback; this is covered in our code review guides.</p>",
  "<p>Left my thoughts there.</p>\n<p>I make sure I also update the PR description</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/get_user_base_query_set/near/1951998\">said</a>:</p>\n<blockquote>\n<p>Please also make sure you always update the PR with GitHub comments explaining its status when asking for further feedback</p>\n</blockquote>\n<p>I reply to the review comments<br>\nBut If there  is something that's relevant to the whole PR instead, I would post a Github comment</p>",
  "<p>There should always be a GitHub comment that's effectively a change summary when you're ready for a next review.</p>",
  "<p>Ahaa, Ok, Can u link me an example ?</p>",
  "<p>For Add group permission setting for who can add others\u00a0<a href=\"https://github.com/zulip/zulip/pull/25942\">#25942</a>,</p>",
  "<p>For the initial value of existing groups, do we want the value to be same as <code>can_manage_group</code> or do we want it to be the default value (i.e. the group itself)?</p>",
  "<p>I'm thinking the former might be better in the sense that it will be less surprising for the user compared to the latter if they have more restrictive permissions setup.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pulls?q=is%3Apr+author%3Aprakhar1144+is%3Aclosed\">https://github.com/zulip/zulip/pulls?q=is%3Apr+author%3Aprakhar1144+is%3Aclosed</a> and <a href=\"https://github.com/zulip/zulip/pulls/laurynmm\">https://github.com/zulip/zulip/pulls/laurynmm</a> have tons of examples.</p>",
  "<p>So in <a href=\"https://github.com/zulip/zulip/pull/31760\">#31760</a>, we have a set of database migrations to create a new <code>RealmExport</code> table, containing metadata on data exports that an organization has requested.</p>",
  "<p>The current proposed implementation has a migration to populate it from the <code>RealmAuditLog</code> table, and then delete the relevant audit logs. I think it'd be better to skip that deletion step, and still write audit log entries when data exports happen? That would preserve the invariant that one can use <code>RealmAuditLog</code> alone, maybe combined with <code>UserActivity</code> to investigate what sensitive operations a potentially compromised account did during a suspicious window.</p>\n<p><span class=\"user-mention\" data-user-id=\"22341\">@Prakhar Pratyush</span> FYI.</p>",
  "<p>Doesn't <a href=\"https://github.com/zulip/zulip/pull/31760/commits/492c58ef5a3bc95015320b2c58ecf9ac946f4aa9#diff-6e680efcd990e145b252b91d809d3d31a5a0583dcd7f5184e1f0cd8d714189a9R2475-R2481\">https://github.com/zulip/zulip/pull/31760/commits/492c58ef5a3bc95015320b2c58ecf9ac946f4aa9#diff-6e680efcd990e145b252b91d809d3d31a5a0583dcd7f5184e1f0cd8d714189a9R2475-R2481</a> mean that for new exports it's still making AuditLog entries?</p>",
  "<p>I agree that we should probably still keep the RealmAuditLog entries for historical exports.</p>",
  "<p>Hmm, yeah, so it really doesn't make sense to delete the historical ones.</p>",
  "<p>We might also want to store SHA256SUM, byte size, and maybe message count in the export table.</p>",
  "<p>Yeah, that seems helpful.</p>",
  "<p>The thought behind creating that AudiLog was:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"n\">RealmAuditLog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">acting_user</span><span class=\"o\">=</span><span class=\"n\">export_row</span><span class=\"o\">.</span><span class=\"n\">acting_user</span><span class=\"p\">,</span>\n            <span class=\"n\">realm</span><span class=\"o\">=</span><span class=\"n\">export_row</span><span class=\"o\">.</span><span class=\"n\">realm</span><span class=\"p\">,</span>\n            <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"n\">AuditLogEventType</span><span class=\"o\">.</span><span class=\"n\">REALM_EXPORTED</span><span class=\"p\">,</span>\n            <span class=\"n\">event_time</span><span class=\"o\">=</span><span class=\"n\">timezone_now</span><span class=\"p\">(),</span>\n            <span class=\"n\">extra_data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"realm_export_id\"</span><span class=\"p\">:</span> <span class=\"n\">export_row</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n</code></pre></div>\n<p>For new exports, we can simply use <code>realm_export_id</code> present to get details like \"export_path\", \"date_started\" etc from <code>RealmExport</code> table.</p>\n<p>As we are doing migration for the older data, I thought, there is no point to store redundant data. </p>\n<p>But yeah deleting this data will give incorrect results if we, in future, use <code>RealmAuditLog</code> for some analytical data or something + other reasons mentioned above. So NOT deleting makes sense.</p>",
  "<p>OK, that sounds good. Thoughts on adding the handful of fields <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> suggested?</p>",
  "<p>The message counts could also be generalized as the stats json file, in a jsonb field.</p>",
  "<p>Oh yeah, that'd be a really nice way to do it.</p>",
  "<p>updated <a href=\"https://github.com/zulip/zulip/pull/31789\">PR</a>, with the proper Github comments</p>",
  "<p>Just to cross-reference, I think I answered this in <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/stream/101-design/topic/Group.20add.20members.20dropdown\">#design &gt; Group add members dropdown</a>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/RealmExport.20model.20migrations/near/1952697\">said</a>:</p>\n<blockquote>\n<p>The message counts could also be generalized as the stats json file, in a jsonb field.</p>\n</blockquote>\n<p>Did you mean all the data in <code>stats.txt</code> file ?</p>",
  "<p>Updated <a href=\"https://github.com/zulip/zulip/pull/31760\">#31760</a> to align with rest of the above discussions. -- <a href=\"https://github.com/zulip/zulip/pull/31760#issuecomment-2391216358\">Summary</a></p>",
  "<p>Yeah, I was misremembering that it was JSON</p>",
  "<p>I think we did have a vague ambition to rework <code>stats.txt</code> to be formatted as JSON; there's no specific benefit to its current format over that.</p>",
  "<p>Okay, I'll add a prep commit to do the <code>stats.txt</code> -&gt; <code>stats.json</code> work. </p>\n<p>Also, I have posted <a href=\"https://github.com/zulip/zulip/pull/31760#discussion_r1786083750\">one small question on the PR</a>.</p>",
  "<p>I think that as we make this more self-serve, the deferred-work queue may pile up.  Ideally, our background worker framework would handle calculating the queueing latencies, but it doesn't currently have any way to do that.  Nor do we have a ready way to know how many unfulfilled exports are queued -- both because the deferred_work queue mixes several different types of work together, as well as complications with how rabbitmq deals with \"prefetching\"</p>",
  "<p>So since it's easy, I think we should split it out.</p>",
  "<p>Yeah, agreed, it seems like useful resolution and costs us nothing but a few lines of code.</p>",
  "<p>Do we want <code>started_timestamp</code> to be a field on <code>RealmExport</code>? We'll have the metadata in the logs for how long these take, but I feel like it being in the database would be kinda handy.</p>",
  "<p>The PR seems to remove that as it's no longer required to track the state machine, but I think we still want to store it, just not use it for state machine tracking.</p>",
  "<p>Presumably in a <code>date_started</code> format to match our general conventions?</p>",
  "<p>This otherwise is looking very close to completion; posted one comment on the migration.</p>",
  "<p>One thing to keep in mind is that we do want to be able to extend this to have exports only last a specific length of time before being GC'd.  I don't think anything in the PR at all precludes that, but that's one of the goals of this from my point of view -- risk mitigation from storing exports forever.</p>",
  "<p>I will try to create something which uses a free to use model like <a href=\"https://huggingface.co/meta-llama/Llama-3.2-3B-Instruct\">https://huggingface.co/meta-llama/Llama-3.2-3B-Instruct</a>. Then we can think about how we want to try out some of the paid subscription models.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/RealmExport.20model.20migrations/near/1954324\">said</a>:</p>\n<blockquote>\n<p>I think we did have a vague ambition to rework <code>stats.txt</code> to be formatted as JSON; there's no specific benefit to its current format over that.</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>stats.txt</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>analytics.json\n    0 analytics_realmcount\n    0 analytics_streamcount\n    0 analytics_usercount\n\nattachment.json\n    0 zerver_attachment\n\nmessages-000001.json\n   75 zerver_message\n  625 zerver_usermessage\n\nrealm.json\n   41 zerver_alertword\n    0 zerver_botconfigdata\n    0 zerver_botstoragedata\n   14 zerver_client\n    9 zerver_customprofilefield\n   18 zerver_customprofilefieldvalue\n    7 zerver_defaultstream\n    6 zerver_groupgroupmembership\n    3 zerver_huddle\n    1 zerver_muteduser\n    9 zerver_namedusergroup\n   10 zerver_onboardingstep\n    0 zerver_onboardingusermessage\n    1 zerver_presencesequence\n  107 zerver_reaction\n    1 zerver_realm\n  261 zerver_realmauditlog\n   11 zerver_realmauthenticationmethod\n    1 zerver_realmdomain\n    1 zerver_realmemoji\n    3 zerver_realmfilter\n    0 zerver_realmplayground\n    1 zerver_realmuserdefault\n   36 zerver_recipient\n    0 zerver_scheduledmessage\n    1 zerver_service\n   17 zerver_stream\n  185 zerver_subscription\n   23 zerver_useractivity\n    2 zerver_useractivityinterval\n   10 zerver_usergroup\n   31 zerver_usergroupmembership\n   10 zerver_userpresence\n   16 zerver_userprofile\n    3 zerver_userprofile_crossrealm\n    0 zerver_userprofile_mirrordummy\n    0 zerver_userstatus\n   22 zerver_usertopic\n\navatars/records.json\n    2 records\n\nuploads/records.json\n    0 records\n\nemoji/records.json\n    2 records\n\nrealm_icons/records.json\n    0 records\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>stats.json</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nt\">\"analytics\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nt\">\"analytics_realmcount\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"analytics_streamcount\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"analytics_usercount\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"nt\">\"attachment\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_attachment\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"nt\">\"messages-000001\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">68</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_usermessage\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">606</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"nt\">\"realm\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_alertword\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_botconfigdata\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_botstoragedata\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_customprofilefield\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_customprofilefieldvalue\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_defaultstream\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_groupgroupmembership\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_huddle\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_muteduser\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_namedusergroup\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_onboardingstep\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_onboardingusermessage\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_presencesequence\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_reaction\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">132</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realm\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmauditlog\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">257</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmauthenticationmethod\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmdomain\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmemoji\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmexport\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmfilter\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmplayground\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_realmuserdefault\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_recipient\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_scheduledmessage\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_service\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_stream\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_subscription\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">185</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_useractivity\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_useractivityinterval\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_usergroup\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_usergroupmembership\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_userpresence\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_userprofile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_userprofile_crossrealm\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_userprofile_mirrordummy\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_userstatus\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"zerver_usertopic\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">22</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"nt\">\"avatars_records\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nt\">\"uploads_records\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nt\">\"emoji_records\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nt\">\"realm_icons_records\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div></div>\n<p>Added a prep commit.</p>\n<p><strong>Q1</strong>. Is the key names in <code>stats.json</code> fine ? -- I changed it because we wouldn't want to have <code>.</code> or <code>/</code> in key names.</p>",
  "<p>One more question to discuss:</p>\n<p>For historical exports made via shell (<code>manage.py export</code>), we don't have the data to confirm if the export was successful or not. So we can't determine the following fields for backfilling:</p>\n<ul>\n<li><code>export_path</code></li>\n<li><code>failed_timestamp</code></li>\n<li><code>status</code></li>\n<li><code>type</code> </li>\n</ul>\n<p><strong>Q2.</strong> What should we do for such exports?</p>",
  "<p><strong>Q3.</strong> Also, I added a <code>date_succeeded</code> field <a href=\"https://github.com/zulip/zulip/pull/31760#issuecomment-2392388745\">as suggested</a>. But we don't have historical data to backfill this field.</p>",
  "<p>Yeah that sounds good, using <code>LiteLLM</code>; I think early prototyping will focus on figuring out details like whether the send HTML or plain-text, whether to request Markdown or plain-text from the third-party, etc.</p>",
  "<p>I'm attempting to add tusd log rotation, and I'm in the weeds of some of our weirder log decisions.</p>\n<p>All of the files which we write to from Python use <code>logging.handlers.WatchedFileHandler</code> which means that logrotate can move the old logfile aside and make a new one, and Django will do the right thing, close the old filehandle, and switch over to the fresh empty one.</p>\n<p>supervisord handles stdout/stderr from processes, and can write them to files.  It also has its own log rotation code, but that only does rotation on filesize, not days, and doesn't do compression.</p>\n<p>We can disable log rotation from supervisord, and have supervisor write the files, and logrotate rotate them.  But this requires using <code>copytruncate</code> in logrotate, which does have potential race conditions which can cause small amounts of log loss during rotation.  But if we want to log stdout/stderr from a process, this is the best we're going to get under supervisor.</p>",
  "<p>It's a very bad idea to have both of these for the same logfile, since they fight.  This is currently the case for our tornado logs, and it's Real Bad:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ls -l /var/log/zulip/tornado.log*\n-rw-r--r-- 1 zulip zulip         0 Oct  4 00:00 /var/log/zulip/tornado.log\n-rw-r--r-- 1 root  root   61411362 Oct  4 18:45 /var/log/zulip/tornado.log.1\n-rw-r--r-- 1 zulip zulip 104857611 Aug 23 13:05 /var/log/zulip/tornado.log.10\n-rw-r--r-- 1 zulip zulip   2488345 Sep 21 15:46 /var/log/zulip/tornado.log.10.gz\n-rw-r--r-- 1 zulip zulip   3368076 Sep 20 18:41 /var/log/zulip/tornado.log.11.gz\n-rw-r--r-- 1 root  root    9486218 Sep 19 22:53 /var/log/zulip/tornado.log.12.gz\n-rw-r--r-- 1 zulip zulip        20 Sep 16 00:00 /var/log/zulip/tornado.log.13.gz\n-rw-r--r-- 1 root  root    3658962 Sep 15 06:00 /var/log/zulip/tornado.log.14.gz\n-rw-r--r-- 1 zulip zulip 104857720 Oct  3 18:29 /var/log/zulip/tornado.log.2\n-rw-r--r-- 1 zulip zulip        20 Oct  3 00:00 /var/log/zulip/tornado.log.2.gz\n-rw-r--r-- 1 zulip zulip 104857664 Sep 27 05:39 /var/log/zulip/tornado.log.3\n-rw-r--r-- 1 zulip zulip   5667589 Oct  2 01:28 /var/log/zulip/tornado.log.3.gz\n-rw-r--r-- 1 zulip zulip 104857625 Sep 17 22:36 /var/log/zulip/tornado.log.4\n-rw-r--r-- 1 zulip zulip   5825143 Oct  1 01:12 /var/log/zulip/tornado.log.4.gz\n-rw-r--r-- 1 zulip zulip 104857644 Sep 13 16:33 /var/log/zulip/tornado.log.5\n-rw-r--r-- 1 root  root    5878836 Sep 29 06:00 /var/log/zulip/tornado.log.5.gz\n-rw-r--r-- 1 root  root  104857776 Sep  5 04:01 /var/log/zulip/tornado.log.6\n-rw-r--r-- 1 zulip zulip        20 Sep 26 00:00 /var/log/zulip/tornado.log.6.gz\n-rw-r--r-- 1 root  root  104857734 Sep  1 23:11 /var/log/zulip/tornado.log.7\n-rw-r--r-- 1 zulip zulip   4857683 Sep 25 00:22 /var/log/zulip/tornado.log.7.gz\n-rw-r--r-- 1 root  root  104857649 Aug 29 19:12 /var/log/zulip/tornado.log.8\n-rw-r--r-- 1 zulip zulip   5176691 Sep 23 23:28 /var/log/zulip/tornado.log.8.gz\n-rw-r--r-- 1 root  root  104857682 Aug 26 20:52 /var/log/zulip/tornado.log.9\n-rw-r--r-- 1 zulip zulip   1304463 Sep 22 06:01 /var/log/zulip/tornado.log.9.gz\n</code></pre></div>\n<p>We can fix this by disabling supervisor's log rotation for Tornado.</p>",
  "<p>The potential log loss (due to having to rely on <code>copytruncate</code>) isn't great in this case, but having reliable numbers of days of tornado logs is worth it.</p>",
  "<p>And then there are the ones where we have <em>both</em> Python logs and STDOUT logs.  For instance:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rg deliver_scheduled_messages.log\nzproject/computed_settings.py\n757:DELIVER_SCHEDULED_MESSAGES_LOG_PATH = zulip_path(&quot;/var/log/zulip/deliver_scheduled_messages.log&quot;)\n\npuppet/zulip/templates/supervisor/zulip-once.conf.template.erb\n26:stdout_logfile=/var/log/zulip/events_deliver_scheduled_messages.log         ; stdout log path, NONE for none; default AUTO\n\npuppet/zulip/templates/logrotate/zulip.template.erb\n11:/var/log/zulip/deliver_scheduled_messages.log\n</code></pre></div>",
  "<p>So we're writing STDOUT of the process to <code>/var/log/zulip/events_deliver_scheduled_messages.log</code>, rotated by supervisord, and a specific logger in Python is writing to <code>/var/log/zulip/deliver_scheduled_messages.log</code> (note the lack of <code>events_</code>) which is rotated by logrotate.</p>\n<p>The most salient difference here is that the supervisord-written logs contain fatal errors.  Those are, of course, <em>also</em> in <code>/var/log/zulip/errors.log</code> from the Python logger.</p>\n<p>So which logs should we be keeping?  The ones which combine all of the output from the process (from supervisor) all in one place, or the dedicated logger (from python) which only has that worker's specific events in it?</p>",
  "<p>Yeah that new stats format looks great.</p>",
  "<p>Good question regarding historical <code>manage.py shell</code> exports. I think potentially it'd be fine if we just didn't show those in this panel?</p>",
  "<p>Currently, we don't show them in the settings panel. (It's a TODO comment in our code)</p>",
  "<p>So I think maybe the management shell exports weren't logged here? I only see 4 with <code>acting_user=None</code>.</p>",
  "<p>I think it's OK for historical ones generated that way to not be shown.</p>",
  "<p>But longer-term, probably we do want new command-line exports to be able to be delivered to end users via that panel. (There may be a near-term follow-up to add compliance exports to this system, too, at least at the level of having them uploaded and accessible there).</p>",
  "<p>I have updated the migration code to skip those auditlogs during backfill.</p>",
  "<p>OK, I think that was the only remaining concern for merging this PR?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/RealmExport.20model.20migrations/near/1955356\">said</a>:</p>\n<blockquote>\n<p>But longer-term, probably we do want new command-line exports to be able to be delivered to end users via that panel. (There may be a near-term follow-up to add compliance exports to this system, too, at least at the level of having them uploaded and accessible there).</p>\n</blockquote>\n<p>With these changes, it'll be a quick follow-up to  make this possible.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/RealmExport.20model.20migrations/near/1955358\">said</a>:</p>\n<blockquote>\n<p>OK, I think that was the only remaining concern for merging this PR?</p>\n</blockquote>\n<p><strong>Q3.</strong>\u00a0Also, I added a\u00a0<code>date_succeeded</code>\u00a0field\u00a0<a href=\"https://github.com/zulip/zulip/pull/31760#issuecomment-2392388745\">as suggested</a>. But we don't have historical data to backfill this field</p>",
  "<p>Yeah, I think there's nothing to be done there, so it'll just be null.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/stream/3-backend/topic/RealmExport.20model.20migrations/near/1954417\">said</a>:</p>\n<blockquote>\n<p>So since it's easy, I think we should split it out.</p>\n</blockquote>\n<p>I think we can do this as a follow-up.</p>",
  "<p>I think the places where we should use dedicated logs is where a given code path is run from multiple places, like <code>send_email.log</code>.</p>",
  "<p>I think <code>deliver_scheduled_messages.log</code> has no clear reason to exist, and we should probably remove that Python logger.</p>",
  "<p>The only thing from a UX standpoint that's annoying about <code>events_*.log</code> is that they get all squished together into <code>events.log</code> in the single-queue-worker model, and it's annoying that when working with a user there isn't a consitent file to ask them to inspect.</p>",
  "<p>I'm not sure I understand what precisely we'd be splitting out?</p>",
  "<p>Is the idea to have a separate queue worker for data exports, or splitting out something in the monitoring?</p>",
  "<p>As per my understanding of the message, Alex was suggesting a separate queue worker.</p>",
  "<p>If so, I didn't intend to</p>",
  "<p>\"split it out\" was \"split out the <code>STARTED</code>\u00a0and\u00a0<code>REQUESTED</code>\u00a0states\"</p>",
  "<p>Okay, then all the issues discussed here are addressed.</p>",
  "<p>OK. I did propose a <code>RealmAuditLog</code> entry for when someone deletes an export, so we can track the <code>acting_user</code> for it; it's likely to be mostly academically interesting for which get deleted via that mechanism vs. an upcoming cron job that cleans exports that are a given age. (We need to do some design for such a feature)</p>",
  "<p>But I think we're probably ready to proceed with finishing the actual <a href=\"https://github.com/zulip/zulip/pull/31201\">#31201</a> feature at this point?</p>",
  "<p>Yeah, the next steps are:</p>\n<ul>\n<li>API changes to support other export_types via <code>/export/realm</code></li>\n<li>UI changes</li>\n</ul>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31881\">#31881</a>.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/RealmExport.20model.20migrations/near/1955404\">said</a>:</p>\n<blockquote>\n<p>I did propose a <code>RealmAuditLog</code> entry for when someone deletes an export</p>\n</blockquote>\n<p>PR <a href=\"https://github.com/zulip/zulip/pull/31883\">#31883</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/stream/3-backend/topic/paradedb.20pg_bm25.20search/near/1939060\">said</a>:</p>\n<blockquote>\n<p>The other architectural thing that we will very likely want to change while touching this is that the existing indexes is defined like this:</p>\n<p><code>\"zerver_message_search_tsvector\" gin (search_tsvector) WITH (fastupdate=off)</code></p>\n<p>We likely want any future search index to take advantage of <code>realm</code> now being a denormalized column in the table, so probably it's worth adding any new indexes that way; that would eliminate a current bug in Zulip Cloud.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> Can you explain what the bug is and how we'd intend to utilize having things indexed together with <code>realm_id</code>? We don't seem to do filtering on <code>realm_id</code> in queries triggered by text search. The relevant subquery in what I've observed our narrows system generates looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">SELECT</span>\n<span class=\"w\">        </span><span class=\"n\">message_id</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">flags</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">subject</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">rendered_content</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">fancy</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">highlighting</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">content_matches</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">fancy</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">highlighting</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">topic_matches</span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span>\n<span class=\"w\">        </span><span class=\"n\">zerver_usermessage</span>\n<span class=\"w\">        </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">zerver_usermessage</span><span class=\"p\">.</span><span class=\"n\">message_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zerver_message</span><span class=\"p\">.</span><span class=\"n\">id</span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span>\n<span class=\"w\">        </span><span class=\"n\">user_profile_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">        </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">backend</span><span class=\"o\">-</span><span class=\"k\">specific</span><span class=\"w\"> </span><span class=\"n\">way</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"n\">express</span><span class=\"w\"> </span><span class=\"k\">full</span><span class=\"o\">-</span><span class=\"nb\">text</span><span class=\"w\"> </span><span class=\"k\">search</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requested</span><span class=\"w\"> </span><span class=\"n\">terms</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span>\n<span class=\"w\">        </span><span class=\"n\">message_id</span><span class=\"w\"> </span><span class=\"k\">DESC</span>\n<span class=\"w\">    </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param_3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">anon_1</span>\n</code></pre></div>\n<p>Ah, so is the bug actually that we're only searching in the set of <code>Message</code>s for which the user has <code>UserMessage</code> rows, thus excluding all the historical messages in public channels to which the user obviously has access, but no <code>UserMessage</code> rows?</p>",
  "<p>I guess bug was not the best way to put it; it's just a performance issue. We want search performance to scale with how many instances of a given phrase appear in your realm, not the total on the server.</p>",
  "<p>Opened <a href=\"https://github.com/zulip/zulip/pull/31897\">#31897</a> which can be used for that purpose.</p>",
  "<p>Here are a couple of issues reported in <a href=\"https://github.com/zulip/zulip/pull/31311\">#31311</a> that I think are worth echoing here. For more context, refer to this <a href=\"https://github.com/zulip/zulip/pull/31311#issuecomment-2402482805\">comment</a></p>",
  "<h2>NUL Byte crash:</h2>\n<p>When importing Slack messages containing NUL byte string (<code>0\\u000</code>), our importer will complain because it's a forbidden string format in SQL.</p>\n<p>I was able to replicate this error with the older version of Zulip (not using <a href=\"https://github.com/zulip/zulip/pull/31311\">#31311</a>). Opened <a href=\"https://github.com/zulip/zulip/issues/31930\">#31930</a> to track this. If we're going to sanitize converted messages, what other forbidden strings we should watch out for?</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a> updated, I tested it manually and things work !</p>\n<p>But Tests are failing because :<br>\n<a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/test_classes.py#L782\">login_user()</a>, used in all tests doesn't pass through <code>/</code> requests (where I saved the custom session fields in <code>home_real</code>) or any middleware.<br>\nSo I think <code>login_user</code> in this case is not helpful as it doesn't  have the code path a real login goes through.</p>\n<p>Btw setting the fields in any Middleware is a total mess.</p>",
  "<p>Should I just fake the tests and set the fields manually ? or make a new <code>login_user</code> function for tests that tries to be mock a real login ?</p>",
  "<p>Valkey was just <a href=\"https://ubuntu.com/blog/valkey-ubuntu\">added to Ubuntu 24.04</a>.</p>",
  "<p>So is this just <code>return static_path(\"images/welcome-bot.png\")</code> instead of the hardcoded path above?</p>",
  "<p>It feels pretty important to understand why those <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1831441\">extra 5 queries</a> get triggered by setting session fields? Unless that already got figured out and I missed it?</p>",
  "<p>The main hesitation I have on merging that PR is whether we want to put this code in an optional <code>python-zulip-api</code> bundle, or if it's reasonable to just have it in <code>zulip/zulip</code> so that one naturally move code as we work towards having a menu item option. I guess we can always move a version of it to the API repo later?</p>\n<p>It does have significant dependency weight, but only in the development environment, so that's probably fine.</p>\n<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> thoughts?</p>",
  "<p>This ends up being a bit more complicated, because we need to change <code>AVATAR_SOURCE</code> for the system bots to not be gravatar, which involves a database migration.</p>",
  "<p>Otherwise, clients that support the <code>client_gravatar</code> client capability will do the wrong thing.</p>",
  "<p>Yeah I don't think I can review that PR without that being properly explained.</p>",
  "<p>I thought the point here was to use a self-hosted model, not a cloud service like Hugging Face.</p>",
  "<p>Correct, I but the goal of the prototyping tool is to be able to mess around with models, potentially using cloud services, as part of selecting what we want to self-host and how.</p>",
  "<p>Yes, I opted to add new avatar_source for this. </p>\n<p>Here's a rough implementation plan that I've thought of:</p>\n<ul>\n<li>\n<p>make sure<code>ZulipStorage</code> hash all the image files in the avatar's directory, maybe here<code>static/images/disk_avatars/...</code> ?</p>\n</li>\n<li>\n<p>make migration to add <code>AVATAR_FROM_DISK</code> as a new avatar_source option and make the <code>DEFAULT_BOTS</code> use them during <code>server_initialization</code>.</p>\n</li>\n<li>\n<p><code>get_avatar_url</code> for <code>AVATAR_FROM_DISK</code> I think can as simple as matching the bot username with the PNG file name (<a href=\"mailto:notification-bot@zulip.com\">notification-bot@zulip.com</a> -&gt; .../disk_avatar/notification-bot.png)</p>\n</li>\n<li>\n<p>And I think we might want to use <code>staticfiles_storage.url()</code> instead of <code>static_path</code> to get the hashed file's URL.</p>\n</li>\n</ul>\n<h3>Questions:</h3>\n<ul>\n<li>Do we want this behavior for default bots in existing realms or just new ones?</li>\n<li>using <code>staticfiles_storage.url()</code> to get the avatar URL will still hit our CDN right?</li>\n</ul>",
  "<p>I'll put up a draft PR for this tomorrow once I flesh things out a bit.</p>",
  "<p>I ended up prototyping <a href=\"https://github.com/zulip/zulip/pull/31993\">#31993</a> for this -- does that look correct to you <span class=\"user-mention\" data-user-id=\"30223\">@Pieter K</span>?</p>",
  "<p>I am not sure we actually need a separate <code>avatar_source</code>; though maybe it would be better to have one. We'd just need to discuss the API change and make sure clients won't mishandle that case.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/channel/3-backend/topic/avatars.20from.20files.20on.20disk.20.2331458/near/1950058\">said</a>:</p>\n<blockquote>\n<p>Sure, I guess. Modulo that we want it to use <code>STATIC_URL</code> so it hits our CDN.</p>\n<p>Also we ideally want it to use a hashed path so that we can set long-lived caching headers on it<br>\n...</p>\n</blockquote>\n<p>I think we'd want to also add something like this, so that the avatar files are hashed by Django and can hit our caching <a href=\"https://github.com/zulip/zulip/pull/22275/files\">header nginx block</a>. </p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/zerver/lib/storage.py b/zerver/lib/storage.py</span>\n<span class=\"gh\">index 1710010065..2e93febe22 100644</span>\n<span class=\"gd\">--- a/zerver/lib/storage.py</span>\n<span class=\"gi\">+++ b/zerver/lib/storage.py</span>\n<span class=\"gu\">@@ -43,6 +43,12 @@ class IgnoreBundlesManifestStaticFilesStorage(ManifestStaticFilesStorage):</span>\n<span class=\"w\"> </span>            # its hashed URL is returned as part of the API.  See\n<span class=\"w\"> </span>            # data_url() in zerver/lib/emoji.py.\n<span class=\"w\"> </span>            return super().hashed_name(name, content, filename)\n<span class=\"gi\">+        if name in [</span>\n<span class=\"gi\">+            \"images/welcome-bot.png\",</span>\n<span class=\"gi\">+            \"images/logo/zulip-icon-square.svg\",</span>\n<span class=\"gi\">+            \"images/email-gateway-bot.png\",</span>\n<span class=\"gi\">+        ]:</span>\n<span class=\"gi\">+            return super().hashed_name(name, content, filename)</span>\n<span class=\"w\"> </span>        if ext in [\".png\", \".gif\", \".jpg\", \".svg\"]:\n<span class=\"w\"> </span>            # Similarly, don't hash-rename image files; we only serve\n<span class=\"w\"> </span>            # the original file paths (not the hashed file paths), and\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Result</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>After running <code>collectstatic</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>ls /srv/zulip/prod-static/serve/images/*.*.png\n/srv/zulip/prod-static/serve/images/email-gateway-bot.de0a9a5f2c6d.png\n/srv/zulip/prod-static/serve/images/welcome-bot.4f05e68d0166.png\n</code></pre></div>\n<p>Hitting hashed default bots avatar URL (no caching header because this is still in dev, with <code>DEBUG</code> off):</p>\n<div class=\"codehilite\"><pre><span></span><code>curl -I http://zulipdev.com:9991/static/images/welcome-bot.4f05e68d0166.png\nHTTP/1.1 200 OK\nDate: Wed, 16 Oct 2024 05:10:32 GMT\nServer: WSGIServer/0.2 CPython/3.10.12\nContent-Type: image/png\nContent-Disposition: inline; filename=&quot;welcome-bot.4f05e68d0166.png&quot;\nLast-Modified: Wed, 16 Oct 2024 04:36:26 GMT\nVary: Accept-Language, Cookie\nContent-Language: en\nX-Real-IP: 172.17.0.1\nX-Forwarded-Port: 9991\n</code></pre></div>\n</div></div>",
  "<p>If we're going to include that, then I think we can store these image file paths here in a dict so that it can be reused at <code>zerver/lib/storage.py</code> instead of hardcoding the paths again there.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>    <span class=\"c1\"># System bots have hardcoded avatars</span>\n    <span class=\"k\">if</span> <span class=\"n\">email</span> <span class=\"o\">==</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">WELCOME_BOT</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">\"images/welcome-bot.png\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">email</span> <span class=\"o\">==</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">NOTIFICATION_BOT</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">\"images/logo/zulip-icon-square.svg\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">email</span> <span class=\"o\">==</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">EMAIL_GATEWAY_BOT</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">\"images/email-gateway-bot.png\"</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/31993\">#31993</a> works <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, I can push the changes about hashing the avatar URL in a new commit there, or as a new PR if we want it as a follow-up.</p>",
  "<p>So after your changes, the tests are failing because of more queries than expected</p>",
  "<p>Will you take a look into that or should I instead ?</p>\n<p>Btw how can I only see your changes in Github ?</p>",
  "<p>Yeah those changes sound good!</p>",
  "<p>The GitHub \"Compare\" links are the main feature they have:</p>\n<p><a href=\"/user_uploads/2/a2/e2FD1-NfWAz03nfmrlLCS7rO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/a2/e2FD1-NfWAz03nfmrlLCS7rO/image.png\" title=\"image.png\"><img data-original-dimensions=\"2353x899\" src=\"/user_uploads/thumbnail/2/a2/e2FD1-NfWAz03nfmrlLCS7rO/image.png/840x560.webp\"></a></div><p>But it's unfortunately often annoying to browse, in that they include rebases in the changes. You can still check the relevant files to see something.</p>",
  "<p>I encourage you to debug the test failures.</p>",
  "<p>Probably we should just drop the null bytes. I suspect it reflects a Slack bug that they're possibly present there. Would be good to do that across our third-party import tools.</p>",
  "<p>This function is the complete set of preprocessing rules on <code>content</code> before we send a message:</p>\n<div class=\"codehilite\"><pre><span></span><code>def normalize_body(body: str) -&gt; str:\n    body = body.rstrip().lstrip(&quot;\\n&quot;)\n    if len(body) == 0:\n        raise JsonableError(_(&quot;Message must not be empty&quot;))\n    if &quot;\\x00&quot; in body:\n        raise JsonableError(_(&quot;Message must not contain null bytes&quot;))\n    return truncate_content(body, settings.MAX_MESSAGE_LENGTH, &quot;\\n[message truncated]&quot;)\n</code></pre></div>",
  "<p>So I think the import tools will want to enforce those invariants.</p>",
  "<p>We don't want to reject messages in the import tool, since there's not an easy answer for what the user can do, so we should just drop them instead. Probably it makes sense to add a parallel function <code>normalize_body_for_import</code> next to that one and have the data importer code paths use that.</p>",
  "<p>As promised here a short update from our end running <code>valkey/valkey:8.0.1-bookworm</code>for the last 14 days.</p>\n<p>So far the experience has been rock solid without any problems<br>\n<a href=\"/user_uploads/2/57/dC8zyqfjfZiIiU-Fx3AUbcAk/Screenshot-from-2024-10-17-10-39-33.png\">redis-exporter dashboard</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/57/dC8zyqfjfZiIiU-Fx3AUbcAk/Screenshot-from-2024-10-17-10-39-33.png\" title=\"redis-exporter dashboard\"><img data-original-dimensions=\"1434x1229\" src=\"/user_uploads/thumbnail/2/57/dC8zyqfjfZiIiU-Fx3AUbcAk/Screenshot-from-2024-10-17-10-39-33.png/840x560.webp\"></a></div><p>We only ran into one issue with Zulips notification itself when there was a permission issue in Valkey due to a typo.</p>\n<p>With Valkey not  working properly (as it didn't have enough permissions to write to the <code>/data</code> directory), Zulip went completely ballistic and sent out over 50 Email notifications within a few minutes.</p>\n<p>We haven't followed up on it, but there should definitely be some throttling or rate limiting  in place to prevent this from happening.</p>",
  "<p>Fixed <a href=\"https://github.com/zulip/zulip/pull/31789\">PR</a> !</p>\n<p>In <a href=\"https://github.com/zulip/zulip/blob/main/zerver/models/users.py#L999-L1015\">get_user_by_delivery_email()</a>, you mistakenly replaced the query with <code>base_bulk_get_user_queryset</code>, instead of <code>base_get_user_queryset</code></p>\n<p>It should use the non-bulk version (which has more selected_related fields), simply because its previous version which I just linked uses that</p>",
  "<p>Now, from your commit messages :  </p>\n<blockquote>\n<p>There remains some inconsistency in the models.py functions that may<br>\nmerit further investigation.</p>\n</blockquote>\n<p>What is it exactly that you are not satisfied with ? I can improve it.</p>",
  "<p>I ended up opening <a href=\"https://github.com/zulip/zulip/pull/32031\">#32031</a> to include those changes.</p>",
  "<p>Ok, I've updated the description for <a href=\"https://github.com/zulip/zulip/pull/31930\">#31930</a>:</p>\n<blockquote>\n<p>Currently, our third-party importers don't sanitize messages with forbidden strings such as NUL bytes. For example, when this converted Slack message is imported, it will crash.</p>\n<p>-&gt; Slack message containing NUL Bytes:<br>\n-&gt; error log:</p>\n<p>Steps to reproduce:</p>\n<ol>\n<li>Create Slack export</li>\n<li>Inject the message string above to one of your exported Slack message dict.</li>\n<li>Convert the Slack export</li>\n<li>Import the converted Slack export</li>\n</ol>\n<p>We probably should sanitize the exported third-party messages of any forbidden strings (NUL bytes, SQL injection strings (?), etc) during export/conversion.</p>\n<p><code>zerver/lib/message.py/normalize_body()</code> takes care of these kinds of restrictions before we send a message in Zulip, we probably want the import tools to also enforce them.</p>\n<p>We don't want to reject messages in the import tool, since there's not an easy answer for what the user can do, so we should just drop them instead. Probably it makes sense to add a parallel function normalize_body_for_import next to that one and have the data importer code paths use that.</p>\n</blockquote>",
  "<p>Zulip uses redis to store its rate limiting state, so that may be a particularly tricky thing to circuit break.</p>",
  "<p>But in any case, thanks for testing and reporting back!</p>",
  "<p>I think we should put this prototyping tool in python-zulip-api, since it's entirely an API tool and that'll make it easier for folks to fiddle with it.</p>",
  "<p>Or maybe it should just be a new repository that imports the <code>zulip</code> Python bindings? I don't really want <code>pip install zulip</code> to end up pulling in <code>litellm</code> and all its dependencies.</p>",
  "<p>I think we could make <code>pip install zulip[ai]</code> include the extra dependencies, or just have you do <code>pip install zulip litellm</code> if one wants to use this, though?</p>",
  "<p>Thanks!</p>",
  "<p>That write-up looks correct, thanks! One note is that SQL injection is not relevant here; the message bodies are imported as data using libraries that will properly escape them.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1961980\">said</a>:</p>\n<blockquote>\n<p>Yeah I don't think I can review that PR without that being properly explained.</p>\n</blockquote>\n<p>I've finally figured it out <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> , every time we save fields in the session store (i.e. <code>request.session[key]=value</code>), django creates a new session if no one already exists, obviously that's not what we want, we just want to save the fields for already existing sessions.<br>\nSo I simply checked if there is a session already before saving the fields</p>",
  "<p>For some reason, anonymous sessions don't get saved in the db.</p>\n<p>My question is: <br>\nExactly which anonymous requests should be expected to have anonymous sessions ? <br>\nonly <code>/</code> request or what ?</p>",
  "<p>Just for confirmation, looks like we get the caching header we want for the avatar URLs <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>. <br>\nI wasn't able to see it in action in dev env.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>curl<span class=\"w\"> </span>-I<span class=\"w\"> </span>https://chat.zulip.org/static/images/logo/zulip-icon-square.dd62f6921948.svg\nHTTP/2<span class=\"w\"> </span><span class=\"m\">200</span>\ndate:<span class=\"w\"> </span>Mon,<span class=\"w\"> </span><span class=\"m\">21</span><span class=\"w\"> </span>Oct<span class=\"w\"> </span><span class=\"m\">2024</span><span class=\"w\"> </span><span class=\"m\">06</span>:22:08<span class=\"w\"> </span>GMT\ncontent-type:<span class=\"w\"> </span>image/svg+xml\nlast-modified:<span class=\"w\"> </span>Fri,<span class=\"w\"> </span><span class=\"m\">18</span><span class=\"w\"> </span>Oct<span class=\"w\"> </span><span class=\"m\">2024</span><span class=\"w\"> </span><span class=\"m\">21</span>:15:46<span class=\"w\"> </span>GMT\nvary:<span class=\"w\"> </span>Accept-Encoding\netag:<span class=\"w\"> </span>W/<span class=\"s2\">\"6712d002-2f4\"</span>\nstrict-transport-security:<span class=\"w\"> </span>max-age<span class=\"o\">=</span><span class=\"m\">15768000</span>\nx-frame-options:<span class=\"w\"> </span>DENY\nx-content-type-options:<span class=\"w\"> </span>nosniff\naccess-control-allow-origin:<span class=\"w\"> </span>*\ntiming-allow-origin:<span class=\"w\"> </span>*\ncache-control:<span class=\"w\"> </span>public,<span class=\"w\"> </span>max-age<span class=\"o\">=</span><span class=\"m\">31536000</span>,<span class=\"w\"> </span>immutable\ncf-cache-status:<span class=\"w\"> </span>HIT\nage:<span class=\"w\"> </span><span class=\"m\">3030</span>\nreport-to:<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"s2\">\"endpoints\"</span>:<span class=\"o\">[{</span><span class=\"s2\">\"url\"</span>:<span class=\"s2\">\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=fFwrc88mTa9gyf1TshmlTUB6BP%2BvZoCy6JXc77VZ7o%2B5GRVbPVrG7ynUJCbwoWkUuPN3fRwE25uHCsHZG0F998aGgXC0jrtu96%2Bo7SSo9K%2BUfp0AfmEKniYqG6zRb06B5w%3D%3D\"</span><span class=\"o\">}]</span>,<span class=\"s2\">\"group\"</span>:<span class=\"s2\">\"cf-nel\"</span>,<span class=\"s2\">\"max_age\"</span>:604800<span class=\"o\">}</span>\nnel:<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"s2\">\"success_fraction\"</span>:0,<span class=\"s2\">\"report_to\"</span>:<span class=\"s2\">\"cf-nel\"</span>,<span class=\"s2\">\"max_age\"</span>:604800<span class=\"o\">}</span>\nserver:<span class=\"w\"> </span>cloudflare\ncf-ray:<span class=\"w\"> </span>8d5f26c3ef289b90-SIN\nalt-svc:<span class=\"w\"> </span><span class=\"nv\">h3</span><span class=\"o\">=</span><span class=\"s2\">\":443\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nv\">ma</span><span class=\"o\">=</span><span class=\"m\">86400</span>\nserver-timing:<span class=\"w\"> </span>cfL4<span class=\"p\">;</span><span class=\"nv\">desc</span><span class=\"o\">=</span><span class=\"s2\">\"?proto=TCP&amp;rtt=27962&amp;sent=8&amp;recv=9&amp;lost=0&amp;retrans=0&amp;sent_bytes=3396&amp;recv_bytes=832&amp;delivery_rate=152293&amp;cwnd=248&amp;unsent_bytes=0&amp;cid=6569c6d6f4ad9b68&amp;ts=99&amp;x=0\"</span>\n</code></pre></div>",
  "<p>Issue: <a href=\"https://github.com/zulip/zulip/pull/28869\">#28869</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/9-issues/topic/.F0.9F.93.82.20Bot.20does.20not.20add.20an.20emoji.20reaction.20to.20a.20message/near/1733279\">said</a>:</p>\n<blockquote>\n<p>We could also think about just creating <code>UserMessage</code> rows for service bots in that code path -- from a performance perspective, I think given the low number of such bots that exist in comparison to both normal users and generic bots, it probably doesn't matter at all -- so we'd just need to think carefully about the security model side of it.</p>\n</blockquote>\n<p>I wonder what are some of the security concerns we need to consider when making service bots have <code>UserMessage</code> rows? I guess incorporating service bot users in tests, like in <code>zerver/tests/test_message_move_stream</code> would help with this?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1965369\">said</a>:</p>\n<blockquote>\n<p>For some reason, anonymous sessions don't get saved in the db.</p>\n</blockquote>\n<p>Nomraly Zulip does save anonymouse sessions right ?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1966114\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1965369\">said</a>:</p>\n<blockquote>\n<p>For some reason, anonymous sessions don't get saved in the db.</p>\n</blockquote>\n<p>Nomraly Zulip does save anonymouse sessions right ?</p>\n</blockquote>\n<p>You can verify that by checking out a branch without your changes and checking how session are handled then. I think in web public access we don't even make a session? Not sure.</p>",
  "<p>I've already done that</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1908549\">said</a>:</p>\n<blockquote>\n<p>Suddenly, anonymous requests no longer save a session, whether using the default django session or the new custom session</p>\n</blockquote>\n<p>See this old message</p>",
  "<p>Sometimes I see an anonymouse session saved in the db and sometimes not</p>",
  "<p>and yes that's regardless of the current branch/changes, that's really strange.</p>",
  "<p>I test that by <code>Anonymouse login</code> from <code>/devlogin</code> page</p>",
  "<p>Ahh yeah I see those earlier messages now. But hmm, are you saying that on current <code>main</code>, anonymous sessions are sometimes made and sometimes not?</p>",
  "<p>It might depend on whether there's a field to save in the session; I think Django only creates those for anonymous access if the server tries to store data in them. I'm sure Django has documentation on this, and you can also source-dive the Django middleware to check; it's not that hard to read.</p>\n<p>(I could also imagine Django middleware saving some state to sessions in some situations.)</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10349\">Mateusz Mandera</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1966161\">said</a>:</p>\n<blockquote>\n<p>Ahh yeah I see those earlier messages now. But hmm, are you saying that on current <code>main</code>, anonymous sessions are sometimes made and sometimes not?</p>\n</blockquote>\n<p>Yes, currently they are not made (tested from <code>main</code> branch)</p>",
  "<p>Yes, Django always saves any session to db if any field is set in the the session store (i.e. <code>request.session[key]=value</code>).</p>\n<p><strong>Just to be sure, for the sake of this feature, we want to save anonymous sessions, right ? And any anonymous request should trigger that, or you want this for only specific requests ?</strong></p>",
  "<p>I don't see why we wouldn't just want the same behavior as Django normally has? So \"anonymous session only gets saved if we save a field in it\", if I have this right now.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"10349\">Mateusz Mandera</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1966207\">said</a>:</p>\n<blockquote>\n<p>So \"anonymous session only gets saved if we save a field in it\"</p>\n</blockquote>\n<p>Yes, any time we save a field in the session store a new session gets created in the db if no one already exists.</p>\n<p>But for efficiency reasons I only set the custom fields for already created sessions, which are NOT anonymous by default.</p>",
  "<p><strong>So again, Do we even want to have anonymous sesssions saved in the db ?</strong> and if yes, why ?</p>",
  "<p>I think that's already been answered -- we do not want to revisit this aspect of Django's default behavior, which seems satisfactory, and may require a lot of analysis to determine if we can do better.</p>",
  "<p>Yeah, that seems to be working, but it's not working on mobile for some reason; opened <a class=\"stream-topic\" data-stream-id=\"48\" href=\"/#narrow/channel/48-mobile/topic/notification.20bot.20icon\">#mobile &gt; notification bot icon</a> for discussion of that.</p>",
  "<p>So this means we don\u2019t want to override django default behavior, and therefore I should NOT try to save those anonymous sessions</p>",
  "<p>Am I following you right ?</p>",
  "<p>Are you asking about saving the <strong>sessions</strong> themselves, or saving some <strong>custom fields</strong> in the session? My understanding right now is that we don't <strong>drectly</strong> control whether a session gets saved - and we don't want to control that. Django makes the decision.</p>\n<p>Now, I didn't follow the thread entirely, but sounds like we wanted to save some custom fields even in anonymous sessions (<code>ip_address</code> and <code>realm_id</code>, right?). If the consequence of that is that all anonymous sessions end up getting saved in the db as a side-effect of us putting  custom fields in them, I'm pretty sure we're fine with that. We don't care about micro-managing what Django is going to do in terms of storage exactly.</p>",
  "<p><strong>Let me put this in a summarized and a more clear way.</strong></p>\n<ol>\n<li>\n<p>Django by default (and also my current changes) does <strong>NOT</strong> save any anonymous sessions in the db.</p>\n</li>\n<li>\n<p>I've managed to set those custom fields for <code>logged-in sessions only!</code>, but in a way that doesn't trigger any extra query, through checking if a <code>session_key</code> has already been created (which obviously is not created for anonymous requests.) and before django writes to the DB.</p>\n</li>\n</ol>",
  "<p>Things work just fine for <code>logged-in</code> requests.</p>\n<p><strong>Is everything clear ? I don't want any miscommunication.</strong> <span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1966240\">said</a>:</p>\n<blockquote>\n<p>I think that's already been answered -- we do not want to revisit this aspect of Django's default behavior, which seems satisfactory, and may require a lot of analysis to determine if we can do better.</p>\n</blockquote>\n<p>From this msg, I understand that we don't want to save anonymous sessions, since that's not the default anyway for django, right ?</p>",
  "<p>Maybe <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> will confirm whether my thoughts here align with his. But  I think we're fine with the behavior changing from <code>anonymous session (usually) don't get written to db</code> to <code>anonymous sessions get written to db (because we start storing some custom fields in them)</code>. I would leave out any <code>checking if a `session_key` has already been created</code> and just put whatever we want in the session. We can tweak that later anyway if we're unhappy with it.</p>\n<p>What we <strong>don't</strong> want to change is Django's internal decision-making on when it chooses to save an anonymous session. That's what I thought you were considering trying to change when you asked about  <code>Do we even want to have anonymous sesssions saved in the db?</code>.</p>\n<p>We're not making an explicit call on whether session is saved to db. We just set a custom field in <code>request.session</code>. How Django implements that internally, we don't care.</p>",
  "<p>I think there may not be any actual problems with it. The main thing is that any user's access to messages is maintained through a combination of their subscriptions, and in private channels with protected history, the UserMessage rows that the user has.</p>",
  "<p>Now, you can imagine a situation where someone wants to have a bot that is available in every channel on the server, but where it doesn't have general access to read every message in the organization; just those where it is triggered via a mention.</p>",
  "<p>And that sort of concept might be less possible to make work if we were to make this structural change, at least without some new features for bots.</p>",
  "<p>I think ultimately, we will want to move to bot accounts / API keys having a more complex scopes-based permissions model. But the question is whether we can make this change with the existing bot types, or feel the need to fork the \"outgoing bot\" bot type to offer both the legacy behavior and the behavior proposed in that issue.</p>",
  "<p>I think the proposal in <a href=\"https://github.com/zulip/zulip/pull/28869\">#28869</a> is intended to answer that question: Make the existing outgoing webhook bot work as specified, and <a href=\"https://github.com/zulip/zulip/pull/28870\">#28870</a> tracks the idea to make a separate bot type for the future.</p>",
  "<p>Correct, what I'd like to do is make a minimal transition that fixes the performance problem that this issue is about without changing anything about how anonymous sessions are stored.</p>\n<p>We only care about storing the new metadata for logged-in sessions. If it happens that when an anonymous session is stored, we can store the new metadata for those too without saving an extra anonymous sessions to the database, great, but that's not a goal of this transition.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/delete_user_sessions.20performance/near/1966542\">said</a>:</p>\n<blockquote>\n<p>We only care about storing the new metadata for logged-in sessions. If it happens that when an anonymous session is stored, we can store the new metadata for those too without saving an extra anonymous sessions to the database, great, but that's not a goal of this transition.</p>\n</blockquote>\n<p>Now, that's a clear and really understandable Answer !</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30223\">Pieter K</span> <a href=\"#narrow/channel/48-mobile/topic/notification.20bot.20icon/near/1966895\">said</a>:</p>\n<blockquote>\n<p>I opened <a href=\"https://github.com/zulip/zulip/pull/32085\">#32085</a> for this</p>\n</blockquote>",
  "<p>The logic to process system bots' avatars is largely still the same. I added the \"-medium.png\" variants, adjusted <code>get_avatar_url</code> to output them if <code>medium=True</code> and a couple more adjustments.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/29668\">PR</a>, now is in finished state !</p>\n<p>Btw you don't have to review it all in one time.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/channel/3-backend/topic/get_user_base_query_set/near/1963908\">said</a>:</p>\n<blockquote>\n<p>Now, from your commit messages :  </p>\n<blockquote>\n<p>There remains some inconsistency in the models.py functions that may<br>\nmerit further investigation.</p>\n</blockquote>\n<p>What is it exactly that you are not satisfied with ? I can improve it.</p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
  "<p>Is there anything I can help with here or the API part of it? I would love to !</p>",
  "<p><span class=\"user-mention\" data-user-id=\"699\">@Anders Kaseorg</span> can you do the PR to delete postgres 12 support from <code>main</code>? I think we need to do that before upgrading the Django 5.1, and we probably want to do that soon so we have plenty of bake time before a next major release.</p>",
  "<p>Sure. But the Django 5.1 upgrade is also blocked by its dependency on asgiref \u2265 3.8.1, which breaks <code>test_tornado</code>.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/32207\">#32207</a></p>",
  "<p>Is that test important? It's only 150 LOC, and I'm not sure what it gets coverage on for us that other tests don't cover. But maybe it's not hard to address some other way.</p>",
  "<p>In any case, merged <a href=\"https://github.com/zulip/zulip/pull/32207\">#32207</a>. I also note Postgres 17 is out, so we could look at adding support for that.</p>",
  "<p>I noticed that we apparently still have a decent number of uncommented default values in the template for <code>/etc/zulip/settings.py</code>. I opened <a href=\"https://github.com/zulip/zulip/pull/32238\">#32238</a> to clean up the easier ones. </p>\n<p>(I noticed because we changed the default for <code>MAX_FILE_UPLOAD_SIZE</code>, but that'll only be used for new installations due to this issue).</p>",
  "<p>The interaction between asyncio, Tornado, Django, and asgiref is stupidly complicated, and I think the <code>test_tornado</code> failure reflects a real problem.</p>",
  "<p>Can you tell me what needs improvment so we can wrap up this PR</p>\n<p>I will work on it to be the best possible version</p>",
  "<p>Apparently <code>run-dev</code> now prints a bunch of <code>tusd</code> output on startup.</p>\n<div class=\"codehilite\"><pre><span></span><code>2024/11/08 21:24:29.814859 Using &#39;/home/tabbott/zulip/var/uploads/files&#39; as directory storage.\n2024/11/08 21:24:29.814903 Using 0.00MB as maximum size.\n2024/11/08 21:24:29.814915 Using &#39;http://localhost:9992/api/internal/tusd&#39; as the endpoint for hooks\n2024/11/08 21:24:29.824182 Enabled hook events: pre-create, pre-finish\n2024/11/08 21:24:29.824206 Supported tus extensions: creation,creation-with-upload,termination,concatenation,creation-defer-length\n2024/11/08 21:24:29.824217 Using 127.0.0.1:9996 as address to listen.\n2024/11/08 21:24:29.824226 Using /api/v1/tus/ as the base path.\n2024/11/08 21:24:29.824295 Using /metrics as the metrics path.\n2024/11/08 21:24:29.824586 You can now upload files to: http://127.0.0.1:9996/api/v1/tus/\n</code></pre></div>\n<p>I filed <a href=\"https://github.com/zulip/zulip/pull/32301\">#32301</a> for fixing this. It'd be great if someone picked that up.</p>\n<p>It's a bit of a research project; it might be really easy or fairly involved, depending on whether upstream has options that control this.</p>",
  "<p>I'd like to work on this issue and am willing to learn as needed.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <br>\nleft a <a href=\"https://github.com/zulip/zulip/pull/30477#discussion_r1836248278\">comment for clarification</a></p>",
  "<p>Updating this thread with the recent work in this area:</p>\n<ul>\n<li>We did a pass to phase out the use of <code>transaction.atomic</code> without <code>durable</code> or <code>savepoint</code> parameters. -- <a href=\"https://github.com/zulip/zulip/pull/32205\">#32205</a> + <a href=\"https://github.com/zulip/zulip/pull/32231\">#32231</a></li>\n<li>TODOs:<ul>\n<li><a href=\"https://github.com/zulip/zulip/pull/32231#issuecomment-2456700230\">#32231 (comment)</a></li>\n<li><code>queue_json_publish</code> -&gt; <code>queue_event_on_commit</code> transition.</li>\n</ul>\n</li>\n</ul>",
  "<p>(deleted)</p>",
  "<p><code>consume()</code> in <code>zerver/worker/embed_links.py</code> is an odd case.</p>\n<p>Ideally, the <code>transaction.atomic</code> in <code>consume</code> method should be marked with <code>durable=True</code>.</p>\n<p>But,  <code>test_message_update_race_condition</code> explicitly calls <code>FetchLinksEmbedData().consume()</code>, so we can't add <code>durable=True</code> within an outer (test) transaction.</p>",
  "<p>I think you should take some time to learn about transactions, 2-phase commit, and committing changes to multiple database/services, and then ask a question with that understanding in mind.</p>",
  "<p>It's probably to have one with <code>savepoint=False</code> instead of <code>durable=True</code> and a comment to that effect; doesn't seem important to me to spend time on that detail, but it would be nice to be able to have a linter enforce policies here.</p>",
  "<p>I'm already familiar with the concept of a transaction, and I've looked into the other topics you mentioned, Now I understand that we should make sure that the deletion operation (from database and storage) should be either commited to all nodes or not at all.</p>",
  "<p>and the files state (deleted or exist) should be the same in the datbase and the storage, not leaving any orphaned files in either the storage or database</p>",
  "<p>Am I on the right page ?</p>",
  "<p>I've forgotten why we ended up needing to do <code>--no-binary</code> on <code>xmlsec</code> for our <code>python3-saml</code> dependency; do we have a path to removing that? It adds a shocking amount of time to building a Zulip Python environment.</p>",
  "<p><a href=\"https://github.com/xmlsec/python-xmlsec/issues/320\">https://github.com/xmlsec/python-xmlsec/issues/320</a></p>",
  "<p>Hmm, <a href=\"https://github.com/xmlsec/python-xmlsec/issues/320#issuecomment-2451246797\">https://github.com/xmlsec/python-xmlsec/issues/320#issuecomment-2451246797</a> suggests if we're not using <code>uwsgi</code> XML features, we could potentially just skip that. I can't remember if our rolling restart support uses it.</p>",
  "<p>Those do sound like good goals, yes.</p>",
  "<p>We\u2019d need to do something unpleasant to prevent pip from using a cached build without that variable.</p>",
  "<p>Ideally we\u2019d migrate from uWSGI to Gunicorn or Granian.</p>",
  "<p>Yeah that's possibly the right answer here; maybe we can pick based on what will be nicer with ASGI.</p>",
  "<p>Ok, I just want a clarification on your comment, what causes the leak and it leaks to the storage or the db?</p>",
  "<p>I really hope this is not a bad question, because I did my efforts trying to understand, but still a little bit confused</p>",
  "<blockquote>\n<p>first mark the attachment objects as \"deleted\"</p>\n</blockquote>\n<p>this implies making creating a new filed in the attachments model, right ?</p>",
  "<p>Well when thinking about transactions, you have to think about if it might be possible for, say, the files are deleted in S3 but then the transaction doesn't complete (due to some error, network interruption, or whatever), or vise versa.</p>",
  "<p>Every action that you do over the network can fail.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/smarter.20do_delete_old_unclaimed_attachments/near/1982897\">said</a>:</p>\n<blockquote>\n<p>the files are deleted in S3 but then the transaction doesn't complete</p>\n</blockquote>\n<p>Aha, which leaves orphaned files in the <strong>database</strong>,</p>",
  "<p><strong>come to think of it, we may not need to mark the attachments as deleted (implying creating a new db field)</strong></p>\n<ol>\n<li>we run the command and get the desired files via <code>get_old_unclaimed_attachments</code></li>\n<li>delete files from S3</li>\n<li>attempt to delete from db, but failed.</li>\n</ol>",
  "<p>now on retry: </p>\n<ol>\n<li>we get the desired files again (almost the same)</li>\n<li>attempting to delete non-existing files (because they got deleted before), is handled in S3, I assume.</li>\n<li>attempt to delete from db, and succeeds in this case.</li>\n</ol>",
  "<p><strong>But why all this hussle ? shouldn't we just bulk-delete the files from the db first then from S3 ?</strong></p>",
  "<p>Any failure in the db transaction won't execute further code</p>",
  "<p>If we delete them from the database before from S3, then they will be left in S3 forever, since nothing will retry.</p>",
  "<p>The advantage of a database field for whether the file is expected to be deleted would mainly be better error-handling; if the file is missing in S3, it potentially reflects a bug that a human should investigate. But not if we know that we tried to delete that file.</p>",
  "<p>So we could write logic that logs a complaint that this is a concerning problem only if the <code>deleted</code> flag is unset when we don't see the file while trying to delete it.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/smarter.20do_delete_old_unclaimed_attachments/near/1982898\">said</a>:</p>\n<blockquote>\n<p>Every action that you do over the network can fail.</p>\n</blockquote>\n<p>Aha, this applies to deleting from S3 and datbase, So the 2 options are possible, orphaned files in the db or in S3</p>",
  "<p>For Make channel management permissions configurable\u00a0<a href=\"https://github.com/zulip/zulip/pull/31959\">#31959</a>, what should be the default value for the setting for new channels created while doing an import or populating db? </p>\n<p>The current specification is to have it as the stream creator, and while we have creator_id available in some cases, it can also be <a href=\"https://github.com/zulip/zulip/blob/ffa7e0ac08fd890a885490869d27aff46798b30d/zerver/lib/import_realm.py#L1286\">none</a>. Should it be nobody in that case (same value as legacy channels) so that admins can configure it later however they want to?</p>",
  "<p>Hmm. New channels created during import should probably have the NOBODY group -- basically just the organization-level administration permission would apply?</p>",
  "<p>I think we want it to be channel creator only if you're making a new channel, not for the backfill. Nothing in the previous UI set an expectation that whoever created a channel has special permanent permissions, so digging up that user to give them permissions on an existing channel would be incorrect.</p>",
  "<p>Got it, thanks!</p>",
  "<p>Alternatively I suppose we could set whatever role can administer previous, the administrators group, on each individual channel? That would be equivalent mechanically. But I think it would probably be a worse model -- it would set the expectation that this was the mechanism through which administrators can administer channels, and that's not accurate.</p>",
  "<p>Yeah, nobody seems better since org admins can always administer a channel.</p>",
  "<p>I'll close issue <a href=\"https://github.com/zulip/zulip/pull/31336\">#31336</a> as this is no longer true. There are no known regex-related compromises from changes in <a href=\"https://github.com/zulip/zulip/pull/32164\">#32164</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/smarter.20do_delete_old_unclaimed_attachments/near/1982922\">said</a>:</p>\n<blockquote>\n<p>So we could write logic that logs a complaint that this is a concerning problem only if the <code>deleted</code> flag is unset when we don't see the file while trying to delete it.</p>\n</blockquote>\n<p>In this case we will not be able to use <a href=\"https://github.com/zulip/zulip/blob/main/zerver/lib/upload/s3.py#L286-L289\">self.uploads_bucket.delete_objects</a> <br>\n(which is currently being used and is more <strong>efficient</strong> as it allows us to delete mutliples files (in a batch size up to 1k) in a single http request )<br>\nbecause of <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/bucket/delete_objects.html#:~:text=Note%20that%20if%20the%20object%20specified%20in%20the%20request%20is%20not%20found%2C%20Amazon%20S3%20returns%20the%20result%20as%20deleted.\">if the object specified in the request is not found, Amazon S3 returns the result as deleted.</a></p>",
  "<p>we will need to switch to <code>delete_file_from_s3</code> as it returns <code>False</code> if the files doens't exist, and accordingly we can check the corresponding attachment <code>deleted</code> field to decide whther to log the complain or not</p>",
  "<p><strong>So the question is: is it worth sacrificing performance for that logging functionality </strong></p>",
  "<p>Yep, sounds good, thanks for fixing this!</p>",
  "<p>Hey <span class=\"user-mention\" data-user-id=\"7\">@Tim Abbott</span> I went through their CLI code<br>\nMost of the logs are present in <strong>tusd/cmd/tusd/cli/serve.go</strong></p>\n<p>Should we compile it ourselves to get rid of these logs?</p>\n<p>Here are lines where each of the startup log is present:<br>\n<a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/composer.go#L141\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/composer.go#L141</a> <br>\n1st line</p>\n<p><a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/composer.go#L161\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/composer.go#L161</a><br>\n2nd line</p>\n<p><a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/hooks.go#L22\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/hooks.go#L22</a><br>\n3nd line</p>\n<p><a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L62\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L62</a><br>\n4th line</p>\n<p><a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L71\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L71</a><br>\n5th line</p>\n<p><a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L81\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L81</a><br>\n6th line</p>\n<p><a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L84\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L84</a><br>\n7th line</p>\n<p><a href=\"https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L132\">https://github.com/tus/tusd/blob/9d85248e11a4e3127321c7d1ff562ada66c9f6f0/cmd/tusd/cli/serve.go#L132</a><br>\n8th line</p>",
  "<p>Better would be to submit a PR upstream.</p>",
  "<p>I opened an issue here: <a href=\"https://github.com/tus/tusd/issues/1216\">https://github.com/tus/tusd/issues/1216</a></p>",
  "<p>If you want to write a PR adding an option to disable that and submit it upstream satisfying their contributing guidelines, that's the next step here.</p>",
  "<p>Just posting a general update that I've done a decent amount of tending the <code>docker-zulip</code> repository in recent months; closed a bunch of duplicate and already-fixed issues, did some passes on documentation, and some triage of higher-priority issues. For folks reading, any feedback on things that tripped you up using the Docker image is appreciated!</p>",
  "<p>Sure, I will do that <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/Verbose.20tusd.20output/near/1983988\">said</a>:</p>\n<blockquote>\n<p>If you want to write a PR adding an option to disable that and submit it upstream satisfying their contributing guidelines, that's the next step here.</p>\n</blockquote>\n<p>They don't seem to have guidelines for contribution as such, I've <a href=\"https://community.transloadit.com/t/flag-to-disable-startup-logs-for-tusd/17359\">posted</a> on their forum asking them about the same.</p>\n<p>Should I just create a PR instead?</p>",
  "<p>I would just create a PR roughly following our guidelines for how to explain a change, then -- most of the principles about clear communication are relevant for any OSS project.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/Verbose.20tusd.20output/near/1984362\">said</a>:</p>\n<blockquote>\n<p>I would just create a PR roughly following our guidelines for how to explain a change, then -- most of the principles about clear communication are relevant for any OSS project.</p>\n</blockquote>\n<p><a href=\"https://github.com/tus/tusd/pull/1218\">https://github.com/tus/tusd/pull/1218</a><br>\nDoes this look good?</p>",
  "<p>I opened <a href=\"https://github.com/zulip/zulip/pull/32247\">#32247</a>(draft) for <a href=\"https://github.com/zulip/zulip/pull/28869\">#28869</a>. The PR roughly follows the approach described in the issue. I also added the mechanic to track service bots' event messages, I opted to use the <code>read</code> flag to mark the message once the outgoing webhook bot has consumed the event. </p>\n<p>Had a few thoughts while working on this:</p>",
  "<p>in <a href=\"https://github.com/zulip/zulip/pull/28869\">#28869</a> description:</p>\n<blockquote>\n<ul>\n<li>Move the call of <code>get_service_bot_events</code> before <code>create_user_messages</code> so its conclusions can be used there.</li>\n<li>In <code>create_user_messages</code>, decide whether the <code>read</code> flag should be initially set when creating a <code>UserMessage</code> for an outgoing webhook bot based on whether we're planning for that message to be processed as an outgoing webhook based on the <code>get_service_bot_events</code> calculation. Or maybe we should use a new flag along the lines of <code>active_mobile_push_notification</code>; deserves discussion.</li>\n</ul>\n</blockquote>\n<ol>\n<li>I wonder if we really need this logic. Once the service bots have their own <code>UserMessage</code>, can't we just add a subroutine in each bots queue processor that adds the <code>read</code> flag, marking it as processed?</li>\n</ol>",
  "<ol start=\"2\">\n<li>One thing I noticed about using the <code>read</code> flag to mark an event message as \"processed\" is that users can trigger bot mentions to send messages anywhere on the server\u2014even in private channels or channels the bot isn\u2019t subscribed to. In those cases, the bot won\u2019t be able to <code>read</code> those messages, which makes it potentially unclear whether the bot has actually processed the message.</li>\n</ol>\n<p>I guess we can do something like this to make the bot has <code>UserMessage</code> row wherever they are mentioned:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>diff</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -718,6 +715,7 @@ def create_user_messages(</span>\n<span class=\"w\"> </span>    mark_as_read_user_ids: set[int],\n<span class=\"w\"> </span>    limit_unread_user_ids: set[int] | None,\n<span class=\"w\"> </span>    topic_participant_user_ids: set[int],\n<span class=\"gi\">+    service_queue_events: dict[str, list[dict[str, Any]]],</span>\n<span class=\"w\"> </span>) -&gt; list[UserMessageLite]:\n<span class=\"w\"> </span>    # These properties on the Message are set via\n<span class=\"w\"> </span>    # render_message_markdown by code in the Markdown inline patterns\n<span class=\"gu\">@@ -750,7 +748,11 @@ def create_user_messages(</span>\n<span class=\"w\"> </span>    # See https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#soft-deactivation\n<span class=\"w\"> </span>    # for details on this system.\n<span class=\"w\"> </span>    user_messages = []\n<span class=\"gd\">-    for user_profile_id in um_eligible_user_ids:</span>\n<span class=\"gi\">+    triggered_service_bots = {</span>\n<span class=\"gi\">+        event[\"user_profile_id\"] for events in service_queue_events.values() for event in events</span>\n<span class=\"gi\">+    }</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    for user_profile_id in um_eligible_user_ids | triggered_service_bots:</span>\n<span class=\"w\"> </span>        flags = base_flags\n<span class=\"w\"> </span>        if user_profile_id in mark_as_read_user_ids or (\n<span class=\"w\"> </span>            limit_unread_user_ids is not None and user_profile_id not in limit_unread_user_ids\n<span class=\"gu\">@@ -901,6 +903,14 @@ def do_send_messages(</span>\n<span class=\"w\"> </span>        mark_as_read_user_ids = send_request.muted_sender_user_ids\n<span class=\"w\"> </span>        mark_as_read_user_ids.update(mark_as_read)\n\n<span class=\"gi\">+        send_request.service_queue_events = get_service_bot_events(</span>\n<span class=\"gi\">+            sender=send_request.message.sender,</span>\n<span class=\"gi\">+            service_bot_tuples=send_request.service_bot_tuples,</span>\n<span class=\"gi\">+            mentioned_user_ids=mentioned_user_ids,</span>\n<span class=\"gi\">+            active_user_ids=send_request.active_user_ids,</span>\n<span class=\"gi\">+            recipient_type=send_request.message.recipient.type,</span>\n<span class=\"gi\">+        )</span>\n<span class=\"gi\">+</span>\n<span class=\"w\"> </span>        user_messages = create_user_messages(\n<span class=\"w\"> </span>            message=send_request.message,\n<span class=\"w\"> </span>            rendering_result=send_request.rendering_result,\n<span class=\"gu\">@@ -914,6 +924,7 @@ def do_send_messages(</span>\n<span class=\"w\"> </span>            mark_as_read_user_ids=mark_as_read_user_ids,\n<span class=\"w\"> </span>            limit_unread_user_ids=send_request.limit_unread_user_ids,\n<span class=\"w\"> </span>            topic_participant_user_ids=send_request.topic_participant_user_ids,\n<span class=\"gi\">+            service_queue_events=send_request.service_queue_events,</span>\n<span class=\"w\"> </span>        )\n\n<span class=\"w\"> </span>        for um in user_messages:\n<span class=\"gu\">@@ -921,14 +932,6 @@ def do_send_messages(</span>\n\n<span class=\"w\"> </span>        ums.extend(user_messages)\n\n<span class=\"gd\">-        send_request.service_queue_events = get_service_bot_events(</span>\n<span class=\"gd\">-            sender=send_request.message.sender,</span>\n<span class=\"gd\">-            service_bot_tuples=send_request.service_bot_tuples,</span>\n<span class=\"gd\">-            mentioned_user_ids=mentioned_user_ids,</span>\n<span class=\"gd\">-            active_user_ids=send_request.active_user_ids,</span>\n<span class=\"gd\">-            recipient_type=send_request.message.recipient.type,</span>\n<span class=\"gd\">-        )</span>\n<span class=\"gd\">-</span>\n</code></pre></div>\n</div></div>\n<p>However, if the goal is to make their behavior more closely aligned with generic bots, I wonder if this change would align with that approach.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30223\">Pieter K</span> <a href=\"#narrow/channel/3-backend/topic/.2328869.20UserMessage.20for.20Outgoing.20webhook.20bot.20.26.20embedded.20bots/near/1986348\">said</a>:</p>\n<blockquote>\n<p>...<br>\nI guess we can do something like this to make the bot has <code>UserMessage</code> row wherever they are mentioned:<br>\n...<br>\nHowever, if the goal is to make their behavior more closely aligned with generic bots, I wonder if this change would align with that approach.</p>\n</blockquote>\n<p>ah, I suppose this is closer to the idea of \"limited outgoing webhook\" in <a href=\"https://github.com/zulip/zulip/pull/28870\">#28870</a> (?)</p>",
  "<p>I think, it's not worth it</p>",
  "<p>Opened <a href=\"https://hub.docker.com/r/zulip/docker-zulip\">https://hub.docker.com/r/zulip/docker-zulip</a> and this is not what I expect for open source project. I would add \"Overview\" similar to what can be found for \"Docker Official Image\" projects like redis. What is Zulip. Available tags. Image variants.</p>\n<p>And a lot of people like me prefers Alpine Linux and images small in size. 975 MB? Please make it smaller.</p>\n<p>On positive side image for Zulip 9.3 was added really fast. I love projects which provides updates that fast.</p>",
  "<p>Yeah, we should probably copy that in from the GitHub page at the very least, but maybe we can do better. Can you point to Docker images whose pages you think are particularly well done?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"32968\">Sylwester Cyba</span> <a href=\"#narrow/channel/3-backend/topic/docker-zulip/near/1988183\">said</a>:</p>\n<blockquote>\n<p>And a lot of people like me prefers Alpine Linux and images small in size. 975 MB? Please make it smaller.</p>\n</blockquote>\n<p>I think most of that is actual dependencies, so I'm not sure switching to a smaller runtime would be a qualitative change.</p>",
  "<p>(I'm sure some optimization is possible, but probably not more than 20%)</p>",
  "<p>Some large-ish directories we could remove: <code>/srv/zulip-golang-1.22.5</code> (10.6%), <code>/root/.cache/pip</code> (5.5%), <code>/srv/zulip-smokescreen-src-85c4c64e1e01b899456d42459966a106f66c7cd5</code> (0.8%). We probably don\u2019t need a C++ compiler (2.4%), and we can uninstall some compiler packages and development headers after building everything.</p>",
  "<p>I'd worry a bit that removing some of those things might break or slow the <code>zulip-puppet-apply</code> that runs on startup to apply any non-standard configurations. Worth testing; probably it'd just require more careful puppet scripting to fix any that we can't freely delete.</p>",
  "<p>Also worth paying attention to how we define the layers if we're deleting things, to make sure we delete them in the same layer where they would have been created, but I think that'd work fine if we just appended the removal code to the end of <code>Dockerfile</code>.</p>",
  "<p>We've already got this near the end:</p>\n<div class=\"codehilite\"><pre><span></span><code>    apt-get -qq autoremove --purge -y &amp;&amp; \\\n    apt-get -qq clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n</code></pre></div>",
  "<p>So probably adding a few paths to that would be the first thing to try.</p>",
  "<p>Yeah we do everything in one <code>RUN</code> command to get only one relevant layer.</p>",
  "<p>Already mentioned redis and can point to something like mariadb too.<br>\n<a href=\"https://hub.docker.com/_/mariadb\">https://hub.docker.com/_/mariadb</a></p>\n<p>Replace \"Main zulip/docker-zulip build.\" with your Zulip desciption for end users.<br>\nAdd \"Where to get help\" and \"Where to file issues\".<br>\nSupported architectures. Why there is no image for Windows? End users want to know it.<br>\nYour Linux image is based on which distro? People want to know it before using it.<br>\nContainer shell access. Not a bad idea to tell people how to do that for your image.<br>\nSecrets? Environment Variables? A word or two is worth mentioning.<br>\nThere is no Zulip 10-dev image to download. Why? What is available under \"latest\" tag?</p>\n<p>Switched to:<br>\n<a href=\"https://github.com/zulip/docker-zulip#readme\">https://github.com/zulip/docker-zulip#readme</a><br>\n\"Current Docker image version: <code>9.2-0</code>\" Please remember to update it to mirror what is going on Docker Hub.<br>\nKubernates mentioned so Podman can be added too. There are people like me who use Podman and not Docker.<br>\nYour statement about rootless + ulimit should be checked for Podman as it usually works fine.</p>\n<p>Documentation overall looks okay.</p>",
  "<p>Hey <span class=\"user-mention\" data-user-id=\"19257\">@Alya Abbott</span> ,</p>\n<p>I\u2019ve been working on this issue and here\u2019s my understanding: we want bots to have the <strong>\"new member\"</strong> role if their owner is a new member, and the <strong>\"full member\"</strong> role if their current owner is a full member or an admin.</p>\n<p>My thought process for fixing this is to create a function, perhaps named <code>bot_role_change</code>, which contains the logic to set the bot\u2019s role based on the owner\u2019s role as described in the issue # <a href=\"https://github.com/zulip/zulip/issues/32468\">32468</a>. This function could then be called:</p>\n<ol>\n<li>In the bot creation route handler, to set the appropriate role at creation time.</li>\n<li>In the <a href=\"https://zulip.com/api/update-user\"><code>/api/update-user</code></a> route handler, to ensure a user can only change a bot's role if their own role meets the criteria specified in the issue.</li>\n</ol>\n<p>I\u2019m new to the Zulip community and would really appreciate any feedback or guidance on this approach to help me get started.<br>\nThanks!</p>",
  "<p>A new release here is also a good idea.<br>\n<a href=\"https://github.com/zulip/docker-zulip/releases\">https://github.com/zulip/docker-zulip/releases</a></p>\n<p>As a lot of people actually check it and read it. And based on it use or not. Better to have a fresh release there.</p>\n<p><code>Docker image for Zulip Server 6.0</code>? A big deal-breaker for many.</p>",
  "<p><a href=\"#narrow/channel/3-backend/topic/new.20bots.20.2F.20new.20members/near/1988544\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/channel/101-design/topic/new.20bots.20.2F.20new.20members\">#design &gt; new bots / new members</a> by <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span>.</p>",
  "<p>Welcome <span class=\"user-mention\" data-user-id=\"32478\">@Chandragupt</span> ! Have you had a chance to review the <a href=\"https://zulip.com/development-community/#community-norms\">community guidelines</a>? Please note the point regarding @-mentioning core contributors.</p>",
  "<p>When user unsubscribes to a channel, we stop creating user messages for them. This means that when user subscribes to that channel again, views that require a user message to include messages won't have messages that we send while the user was unsubscribed.</p>",
  "<p>To fix it we can create user messages for the messages that were send while the user was unsubscribed. Does that sound like the right fix?</p>",
  "<p>I apologize for the @-mention earlier; I\u2019ll be more mindful of the guidelines moving forward. <br>\nI\u2019d like to work on issue <a href=\"https://github.com/zulip/zulip/issues/32468\">#32468</a> if I can and would love any feedback on the approach I mentioned earlier.</p>",
  "<p>I think that's a valid strategy. You'll need to also look at the cron job that promotes full members.</p>",
  "<p>Good question. I think in every case, that can't be correct, because that would grant unexpected access to private channels with protected history.</p>",
  "<p>And just trying to exclude that case creates the oddity of what the correct way to handle switching a channel type away from protected history.</p>",
  "<p>A next idea might be to maintain on the <code>Subscription</code> object a field indicating the last message ID for which which we know all messages after that ID in the channel have <code>UserMessage</code> objects attached to them. (Could be backfilled from <code>RealmAuditLog</code> rows. I am not sure if that's a thing we can easily maintain correctly, though; the annoying corner case is \"what if someone moves messages into a channel you're subscribed to from one you're not?\". </p>\n<p>It might be that we create <code>UserMessage</code> rows in that case and everything is fine, but I'm not sure and we'll want to check it. If not, I guess we could at least have moving messages for which you don't have a UserMessage row into a channel mutate that property.</p>",
  "<p>Still pretty half-baked as a design direction, but maybe enough for you to look at options around it.</p>",
  "<p>We should keep in mind that probably the thing we want to do longer-term, which might obviate this technical direction, is to start maintaining <code>Topic</code> and <code>UserTopic</code> objects with basic metadata around ranges of message IDs that the user has access to, and syncing that data to clients to support the Recent view on mobile.</p>\n<p>Such data structures would likely allow us to efficiently answer questions of whether we need to contact the server to fetch message data or have a sufficient cache locally, along with doing like 5 other things we want.</p>",
  "<p>(So I'm somewhat reluctant to go deep into a rabbit hole here if we find that it is not easy to do something correct with this more specialized functionality.)</p>",
  "<p>Removing bulk deletion is indeed not very promising as a direction.</p>",
  "<p>The <a href=\"https://hub.docker.com/r/zulip/ci/tags\">base images used by Zulip's CI</a> infrastructure. They are much smaller here. Around 300 MB for legacy images.</p>\n<p>And someone provides <a href=\"https://hub.docker.com/r/engineervix/docker-zulip\">image for arm64</a>. Image packaged by hosting company takes 860 MB of disk space and such results can be seen for other unofficial images.</p>",
  "<p>The CI images are just Ubuntu with a <a href=\"https://github.com/zulip/zulip/blob/main/tools/ci/Dockerfile\">handful of pre-installed packages</a>. They do not contain Zulip and many of its dependencies, so it\u2019s expected that they\u2019re much smaller. They are not related to docker-zulip and not intended to be useful outside our own CI.</p>",
  "<p>Hey Tim, the <a href=\"https://github.com/tus/tusd/pull/1218\">PR on tusd</a> has been merged!<br>\nWhat should be next course of action?</p>",
  "<p>You may want to rescue Zulip from issues which comes from <code>uppy</code> upstream project.</p>\n<p>Please look here for details: <a class=\"stream-topic\" data-stream-id=\"9\" href=\"/#narrow/channel/9-issues/topic/broken.20image.20uploads\">#issues &gt; broken image uploads</a></p>",
  "<p>Thanks for pointing out <span class=\"user-mention\" data-user-id=\"32968\">@Sylwester Cyba</span> , I faced this issue a few hours back.</p>",
  "<p>Oh yeah! Just creating user messages for the messages in between won't work. I am not too sure about other approach of tracking a last message id for user messages as well since it has complexing to it.</p>",
  "<p>What do think about changing how all messages data is populated?</p>",
  "<p>We will include all history till first user messages entry for each public stream and only user message entry for streams with protected history. I think that would work for our use case of making all messages data a contiguous block of message history.</p>",
  "<p>I am not sure about if it would be an expensive query to compute every time a user loads Zulip.</p>",
  "<p>I actually meant it from the pov of integrating the new flag in zulip startup, as the issue mentions<br>\nRight now, the PR i made is merged in upstream, but change to integrate it has to be made in our codebase.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"32968\">Sylwester Cyba</span> <a href=\"#narrow/channel/3-backend/topic/Verbose.20tusd.20output/near/1989957\">said</a>:</p>\n<blockquote>\n<p>You may want to rescue Zulip from issues which comes from <code>uppy</code> upstream project.</p>\n<p>Please look here for details: <a class=\"stream-topic\" data-stream-id=\"9\" href=\"/#narrow/channel/9-issues/topic/broken.20image.20uploads\">#issues &gt; broken image uploads</a></p>\n</blockquote>",
  "<p>Got it, working on it. Thanks for the feedback!</p>",
  "<p>The thing that's annoying about that is that if you subscribe/unsubscribe from a channel, suddenly the synced/cached data structure becomes invalid.</p>\n<p>(I think what you're proposing is somewhat similar to doing a union of the <code>channels:subscribed</code> query with the existing <code>UserMessage</code> one for these, and probably would be more expensive, but possibly only moderately).</p>",
  "<p>I do think that aside from the messy problem of how this interacts with one's channel subscriptions being dynamic and all the races that would come with trying to work around that, it'd be a simpler model. But that issue is a significant concern. </p>\n<p>In theory. one could try to cure it with a <code>channel:{channel_id}</code> query with the appropriate message ID ranges, but then you're kinda in a messy state during the window while waiting for that to complete. And adding 100 people to a channel all at once would start to create a thundering herd effect, etc.</p>",
  "<p>The usual answer is to wait for a release containing the feature. <a href=\"https://github.com/tus/tusd/releases\">https://github.com/tus/tusd/releases</a> suggests it's already included in the latest release, so we probably just need to upgrade. I think probably <span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> will want to handle the upgrade, since it's an important enough dependency, and we'll want to add the new option when the upgrade happens.</p>",
  "<p>I did some light updates of <a href=\"https://hub.docker.com/r/zulip/docker-zulip\">https://hub.docker.com/r/zulip/docker-zulip</a>. While I'm sure we could copy in more text, I'm not confident that it'd be net helpful, given the risk of it becoming stale over time. Other similar projects, like <a href=\"https://hub.docker.com/r/gitlab/gitlab-ce\">https://hub.docker.com/r/gitlab/gitlab-ce</a> and <a href=\"https://hub.docker.com/r/mattermost/mattermost-team-edition\">https://hub.docker.com/r/mattermost/mattermost-team-edition</a>, don't seem to say much more than this updated version does.</p>",
  "<p>A lot of people do not use anything else than docker. I mean hosting equals to docker for them.</p>\n<p>Docker is related to using GitHub so just link to a repo is okay. It's not me to decide.</p>",
  "<p>Okay, I'll wait for that <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <br>\nThanks</p>",
  "<p>opened <a href=\"https://github.com/zulip/zulip/pull/32563\">PR</a></p>",
  "<p>Should we rename\u00a0<code>queue_json_publish</code>\u00a0to\u00a0<code>queue_json_publish_rollback_unsafe</code>\u00a0like we did for\u00a0<code>send_event</code>\u00a0to\u00a0<code>send_event_rollback_unsafe</code>?</p>\n<p>I think the answer is Yes. -- We can discuss if there's any feedback to not do so.</p>",
  "<p>I've broken down the implementation plan into several steps, starting from the backend changes:</p>\n<h4>Backend:</h4>\n<ol>\n<li>\n<p><strong>Add realm-level setting: <code>abuse_report_channel</code> and its API</strong>.<br>\nPR: <a href=\"https://github.com/zulip/zulip/pull/32566\">#32566</a>.<br>\nA new realm setting similar to <code>signup_announcements_stream</code> but it's a channel for the new abuse report feature.</p>\n</li>\n<li>\n<p><strong>Add <code>/messages/{message_id}/report</code> API.</strong><br>\nThe main endpoint to report a message. It'll probably accept <code>message_id</code>, string <code>reason</code>, and string<code>detail</code>.</p>\n</li>\n<li>\n<p><strong>Add message report backend.</strong><br>\nIf <code>abuse_report_channel</code> is not empty, calling a <code>POST</code> request to the <code>/messages/{message_id}/report</code> API will make the notification bot send an abuse report to the specified message. </p>\n</li>\n</ol>\n<h4>Frontend:</h4>\n<ol start=\"4\">\n<li>\n<p><strong>Add <code>abuse_report_channel</code> UI.</strong><br>\nA new setting in the <strong>Organizational Setting</strong> menu for the user to interact with the <code>abuse_report_channel</code> realm setting.</p>\n</li>\n<li>\n<p><strong>Add message report button &amp; UI.</strong><br>\nA new option in the three-dot message menu, something like \"<strong>report</strong>\" and a new pop-up menu for abuse detail &amp; reason. This will be the main way the <code>/messages/{message_id}/report</code> API is called.</p>\n</li>\n</ol>",
  "<p>I think each point could be a separate prep PR. Does it make sense to separate the implementation this way, or should some steps be combined?</p>\n<p>(Feel free to move this to <a class=\"stream\" data-stream-id=\"3\" href=\"/#narrow/channel/3-backend\">#backend</a>)</p>",
  "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/channel/101-design/topic/report.20message.20feature.20.28.2320047.29\">#design &gt; report message feature (#20047)</a> by <span class=\"user-mention silent\" data-user-id=\"19257\">Alya Abbott</span>.</p>",
  "<p>Yeah the staged approach sounds good to me.</p>",
  "<p>left some important replies on your comments</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/smarter.20do_delete_old_unclaimed_attachments/near/1982920\">said</a>:</p>\n<blockquote>\n<p>if we delete them from the database before from S3, then they will be left in S3 forever, since nothing will retry</p>\n</blockquote>\n<p>I forgot to ask something, when you say \"retry\", what <strong>exactly</strong> is retrying ? only the db queries or the whole function <code>do_delete_old_unclaimed_attachments</code>, or what ?</p>",
  "<p>My only comment on the above is that we need to be sure to handle (both in the backend, and in the UI) the case where <code>/messages/{message_id}/report</code> is called but no abuse stream is configured.</p>",
  "<p>AFAICT, <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> pushed some changes back to this PR, then marked it to auto-merge once tests passed.  They didn't, perhaps because of a flake?  Regardless, tests are passing now, so this should probably be relatively straightforward for <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> to merge once he has time to look at it.</p>",
  "<p>Did we add a semgrep rule to enforce that new <code>@transaction.atomic</code> calls get marked either durable or non-savepoint?</p>",
  "<p>I'm in favor of renaming <code>queue_json_publish</code>.</p>",
  "<p>Our rolling restart does nothing with XML.</p>",
  "<p>The flake was fixed by me, and it's supposed to be ready to be merged. </p>\n<p>I was talking about <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span>  comment which he didn't yet clarify : </p>\n<blockquote>\n<p>There remains some inconsistency in the models.py functions that may<br>\nmerit further investigation.</p>\n</blockquote>",
  "<p><span class=\"user-mention silent\" data-user-id=\"12178\">Alex Vandiver</span> <a href=\"#narrow/channel/3-backend/topic/make.20add_subscription_backend.20atomic/near/1993761\">said</a>:</p>\n<blockquote>\n<p>Did we add a semgrep rule to enforce that new <code>@transaction.atomic</code> calls get marked either durable or non-savepoint?</p>\n</blockquote>\n<p><a href=\"https://github.com/zulip/zulip/pull/32422\">#32422</a></p>",
  "<p>I guess the other class of thing that I could imagine using its XML could be prometheus monitoring. But it sounds like we should just test on <a href=\"http://chat.zulip.org\">chat.zulip.org</a> if we can just disable XML in our <code>uwsgi</code> build.</p>",
  "<p>The docs say it's only if you're doing config in XML, which is not a thing we do anywhere</p>",
  "<p>OK seems worth it. We get people having OOM kill issues in production and development provisioning time matters too.</p>",
  "<p>Yeah let's do the parallel rename.</p>",
  "<p>I got around to merging this.</p>",
  "<p>In terms of what additional inconsistency, it's really not hard to figure it out for yourself. We still have this, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>@cache_with_key(user_profile_by_api_key_cache_key, timeout=3600 * 24 * 7)\ndef maybe_get_user_profile_by_api_key(api_key: str) -&gt; UserProfile | None:\n    try:\n        return UserProfile.objects.select_related(\n            &quot;realm&quot;,\n            &quot;realm__can_access_all_users_group&quot;,\n            &quot;realm__can_access_all_users_group__named_user_group&quot;,\n            &quot;bot_owner&quot;,\n        ).get(api_key=api_key)\n    except UserProfile.DoesNotExist:\n        # We will cache failed lookups with None.  The\n        # use case here is that broken API clients may\n        # continually ask for the same wrong API key, and\n        # we want to handle that as quickly as possible.\n        return None\n</code></pre></div>",
  "<p>In general, I'm not here to do your homework, and I highly encourage in an asynchronous community taking more time to try to figure things out for yourself (I found that in 2 seconds by searching for <code>can_access_all_users_group</code> in that file) rather than asking a question and following up repeatedly about it.</p>",
  "<p>Yes, definitely. Possibilities include an error, a DM from Notification Bot to all org admins, or other options depending on the product design. I think we'll want to decide those things in <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/channel/101-design/topic/report.20message.20feature.20.28.2320047.29\">#design &gt; report message feature (#20047)</a> before we get too far into this, as it will impact the semantics at least for the API documentation. (E.g., we need to specify if a client should hide the option if the setting is unset, or show it because it'll do DMs, or what).</p>",
  "<p>I think the original design had some discussion about how we wanted to handle those states; we can continue there as needed.</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/32593\">#32593</a> to finish this transition effort.</p>",
  "<p>No <span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> , I didn't ask you to do my homework, you said \"inconsistency\" without being clear, saying \"there is an issue in x\" without any extra info is not helpful.<br>\nSorry for the repeated questions, but I obviously asked that to improve the PR, to do my work, not for you to do it, and I was the one who fixed the PR after your changes, I don't see how you are doing my homework really.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/get_user_base_query_set/near/1994321\">said</a>:</p>\n<blockquote>\n<p>I found that in 2 seconds by searching for <code>can_access_all_users_group</code> in that file</p>\n</blockquote>\n<p>good</p>",
  "<p>hey guys. im a senior backend engineer, wanted to try out open source with your project. Any backend features that needs to be developed ?</p>",
  "<p>Labels can be a good way to find backendy issues. Most new issues opened tend to be UI just because those are often more plentiful and faster to fix. Some labels that may help you find backend issues:</p>\n<ul>\n<li><a href=\"https://github.com/zulip/zulip/issues?q=is%3Aopen+is%3Aissue+label%3A%22area%3A+performance%22\">https://github.com/zulip/zulip/issues?q=is%3Aopen+is%3Aissue+label%3A%22area%3A+performance%22</a></li>\n<li><a href=\"https://github.com/zulip/zulip/issues?q=is%3Aopen+is%3Aissue+label%3A%22area%3A+api%22+\">https://github.com/zulip/zulip/issues?q=is%3Aopen+is%3Aissue+label%3A%22area%3A+api%22+</a></li>\n</ul>\n<p>But there's probably about a dozen with that property.</p>",
  "<p>If you aren't sure what precisely is inconsistent, the first thing to try is look at the thing and see if you can find something obviously inconsistent.</p>",
  "<p>PR updated, creating the index as explained in my reply.<br>\nThe rest of the reviews need discussion.</p>",
  "<p>Yes, I think there were some discussions on how we want to handle this scenario:  <br>\n<a class=\"message-link\" href=\"/#narrow/channel/101-design/topic/report.20message.20feature.20.28.2320047.29/near/1382546\">#design &gt; report message feature (#20047) @ \ud83d\udcac</a> </p>\n<p>And since then we have implemented some solutions for similar settings (notification stream), which we can borrow for <code>abuse_report_channel</code>. e.g. <a href=\"https://github.com/zulip/zulip/pull/26111/files#top\">streams: Warn when archiving a notification stream.</a></p>",
  "<p>Hi all</p>\n<p>I just stumbled on the following Blog post while catching up on older news and with Zulip heavily relying on Puppet this might have some bigger impact here as well.</p>\n<ul>\n<li><a href=\"https://overlookinfratech.com/2024/11/08/sequestered-source/\">https://overlookinfratech.com/2024/11/08/sequestered-source/</a></li>\n</ul>\n<p>There seems to be something brewing in the Background (<a href=\"https://github.com/OpenPuppetProject\">OpenPuppetProject</a>) but it's still too early to tell where this whole situation is headed and how it will play out in the end.</p>\n<p>Nevertheless it's good to have it on the radar.</p>",
  "<p>Thanks for sharing. I'm not certain the announcement has any impact on our use case. Maybe I'm missing something, but it sounds like they're just adding a new repository for their paid customers that has special \"security-hardened binaries\"? Somehow <a href=\"https://www.puppet.com/blog/open-source-puppet-updates-2025\">https://www.puppet.com/blog/open-source-puppet-updates-2025</a> is badly written enough that I can't entirely tell what it means concretely. This seems to directly contradict the claims in the blog post, for example:</p>\n<blockquote>\n<p>Puppet users will continue to have full access to Puppet source code in the same location available today, under the current Apache 2.0 license.</p>\n</blockquote>",
  "<blockquote>\n<p>We will release hardened Puppet releases to a new location and will slow down the frequency of commits of source code to public repositories.</p>\n</blockquote>",
  "<p>I'm also confused in that <code>puppet</code> is written in Ruby, so I'm not even really sure what the deal is with puppet binaries as being a different thing from the source.</p>",
  "<p>Probably the impact for Zulip in practice will be that we'll follow whatever Debian does with the <code>puppet</code> package if that seems reasonable.</p>",
  "<p>They're really quite hand-wavy about whatever security concern that this is supposed to solve, which does certainly make one wonder whether it's really about security at all.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/Perforce.20closing.20down.20the.20Puppet.20source/near/1998799\">said</a>:</p>\n<blockquote>\n<p>I'm also confused in that <code>puppet</code> is written in Ruby, so I'm not even really sure what the deal is with puppet binaries as being a different thing from the source.</p>\n</blockquote>\n<p>My guess is that they are referring to <code>PuppetDB</code> and <code>Puppet Server</code> as they are written in Clojure</p>\n<blockquote>\n<p>Puppet Server is a Ruby and Clojure application that runs on the Java Virtual Machine (JVM). Puppet Server runs Ruby code for compiling Puppet catalogs and for serving files in several JRuby interpreters. It also provides a certificate authority through Clojure.</p>\n</blockquote>",
  "<p>It also looks like the new community will need a space to hang out.</p>\n<p><a href=\"https://hachyderm.io/@binford2k/113307917523904182\">https://hachyderm.io/@binford2k/113307917523904182</a></p>\n<p>Another great opportunity for Zulip to take the win <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
  "<p>Yeah that's pretty rude, at best.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"30142\">Bedo Khaled</span> <a href=\"#narrow/channel/3-backend/topic/smarter.20do_delete_old_unclaimed_attachments/near/1993688\">said</a>:</p>\n<blockquote>\n<p>I forgot to ask something, when you say \"retry\", what <strong>exactly</strong> is retrying ? only the db queries or the whole function <code>do_delete_old_unclaimed_attachments</code>, or what ?</p>\n</blockquote>\n<p>That the whole function runs in a cron job and thus will retry the next time the cron job runs.</p>",
  "<p>I feel like this is the correct way to move forward here to allow for a completely expected user experience. Here is a more specific version of the idea which still doesn't address the thundering herd effect, which I guess is less of an issue if most the messages being requested are cached.</p>",
  "<p>So, we change the query to fill <code>all_messages_data</code> to this union:</p>\n<ul>\n<li>messages in <code>channels:subscribed with history accessible</code></li>\n<li>messages with user messages in <code>channels:private with history protected</code></li>\n<li>Direct messages</li>\n</ul>\n<p>Not sure if we should keep any upper limit based on user messages.</p>",
  "<p>We will ofcouse have to update data when user subscribes / unsubscribes as you mentioned.</p>",
  "<p>This looks like is important to do before we merge <a href=\"https://github.com/zulip/zulip/pull/32150\">#32150</a> otherwise users will often run into missing message without realizing it most of the time.</p>",
  "<p>I agree <a href=\"https://github.com/zulip/zulip/pull/32150\">#32150</a> is blocked until we can solve this.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/Handling.20users.20being.20unsubscribed.20to.20a.20channel.20for.20a.20while/near/1989710\">said</a>:</p>\n<blockquote>\n<p>A next idea might be to maintain on the <code>Subscription</code> object a field indicating the last message ID for which which we know all messages after that ID in the channel have <code>UserMessage</code> objects attached to them. (Could be backfilled from <code>RealmAuditLog</code> rows. I am not sure if that's a thing we can easily maintain correctly, though; the annoying corner case is \"what if someone moves messages into a channel you're subscribed to from one you're not?\".</p>\n</blockquote>\n<p>Hmm, why do you think that approach would be better than this strategy?</p>",
  "<p>Only because we will have to deal with moving messages to fix bugs in this space.</p>",
  "<p>I think it's likely not that complicated, especially compared to what we already have.</p>\n<p>The more robust answer would probably be to build a more extensive <code>UserTopic</code> model that could store that class of information on a per-topic basis, and also would be what we need for a recent view API.</p>",
  "<p>I'm starting to think maybe we need to design that system and then we can see whether problems like this one can make use of it.</p>",
  "<p>Apparently, the <code>sending_client</code> for all of our data import tools is just the ID 1, and we have <code>{\"name\": \"populate_db\", \"id\": 1}</code> in our data imports, so messages that were imported from another tool all have <code>\"populate_db\"</code> as their sending client.</p>",
  "<p>It's not the worst, in that it does clearly distinguish them from messages sent in a Zulip instance, but I assume we want to instead be using separate client values for each import tool with names like <code>SlackImport</code>, depending which third-party tool is involved.</p>\n<p>Noticed while reviewing <a href=\"https://github.com/zulip/zulip/pull/32298\">#32298</a>.</p>",
  "<p>Thoughts on the precise naming scheme? Could also imagine something names like <code>ZulipDataImportSlack</code>.</p>",
  "<p>Yeah, maybe it's time we started working towards supporting a <code>UserTopic</code> model.</p>",
  "<p>We do have <code>&lt;Client: ZulipSlackWebhook&gt;</code>, so I think <code>ZulipSlackDataImport</code> works too. And I guess we might want to add a section in the <strong>Clients in Zulip<a href=\"https://zulip.readthedocs.io/en/latest/subsystems/client.html#clients-in-zulip\">\uf0c1</a></strong> doc explaining how <code>Clients</code> might be used in third party data import? (to distinguish them from messages sent in a Zulip instance)</p>",
  "<p>Yeah that seems like a reasonable place to document it.</p>",
  "<blockquote>\n<p>Users with organization-wide permission will also be able to subscribe others.</p>\n</blockquote>\n<p>In <a href=\"https://github.com/zulip/zulip/pull/32706\">#32706</a>, does this line imply that realm admins will be able to subscribe others or people with <code>can_administer_channel_group</code> will be able to subscribe others? </p>\n<p>FYI <code>can_remove_subcribers_group</code> does not check <code>can_administer_channel_group</code> but does a realm admin check.</p>",
  "<ol>\n<li>Also, for <code>can_remove_subscribers_group</code> we set the default value to admin group for existing channels, do we want to do the same for <code>can_add_subscribers_group</code>? Or we want to set it to <code>nobody</code> as we did with <code>can_administer_channel_group</code>?}</li>\n<li>What should be the default value for new channels? <code>can_remove_subscribers_group</code> has it set to admin group and <code>can_administer_channel_group</code> has it set to stream creator.</li>\n</ol>",
  "<p>Also, how do we want to handle realm wide <code>invite_to_stream_policy</code> with the stream wide <code>can_add_subscribers_group</code>?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5263\">Shubham Padia</span> <a href=\"#narrow/channel/3-backend/topic/Can.20subscribe.20other.20users.20permission/near/2006606\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/zulip/zulip/pull/32706\">#32706</a>, does this line imply that realm admins will be able to subscribe others or people with <code>can_administer_channel_group</code> will be able to subscribe others?</p>\n</blockquote>\n<p>I think it should work in the same settings when administration permissions are effective on a channel, namely if it's a private channel, you need to be subscribed to be able to use the permission.</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5263\">Shubham Padia</span> <a href=\"#narrow/channel/3-backend/topic/Can.20subscribe.20other.20users.20permission/near/2006611\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>What should be the default value for new channels? <code>can_remove_subscribers_group</code> has it set to admin group and <code>can_administer_channel_group</code> has it set to stream creator.</li>\n</ol>\n</blockquote>\n<p>Probably the channel itself is a good default for who can add members to the channel?</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"5263\">Shubham Padia</span> <a href=\"#narrow/channel/3-backend/topic/Can.20subscribe.20other.20users.20permission/near/2006719\">said</a>:</p>\n<blockquote>\n<p>Also, how do we want to handle realm wide <code>invite_to_stream_policy</code> with the stream wide <code>can_add_subscribers_group</code>?</p>\n</blockquote>\n<p>I think probably what we may want is to eliminate that global setting in favor of its value being the initial value for existing realms when adding this new setting.</p>",
  "<p>BTW <a class=\"stream-topic\" data-stream-id=\"101\" href=\"/#narrow/channel/101-design/topic/Add.20setting.20for.20who.20can.20access.20a.20private.20channel.20.2332747\">#design &gt; Add setting for who can access a private channel #32747</a>, assuming we do it, will change the calculation for \"can an administrator access this channel\" from being subscribed to this more general definition.</p>",
  "<p>Hi, I'm new to setting up my own Zulip server.<br>\nI managed to set up the server and do LDAP authentication.<br>\nNow I need to create my own \"Phone number\" and \"Employee title\" fields as well as \"Department\" and then do an update via LDAP.<br>\nI've read a lot of documentation but still haven't found an answer to my question, please tell me which way to look?</p>",
  "<p><a href=\"https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#synchronizing-custom-profile-fields\">https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#synchronizing-custom-profile-fields</a></p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"7\">Tim Abbott</span> <a href=\"#narrow/channel/3-backend/topic/Custom.20profile.20fields/near/2007962\">\u043f\u0438\u0441\u0430\u043b/\u0430</a>:</p>\n<blockquote>\n<p><a href=\"https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#synchronizing-custom-profile-fields\">https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#synchronizing-custom-profile-fields</a></p>\n</blockquote>\n<p>Thanks for answering Tim. I have already read this documentation, for example I need to make a field \"Phone number\" if I create it through the web application, then in the ATTR block I specify the command 'custom_profile_field__Phone_number': 'phoneNumber' will this work?</p>",
  "<p>(deleted)</p>",
  "<p>As I expected, it didn't work. How can I access the fields in the profile? Where is the file with the code that is responsible for this? For example, I want to disable the \"Joining\" field and add \"Phone number\"</p>",
  "<p>It may be a capitalization issue; <code>custom_profile_field__phone_number</code> looks like what the documentation would suggest.</p>",
  "<p>Code is in <code>zproject/backends.py</code>, where the LDAP backend is defined; I'm sure print-debugging the relevant code will be fruitful if you're still having trouble.</p>",
  "<p><code>Failed to populate user ***: Custom profile field with name Phone_number not found.</code><br>\nWhen syncing it gives an error like this, where does it try to find the Phone_number name?</p>",
  "<p>There is a bug when updating group permission settings when the following conditions are met -</p>\n<ul>\n<li>Setting was originally set to an anonymous group</li>\n<li>There is exactly one group as subgroup and one user as member in the anonymous group</li>\n<li>User belonging to that anonymous group is deactivated.</li>\n<li>And then the setting is being updated to anonymous group and not a single named group.</li>\n</ul>",
  "<p>The bug is when comparing the old value passed in the request to the actual previous setting value.</p>\n<p>The setting value that client has is on object like <code>{direct_subgroups: [group_id], direct_members: []}</code> because the setting is set to an anonymous group but users list is empty as the user is not active.  This is then pased as \"old\" value to the server and is parsed as integer <code>group_id</code> because we consider an anonymous group obejct only containing one subgroup as a named user group.</p>\n<p>But when computing the current actual setting value we know that it is set to anonymous group and it is not parsed to integer keeping the users list empty in the object and thus the comparison made when checking the \"old\" value passed in the API and the actual current setting value is between <code>group_id</code> and <code>{direct_subgroups: [group_id], direct_members: []}</code> and it raises error of passing invalid old value.</p>\n<p>I am not sure how to fix this.</p>\n<p>Either we can just consider <code>group_id</code> and <code>{direct_subgroups: [group_id], direct_members: []}</code> same when checking the values. Or we can just not parse the \"old\" value sent in the API request and just expect client to pass the exact value, i.e if setting is set to a named group it should always be passed as an integer and object otherwise.</p>",
  "<p>Sharing the code since it might be helpful to understand the bug better -</p>\n<p>This is <a href=\"https://github.com/zulip/zulip/blob/5e8070222ea041e278745c8943249a86836129d8/zerver/views/user_groups.py#L182\">the code</a> which checks whether old value passed in API is correct and the new value is not same as the old value -</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"o\">......</span>\n        <span class=\"n\">setting_value</span> <span class=\"o\">=</span> <span class=\"n\">request_settings_dict</span><span class=\"p\">[</span><span class=\"n\">setting_name</span><span class=\"p\">]</span>\n        <span class=\"n\">new_setting_value</span> <span class=\"o\">=</span> <span class=\"n\">parse_group_setting_value</span><span class=\"p\">(</span><span class=\"n\">setting_value</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">,</span> <span class=\"n\">setting_name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">expected_current_setting_value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">setting_value</span><span class=\"o\">.</span><span class=\"n\">old</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">expected_current_setting_value</span> <span class=\"o\">=</span> <span class=\"n\">parse_group_setting_value</span><span class=\"p\">(</span>\n                <span class=\"n\">setting_value</span><span class=\"o\">.</span><span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"n\">setting_name</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">current_value</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">user_group</span><span class=\"p\">,</span> <span class=\"n\">setting_name</span><span class=\"p\">)</span>\n        <span class=\"n\">current_setting_api_value</span> <span class=\"o\">=</span> <span class=\"n\">get_group_setting_value_for_api</span><span class=\"p\">(</span><span class=\"n\">current_value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">validate_group_setting_value_change</span><span class=\"p\">(</span>\n            <span class=\"n\">current_setting_api_value</span><span class=\"p\">,</span> <span class=\"n\">new_setting_value</span><span class=\"p\">,</span> <span class=\"n\">expected_current_setting_value</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">setting_value_group</span> <span class=\"o\">=</span> <span class=\"n\">access_user_group_for_setting</span><span class=\"p\">(</span>\n                <span class=\"n\">new_setting_value</span><span class=\"p\">,</span>\n                <span class=\"n\">user_profile</span><span class=\"p\">,</span>\n                <span class=\"n\">setting_name</span><span class=\"o\">=</span><span class=\"n\">setting_name</span><span class=\"p\">,</span>\n                <span class=\"n\">permission_configuration</span><span class=\"o\">=</span><span class=\"n\">permission_config</span><span class=\"p\">,</span>\n                <span class=\"n\">current_setting_value</span><span class=\"o\">=</span><span class=\"n\">current_value</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n          <span class=\"o\">......</span>\n</code></pre></div>",
  "<p>And these are the used <a href=\"https://github.com/zulip/zulip/blob/5e8070222ea041e278745c8943249a86836129d8/zerver/lib/user_groups.py#L999\">functions</a></p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">parse_group_setting_value</span><span class=\"p\">(</span>\n    <span class=\"n\">setting_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">AnonymousSettingGroupDict</span><span class=\"p\">,</span>\n    <span class=\"n\">setting_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">AnonymousSettingGroupDict</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">setting_value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">setting_value</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">setting_value</span><span class=\"o\">.</span><span class=\"n\">direct_members</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">setting_value</span><span class=\"o\">.</span><span class=\"n\">direct_subgroups</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">setting_value</span><span class=\"o\">.</span><span class=\"n\">direct_subgroups</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">setting_value</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">are_both_group_setting_values_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">first_setting_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">AnonymousSettingGroupDict</span><span class=\"p\">,</span>\n    <span class=\"n\">second_setting_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">AnonymousSettingGroupDict</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">first_setting_value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">second_setting_value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">first_setting_value</span> <span class=\"o\">==</span> <span class=\"n\">second_setting_value</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">first_setting_value</span><span class=\"p\">,</span> <span class=\"n\">AnonymousSettingGroupDict</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span>\n        <span class=\"n\">second_setting_value</span><span class=\"p\">,</span> <span class=\"n\">AnonymousSettingGroupDict</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">first_setting_value</span><span class=\"o\">.</span><span class=\"n\">direct_members</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">set</span><span class=\"p\">(</span>\n            <span class=\"n\">second_setting_value</span><span class=\"o\">.</span><span class=\"n\">direct_members</span>\n        <span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">first_setting_value</span><span class=\"o\">.</span><span class=\"n\">direct_subgroups</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">set</span><span class=\"p\">(</span>\n            <span class=\"n\">second_setting_value</span><span class=\"o\">.</span><span class=\"n\">direct_subgroups</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_group_setting_value_change</span><span class=\"p\">(</span>\n    <span class=\"n\">current_setting_api_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">AnonymousSettingGroupDict</span><span class=\"p\">,</span>\n    <span class=\"n\">new_setting_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">AnonymousSettingGroupDict</span><span class=\"p\">,</span>\n    <span class=\"n\">expected_current_setting_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">AnonymousSettingGroupDict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">expected_current_setting_value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">are_both_group_setting_values_equal</span><span class=\"p\">(</span>\n        <span class=\"n\">expected_current_setting_value</span><span class=\"p\">,</span>\n        <span class=\"n\">current_setting_api_value</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># This check is here to help prevent races, by refusing to</span>\n        <span class=\"c1\"># change a setting where the client (and thus the UI presented</span>\n        <span class=\"c1\"># to user) showed a different existing state.</span>\n        <span class=\"k\">raise</span> <span class=\"n\">PreviousSettingValueMismatchedError</span>\n\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">are_both_group_setting_values_equal</span><span class=\"p\">(</span><span class=\"n\">current_setting_api_value</span><span class=\"p\">,</span> <span class=\"n\">new_setting_value</span><span class=\"p\">)</span>\n</code></pre></div>",
  "<p>Hi, the problem was in using a capital letter in the field. For some reason, if you write it like this <br>\n<code>\"custom_profile_field__telephone: \"telephoneNumber\",</code> then everything works, but if you write it like this <br>\n<code>\"custom_profile_field__Telephone: \"telephoneNumber\",</code> then it doesn't.<br>\nMaybe someone will encounter such a problem and my answer will help them.<br>\nI want to say a special thank you to everyone who works on Zulip, a good product and quite easy to learn.</p>",
  "<p>Hi, I\u2019ve raised a draft PR <a href=\"https://github.com/zulip/zulip/pull/32789\">#32789</a> to assign a bot role based on the owner\u2019s role during bot creation. It fixes part of issue <a href=\"https://github.com/zulip/zulip/issues/32468\">#32468</a>.<br>\nI\u2019d appreciate any early feedback to ensure I\u2019m heading in the right direction before proceeding further.<br>\nThanks in advance for your time and guidance!</p>",
  "<p><span class=\"user-mention silent\" data-user-id=\"33256\">Enkey</span> has marked this topic as resolved.</p>",
  "<p>FWIW I am still interested to see what happens here.  My hunch was that a whole-hog Rust replacement was ultimately the way to go, and I wanna either get the confirmation bias that my hunch was right, or I want to learn why my hunch is wrong.  I still stand by my hunch.  It's the most speed-critical part of the architecture, and writing things from scratch (while cribbing) still seems more practical to me.  I say this with no recent evidence to support my hunch, hence the question.</p>",
  "<p>I've just noticed that we call <code>get_old_unclaimed_attachments</code> in <a href=\"https://github.com/zulip/zulip/blob/main/zerver/management/commands/delete_old_unclaimed_attachments.py\">delete_old_unclaimed_attachments.py</a> unnecessarily <strong>twice</strong> :</p>\n<p>once <a href=\"https://github.com/zulip/zulip/blob/main/zerver/management/commands/delete_old_unclaimed_attachments.py#L55\">inside handle()</a> <br>\nand another inside <a href=\"https://github.com/zulip/zulip/blob/main/zerver/actions/uploads.py#L84\">do_delete_old_unclaimed_attachments</a></p>",
  "<p>As far as I can see, this is  not efficient, I should handle that in the PR</p>",
  "<p>Do you mean <code>get_old_unclaimed_attachments</code> is called twice?</p>",
  "<p>I think you just had a typo in your message, but I see no reason not to refactor this to avoid doing the fetch twice.</p>",
  "<p>Yes, sorry, I've just edited the message</p>",
  "<p><a href=\"https://github.com/zulip/zulip/pull/32563\">PR</a> updated !</p>",
  "<p>Hey can someone tell me process of integrating webhooks in zulip, I am working on a issue which requires this</p>",
  "<p>Heres the tutorial for that. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p><a href=\"https://zulip.com/api/incoming-webhooks-walkthrough\">https://zulip.com/api/incoming-webhooks-walkthrough</a></p>",
  "<p><span class=\"user-mention\" data-user-id=\"33490\">@Nirved Mishra</span> See <a href=\"https://zulip.com/api/incoming-webhooks-overview\">https://zulip.com/api/incoming-webhooks-overview</a> for starters.  After reading that, you may have specific questions to ask here, but the docs are pretty thorough, and it can also be helpful to look at some of the existing integrations that are already in the codebase in <code>zerver/webhooks</code>.</p>"
]